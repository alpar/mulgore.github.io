{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/fancybox/blank.gif","path":"vendor/fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/fancybox/fancybox_loading.gif","path":"vendor/fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/fancybox/fancybox_loading@2x.gif","path":"vendor/fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/fancybox/fancybox_overlay.png","path":"vendor/fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/fancybox/fancybox_sprite.png","path":"vendor/fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/fancybox/fancybox_sprite@2x.png","path":"vendor/fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/fancybox/jquery.fancybox.css","path":"vendor/fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/fancybox/jquery.fancybox.js","path":"vendor/fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/fancybox/jquery.fancybox.pack.js","path":"vendor/fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/styles.css","path":"vendor/open-sans/styles.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/source-code-pro/styles.css","path":"vendor/source-code-pro/styles.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/logo.png","path":"css/images/logo.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/avatar.png","path":"css/images/avatar.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/fancybox/helpers/fancybox_buttons.png","path":"vendor/fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/fancybox/helpers/jquery.fancybox-buttons.css","path":"vendor/fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/fancybox/helpers/jquery.fancybox-buttons.js","path":"vendor/fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/fancybox/helpers/jquery.fancybox-media.js","path":"vendor/fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/fancybox/helpers/jquery.fancybox-thumbs.css","path":"vendor/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/fancybox/helpers/jquery.fancybox-thumbs.js","path":"vendor/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.eot","path":"vendor/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendor/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/css/font-awesome.min.css","path":"vendor/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"vendor/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/FontAwesome.otf","path":"vendor/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendor/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.woff","path":"vendor/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/jquery/2.1.3/jquery.min.js","path":"vendor/jquery/2.1.3/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.svg","path":"vendor/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"fc0b02caf9c66f2bc02d26b19c1ec82b12ef2bef","modified":1464833997000},{"_id":"themes/icarus/LICENSE","hash":"df00918fa95de563927fd92b26f14c7affdc3052","modified":1465882319000},{"_id":"themes/icarus/.gitignore","hash":"35572c0f161a751b9f30ae3a9935ac045dba5220","modified":1465882319000},{"_id":"themes/icarus/README.md","hash":"15684025b04e653ebbe049333301b9ef42172b0a","modified":1465882319000},{"_id":"themes/icarus/_config.yml","hash":"c4bc153c905d46c96de60f31b4c77120a2314925","modified":1465882319000},{"_id":"themes/icarus/_config.yml.example","hash":"2d581e4d71b271bf8f5ef583aa0e515f1eef935e","modified":1465882319000},{"_id":"themes/icarus/package.json","hash":"0945bc15243bf69dc81cf10fd6a3e9b33b646e21","modified":1465882319000},{"_id":"source/_posts/FED-Talk1.md","hash":"b2b5d45d3fceab631320deff72c92b22b703a391","modified":1465882319000},{"_id":"source/_posts/.DS_Store","hash":"cc57ff307b838c10e1da8ac19cdd63b3571a5ab5","modified":1465880563000},{"_id":"source/_posts/FED-Talk2.md","hash":"1bc400a3230e80618e8b68befa3324c72c905598","modified":1465882319000},{"_id":"source/_posts/FED-Talk3.md","hash":"6f8f598ba25ca6c4748d8f0c5cb509d783598d0f","modified":1465882319000},{"_id":"source/_posts/FED-Talk4.md","hash":"465ad97b2f73fb05f12afdf97d8782ac8d6fc103","modified":1465882319000},{"_id":"source/_posts/follow-react-lesson.md","hash":"dfb92f4080152e21e9042a213dedb409758ee4e2","modified":1465882319000},{"_id":"source/_posts/issues-1.md","hash":"0be3aa2e8c8a29f1fddc40e2b6501acd915df2a4","modified":1465882319000},{"_id":"source/_posts/issues-2.md","hash":"9c560f464b9d24a607e83b1064c51f38e95f071c","modified":1465882319000},{"_id":"source/_posts/issues-3.md","hash":"721a57eb6d5ad7e2eafc338174b3c9cbea49683f","modified":1465882319000},{"_id":"source/_posts/issues-4.md","hash":"1b899622af5792c7632c2333d642f523c1e4e4ee","modified":1465882319000},{"_id":"source/_posts/issues-5.md","hash":"a490d38eb15be81bdf9c576126662f919a2301af","modified":1465882319000},{"_id":"source/_posts/issues-6.md","hash":"d2f648afc269f7a864546038881aff48157634ed","modified":1465882319000},{"_id":"source/_posts/javascript-event-handler.md","hash":"e1088ac93a50aa85953b9540b061cfdfc59371a4","modified":1465882319000},{"_id":"source/_posts/issues-7.md","hash":"f315354e257a8b5ba54b242c19640ffb46928c22","modified":1465882319000},{"_id":"source/_posts/javascript-learn.md","hash":"f355f5391f6fad9a30ed2a36b4a092f0b2c6db5c","modified":1465882319000},{"_id":"source/_posts/javascript-upload-image.md","hash":"75267b8caa55fc3dfe830a4c752197b8b7d57a51","modified":1465882319000},{"_id":"source/_posts/keduo-weekly-1.md","hash":"70cf7e0af0942ca77d0ad71c861834dfdd5a77d4","modified":1465882319000},{"_id":"source/_posts/keduo-weekly-2.md","hash":"7616aa55631f29f1975e9ba04edff15f0e5e44a1","modified":1465882319000},{"_id":"source/_posts/swift-cite-count.md","hash":"99ab46ccb770df8fdd56ee7ddeed72b060b6906e","modified":1465882319000},{"_id":"source/_posts/swift-datetime.md","hash":"7dc28979cfbee3532ecba964db2622492d9508cf","modified":1465882319000},{"_id":"source/_posts/swift-errorhandler.md","hash":"abe495a5e0526615a7a0032b82c94ef28662e40e","modified":1465882319000},{"_id":"source/_posts/swift-file-managed.md","hash":"779fe396ca82d96fff6afad49a6944bb42a73841","modified":1465882319000},{"_id":"source/_posts/swift-gcd.md","hash":"9be5fa97b0ef2bd8a3ceb664098c4cacb669b0ba","modified":1465882319000},{"_id":"source/_posts/swift-lazy.md","hash":"4fc4a2c6648e9dba85ada14c21cabdee881026d4","modified":1465882319000},{"_id":"source/_posts/swift-networking.md","hash":"c676eccbec3903d042abd00bdbf31e3899b0ba07","modified":1465882319000},{"_id":"source/_posts/swift-nsoperation.md","hash":"db18eb81f1faee8b4da51eb8a90b4d8e218b5cb3","modified":1465882319000},{"_id":"source/_posts/swift-nsthread.md","hash":"f3cb5f7284f2d1e0c466921fdd49d439afdb7957","modified":1465882319000},{"_id":"source/_posts/swift-pointer.md","hash":"1319a6ca10c1487e452172a531790f68b6b6b221","modified":1465882319000},{"_id":"source/_posts/swift-runtime.md","hash":"fca9be1bab023ace9f75936a3786e0a058382d62","modified":1465882319000},{"_id":"source/_posts/swift-uialertcontroller.md","hash":"4d837865b04799ac647a8c0e23226260a8790b02","modified":1465882319000},{"_id":"source/_posts/swift-uistackview.md","hash":"9ca809b2f74d2c8a84fafa175349f62b8c4c58e1","modified":1465882319000},{"_id":"source/_posts/used-CNodeAPI-for-development-of-react-webapp.md","hash":"d569021898324b04bb2c24790134841f34dd483b","modified":1465882319000},{"_id":"source/_posts/used-webpack-in-pc.md","hash":"8e91ac321b8d122fcedc12d979bc839d8dcdc024","modified":1465882319000},{"_id":"source/about/index.md","hash":"b1ef53e64f37e754b5d680f2ae9c5eb2ac1c0a23","modified":1465882319000},{"_id":"source/contribute/.DS_Store","hash":"13f703faa77058e637ec505fff57d0b3c99464eb","modified":1464673302000},{"_id":"source/contribute/index.md","hash":"c8ad8585deeca497e8901bbc01ec69e9ca3a4ea9","modified":1465882319000},{"_id":"source/lesson/index.md","hash":"3ccc72d028cb7a463f5d7caf3b24747ed3ac91d4","modified":1465882319000},{"_id":"source/weekly/index.md","hash":"d093b6c4ef7a9fc3870aceb4005502818931bc13","modified":1465882319000},{"_id":"themes/icarus/languages/en.yml","hash":"ade241498b85503a8953a1deca963222f47067a7","modified":1465882319000},{"_id":"themes/icarus/languages/es.yml","hash":"d7432219be5bee4cb569331378ade61b749688e0","modified":1465882319000},{"_id":"themes/icarus/languages/fr.yml","hash":"cb3e597cbec7e8f458858c457bafd1f3a225083d","modified":1465882319000},{"_id":"themes/icarus/languages/id.yml","hash":"70ec9ab2ac04cf882e81377ca5ad15bf8adceca8","modified":1465882319000},{"_id":"themes/icarus/languages/ja.yml","hash":"ff972961e5f468a695d80d21b62c3e9032cdf561","modified":1465882319000},{"_id":"themes/icarus/languages/ko.yml","hash":"7c4ad4577dc0577ad2ca1c0410507f5e5fadf530","modified":1465882319000},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"3c5d5293575593705b9a2dfa9d97b017eb4bc8c3","modified":1465882319000},{"_id":"themes/icarus/languages/ru.yml","hash":"d1aab2b0c939d0c6020f881d664b660a01ee7327","modified":1465882319000},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"c2d33796b531239874ed2d5a12d187a6a48035a8","modified":1465882319000},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"d8d96a0a17c20af11919ce036e87379a6b163db9","modified":1465882319000},{"_id":"themes/icarus/layout/archive.ejs","hash":"c1ecf667f40f34d61ab33eed46bab143eb1af36d","modified":1465882319000},{"_id":"themes/icarus/layout/categories.ejs","hash":"aa95629b770cff8cca9d663aeb6b17928f070de5","modified":1465882319000},{"_id":"themes/icarus/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1465882319000},{"_id":"themes/icarus/layout/index.ejs","hash":"43e971ebc35657b18e08a049559790348a16666f","modified":1465882319000},{"_id":"themes/icarus/layout/layout.ejs","hash":"6f01b3d46d184a820297f9542497808b152bb09e","modified":1465882319000},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1465882319000},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1465882319000},{"_id":"themes/icarus/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1465882319000},{"_id":"themes/icarus/layout/tags.ejs","hash":"b0fcea68d7c11e5899bf0375d80997685111653f","modified":1465882319000},{"_id":"themes/icarus/scripts/fancybox.js","hash":"c1b01a9c2d96474cdd7e09657e522e4a03579413","modified":1465882319000},{"_id":"themes/icarus/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1465882319000},{"_id":"themes/icarus/scripts/thumbnail.js","hash":"1719b37aede4753bf41d51f26bfb4a82c9917347","modified":1465882319000},{"_id":"themes/icarus/_source/about/index.md","hash":"309f1a70283035782c5338ec55ce2c5fe1b74e42","modified":1465882319000},{"_id":"themes/icarus/_source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1465882319000},{"_id":"themes/icarus/_source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1465882319000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/LICENSE","hash":"d9ae358aefebd8c2242c55044bc7fb9edbae3b0a","modified":1459387778000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/.npmignore","hash":"fa3b2eb70de258c0efb3efac3dceb5abd7c92666","modified":1459387778000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/README.md","hash":"38411fc2a38be7fe7b4759132bd678f29dc77af8","modified":1459825309000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/index.js","hash":"4b8db3cd931d15077d01d1f21c7d1cbe0e21a3f5","modified":1459826204000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/package.json","hash":"a3a3e027b4259605e0ba324b8938cd6307b124ad","modified":1464597449000},{"_id":"themes/icarus/layout/comment/counter.ejs","hash":"e109d3256b004b027d029bd5bd67feeb72dc5388","modified":1465882319000},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"83158f5b00f95acf847524fd7ffeb5aab25add78","modified":1465882319000},{"_id":"themes/icarus/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1465882319000},{"_id":"themes/icarus/layout/comment/index.ejs","hash":"d45635e78a3fc40e424a401e983f2c8eef6ebcfd","modified":1465882319000},{"_id":"themes/icarus/layout/comment/scripts.ejs","hash":"8a9a20f72ba0923afa776396fb67d8c5d446a666","modified":1465882319000},{"_id":"themes/icarus/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1465882319000},{"_id":"themes/icarus/layout/common/article.ejs","hash":"c9d031776426a33e0b355e37f66c64d29fc05355","modified":1465882319000},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"cbfe560fcab445d42ceeb5d1beba5957d5be5eaa","modified":1465882319000},{"_id":"themes/icarus/layout/common/head.ejs","hash":"085a568049c63e93f80bf09c1073a178330eec2c","modified":1465882319000},{"_id":"themes/icarus/layout/common/header.ejs","hash":"738c6a923b2a6de6a81c4892c8a47e03d8b34f88","modified":1465882319000},{"_id":"themes/icarus/layout/common/profile.ejs","hash":"0d5899d1f581a6a0d6a2e6bc1ca9314a1320d8cf","modified":1465882319000},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"c0a1a9e53f89440c42c325d5bd8c7234652c8937","modified":1465882319000},{"_id":"themes/icarus/layout/common/sidebar.ejs","hash":"6e80fa52d23c9c39bfa357a1e00c26fc8b851b82","modified":1465882319000},{"_id":"themes/icarus/layout/common/thumbnail.ejs","hash":"1b70f8a98cd8650b159bda858dbee38dbdb7f0c5","modified":1465882319000},{"_id":"themes/icarus/layout/common/timeline.ejs","hash":"6420e34e0332c9b6670011519f341340db989343","modified":1465882319000},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"6a7bee18e666e627e62541a5e30906f87ba1bfe8","modified":1465882319000},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1465882319000},{"_id":"themes/icarus/layout/plugin/scripts.ejs","hash":"b2fbe815e7eb7513fd3f96eec573f151e3dd09e1","modified":1465882319000},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"3e603a702d20c53fd3bcbeb570a16a86d54781ce","modified":1465882319000},{"_id":"themes/icarus/layout/search/index-mobile.ejs","hash":"50a727ac1dfe3073eb6fa6699ba01e66f4ac41c0","modified":1465882319000},{"_id":"themes/icarus/layout/search/index.ejs","hash":"24935e32e61d4706454b174ea3bed0726ae7fb34","modified":1465882319000},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1465882319000},{"_id":"themes/icarus/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1465882319000},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1465882319000},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1465882319000},{"_id":"themes/icarus/layout/share/default.ejs","hash":"ebfb919dc525b3ed61a6a5ee05ee71410eedc541","modified":1465882319000},{"_id":"themes/icarus/layout/share/index.ejs","hash":"2a2c0095b95b11e5692bd8ad6a2337aa644189a2","modified":1465882319000},{"_id":"themes/icarus/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1465882319000},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"d9ebbb7f6ce2f25df5ae25e4a1fef3c08f7054b9","modified":1465882319000},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"583bda80cf15b3ef11fefbd1b502897dfff40100","modified":1465882319000},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"aad118699718b62c0d3f3cfd6f17a181139a76af","modified":1465882319000},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"2ca923465275fb38a7ac7d67211d6e94a977e957","modified":1465882319000},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"3b8ae5953990436893da9d68f910ebe592005659","modified":1465882319000},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"ca8c7bf555fb6ce4904f2c59160548405c2c8a82","modified":1465882319000},{"_id":"themes/icarus/source/css/_extend.styl","hash":"9a5c72663c0da1b32ecb6a75773a5ccfb8c467ca","modified":1465882319000},{"_id":"themes/icarus/source/css/_variables.styl","hash":"e5dc1518b09e2378f10b6ddc07918c55b4dc3ef8","modified":1465882319000},{"_id":"themes/icarus/source/css/style.styl","hash":"865de42ad496af928252d5bcfa0e0bbb534b0df5","modified":1465882319000},{"_id":"themes/icarus/source/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1465882319000},{"_id":"themes/icarus/source/js/main.js","hash":"78310af1f302bfa1b1d704537ef40d868ead2dcf","modified":1465882319000},{"_id":"themes/icarus/layout/common/post/banner.ejs","hash":"47ced3f03525698c79c6b1c07b48383fb6c496b2","modified":1465882319000},{"_id":"themes/icarus/layout/common/post/category.ejs","hash":"75c9dda2e7ec041943855ca163a6b1c4c8b4f260","modified":1465882319000},{"_id":"themes/icarus/layout/common/post/date.ejs","hash":"45cb0bcad461036cdd1fe2e3fbb5f2f19940025c","modified":1465882319000},{"_id":"themes/icarus/layout/common/post/gallery.ejs","hash":"c563098229ca4f6c522e77e6e38f5381c21f0af8","modified":1465882319000},{"_id":"themes/icarus/layout/common/post/nav.ejs","hash":"d7cd611e642327f33dff3963ef869c2b46824a11","modified":1465882319000},{"_id":"themes/icarus/layout/common/post/tag.ejs","hash":"2e966216256321aa0c76fe1b9be689601c76ef31","modified":1465882319000},{"_id":"themes/icarus/layout/common/post/title.ejs","hash":"669ddb46fefa100856588351a7a2d30ad996b755","modified":1465882319000},{"_id":"themes/icarus/source/vendor/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1465882319000},{"_id":"themes/icarus/source/vendor/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1465882319000},{"_id":"themes/icarus/source/vendor/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1465882319000},{"_id":"themes/icarus/source/vendor/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1465882319000},{"_id":"themes/icarus/source/vendor/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1465882319000},{"_id":"themes/icarus/source/vendor/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1465882319000},{"_id":"themes/icarus/source/vendor/fancybox/jquery.fancybox.css","hash":"9673e160d32c4811bb7e930ba1e20c36b2997fe1","modified":1465882319000},{"_id":"themes/icarus/source/vendor/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1465882319000},{"_id":"themes/icarus/source/vendor/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1465882319000},{"_id":"themes/icarus/source/vendor/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1465882319000},{"_id":"themes/icarus/source/vendor/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/index.styl","hash":"a7c35f55255d2455eb7274dbc7ad9dd263899297","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1465882319000},{"_id":"themes/icarus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1465882319000},{"_id":"themes/icarus/source/css/_util/grid.styl","hash":"93fb6f1e2f40cd7d88ad0d56dd73d3f9a7bc853e","modified":1465882319000},{"_id":"themes/icarus/source/css/_util/mixin.styl","hash":"c8e1ddfc0fe9108bab592c7a73b73ce9344991fd","modified":1465882319000},{"_id":"themes/icarus/source/css/_partial/archive.styl","hash":"dd8329d75a8312785611b5ec422bd49afc628c1c","modified":1465882319000},{"_id":"themes/icarus/source/css/_partial/article.styl","hash":"09c734ce100b4755c6deb4dcaf1e22fd794b04b8","modified":1465882319000},{"_id":"themes/icarus/source/css/_partial/comment.styl","hash":"784646796184d4f27918c22395288a2fafbf9554","modified":1465882319000},{"_id":"themes/icarus/source/css/_partial/header.styl","hash":"1e351f741144135871a3373fe7e969dc961b65e7","modified":1465882319000},{"_id":"themes/icarus/source/css/_partial/footer.styl","hash":"484776654e4c1691dc844e6e93786a08855c1c99","modified":1465882319000},{"_id":"themes/icarus/source/css/_partial/insight.styl","hash":"19833cd127f26ad90b06c115f8a96a30e0c0e53b","modified":1465882319000},{"_id":"themes/icarus/source/css/_partial/sidebar.styl","hash":"f528ca7064d9fcecd737b9b71c9c54601365d7d3","modified":1465882319000},{"_id":"themes/icarus/source/css/_partial/profile.styl","hash":"0c95de07a73e1e7fd35800e409fcafb8641cca3a","modified":1465882319000},{"_id":"themes/icarus/source/css/_partial/timeline.styl","hash":"c813b98f4fc45b64d2e07e5d944745a654c8c943","modified":1465882319000},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1465882319000},{"_id":"themes/icarus/source/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1465882319000},{"_id":"themes/icarus/source/css/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1465882319000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/.npmignore","hash":"1061654723a72f7aa74896d084c9e31fa5f61733","modified":1404913186000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/LICENSE","hash":"449a0ef15761526ad764889d4e8fffb05a01bcb1","modified":1404913186000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/Makefile","hash":"c2b750775cd3ab94e3a1420dd128e74e0106ac0c","modified":1404913186000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/README.md","hash":"a5deba7cc8ac3521286cb86d2c2da2a18e8e626d","modified":1425996583000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/index.js","hash":"cd67fd429bb78e1ae525908abfe9e4731d506f5e","modified":1404913186000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/package.json","hash":"33b1bb5f3ba270106741a4002779acaae58609e9","modified":1464597450000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/.eslintignore","hash":"0abf1c392f32bdf193fe824ead96926f550a85ae","modified":1446631673000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/.eslintrc","hash":"2c4a55a386408308d637f658a4b2f5e82f4e58db","modified":1449308606000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/.jscsrc","hash":"5f410f9c9caedfdd1eabb1571de1f8f9014eefb6","modified":1449308616000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/.npmignore","hash":"6fe0e77d6437d02bf947346807e8ad4ad7b7523f","modified":1455271292000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/LICENSE","hash":"fecd013bdadc9ead2732027f06bf8fc19761efcb","modified":1417874762000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/README.md","hash":"1079641dc5026d8c8ead9e7f8212d7a3c1a105fa","modified":1450010973000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/highlight_alias.json","hash":"be7daee35bf76b34cf00be9cbe4da270f279836d","modified":1464597456000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/package.json","hash":"6536ab63cb6d61e6b66eb03920d08dbfdd4c991f","modified":1464597449000},{"_id":"themes/icarus/source/vendor/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1465882319000},{"_id":"themes/icarus/source/vendor/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1465882319000},{"_id":"themes/icarus/source/vendor/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1465882319000},{"_id":"themes/icarus/source/vendor/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1465882319000},{"_id":"themes/icarus/source/vendor/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1465882319000},{"_id":"themes/icarus/source/vendor/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1465882319000},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.eot","hash":"3e63fc9b3de4580f1f3bec0631436f755b80f167","modified":1465882319000},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.woff2","hash":"1075231650f579955905bb2f6527148a8e2b4b16","modified":1465882319000},{"_id":"themes/icarus/source/vendor/font-awesome/css/font-awesome.min.css","hash":"8c15c6bd82c71e9ef1bb11cf24e502fe07518ac5","modified":1465882319000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1465882319000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1465882319000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1465882319000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1465882319000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1465882319000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1465882319000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1465882319000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1465882319000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1465882319000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1465882319000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1465882319000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1465882319000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1465882319000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1465882319000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1465882319000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1465882319000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1465882319000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1465882319000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1465882319000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1465882319000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1465882319000},{"_id":"themes/icarus/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1465882319000},{"_id":"themes/icarus/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1465882319000},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/FontAwesome.otf","hash":"cde9eb92c8a3ba23d648f76ea3931511f30813f4","modified":1465882319000},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.ttf","hash":"9088143b19979779b2116cef38b661f72d982e19","modified":1465882319000},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.woff","hash":"56ce13e71c2150d81bc972940584915181bd6081","modified":1465882319000},{"_id":"themes/icarus/source/vendor/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1465882319000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/.idea/.name","hash":"25819fa8187fbc80a4c54f67ae05ebffa226f150","modified":1404913349000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/.idea/encodings.xml","hash":"84a3e2826b2b347096020089807b162036f3fd3e","modified":1404913350000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/.idea/jsLibraryMappings.xml","hash":"3900d881a4380ad08dce82639cea60ed24538b0a","modified":1412218837000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/.idea/keyword-extractor.iml","hash":"b2c1dea5cbc868c8067425a81cca2d36c555645e","modified":1412218837000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/.idea/misc.xml","hash":"24b557cec899d489dc38dc5613811262f8643c9c","modified":1404913350000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/.idea/modules.xml","hash":"62cbada10a437f44be92524e1e52b95c54e7bb00","modified":1404913350000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/.idea/vcs.xml","hash":"1fc34617f0e3c1b12f38b5bfa9a106c9239a01c1","modified":1404913350000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/.idea/workspace.xml","hash":"5d1d329f7aab2e0074d0c6681bbf2337a6936616","modified":1412256978000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/lib/keyword_extractor.js","hash":"60a2ec07a1614a477fa4c84038588a3fb4de739e","modified":1425996583000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/lib/cache_stream.js","hash":"9346587fa9871e9a4529592e91a997e5b0a41ae9","modified":1455185583000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/lib/camel_case_keys.js","hash":"0e506d8ee3dfae6ab57d1a04c7e6e4d82287b1db","modified":1455185583000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/lib/escape_diacritic.js","hash":"9b62a42bde7671daba738e6652baee44ba30d6ba","modified":1455185583000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/lib/escape_html.js","hash":"f3c3f1a422cd2e519a805fbdbf5f20b63a10fd9a","modified":1455185583000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/lib/escape_regexp.js","hash":"c74fc0d14a2930007336aa11e8af4224cefac86c","modified":1455200535000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/lib/hash.js","hash":"95b9f5fe38c62a76eff26c6e9771a4267a0e284d","modified":1455185583000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/lib/highlight.js","hash":"99846bb00882a5e0d4f6d218480b818bf2ae9ba0","modified":1455271303000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/lib/html_tag.js","hash":"38f1df0d200011332249bf599980f1476f723d9c","modified":1455185583000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/lib/index.js","hash":"721f908f2c5e561a11cbee61f2f3b753066c1618","modified":1455185583000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/lib/permalink.js","hash":"0ac9bb1eb47dcb79cff07a6631fe2714eac5fe1c","modified":1455185583000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/lib/pattern.js","hash":"384485bf36b97513c7b61bff21af43570ca2c8fb","modified":1455185583000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/lib/spawn.js","hash":"8f3edb5b5268cf7d3abc1c86989d01da95f8a8f5","modified":1455185583000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/lib/strip_html.js","hash":"f20be4f49702fd241dcbf65fa73f01ff42028550","modified":1455199438000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/lib/slugize.js","hash":"662f671305418218da6c22af093dafa90b21c674","modified":1455185583000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/lib/truncate.js","hash":"102d57d757c88853ccc57e81747a843a0acb7eb7","modified":1455185583000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/lib/word_wrap.js","hash":"68a9e133470558981bf038a75ef9f11c5145955b","modified":1455185583000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/scripts/build_highlight_alias.js","hash":"8a999b74cd11da29e6092a26469b29a770981436","modified":1455185583000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/libpeerconnection.log","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1373532129000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/.idea/libraries/keyword_extractor_node_modules.xml","hash":"dac58a34689afec66c1ad736386893732f2a09fb","modified":1412218837000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/.idea/scopes/scope_settings.xml","hash":"fa07d9d70692f2d31ace346398287a038e2bdc2e","modified":1404913350000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/lib/stopwords/de.js","hash":"f12b4f778b25fc05a5bfa5fc37980db1ea2e9635","modified":1425996583000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/lib/stopwords/en.js","hash":"79aaa0c732cb118a377ffa3bbd775443c23c817d","modified":1404913186000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/lib/stopwords/es.js","hash":"cbffa6d4df462b99331bfd6d421ba12e732fd3cb","modified":1404913186000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/lib/stopwords/fr.js","hash":"fdcbeed607cea6ca86bed93aeb580d293aaba57f","modified":1425996583000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/lib/stopwords/it.js","hash":"0d8a905855b6865f80467b3510453db2fc2665c3","modified":1425996583000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/lib/stopwords/nl.js","hash":"08691dc133e26b535f2d245bada2e61caf329951","modified":1425996583000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/lib/stopwords/pl.js","hash":"ae20014ce3213fda328e22e98aa081ff8b12e4d0","modified":1404913186000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/lib/stopwords/stopwords.js","hash":"d85aa422ae6ea9cf4cad986008a098b6a276b682","modified":1425996583000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/lib/stopwords/ru.js","hash":"299c5b172d51738e89ae277fa1d0a353038f3505","modified":1425996583000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore/LICENSE","hash":"4a536006299d219843f69f87ecac4b52158b3efc","modified":1392067000000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore/README.md","hash":"fb13eed34314e90170be6290876a9a66c4051272","modified":1390328510000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore/package.json","hash":"13316031c888f17ddedacbd03ba9e80dc58850d3","modified":1464597451000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore/underscore-min.js","hash":"fb26909af4ad2a6c240b9aa4b35bb983cf4b20e4","modified":1409091109000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/.travis.yml","hash":"e33e8d35cf94d67804af457d709d8db1d16f73ae","modified":1373449276000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/Gemfile","hash":"dab95a91b5a30ded482c35d9efbc00d33a9322aa","modified":1373532016000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore/underscore.js","hash":"07147a83bfaba702d30426c7c31bccb25e692a2e","modified":1409091073000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/Gemfile.lock","hash":"9236e4ffa7c8ca067369e9b77bd26bc850fd51ea","modified":1373532016000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/README.markdown","hash":"d5862c720a95a582201ff26ff11bdf44911dde36","modified":1373890137000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/Rakefile","hash":"aebecba3b976b65bb74d63704f37d6f74d7419cf","modified":1373532016000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/component.json","hash":"b929b12ac3a7bdf402fa87863621259a39a883c2","modified":1373890112000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/package.json","hash":"d36b1cc08108cf8731dc05841c6339acae96b915","modified":1464597451000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/camel-case/LICENSE","hash":"3a7f886b632d2197676a40020d354e84b7860604","modified":1450225769000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/camel-case/README.md","hash":"7617bd3ea11b319627b6e870adbbe4a3dd9a8096","modified":1450225816000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/camel-case/camel-case.d.ts","hash":"30e10eb66736cbb97c906af8b2ceb7b4755e6259","modified":1450225904000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/camel-case/camel-case.js","hash":"e704154f7178c7fa70d430a693f28a26a2d4e00c","modified":1450225769000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/camel-case/package.json","hash":"9f2eb9ede6240e62c4b1e2c14bc812935c6bf166","modified":1464597451000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/LICENSE","hash":"914158dfad0452ceb55ea5e1822605ca05984bd9","modified":1455316199000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/README.md","hash":"c61dc638bacfcdcd29172fff3c5d5c1f21431805","modified":1456437388000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/changelog.md","hash":"bc6df7caea3b83fa361fa0a96c9b34c09465a93a","modified":1455316199000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/package.json","hash":"44045ee75887ed6ed45cf5257294557001e639e8","modified":1464597451000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/.editorconfig","hash":"625a1e1af0bffc1c37d437fa4455ee6380c0ddc6","modified":1451748453000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/.jshintrc","hash":"00418e4d24e1a43631be7311279e6a135dec8ef8","modified":1435782623000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/.npmignore","hash":"b9cde40294800ff90fa50ee4723d34c714ce4af6","modified":1435782623000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/.travis.yml","hash":"2cb720ace163571aaa063653b656f5b25cfcca1a","modified":1459976786000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/LICENSE","hash":"45c1476739d0c028c845b2c90c401c3a4435de04","modified":1435844224000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/README.md","hash":"36262690f4aa6703a683e887d97c557dd63930a3","modified":1459975691000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/appveyor.yml","hash":"dd7c480b06028d3919635583b62e66ad1c82ee81","modified":1459976794000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/index.js","hash":"d3e69307b9648c5c66ed21347cc41b11f710e40f","modified":1435868307000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/package.json","hash":"2fc64c3ed375b3d59be159688e9cd538114b3abb","modified":1464597451000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/LICENSE","hash":"cd25196630fe891662ad77810f0f6dee5bc85ddc","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/README.md","hash":"c15cfe5cfca5d87411e9d7cbc013aa1feefb7dc1","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/package.json","hash":"cac9478b5ba36bc66015225cb995f91310336c56","modified":1464597451000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/html-entities/LICENSE","hash":"f10f3a5e9b16a526fbf6abc4be406e6f07ecad93","modified":1408403203000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/html-entities/README.md","hash":"c7fac7bcffcb689b87be76cbd84c784b680eee76","modified":1440607446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/html-entities/index.js","hash":"eb15b4fed782c7736a02ad14c97901080ab85f44","modified":1421057245000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/html-entities/package.json","hash":"c4d7511801e271ea3e3aa014ad780bd2413677cb","modified":1464597451000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/striptags/.npmignore","hash":"631c0bbafc06a9acdf32b5f1d0a32b425d5327a9","modified":1451696775000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/striptags/.travis.yml","hash":"ae66409c58bcb2bc5027ee2f58eaad9f7fa59dc7","modified":1451697259000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/striptags/LICENSE","hash":"6d2971720ac56d4343e58518c76b5e9bd0257a83","modified":1451694144000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/striptags/README.md","hash":"ad4aa7e22c8db2a73081b4ebe8211ebd1699640d","modified":1451694144000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/striptags/package.json","hash":"dcf858e4f9ef81c7799d6994d711f0f3fe4ad10c","modified":1464597451000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/striptags/striptags.js","hash":"df67a3707877723eec80d67ec6107bb0ebfe7ed9","modified":1452049365000},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.svg","hash":"26bb1c5ef100a1cd71923f1d5dc29fc797ef4639","modified":1465882319000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/lib/underscore.string.js","hash":"78cd42aa76fc0aedf1d4c87acf5d0dc65df09af1","modified":1373890128000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/dist/underscore.string.min.js","hash":"d9d13d390cbc4422b16a519532491467d938f618","modified":1373889747000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/test/speed.js","hash":"1679135dec8aa60e5e8ef8a99c689eec1af61389","modified":1373531985000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/test/run-qunit.js","hash":"7a2f386db195670628c3d66d229327ebc02dab40","modified":1373531985000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/test/strings_standalone.js","hash":"d68f872a3522bf6898981a4a95cfaf2f709c66e1","modified":1373532016000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/test/strings.js","hash":"13f980b52f29d393d3dbc5e70aa4f6a7f31d72bd","modified":1373889747000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/test/test.html","hash":"59ba8455b0abcbcecea5af7dc9daece4621b88d1","modified":1373449276000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/test/test_standalone.html","hash":"86605f225d9d22a42e9df65360ee95dbd7ac98db","modified":1373449276000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/test/underscore.js","hash":"934a4bcb13026508e16223cf9f00bb4a38c321f1","modified":1373531985000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/docs/api.rst","hash":"7ea61691713b45ca2bba06ccd64d382d05296ccd","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/docs/building-testing.rst","hash":"435f8700ad54ebdc199fea29bd5709cb50c16356","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/docs/index.rst","hash":"64ff5bc891f7cc8bf28d987efe64328d981c6f25","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/docs/css-classes-reference.rst","hash":"c661bbb02b86547c1950fbecb676f40542697223","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/docs/language-contribution.rst","hash":"755e23f46a3ff5d2f59ebef2a6c6d7a5317bcc40","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/docs/language-guide.rst","hash":"5a7cf267ab1661bef71913c7d16167043e3d2657","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/docs/language-requests.rst","hash":"d5de8f9936fa7450384696c4d2454e28c5102a6f","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/docs/line-numbers.rst","hash":"fb2b891ec631ba4e18214d467114bfb026e42c5c","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/docs/reference.rst","hash":"e43d2d965426401ff22c72b60fcfe77a08b745ed","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/docs/release-process.rst","hash":"f33baf124c0d5fc87b00ba4d6a391ee8eff0900e","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/docs/style-guide.rst","hash":"f55813c25dd13e14040d71479ff340054d6de29e","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/highlight.js","hash":"2f7ceb15966ca8a855cfb5cc5386822f9bf49aae","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/index.js","hash":"8cbc69450f63cbdf6b23301789fd0e6c6bcdf2af","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/agate.css","hash":"8e122b0f00f5a7ec4e6dc492bf1560441eeef7f0","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/androidstudio.css","hash":"958baa24814c06a625612a3b2b478d54bc1bf1b1","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/arduino-light.css","hash":"c6e05580b51b755e229e99eb156940ad2cab192b","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/arta.css","hash":"17b23b9fa57ef7a05a6aaeea9b5feb5442a8e584","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/ascetic.css","hash":"6358377b5c25667886aca0d605cbc497cf02405f","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/atelier-cave-dark.css","hash":"f397d4418ce88b998841fd9135242461ba1a79b5","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/atelier-cave-light.css","hash":"2933f0247ac6d84c2954dd4946e359853abbf70a","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/atelier-dune-dark.css","hash":"081d73e454db140cd41b2bb595be297cfcab25e0","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/atelier-dune-light.css","hash":"7ba074de897e6a5e27d8b97f7cd06c1746474e72","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/atelier-estuary-dark.css","hash":"a0c46a0f955e3864f5e967ea93f5e61519a17be8","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/atelier-estuary-light.css","hash":"91ae4668c15a085ffce15ca21e93da445b5ecf3a","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/atelier-forest-dark.css","hash":"d8a4dc060b3fc719aa2f7d7b3f1019a3964b8101","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/atelier-forest-light.css","hash":"8a78a4eea0f32d094d1f9e316d59e990ba739d97","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/atelier-heath-dark.css","hash":"b93c2241ff123e62d4edb3dfc20410e4d1da3e78","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/atelier-heath-light.css","hash":"172b98f783d213a20211ec6aca9a3840ba524f55","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/atelier-lakeside-dark.css","hash":"fa707b252d5d5caccc0589374522bed47b7ca100","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/atelier-lakeside-light.css","hash":"8ba595b9ba6e8be6dc029bf80caab38e85aed686","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/atelier-plateau-dark.css","hash":"240f79f4e1fd63485c13900875b64c5a0d1bd06d","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/atelier-plateau-light.css","hash":"9731db1052f23351c983210701edd3f5ceed343f","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/atelier-savanna-dark.css","hash":"09d45a218f87b8cb55b5ca7f4e9d76ea89a9404a","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/atelier-savanna-light.css","hash":"6bd3a62c32558476d436bd389500e5fbeb693d67","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/atelier-seaside-dark.css","hash":"b2800804a21f729a3d0a16b3aadc17679fd0639c","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/atelier-seaside-light.css","hash":"3e6b9e2a3a5de455490b8224401f19702df4cde9","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/atelier-sulphurpool-dark.css","hash":"1f006f8bd28e2ffbb73f708769605ba766787fff","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/atelier-sulphurpool-light.css","hash":"0319c3eea893601b79b6c57652ef49b9222cc9de","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/brown-paper.css","hash":"a6817d890e58f80ce79d87620791dae821a70fff","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/codepen-embed.css","hash":"c4520e45d18259817b8942d17971f27c94f0fb09","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/dark.css","hash":"fc77519d4f5d731054c5d4b7e7bbdbb510833271","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/darkula.css","hash":"98e2c777fb1b7a3c63dd68b5b2c4ed5fee2349a9","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/color-brewer.css","hash":"96332573db854e7b7411caa94ba29b238fede2d3","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/default.css","hash":"fba68624d1b34a5543fe0bf4b2af2ac1ddf65e74","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/docco.css","hash":"1be7be09a1b927c22c7f11451becdb335145bdd2","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/dracula.css","hash":"2633f2e84680e9f381e9ac1df344b542e28f9774","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/far.css","hash":"67e0658b2376e91e4894636a3522a30c2aec42de","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/foundation.css","hash":"75b0674dd1ed35d61977bd5c35dc29ca35835a7b","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/github-gist.css","hash":"77cf684fda415812d6279a52f299c84850244778","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/github.css","hash":"ee593952684a791317ee8b77ad096e729dec649e","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/googlecode.css","hash":"fed3d439d0c305b337dd9c0f68dcbfa51429f445","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/grayscale.css","hash":"5688658c28fc5799517e8f3c224ae3da3797ba44","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/gruvbox-dark.css","hash":"aaf90d076e34bc44016462d70f83985e0e55c8dc","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/gruvbox-light.css","hash":"084699ab0aa326fede86e38bf41ebe49edde3a90","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/hopscotch.css","hash":"03e7b9ec74bbd375db8d476836aac3729a6c86e8","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/hybrid.css","hash":"1e2d54598b5f948b597059909d4bd158b7df021f","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/idea.css","hash":"164649ae1e7c891a0d88cca075521af28656e2a1","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/ir-black.css","hash":"95aad65ba77183500ce0f7ad62a7535b647ee20c","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/kimbie.dark.css","hash":"58ed061c204fbc09d221ee9135d66bad976e5fc3","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/kimbie.light.css","hash":"b7aa9b1b21a25dfefcac7649a328962f84c47913","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/magula.css","hash":"ebc291f90e456abeeccb16937e7f51735733f4f7","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/mono-blue.css","hash":"fd0f39cd4c93ccb8d0bb2f6a1f359522e15a89cb","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/monokai-sublime.css","hash":"e4f3df87cbfa634c86b489e9cc43acf44d415986","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/monokai.css","hash":"f69df92e3ccdce28e6f811ec84f11698f2811198","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/obsidian.css","hash":"6ed475813fe4886a58b236297862ff2f181e66f7","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/paraiso-dark.css","hash":"8f5445327ce3c83b62f6bf4c1a0d87fa6f036341","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/paraiso-light.css","hash":"6eb3ab7a3337f9cad3a2e5fa6bf7dd83685228d8","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/pojoaque.css","hash":"4e1e6a431212f5043a550474a1acda63362cdd6f","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/purebasic.css","hash":"f353a2cedf3f261a0676fce7c824bdd2e8197775","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/qtcreator_dark.css","hash":"213a40d203c4986cdbcb1bdf7d0b9013b29041ba","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/qtcreator_light.css","hash":"9a2a19ac2f6e6a7d5edd7fae67b7de4a3957e878","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/railscasts.css","hash":"a6d2043478fae5915926914cbd96fe9b706d98a6","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/rainbow.css","hash":"1b2d98ccdda36aa926d0e6d069b673fdacd2d33e","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/school-book.css","hash":"60fe3d8063b1acc4d52de02033095adb0a2b35a9","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/solarized-dark.css","hash":"d02fc2dcbeec4b7af2cadec4bbbfc5b016aed4c7","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/solarized-light.css","hash":"6b70caf1e84d096b1bc6318d5dae78d69e5dd1d3","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/sunburst.css","hash":"8309eab2e5b1765dbee81a626baacbdad869b76a","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/tomorrow-night-blue.css","hash":"cd257d7d6a37cd5a09419b5f5f9d34b6b282423f","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/tomorrow-night-eighties.css","hash":"d82b84bcda0588105dbbc0e8e8ba5e62c208a061","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/tomorrow-night-bright.css","hash":"04f0af30fdda5e5d6ebdeef5a860b6b7e49cfe89","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/tomorrow-night.css","hash":"86264dd861d35a8b135f9fcb8ff2675e9fa69c16","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/tomorrow.css","hash":"163593ad70770d0296c5e643fa62e58e63f1b340","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/vs.css","hash":"2ac5e89ceb3d5a0e0fdab1ed6d9a411ec7d221aa","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/xcode.css","hash":"65d775a7e11e238c91e0d3c7370547348c92d6b3","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/xt256.css","hash":"bbe28ec69177699cb6300d777598adf6323f7861","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/styles/zenburn.css","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/html-entities/lib/html4-entities.js","hash":"eb793b1708bd3305c33b0db77a15d04d330a6d95","modified":1444335075000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/html-entities/lib/xml-entities.js","hash":"f7a40c06be6bdb504476f1c864db0fb49898e8ee","modified":1444335075000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/html-entities/lib/html5-entities.js","hash":"ec6bfa76b6e8f84c13b96f7af392d212abe71e59","modified":1444335075000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/striptags/test/striptags-test.js","hash":"ce25ec97fadb2b687fae418901d1761a75a54e98","modified":1451694144000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/test/test_underscore/arrays.js","hash":"7e65b546ec41d89756176cca0662bee605054f3a","modified":1373531985000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/test/test_underscore/chaining.js","hash":"be55887afb5f05515fc969449c166e924965a0e9","modified":1373531985000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/test/test_underscore/collections.js","hash":"735c1cc88fc76df7c4a73c1735d29728404ffe4c","modified":1373531985000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/test/test_underscore/functions.js","hash":"51f27a367d732c718ad869b9ed2ab15bc7cadc0b","modified":1373531985000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/test/test_underscore/index.html","hash":"a39a08f5018ae1b231aedc06363ae08acc0b19bc","modified":1373531985000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/test/test_underscore/speed.js","hash":"395b81dd34c9267a308c055547e28d8d02198e56","modified":1373531985000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/test/test_underscore/objects.js","hash":"ce9b3cc415da73c599fecfb63cb1359439fee3f8","modified":1373531985000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/test/test_underscore/utility.js","hash":"39dc56c4a644fb09006b6d967109ab9f94466bd6","modified":1373531985000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/camel-case/node_modules/sentence-case/LICENSE","hash":"3a7f886b632d2197676a40020d354e84b7860604","modified":1450223411000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/camel-case/node_modules/sentence-case/README.md","hash":"c4d3fe9eae115e2214ffb8ca7a240869193955be","modified":1450223600000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/camel-case/node_modules/sentence-case/package.json","hash":"92e871d638c688301533d3bf799a2ae2f93f9bbc","modified":1464597451000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/camel-case/node_modules/sentence-case/sentence-case.d.ts","hash":"bd4f61d09888db9c8e7c94d3964d3ccf3878ea7c","modified":1450223555000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/camel-case/node_modules/sentence-case/sentence-case.js","hash":"787efef47aa339c799d95fc8eecb862f098dde1e","modified":1450223411000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/camel-case/node_modules/upper-case/LICENSE","hash":"3a7f886b632d2197676a40020d354e84b7860604","modified":1450225475000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/camel-case/node_modules/upper-case/README.md","hash":"2eeec02b0cf6dfdd2881c754a3ef3340f7cbc348","modified":1450225513000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/camel-case/node_modules/upper-case/package.json","hash":"41dd9d0bf464e186198257436a60b66952152435","modified":1464597451000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/camel-case/node_modules/upper-case/upper-case.d.ts","hash":"a5610dcff5a1a1f54b45b84e2f82b8393aeaa682","modified":1450225534000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/camel-case/node_modules/upper-case/upper-case.js","hash":"cc2dbbcf88c099a8c8a4db4c424e663ce9826a5b","modified":1450225475000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/browser/bluebird.core.min.js","hash":"294b3c452466a66acb5c24f8fe3709130310c156","modified":1463513445000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/any.js","hash":"424dfe2a1afeaad729ca2be5ccfd443311716c41","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/assert.js","hash":"da909f13035601fbcdc3a28937dd44e3008327ee","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/bind.js","hash":"6ba64f83e985a1cb7dcf945490e4c280460ccb25","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/bluebird.js","hash":"f68f4e491f49be5a5a3c5d04fafcd8abaf02fc2a","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/async.js","hash":"a3c430aa989a1d0050eba133b0e4bbcec9993014","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/call_get.js","hash":"b53dcc39da361dbc72a49ced90d5290d94c70b80","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/cancel.js","hash":"307b92b9575bc60d4f2c809b39690384cc324fa8","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/catch_filter.js","hash":"cbdedec0db19fe2af76d5594ed8bf819000d7c79","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/context.js","hash":"ea7eb1ab2c8231fa6bfa8446cf730736735396e0","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/debuggability.js","hash":"29c910fff5e5592d66878f510817a8128a9c0334","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/direct_resolve.js","hash":"470ca4d9a7e387ceceb383bc2640202f5fa6bda2","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/each.js","hash":"5118806b7208aa64317717392af157db042293c1","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/errors.js","hash":"98deaaee17f36851937108257e028a7e237b3f5e","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/es5.js","hash":"019c4e8b62031ea49aedc86dedd20318c6122698","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/filter.js","hash":"a5f3aee4afbc67d372e5b4fbaeac047d0d9c779b","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/generators.js","hash":"8f6a3f144a2f38297df9f87eb8405254f658f3f9","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/finally.js","hash":"4b0cea33e6afb07456cd370ce0e9519314ff0c88","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/join.js","hash":"669e0cb20fbd709fad37ccd05c5d68594135113c","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/map.js","hash":"e29b13be7a9464a7b847b4cf72293bdc877921e1","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/method.js","hash":"02a5a493c2cf2045fbb20b2751381e4b4e29dbe8","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/nodeback.js","hash":"46fc87ede6ca68434439a5216fe8e6f89d8d8a1f","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/nodeify.js","hash":"ebd75c010fcf1c4f709f4b444e62b80cfcde2a0f","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/promise.js","hash":"b862c1f9196688fe8c58d058a0bb1c08f5f3a491","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/promise_array.js","hash":"0712bdda0498dfa8641c19c80c22b9472878f169","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/promisify.js","hash":"3831be99120a57a3c07406f7012467f02346e92c","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/props.js","hash":"af5fc480eacd6cce94f3239729689e0899f6cd5c","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/queue.js","hash":"6c24c68f716db1a6c18b5cad2a951f0df6ee76ec","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/race.js","hash":"5f5b5403be19793dec5658af27fe996173eb4990","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/reduce.js","hash":"5c1ef0e38b20065851c1784ed4f8a4c9699574cc","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/schedule.js","hash":"38a1aa2ceb96ed01a3c9f713349b50d53a5339b3","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/settle.js","hash":"36f97c3732ae907af622fd4c859d29da1255fdfa","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/some.js","hash":"b548ddd7eb6b35ae6e97d931e0a8ef6dd512b3b5","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/synchronous_inspection.js","hash":"e9dc1fa033797719d2f4227d86f02806e0574755","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/thenables.js","hash":"b06e617f4b1e5c9c33c9c4e0baabe709550154b1","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/timers.js","hash":"6b92ddefb82954c53019788ed1489fb3c39e9e9f","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/using.js","hash":"5b287a7d967647d38091aec63f880abc46caeb4f","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/release/util.js","hash":"44b36b8bb4c9e591128079adeb56edc79b8ac625","modified":1463513446000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/.editorconfig","hash":"625a1e1af0bffc1c37d437fa4455ee6380c0ddc6","modified":1451748290000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/.eslintrc","hash":"ae12a60880d42abf6c59d85f7f441ebc066ea752","modified":1463572136000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/.npmignore","hash":"b9cde40294800ff90fa50ee4723d34c714ce4af6","modified":1435839159000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/.travis.yml","hash":"0eafbcd38fcc623373cfbe63f312f9f5dba1da87","modified":1463557397000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/LICENSE","hash":"ca5287b71c0661edaa850d1d2daab2b717101dde","modified":1435839161000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/README.md","hash":"87dbe9886977124891a98f365f5c1da1041b0ac0","modified":1463572136000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/appveyor.yml","hash":"28a740c0c299785cf9020003fdc6b035cd9f02ff","modified":1463557397000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/index.js","hash":"7039833132528e8eb1e2571edf0d5a7712cf9be0","modified":1463572136000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/package.json","hash":"c0b1c6b60cd25bc94ad134b2d0845697c6939db4","modified":1464597452000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/.npmignore","hash":"11ffaf4ed0b0a9c092534b653873e75f438680bb","modified":1389407811000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/.travis.yml","hash":"58cd288286bbe6bffc69752c4020bc11d21347a4","modified":1451833372000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/LICENSE","hash":"c10025d9f88d74d08d60f8e092ac3e038ce180c4","modified":1389407581000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/README.md","hash":"faea2f20e2631a2f4765fd703267befbc0ec1cb8","modified":1451833372000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/appveyor.yml","hash":"ddb4ba9c9860208bcfc182ee0486916119b63b71","modified":1423659022000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/index.js","hash":"7e5b000a13fd103df52f976089cc61c761d82138","modified":1423658684000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/package.json","hash":"e4de4b333ee9b3372d755e82120a8133b1bfa1ad","modified":1464597452000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/postinstall.js","hash":"c378048db6126097fa2b5338a9b5dc0566cb8f07","modified":1451833372000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/accesslog.js","hash":"348d234c7253b8b308b74376fd92824d7788e745","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/1c.js","hash":"31a645e9d1b863add65b020a347f94fdffb95c94","modified":1463512610000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/actionscript.js","hash":"0ea1dbcc03123f7d61ac0d69cfe55bfbc517d2a9","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/ada.js","hash":"f03675f08c9750f48c33ea202894cd3b13d8600e","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/apache.js","hash":"c60412ca3c2543b47727c8915286750873a24c09","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/applescript.js","hash":"64c56abbca58a0881b736a5b7519a178a0a1d782","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/arduino.js","hash":"873698f166f498133260f60b37b8c2fea4bbc55b","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/armasm.js","hash":"d49048f28a92ae394e0c2fdddad8e46a53732513","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/asciidoc.js","hash":"b7e01e2d240ff73a8695ed1447a47c4a0be7b62d","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/aspectj.js","hash":"2cfac0e340d3ce8172a129c409b17599871bb092","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/autohotkey.js","hash":"951f24817084840b56ea98066f24a36629a1cbfa","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/autoit.js","hash":"5a765d8c3d147df67badc2e4135b8e5df56337ce","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/avrasm.js","hash":"474db1f6917d9ee3b1679286ec1583f1bbd19c2c","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/axapta.js","hash":"0f0f21ccab8b6874e965d53791465ed89e3aa13b","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/bash.js","hash":"e94801e16d4d5cc00c2b2b29a99953d02337d961","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/basic.js","hash":"78824065536502064ecceaf75d9571d3380d9642","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/bnf.js","hash":"ef775edcfecec203e6c67fa994ceb6d7d81d90eb","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/brainfuck.js","hash":"b6d4f266923cc946678a9060be5ad4a02a358db8","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/cal.js","hash":"7d7b9e510ad2ead900b097c38074f755378647e1","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/capnproto.js","hash":"0d947410d260600d3b110c4c427545b2a97f7947","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/ceylon.js","hash":"586cc177a3c7dee9836e9f474bc3947e93424ab4","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/clojure-repl.js","hash":"1e9b837580d563935b9e4a2314e1c618c42cf052","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/clojure.js","hash":"216f43777af0fcee770f98d85b91c95e6b6562c1","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/cmake.js","hash":"72aef704f3645ffc6cbfb8d534fa31c0181e1455","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/coffeescript.js","hash":"501bac94b9fe45e20d23e6f4c4c5ae3c845ed707","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/cos.js","hash":"18c160b737fd15d8264dff8be59d26b0283b1542","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/cpp.js","hash":"3639dbda3c36b89b17b1665ccd9f859623e6d3ef","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/crmsh.js","hash":"c8ad2da6b6603b62172e2865eea4add11fd79800","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/cs.js","hash":"740b95dd46684d2894ef0280a056f0e3556f60c9","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/crystal.js","hash":"53e6826083ba99130621c6ad6015304ef59299e2","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/csp.js","hash":"8a4c03add8f3c7815fbbe8dbc28748e6fd19cb1a","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/css.js","hash":"e3e285a4fde1eeed5120211054b1e5f0e4cbf92b","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/d.js","hash":"229d02046adf47a87e6229917998b564a0726ea5","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/dart.js","hash":"06e74990e6dabb0d55b90bfa1e32786b26ed49b6","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/delphi.js","hash":"466b4c696e3f8d76013fe38dbbcdf4cac01b16bd","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/diff.js","hash":"c75276a13b9f1a58a84dcc38808a847a2a8a5966","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/django.js","hash":"f2fdd57b3a4aad786b3cb81aaa1151abbac9de2f","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/dns.js","hash":"de0553c09bac9edacdb1c492dd05960cc7cf971f","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/dockerfile.js","hash":"c0478dc1900c263809dfcff2b26db1f15f8ef495","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/dos.js","hash":"bed63b430d0245c8b6c3e430d849c64a8e40db4a","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/dust.js","hash":"2996fd8585906dd1ae8f1dc9e8b8abd7ccd568fc","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/dts.js","hash":"23612dd62fc09eb91bff8e7eafd684d469ef3392","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/elixir.js","hash":"4d352797253b7fd81a0836ad9d590e515f79d0c6","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/elm.js","hash":"9396a2d9603322d31c0da444bb5a2a65d7094d6e","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/erb.js","hash":"3e67ebd4a54e38f7c4352facbb0114b914df773d","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/erlang-repl.js","hash":"b40072b8f60479a3b2fda37c6ffa5c6065e160bb","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/erlang.js","hash":"eab318990e71134e5ffb248663d141dc418a43f7","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/fix.js","hash":"225c32c97aad884ad5c3d256b13aac89ab7b3569","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/fsharp.js","hash":"51446ecccedbe24c8477af70d4fbf15d5f090ce5","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/fortran.js","hash":"a9d0aa92cb7a7ee12ae3b89233ef4e3f68a1b5ea","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/gams.js","hash":"b5a6b26dd57f2ebbb2d8bdbaca859b61cf992aef","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/gauss.js","hash":"577daee3093d72739d4800316f5c48c82bd5b43b","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/gcode.js","hash":"1c35a95ccd30d0949d1f09f586989e036c97187b","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/glsl.js","hash":"341d47a7ba40daf718c6aa4a7dcaab9e17076944","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/go.js","hash":"b4b17b3d63424736f00c4b58afdc313e9094dd7b","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/gherkin.js","hash":"68eddb4dc9b866bad4fc3b555be92199716489d8","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/golo.js","hash":"8d53d68e90a908e33670d075a3727bc3bac48f12","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/gradle.js","hash":"3c7ba57616e77ac59b59810515bb6d2bebd6b6f2","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/groovy.js","hash":"cb9e4ed4363a68859e7fd8365b7024835691d669","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/haml.js","hash":"84491f05df1fc74d1084fb253dc12d2bed0a2fca","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/handlebars.js","hash":"3586163cb9c029239185209044f91567bc9388a6","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/haskell.js","hash":"65d0e2f2dd60d21107438f98bf06b5673a0e395c","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/haxe.js","hash":"f5b1c2bdc5c4e772c8491f486735c4652152bcb8","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/hsp.js","hash":"ace444817c7832f9947752ae72f51329502c8d53","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/htmlbars.js","hash":"2b42fc812e7bb39a5e69e2c5a0365a6952689e18","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/http.js","hash":"202176d2e4fc551d11162a797c1f2ec002412b28","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/inform7.js","hash":"f7019518299290c408b65cae8a5d9a2170f260b8","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/ini.js","hash":"ff3f6c019db17271a60c0110d1c0d8bb4b20ecfb","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/irpf90.js","hash":"25b18b62a7eac03d7cd196c12480437ddd957196","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/java.js","hash":"3281e70c4a8be736f4bc28a8454dee07bff5e66c","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/javascript.js","hash":"78d8bfca1c70476f7025944383d7de51faf14c18","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/json.js","hash":"75b75bff84a88d6b0b630442d4b588719e3ccf22","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/julia.js","hash":"67e252d67fdc75715ccae67895ef3197b770a9e1","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/kotlin.js","hash":"e430d3608590c1a6b4467a1433e74a79bd69b17d","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/lasso.js","hash":"dd7c75e2c0c51b7efa5c652ebf62d130a2dd2917","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/less.js","hash":"d01b1fb5cac57747edf9bdd148ad1e83502dc514","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/lisp.js","hash":"b6d09c4efc9f62bd400d3b4e3a830e86433b3650","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/livecodeserver.js","hash":"7966dc033093c1555cbf626b58b9cbbd5f889614","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/livescript.js","hash":"b3a1310bf1b1c812fc28467c136bbd77610c50e8","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/lua.js","hash":"be1579ced5e9cc73c3121d254fc8ef6632ab6f70","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/makefile.js","hash":"d63df98a46aa7f7d9f9b2467e1098476cbb75fea","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/markdown.js","hash":"226a75a5d3bae188408a8d388ddaa8d702a38194","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/matlab.js","hash":"08d33bc43836283c2181a1077c117c77fc8cc8c9","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/maxima.js","hash":"3522fa58e0e93d36c3267dea5172e33fe64cc843","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/mel.js","hash":"6f19c9f0b7e78725e6391a1e2d3990610cf8c006","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/mercury.js","hash":"154f4ac390a395eae2bb4246c93c18b7412b3bd5","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/mizar.js","hash":"009acb028481b4f3ad95bec4d0386bb2184e7acf","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/mipsasm.js","hash":"adfac05b0dbabb7a5053abdeb7f25b0a2b8df178","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/mojolicious.js","hash":"7edb53b8770a591523bbe90601a1097d589a5dc0","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/monkey.js","hash":"64fc8e856e773939f5f50fb03b3e207e77ae5ea6","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/moonscript.js","hash":"485510191b2c8d67c96710cb85dc1a37ebb05af8","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/nginx.js","hash":"2d35617087edad25bec36f549a82ae574e6c9a45","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/nimrod.js","hash":"e892415387bd17ed7f62205b11704e5f0751943d","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/nix.js","hash":"0e799905fad5eb9a7e86b07654d540eb67d74529","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/objectivec.js","hash":"6d980f9d9ef374dd51b5503ecbaa5e878c5b4480","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/nsis.js","hash":"78dbce6bec80362d296f4ad47fee375b3afe8032","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/ocaml.js","hash":"03e65e7f07732e214a0d32a0b539e76012ed3970","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/openscad.js","hash":"a732c333aa1adaeea2f125e086012305382b674e","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/oxygene.js","hash":"a8e62344bc5a3d7db691bcf28d53fc305f790cef","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/parser3.js","hash":"ac15e9d440ec885a71761109fe40ba8a06c7b933","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/perl.js","hash":"c1872392209d696ab1ec8a34d5a9a2e8ba51ec35","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/pf.js","hash":"a7b05b0bce721379a7c5245ab2e87f887d64c100","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/php.js","hash":"a4f9f78b7786797c7f8488220525209393d76c11","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/powershell.js","hash":"5038c5a17a9b36418309ae86833d60cbc1afe005","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/processing.js","hash":"d13b510492292fb16f8d8a8ca7787b5fdf83f9d3","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/profile.js","hash":"2199270f25b8e1c6e934f44111d3654d7d1b3c00","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/prolog.js","hash":"16087064562b8ee336c7373f2f3f377904a7809a","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/protobuf.js","hash":"abbcec351964992b81f75caade03b077850c3949","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/puppet.js","hash":"2b7644a72813e256632310ec9edef0459727f096","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/python.js","hash":"2b1f5e2c3ff65dd26e6366903046af8c6376784a","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/purebasic.js","hash":"684640f179954b84907545c0039460e35da287c6","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/q.js","hash":"7228dbc817b650907d60ee957a8303d53f727f80","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/qml.js","hash":"69f233e3b6d37347c77070a35e3420a796a7187e","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/r.js","hash":"d4e0224fa019df6fbfdf32173aa6667748e9ea11","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/rib.js","hash":"6ac4095f443d77730802603b2b9161a9bcf72100","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/roboconf.js","hash":"f39efee84c9b8c3308746c82176ff6a305da7eea","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/rsl.js","hash":"ab3dfe5e601148d016c76aab50fb17afb794c435","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/ruby.js","hash":"39cb5f77b4216638bf3cdc57607909ba57cf3d22","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/ruleslanguage.js","hash":"5600035cd1c59e034c8b710276ec4029e1594da8","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/rust.js","hash":"98904042face56184e77de923c85670e96804385","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/scala.js","hash":"fc8d7c529fd4be604eea90cd0a12358fad5f49b9","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/scilab.js","hash":"1ff368f39960bba8051de0706aa97d46ffdeb94d","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/scheme.js","hash":"f0650177c3c4f44494e840d11718ebe0b90c8ad4","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/smalltalk.js","hash":"45d649415c43d5989bc9bb2548885f0820bfa119","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/scss.js","hash":"3e770e661b2c57b9ee3ead36ef1f358f1a87d6e2","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/smali.js","hash":"9a8ccd28ca3405e5ba86f86d2fcbe82095d81391","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/sml.js","hash":"03e1e7cf2041103f55d57dda1624ff0fba83d47a","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/sqf.js","hash":"cb3a9004985b20b90e663032506005fb4912cd10","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/stan.js","hash":"305e8b20c4ac5762dfb13892f87b1127e65ad2cd","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/sql.js","hash":"5a017346f0666223417fe7ca5df468dd3184645a","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/step21.js","hash":"f9c30d58ef59c96f151a74736dfe48260fa90ebe","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/stata.js","hash":"52b5b3f4bf075e3d31df1b6c432cd48f5af2071a","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/stylus.js","hash":"a6260a532b4ee8ffcbcace1bbbf502a587f56628","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/swift.js","hash":"0de562640220da5bcb4674f8083424777d94392b","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/taggerscript.js","hash":"7fc8221bb34ff42d867a68a98f93a33e11cac11f","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/tex.js","hash":"956a6f3ac9e1e2bc40a49191a4f7558f267008eb","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/tcl.js","hash":"fae3052ea5a3ecb70f4a12d38f2d7fb387cefc94","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/thrift.js","hash":"47c807c1cc33a57f6f2ecb9e609f56ae74d5ef77","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/tp.js","hash":"7690f71ab4b1616b96873b43116e8ae936b1590c","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/twig.js","hash":"30b6777246eec12be33ba24fc5dfc95565491edc","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/typescript.js","hash":"6401ffe7677a94978648d6d71a8db8032ec565f9","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/vala.js","hash":"8cf4daa0d64e112a0eede09353cfc4c95be37619","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/vbnet.js","hash":"b95eecf676909dab14be6fbbe03d4a4ffd2cdd8f","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/vbscript-html.js","hash":"af6c349a4ce7cabf9e94168aa75dfa350664a021","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/vbscript.js","hash":"29df599716e626e26b384e259f052c9a68fd29f0","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/verilog.js","hash":"2385a8df75d73b3a1aebc591432a53d2e58c41c3","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/vhdl.js","hash":"aff7f69aeb9096046e818e3188cab40ea7a33cd4","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/vim.js","hash":"a726fda2007d43cd0734e96e1530056f32cd0033","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/x86asm.js","hash":"5eef051aad64bac3c549311cea1f76521f890580","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/xl.js","hash":"51b7b4ec88350dbaf8bd115e4c9f4a3c3cee32d4","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/xml.js","hash":"9d6ec52a3d002850caff607948da16e7888979d3","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/xquery.js","hash":"ee7fee4c24dd6112e16b513dd26ca5937d9d637f","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/yaml.js","hash":"361cf904fe887095407d61860ec8511f02c3939d","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/zephir.js","hash":"fc7c87476ff8fe68e51d159eddb99d8421505a3e","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/browser/bluebird.core.js","hash":"b4f5a32a4b01121edad3c28ac1d948ba5ce05164","modified":1463513445000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/browser/bluebird.min.js","hash":"56f7ef23b23fcb401f973100da779dde9c50d43e","modified":1463513447000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/test/test-empty.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1423094219000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/highlight.js/lib/languages/mathematica.js","hash":"78cee2f480b2ddb3e23dc7cebfb0bc07b60e0869","modified":1463512611000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/test/test_underscore/vendor/jslitmus.js","hash":"141af7191b0f8be947e616cab9816e68231230ca","modified":1373449276000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/test/test_underscore/vendor/qunit.css","hash":"1cf8b4bfff4b27bfdff531b3f51a34ba1bc7c236","modified":1373531985000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/test/test_underscore/vendor/qunit.js","hash":"0d8fdaeec180bcc70af77f58ca31d99f6bded201","modified":1373531985000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/camel-case/node_modules/sentence-case/vendor/camel-case-regexp.js","hash":"e3dd8fc58b9f06843cc1d0ed4347c11b4f714a6c","modified":1450223411000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/camel-case/node_modules/sentence-case/vendor/non-word-regexp.js","hash":"e1e32a484e823d4d133a481cdbef8202d8e441a1","modified":1450223411000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/camel-case/node_modules/sentence-case/vendor/trailing-digit-regexp.js","hash":"cdcb081e0fa965e45b6c2885e5a11b622277af17","modified":1450223411000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/bluebird/js/browser/bluebird.js","hash":"61ec180a6cf9ebdc59280dcfbd972d9793a1d8b4","modified":1463513447000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/lib/enoent.js","hash":"d3d4ef0e673ba2bb1d1a135b4d4945cb346764b4","modified":1463572136000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/lib/parse.js","hash":"09b00a1570ff6306b17f50febd0cc1ad9bf2cb2d","modified":1463572136000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/lib/resolveCommand.js","hash":"e21deca0a70843d228db2ca586459319fa9282de","modified":1463572136000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/lib/spawn-sync.js","hash":"608284f0f984e545456783e51bc37877dcce7d8c","modified":1451833372000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/lib/worker.js","hash":"c14bece4fe41e229e5eb39fe3737080401ba0d38","modified":1451833372000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/test/index.js","hash":"35cb05532fafe7d71e91b3a181f08bd9b93d67e5","modified":1451833372000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/test/test-spawn-fail.js","hash":"5d267c2f1d77c3b0f0d1b35997382a50018f6248","modified":1418838986000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/test/test-spawn-timeout.js","hash":"73fb8fde314042fd997436efa6a475a994e9db49","modified":1421301961000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/test/test-spawn.js","hash":"9365b8d948edc19cf562963d06b9c38186e336e3","modified":1389407457000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/camel-case/node_modules/sentence-case/node_modules/lower-case/LICENSE","hash":"3a7f886b632d2197676a40020d354e84b7860604","modified":1450223732000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/camel-case/node_modules/sentence-case/node_modules/lower-case/README.md","hash":"02e95bcbe0aea1d158905ef0bf3b50cf81451fb6","modified":1450223866000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/camel-case/node_modules/sentence-case/node_modules/lower-case/lower-case.d.ts","hash":"8c49066a879ca8a84407d95987a78babdb05779f","modified":1450223775000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/camel-case/node_modules/sentence-case/node_modules/lower-case/lower-case.js","hash":"6c8e4acdd39af940362a63b3fdd40d98bce5b073","modified":1450223732000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/camel-case/node_modules/sentence-case/node_modules/lower-case/package.json","hash":"e2a96d4d802f45613a019eb8ae0022faa851440f","modified":1464597452000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/.bin/which","hash":"5b6b3e1838316fb3f1b3b4194cdf49db0674eb17","modified":1462408202000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/lru-cache/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999527000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/lru-cache/README.md","hash":"ddf09419a6e0e9df96d90de752d48d54b4089eba","modified":1458666118000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/lru-cache/package.json","hash":"92202d760538dd03c26e649a6943f25cb206888c","modified":1464597453000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/which/CHANGELOG.md","hash":"afdcf79051084de1cc0d05e1e05ef1cff4cf932b","modified":1463603453000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/which/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1416911659000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/which/README.md","hash":"6269a83ac37a211a4f54a0b6d00ca5dfc3e14eaa","modified":1444245523000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/which/changelog.sh","hash":"b473f9df79e5dc0508896ac6d9785d75f97c254e","modified":1463590996000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/which/package.json","hash":"e1a6ca6e8a8302ed07d89c0c5b7d73642d38f023","modified":1464597453000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/which/which.js","hash":"1dade56e451d8fd2d1adfa99ed2774e214fd19ce","modified":1463603213000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/lib/json-buffer/LICENSE","hash":"19a06b8c5c2a7c8fe7fd64231318076c92d05cda","modified":1418838658000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/lib/json-buffer/README.md","hash":"dda2255200591fc11ea2e4f53b231a0ba87544aa","modified":1418838658000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/lib/json-buffer/index.js","hash":"343f2b4874f66f08a894f9e891387358de9877fe","modified":1418838658000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/os-shim/.editorconfig","hash":"a8a303dcaa471d2b3a2460f8cddeb26607b5d4d7","modified":1438904008000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/os-shim/.npmignore","hash":"68215b1ba86c22413da643bb01adf519b58f4abc","modified":1438904008000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/os-shim/.travis.yml","hash":"1ca50232ef14fcad8c07c08c4e157744ce378d16","modified":1438904008000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/os-shim/LICENSE","hash":"27bbf494715ab733aabd390979a226ed3de633f5","modified":1438904008000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/os-shim/Makefile","hash":"1a3d4deb966e08575b3a2bb6fc12ae1b239885c6","modified":1438904008000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/os-shim/README.md","hash":"c6eb9294bfdca0cd441642aedc94710f3c03d9c5","modified":1438904161000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/os-shim/package.json","hash":"8423ef0708b012098fe08a7e1a0851f62196b9be","modified":1464597453000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/LICENSE","hash":"3ff8cf88cab3a26fc89c43bc829bbbb6161389d7","modified":1394042384000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/index.js","hash":"cc3ca95d3f2f04d241efa33ecc76a6d512324b46","modified":1428106461000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/package.json","hash":"ce5d0685df04466c9943321645b6773e66b08802","modified":1464597453000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/readme.md","hash":"cce7a35033ddf1f21cb5cbb697d02e230f1066fe","modified":1445206208000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/keyword-extractor/node_modules/underscore.string/test/test_underscore/vendor/jquery.js","hash":"0d7896e2bb23f88e26e52b22a075350b354df447","modified":1373531985000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/lru-cache/lib/lru-cache.js","hash":"eeb0f7c231e04d00540d0733077c28f1bc122d89","modified":1458666750000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/which/bin/which","hash":"5b6b3e1838316fb3f1b3b4194cdf49db0674eb17","modified":1462408202000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/os-shim/lib/os.js","hash":"0f769e2d0d3d4e1303313b57c5c4816ee18bf630","modified":1438904009000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/os-shim/test/osSpec.js","hash":"0baaab3e97486e430648ae7ceb9a358ec9a982cb","modified":1438904009000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/lru-cache/node_modules/pseudomap/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1448659987000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/lru-cache/node_modules/pseudomap/README.md","hash":"93ca8dd88b562f1cd856143e500bdb679419e088","modified":1448749520000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/lru-cache/node_modules/pseudomap/map.js","hash":"f0d63208dec47fe1d9c69ab74fdf54298406dce4","modified":1451963009000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/lru-cache/node_modules/pseudomap/package.json","hash":"8fb48fe5f75878a0150c88930e62189b516b0775","modified":1464597453000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/lru-cache/node_modules/pseudomap/pseudomap.js","hash":"34cddc0bc6daaf6c7092d2659612969b8700d8fa","modified":1451963009000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/lru-cache/node_modules/yallist/.npmignore","hash":"813df6cd387f277bac3c7b84c9e508d472d072a8","modified":1450425693000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/lru-cache/node_modules/yallist/.travis.yml","hash":"5ea83451ab4f7f1edca243cbe7dbcf14a9594d0b","modified":1450430717000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/lru-cache/node_modules/yallist/CONTRIBUTING.md","hash":"1ea00170c91f88b58f67fc747d452ff2a33db34a","modified":1450425693000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/lru-cache/node_modules/yallist/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1450425977000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/lru-cache/node_modules/yallist/README.md","hash":"930460a06c3414c2dceeeca378fbe0057779fab5","modified":1450554690000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/lru-cache/node_modules/yallist/package.json","hash":"0689c22099cca1e865726e5a2ebf865dcebc2778","modified":1464597453000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/lru-cache/node_modules/yallist/yallist.js","hash":"c8c1b4dff11391bb315acbed47e63e4c0968346c","modified":1450554767000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/which/node_modules/isexe/.npmignore","hash":"5c82cb364ccc42139031fc6519c138ef81f2df26","modified":1453008305000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/which/node_modules/isexe/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1454992766000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/which/node_modules/isexe/README.md","hash":"59d02c0354fd7d5da52783976038003d940525bf","modified":1453773938000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/which/node_modules/isexe/access.js","hash":"b9e0d3355dd35037a45023b198664a230994e1fa","modified":1453771669000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/which/node_modules/isexe/index.js","hash":"3bf4b638355aae1a2d37ce7349aa4c85a69bd0f8","modified":1453771901000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/which/node_modules/isexe/mode.js","hash":"0ff34b943491989ff0c89b9fd88ab591cb39980b","modified":1453771822000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/which/node_modules/isexe/package.json","hash":"6b76d0852c0007e52526cfcb354221259be77429","modified":1464597453000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/which/node_modules/isexe/windows.js","hash":"800422a4c5d1957e62da0cff8b1e990d0e1f5403","modified":1453773768000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/inherits/LICENSE","hash":"3b0e8d58a362b1787ef3504fba4f593b22f3cee4","modified":1376950172000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/inherits/README.md","hash":"f2f8d26f1cf5fb1e3a68aa225221b064f999fefb","modified":1368714278000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/inherits/inherits.js","hash":"3146ed5f0e6053ad30398afdbd5a0d6a4133a4cb","modified":1368714177000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/inherits/inherits_browser.js","hash":"7c13eacf36e79e5e7dd257d80ec25846e4df7eb3","modified":1368715198000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/inherits/package.json","hash":"cd6f4570d5ff6905b223118b8da7eb687bdd31de","modified":1464597454000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/inherits/test.js","hash":"ba3f458c9b47c1bcd3fdf5dd9289b7aa0ae90b1c","modified":1368715388000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/.npmignore","hash":"5fd5e0748fab8f60a15caf1abdd5c6a2ddfe00ce","modified":1433891361000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/.travis.yml","hash":"f4f8520976704e518fbf4dfd0327c9c85897cbc1","modified":1457790108000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/.zuul.yml","hash":"0af73c9b9845d91872644251c6d7ae945205e868","modified":1442671065000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/LICENSE","hash":"73efe5bda3791d234730ab0dcc48eb619a2e0ec6","modified":1433891361000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/README.md","hash":"91831f48f5af8150b55e5dc8611b71885ed5591e","modified":1457876227000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/duplex.js","hash":"5ff8b0af1efbb8ed54ac1b3f57167447cb902344","modified":1433891361000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/package.json","hash":"c8261eb7dd28d918d0ca3a8154f17315f9ef9f77","modified":1464597454000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/passthrough.js","hash":"ff1590a9a778dc9d8ed51064670d82426782ee6e","modified":1433891361000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/readable.js","hash":"f68ae09e1cfcd9f75f8d43cb82724b3dee5d9251","modified":1434936362000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/transform.js","hash":"2d31b50e657e5b03ce5abc5ce6b77187e8e876c2","modified":1433891361000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/writable.js","hash":"8a7bd86d1803614b9381a924ab9ef0a19fd70e6c","modified":1433891361000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/typedarray/.travis.yml","hash":"a88152a7be9167603b19549ff75cd80d22501731","modified":1386647103000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/typedarray/LICENSE","hash":"c2b6e9dfdcb944a46af4f9b42ff1f3543a2aacce","modified":1386646884000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/typedarray/index.js","hash":"5d96e918bcecc108565675881bb7aeb15a2c5c92","modified":1386892059000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/typedarray/package.json","hash":"19da789a84809ed377050621a4e73e592661d68c","modified":1464597454000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/typedarray/readme.markdown","hash":"c3eb3ac1ff7b8322da590b4eeb33920ea2b75419","modified":1400295138000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/lru-cache/node_modules/pseudomap/test/basic.js","hash":"dccd686c9c0f397d56318e99c89fa29fe4db84c2","modified":1448663157000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/lru-cache/node_modules/yallist/test/basic.js","hash":"2a5fec5750c0e572b0766b765630c84c7d0e38bc","modified":1450554731000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/cross-spawn-async/node_modules/which/node_modules/isexe/test/basic.js","hash":"bbcbe17965674921369eb7036d112a99763d2c79","modified":1454133595000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/doc/stream.markdown","hash":"10432335bea3230f59e7d889246b5e891360f163","modified":1457876227000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/lib/_stream_duplex.js","hash":"df22a616d3108766d7537b9985b7cd8cd729f1d0","modified":1457790130000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/lib/_stream_passthrough.js","hash":"493a4cf1bf1927d8a2bf5936b7d50b72bdafa378","modified":1457790130000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/lib/_stream_transform.js","hash":"e9b4761816194578f90bc065a405d3ce09b204d9","modified":1457790130000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/lib/_stream_readable.js","hash":"9c18555e3832293b79c9437c56d4c5e453f85eee","modified":1457790130000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/lib/_stream_writable.js","hash":"de86cccbe828e61bcb25bc376c6c107fb577e0ea","modified":1457790130000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/typedarray/example/tarray.js","hash":"2586ece42108d56cd07ac4a74f77c55c2ac886f6","modified":1386646587000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/typedarray/test/tarray.js","hash":"6a61121e85e22cb1a7f4add55aef97d450e3583a","modified":1386631816000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/doc/wg-meetings/2015-01-30.md","hash":"1fafe6e2e28a4404db90ae6dc867199b74468ca4","modified":1433891361000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/core-util-is/LICENSE","hash":"a95471326a84657b0e164f84e1285685f63011e0","modified":1447979068000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/core-util-is/README.md","hash":"d4987293f1078d937454a14a5ca6f386d227679d","modified":1447978999000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/core-util-is/float.patch","hash":"d7f073ceb05c6f6dd1bb852fc00f5379a3e41301","modified":1447978999000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/core-util-is/package.json","hash":"328aa4e2c7fdf8c717978eb03d4fd90a121984f2","modified":1464597455000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/isarray/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1449741845000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/core-util-is/test.js","hash":"2837ee1d57f385943ba5ccc7fd0ec4ed1cb8cfdd","modified":1447979358000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/isarray/.travis.yml","hash":"a88152a7be9167603b19549ff75cd80d22501731","modified":1449741845000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/isarray/Makefile","hash":"6ab383baa5dc5f695793d66f5b30f0c271e15807","modified":1449741845000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/isarray/README.md","hash":"b4a604915101db16bb5aebc51cb5385b40c709b6","modified":1449741845000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/isarray/component.json","hash":"88615028e91d7872104932a02b78a75f04df8465","modified":1449741845000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/isarray/index.js","hash":"5c3d1f3ad38be1bded1ec4e065f9463c9bbe359d","modified":1449741881000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/isarray/package.json","hash":"863bf299a5e8a2d30598c50f3cc6c2261637be35","modified":1464597455000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/isarray/test.js","hash":"d822e1a795c5658736d31abdaed0608e01d25183","modified":1449741845000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/process-nextick-args/.travis.yml","hash":"f4a67b72445cea74c4c35acfd9bef7bb1f8276a4","modified":1456494267000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/process-nextick-args/index.js","hash":"19704cf1716bd11b5fd95e20a35506b764aa541e","modified":1462394229000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/process-nextick-args/license.md","hash":"9def7167175d2ac68505dd2ae0c7b8dd63bc4c3d","modified":1441824016000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/process-nextick-args/package.json","hash":"c3d2386ea459957ab9bcd470b832f493a0f45ada","modified":1464597455000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/process-nextick-args/readme.md","hash":"3eba0a30f0a115fd767a0c8c9761d60d1dc768c0","modified":1441824016000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/process-nextick-args/test.js","hash":"279a062028d86a4ee0ab2ab800ecf7ca29f4905e","modified":1441824185000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/string_decoder/.npmignore","hash":"fc05bac99247f420fd3eee41f17afeb48f06a76e","modified":1392198673000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/string_decoder/LICENSE","hash":"8344f8cf34d06153cd7ffc797c070e00d69eb442","modified":1390012773000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/string_decoder/README.md","hash":"c8dac065c0a3043936a7c07ea1d698234c3ad159","modified":1390012773000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/string_decoder/index.js","hash":"91f40da3177881cf70b87520444b755e1d9592ec","modified":1408767880000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/string_decoder/package.json","hash":"8ca34615ebf56c41d05b2c2e448285255948b3a6","modified":1464597455000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/util-deprecate/History.md","hash":"1fc5b9cf603a0b6abeb852b35bec607a411e5b9b","modified":1444243047000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/util-deprecate/LICENSE","hash":"cbde92577cb69b3b45dd33f8dc600732cf9e14cb","modified":1416945941000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/util-deprecate/README.md","hash":"8e590b24df7b037031e571b7b2b9600217b83ae0","modified":1416945941000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/util-deprecate/browser.js","hash":"335965112d6117af8926dce4497a1fb9fca022eb","modified":1444242970000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/util-deprecate/node.js","hash":"26bb9fcabaf57f0bb50e5e026c13de394bc0c478","modified":1416945941000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/util-deprecate/package.json","hash":"4c8b8927564f1bfc3ebc26674111f2b1df9b9a77","modified":1464597455000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/typedarray/test/server/undef_globals.js","hash":"ba4353da7ce4b686c6e6fbe3acfa32dedaa46ef4","modified":1386647008000},{"_id":"themes/icarus/node_modules/hexo-generator-json-content/node_modules/hexo-util/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/concat-stream/node_modules/readable-stream/node_modules/core-util-is/lib/util.js","hash":"7d34435928ee9228995c04eaa7bdcef875c41e65","modified":1447979840000},{"_id":"public/archives/2015/page/2/index.html","hash":"1bcd8ea7be2ab066abd0cd63d4034046ebacbb0e","modified":1465882325830},{"_id":"public/archives/2016/page/3/index.html","hash":"58ea1bc953e6920a4b09b4e4ae84f59a143fc5cc","modified":1465882325830},{"_id":"public/tags/Node-js/index.html","hash":"fd9d1df1600d61fb1630142a2478ad7cd683a29d","modified":1465882325831},{"_id":"public/tags/webpack/index.html","hash":"9ac22c5e2919d7de703a998c5d977b168da12618","modified":1465882325831},{"_id":"public/tags/工具/index.html","hash":"b5df3e14c27a6845bc6990222b1456943c0611f0","modified":1465882325831},{"_id":"public/about/index.html","hash":"0bcfcf9b3140e7c9f6ee58054af6ed12099df123","modified":1465882325831},{"_id":"public/contribute/index.html","hash":"a90d4041bbab94054c3966742e8266e541e80e16","modified":1465882325831},{"_id":"public/lesson/index.html","hash":"7698fa4933ad4950b67764b3926cb8edf03556b2","modified":1465882325831},{"_id":"public/weekly/index.html","hash":"fcd7382dfd59eeaef590f5a1591bced39338b708","modified":1465882325831},{"_id":"public/2016/06/11/keduo-weekly-2/index.html","hash":"c847e88f22099d0f1771f937d1d995f856091c67","modified":1465882325831},{"_id":"public/2016/06/02/keduo-weekly-1/index.html","hash":"11913ceecc706bf39434b303b42746150992ed7f","modified":1465882325831},{"_id":"public/2016/06/01/used-CNodeAPI-for-development-of-react-webapp/index.html","hash":"5683e86878c18b719996d4b338c0a4cfd3d76296","modified":1465882325831},{"_id":"public/2016/05/23/follow-react-lesson/index.html","hash":"2ee0cdaf137f5784fe88dfc62bc222ba94095675","modified":1465882325831},{"_id":"public/2016/05/16/issues-1/index.html","hash":"0c67f55ed26a227452e82663b2557ee82b43a6c2","modified":1465882325831},{"_id":"public/2016/04/29/FED-Talk4/index.html","hash":"852721f1b019f575515645e5248479321bfba90e","modified":1465882325831},{"_id":"public/2016/04/27/issues-2/index.html","hash":"623366142600255be4dcdf1f3289c42ab3c52611","modified":1465882325831},{"_id":"public/2016/04/16/issues-3/index.html","hash":"ea82480b3ba27bfe340c3a3e7764c18df2dc91b6","modified":1465882325831},{"_id":"public/2016/04/14/issues-4/index.html","hash":"47eb5d959b37bcf4c8ce7b94df7fc04de40f683c","modified":1465882325832},{"_id":"public/2016/04/07/issues-5/index.html","hash":"b4be7f6e775069b01395936afc5b46610eee2739","modified":1465882325832},{"_id":"public/2016/04/04/issues-6/index.html","hash":"9b217819bff7f6d7cc73b579c0532980eac068e7","modified":1465882325832},{"_id":"public/2016/03/29/FED-Talk3/index.html","hash":"a48fabe5ec225dd9dcde5518d6ba630c4cab1d59","modified":1465882325832},{"_id":"public/2016/03/27/javascript-upload-image/index.html","hash":"4902744bb30e55a57a49badc1b046221dc154b75","modified":1465882325832},{"_id":"public/2016/03/20/issues-7/index.html","hash":"8dc683066ee3d528d2b06602029c14053b397eaf","modified":1465882325832},{"_id":"public/2016/02/29/used-webpack-in-pc/index.html","hash":"c1bcb71b5b47efc0aa735a18066df9034f8e827a","modified":1465882325832},{"_id":"public/2016/02/26/FED-Talk2/index.html","hash":"5b388ccc6af71488f5b65670bdcc6e364ff918a6","modified":1465882325832},{"_id":"public/2016/02/22/javascript-event-handler/index.html","hash":"fc17dd671834f0e416f6480b8910c1aee3878d5d","modified":1465882325832},{"_id":"public/2016/01/24/FED-Talk1/index.html","hash":"baae9c6156facb63e2115864d662f18b37b244ad","modified":1465882325832},{"_id":"public/2016/01/20/swift-file-managed/index.html","hash":"867ced126a0a0bb3dcbe84fd66f016d92a53580a","modified":1465882325832},{"_id":"public/2016/01/12/swift-errorhandler/index.html","hash":"f964470c9c5269f7c3f3b85d45499ceac67a18d5","modified":1465882325832},{"_id":"public/2016/01/05/swift-nsthread/index.html","hash":"c217bf7a0030df807b012aefb75ea04cdbdcea64","modified":1465882325832},{"_id":"public/2015/12/29/swift-nsoperation/index.html","hash":"a113687a5293f12d6e95c0ac633e6ab8081ad5e1","modified":1465882325832},{"_id":"public/2015/12/21/swift-gcd/index.html","hash":"fa842a62a3433170c540446ad8463180242844f0","modified":1465882325832},{"_id":"public/2015/12/16/javascript-learn/index.html","hash":"47f7196a74842cec96df329ebf81eb0c5257bd8c","modified":1465882325833},{"_id":"public/2015/12/14/swift-networking/index.html","hash":"4ff58e58b213b3750360e0b4b16209a6721da016","modified":1465882325833},{"_id":"public/2015/12/05/swift-datetime/index.html","hash":"671b1a262ed8f64e320ace022da9ffe49eab29cb","modified":1465882325833},{"_id":"public/2015/11/27/swift-runtime/index.html","hash":"1b645424bfed568d9606ea9e373adc96459cb9be","modified":1465882325833},{"_id":"public/2015/11/23/swift-uistackview/index.html","hash":"d0c967dd3b5372d8fcbdb34792922246ca699c69","modified":1465882325833},{"_id":"public/2015/11/22/swift-lazy/index.html","hash":"1d36c2e63c93fe084fd87eba29df57cc397beb5f","modified":1465882325833},{"_id":"public/2015/11/19/swift-uialertcontroller/index.html","hash":"ae4a9067d90022d22e70662dcca071dbc109f258","modified":1465882325833},{"_id":"public/2015/11/14/swift-pointer/index.html","hash":"733fe94927efdfb0fd8717f54a77b3ead6d21a20","modified":1465882325833},{"_id":"public/2015/11/09/swift-cite-count/index.html","hash":"a2d34e2ef5f662b0ef7271588d5d9029dd862c35","modified":1465882325833},{"_id":"public/archives/index.html","hash":"d87471a42064a3c87eb2334f90a8db627facf2d6","modified":1465882325833},{"_id":"public/archives/page/2/index.html","hash":"616dedbe2aeb1c015e3818c1173b9bf52381cb23","modified":1465882325833},{"_id":"public/archives/page/3/index.html","hash":"4827224d1176daf09db877e77e995b5a22a28f01","modified":1465882325833},{"_id":"public/archives/page/4/index.html","hash":"24d5eb2fec0faa0e1590cff390bff926f0ddbde6","modified":1465882325833},{"_id":"public/archives/2015/index.html","hash":"a7d5acc85c70bccbc3aa65558db8a538babf84eb","modified":1465882325833},{"_id":"public/archives/2015/11/index.html","hash":"5f21a4e8a5a4640a4b19432e3f3e8cece509bc79","modified":1465882325833},{"_id":"public/archives/2015/12/index.html","hash":"fed1329a0cb376d2bfaff070be6e64c390bdcb67","modified":1465882325833},{"_id":"public/archives/2016/index.html","hash":"06b4efaf4e449d026f747e43fd89b09b3a5e690f","modified":1465882325833},{"_id":"public/archives/2016/page/2/index.html","hash":"6b9be7ba967d23cdb9220653a055358fedc1bab3","modified":1465882325833},{"_id":"public/archives/2016/01/index.html","hash":"586adf250f4a41cfd421d45cad8b6fb2a7db9d52","modified":1465882325833},{"_id":"public/archives/2016/02/index.html","hash":"f92c530eddd701882945e8301d0ce2023c0a3e4f","modified":1465882325833},{"_id":"public/archives/2016/03/index.html","hash":"3d37c3c4ae2c6c4f575460dd7c95d1d756665d73","modified":1465882325833},{"_id":"public/archives/2016/04/index.html","hash":"c55ae82514b10f401ab9e8e134176d094108bdcf","modified":1465882325833},{"_id":"public/archives/2016/05/index.html","hash":"99ba9d61fef9df22aa244b68462ee82ae129e04d","modified":1465882325834},{"_id":"public/archives/2016/06/index.html","hash":"1c6ac4d32256bddeced6261539ffc1eace3320df","modified":1465882325834},{"_id":"public/index.html","hash":"2dce9267d44f1162cf6049e5f29e83f94e568ca6","modified":1465882325834},{"_id":"public/page/2/index.html","hash":"e256932ab21c1d764694999f224e9918a09a85cb","modified":1465882325834},{"_id":"public/page/4/index.html","hash":"0819d05935f6394a7f4fc0e07e6dce56bd7ad998","modified":1465882325834},{"_id":"public/page/3/index.html","hash":"5cd4cb0228fb86d33b6c757e0671e236b55003cb","modified":1465882325834},{"_id":"public/tags/课多周刊/index.html","hash":"bc347c4cd3de53214675404119c97615a0d4c353","modified":1465882325834},{"_id":"public/tags/前端漫谈/index.html","hash":"55c2ffa766be676edd80570f59e4dda36e53892b","modified":1465882325834},{"_id":"public/tags/实战课程/index.html","hash":"4a43001520a01e36b709221095d81c7169ef6513","modified":1465882325834},{"_id":"public/tags/Swift/index.html","hash":"8213511de2a8a343f729ef97aecf0e3dc4e32f6b","modified":1465882325834},{"_id":"public/tags/Swift/page/2/index.html","hash":"2c72fc4279ee81e712de9687ac7a3e90c8082833","modified":1465882325834},{"_id":"public/tags/JavaScript/index.html","hash":"6d9e3cfb53601fad7447c7fe24a71ebb1dffb269","modified":1465882325834},{"_id":"public/vendor/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1465882325842},{"_id":"public/vendor/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1465882325842},{"_id":"public/vendor/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1465882325842},{"_id":"public/vendor/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1465882325842},{"_id":"public/vendor/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1465882325842},{"_id":"public/vendor/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1465882325842},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1465882325842},{"_id":"public/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1465882325842},{"_id":"public/css/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1465882325842},{"_id":"public/vendor/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1465882325842},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.woff2","hash":"1075231650f579955905bb2f6527148a8e2b4b16","modified":1465882325842},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.eot","hash":"3e63fc9b3de4580f1f3bec0631436f755b80f167","modified":1465882325842},{"_id":"public/vendor/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1465882325842},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1465882325842},{"_id":"public/vendor/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1465882325842},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1465882325842},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1465882325842},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1465882325842},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1465882325842},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1465882325842},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1465882325842},{"_id":"public/vendor/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1465882325842},{"_id":"public/vendor/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1465882325843},{"_id":"public/vendor/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1465882325843},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1465882325843},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1465882325843},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1465882325843},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1465882325843},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1465882325843},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1465882325843},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1465882325843},{"_id":"public/vendor/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1465882325843},{"_id":"public/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1465882325843},{"_id":"public/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1465882325843},{"_id":"public/vendor/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1465882325843},{"_id":"public/vendor/font-awesome/fonts/FontAwesome.otf","hash":"cde9eb92c8a3ba23d648f76ea3931511f30813f4","modified":1465882326383},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.ttf","hash":"9088143b19979779b2116cef38b661f72d982e19","modified":1465882326385},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.woff","hash":"56ce13e71c2150d81bc972940584915181bd6081","modified":1465882326385},{"_id":"public/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1465882326391},{"_id":"public/js/main.js","hash":"78310af1f302bfa1b1d704537ef40d868ead2dcf","modified":1465882326391},{"_id":"public/vendor/fancybox/jquery.fancybox.css","hash":"9673e160d32c4811bb7e930ba1e20c36b2997fe1","modified":1465882326391},{"_id":"public/vendor/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1465882326391},{"_id":"public/vendor/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1465882326391},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1465882326391},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1465882326391},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1465882326391},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1465882326391},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1465882326391},{"_id":"public/css/style.css","hash":"c15e8d6a4ed254d0adee06d654d2d293c4265809","modified":1465882326391},{"_id":"public/vendor/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1465882326391},{"_id":"public/vendor/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1465882326391},{"_id":"public/vendor/font-awesome/css/font-awesome.min.css","hash":"8c15c6bd82c71e9ef1bb11cf24e502fe07518ac5","modified":1465882326391},{"_id":"public/vendor/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1465882326392},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.svg","hash":"26bb1c5ef100a1cd71923f1d5dc29fc797ef4639","modified":1465882326402}],"Category":[],"Data":[],"Page":[{"title":"关于 Mulgore Organization","date":"2016-05-24T06:41:49.000Z","banner":null,"_content":"\n在葱郁的mulgore平原，我们创建了mulgore（莫高雷）组织，人们为了应对“FED”快速强力的扩张，从而建立起防御性定居点：前端Talk。在这里我们和矮人们合作，挖掘互联网中最优秀的前端技术。并且准备在下一个阶段提供高效的自我驱动学习与管理服务。\n\n前端Talk会提供你在别处很难聚合的信息，关于JavaScript，Node.js，框架，技术分享，实战项目...等等，并且坚持原创，坚持周期性的稳定更新，更重要的是：将定居点分享给人们吧，我们需要你们的支持。\n\n要订阅 前端Talk，扫描二维码：\n\n![前端Talk](https://raw.githubusercontent.com/icepy/_posts/master/img/weixin.jpg)\n\n访问我们的组织：[mulgore](https://github.com/mulgore)\n\n创建者：\n\n*\t[icepy](https://github.com/icepy)\n*\t[yuanxj1024](https://github.com/yuanxj1024)\n","source":"about/index.md","raw":"title: 关于 Mulgore Organization\ndate: 2016-05-24 14:41:49\nbanner:\n---\n\n在葱郁的mulgore平原，我们创建了mulgore（莫高雷）组织，人们为了应对“FED”快速强力的扩张，从而建立起防御性定居点：前端Talk。在这里我们和矮人们合作，挖掘互联网中最优秀的前端技术。并且准备在下一个阶段提供高效的自我驱动学习与管理服务。\n\n前端Talk会提供你在别处很难聚合的信息，关于JavaScript，Node.js，框架，技术分享，实战项目...等等，并且坚持原创，坚持周期性的稳定更新，更重要的是：将定居点分享给人们吧，我们需要你们的支持。\n\n要订阅 前端Talk，扫描二维码：\n\n![前端Talk](https://raw.githubusercontent.com/icepy/_posts/master/img/weixin.jpg)\n\n访问我们的组织：[mulgore](https://github.com/mulgore)\n\n创建者：\n\n*\t[icepy](https://github.com/icepy)\n*\t[yuanxj1024](https://github.com/yuanxj1024)\n","updated":"2016-06-14T05:31:59.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cipf0hjzs0001uejr3bq6tkub","content":"<p>在葱郁的mulgore平原，我们创建了mulgore（莫高雷）组织，人们为了应对“FED”快速强力的扩张，从而建立起防御性定居点：前端Talk。在这里我们和矮人们合作，挖掘互联网中最优秀的前端技术。并且准备在下一个阶段提供高效的自我驱动学习与管理服务。</p>\n<p>前端Talk会提供你在别处很难聚合的信息，关于JavaScript，Node.js，框架，技术分享，实战项目…等等，并且坚持原创，坚持周期性的稳定更新，更重要的是：将定居点分享给人们吧，我们需要你们的支持。</p>\n<p>要订阅 前端Talk，扫描二维码：</p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/weixin.jpg\" alt=\"前端Talk\"></p>\n<p>访问我们的组织：<a href=\"https://github.com/mulgore\" target=\"_blank\" rel=\"external\">mulgore</a></p>\n<p>创建者：</p>\n<ul>\n<li><a href=\"https://github.com/icepy\" target=\"_blank\" rel=\"external\">icepy</a></li>\n<li><a href=\"https://github.com/yuanxj1024\" target=\"_blank\" rel=\"external\">yuanxj1024</a></li>\n</ul>\n","excerpt":"","more":"<p>在葱郁的mulgore平原，我们创建了mulgore（莫高雷）组织，人们为了应对“FED”快速强力的扩张，从而建立起防御性定居点：前端Talk。在这里我们和矮人们合作，挖掘互联网中最优秀的前端技术。并且准备在下一个阶段提供高效的自我驱动学习与管理服务。</p>\n<p>前端Talk会提供你在别处很难聚合的信息，关于JavaScript，Node.js，框架，技术分享，实战项目…等等，并且坚持原创，坚持周期性的稳定更新，更重要的是：将定居点分享给人们吧，我们需要你们的支持。</p>\n<p>要订阅 前端Talk，扫描二维码：</p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/weixin.jpg\" alt=\"前端Talk\"></p>\n<p>访问我们的组织：<a href=\"https://github.com/mulgore\">mulgore</a></p>\n<p>创建者：</p>\n<ul>\n<li><a href=\"https://github.com/icepy\">icepy</a></li>\n<li><a href=\"https://github.com/yuanxj1024\">yuanxj1024</a></li>\n</ul>\n"},{"title":"投稿渠道","date":"2016-05-31T05:05:37.000Z","_content":"\n## 文章投稿\n\n欢迎各位大大投稿，原创译文皆可。（译文需要获得原作者授权）\n\n目前我们主要运营 [https://mulgore.github.io](https://mulgore.github.io)，微博和微信公众号（搜索fed-talk），也会同步在《开发者头条》，稀土掘金等开发者社区媒体上推广你的文章。原则上如果你向《前端Talk》投稿那也意味着我们可以在上述的范围内使用你的文章，并保留你的著名，原链接，以及任何你需要被添加的信息，我们会及时的通知你发布的时间以及在末尾添加我们专属的微信公众号banner。\n\n投稿方式一：\n\n向 `xiangwenwe@foxmail.com` 发送邮件并且在邮件标题中著名 `[投稿]投稿稿件名称`。\n\n投稿方式二：\n\nFork [mulgore.github.io](https://github.com/mulgore/mulgore.github.io)，向我们发送PR，具体的参考可阅读 [PR投稿](https://github.com/mulgore/mulgore.github.io/tree/hexo)。\n\n## 课程合作\n\nMulgore组织非常乐意通过课程的方式将知识分享出来，如果你有优秀的课题可以通过邮件的方式与我们联系。（只接受原创课程）\n\n邮件地址：`xiangwenwe@foxmail.com`\n\n## 广告合作业务\n\n原则上我们不接受广告业务，为了更好的阅读体验。但如果有好用的产品（可以帮助到开发者），我们非常乐意进行推广合作。\n\n邮件地址：`xiangwenwe@foxmail.com`\n","source":"contribute/index.md","raw":"title: 投稿渠道\ndate: 2016-05-31 13:05:37\n---\n\n## 文章投稿\n\n欢迎各位大大投稿，原创译文皆可。（译文需要获得原作者授权）\n\n目前我们主要运营 [https://mulgore.github.io](https://mulgore.github.io)，微博和微信公众号（搜索fed-talk），也会同步在《开发者头条》，稀土掘金等开发者社区媒体上推广你的文章。原则上如果你向《前端Talk》投稿那也意味着我们可以在上述的范围内使用你的文章，并保留你的著名，原链接，以及任何你需要被添加的信息，我们会及时的通知你发布的时间以及在末尾添加我们专属的微信公众号banner。\n\n投稿方式一：\n\n向 `xiangwenwe@foxmail.com` 发送邮件并且在邮件标题中著名 `[投稿]投稿稿件名称`。\n\n投稿方式二：\n\nFork [mulgore.github.io](https://github.com/mulgore/mulgore.github.io)，向我们发送PR，具体的参考可阅读 [PR投稿](https://github.com/mulgore/mulgore.github.io/tree/hexo)。\n\n## 课程合作\n\nMulgore组织非常乐意通过课程的方式将知识分享出来，如果你有优秀的课题可以通过邮件的方式与我们联系。（只接受原创课程）\n\n邮件地址：`xiangwenwe@foxmail.com`\n\n## 广告合作业务\n\n原则上我们不接受广告业务，为了更好的阅读体验。但如果有好用的产品（可以帮助到开发者），我们非常乐意进行推广合作。\n\n邮件地址：`xiangwenwe@foxmail.com`\n","updated":"2016-06-14T05:31:59.000Z","path":"contribute/index.html","comments":1,"layout":"page","_id":"cipf0hjzv0003uejrumpnukd1","content":"<h2 id=\"文章投稿\"><a href=\"#文章投稿\" class=\"headerlink\" title=\"文章投稿\"></a>文章投稿</h2><p>欢迎各位大大投稿，原创译文皆可。（译文需要获得原作者授权）</p>\n<p>目前我们主要运营 <a href=\"https://mulgore.github.io\">https://mulgore.github.io</a>，微博和微信公众号（搜索fed-talk），也会同步在《开发者头条》，稀土掘金等开发者社区媒体上推广你的文章。原则上如果你向《前端Talk》投稿那也意味着我们可以在上述的范围内使用你的文章，并保留你的著名，原链接，以及任何你需要被添加的信息，我们会及时的通知你发布的时间以及在末尾添加我们专属的微信公众号banner。</p>\n<p>投稿方式一：</p>\n<p>向 <code>xiangwenwe@foxmail.com</code> 发送邮件并且在邮件标题中著名 <code>[投稿]投稿稿件名称</code>。</p>\n<p>投稿方式二：</p>\n<p>Fork <a href=\"https://github.com/mulgore/mulgore.github.io\" target=\"_blank\" rel=\"external\">mulgore.github.io</a>，向我们发送PR，具体的参考可阅读 <a href=\"https://github.com/mulgore/mulgore.github.io/tree/hexo\" target=\"_blank\" rel=\"external\">PR投稿</a>。</p>\n<h2 id=\"课程合作\"><a href=\"#课程合作\" class=\"headerlink\" title=\"课程合作\"></a>课程合作</h2><p>Mulgore组织非常乐意通过课程的方式将知识分享出来，如果你有优秀的课题可以通过邮件的方式与我们联系。（只接受原创课程）</p>\n<p>邮件地址：<code>xiangwenwe@foxmail.com</code></p>\n<h2 id=\"广告合作业务\"><a href=\"#广告合作业务\" class=\"headerlink\" title=\"广告合作业务\"></a>广告合作业务</h2><p>原则上我们不接受广告业务，为了更好的阅读体验。但如果有好用的产品（可以帮助到开发者），我们非常乐意进行推广合作。</p>\n<p>邮件地址：<code>xiangwenwe@foxmail.com</code></p>\n","excerpt":"","more":"<h2 id=\"文章投稿\"><a href=\"#文章投稿\" class=\"headerlink\" title=\"文章投稿\"></a>文章投稿</h2><p>欢迎各位大大投稿，原创译文皆可。（译文需要获得原作者授权）</p>\n<p>目前我们主要运营 <a href=\"https://mulgore.github.io\">https://mulgore.github.io</a>，微博和微信公众号（搜索fed-talk），也会同步在《开发者头条》，稀土掘金等开发者社区媒体上推广你的文章。原则上如果你向《前端Talk》投稿那也意味着我们可以在上述的范围内使用你的文章，并保留你的著名，原链接，以及任何你需要被添加的信息，我们会及时的通知你发布的时间以及在末尾添加我们专属的微信公众号banner。</p>\n<p>投稿方式一：</p>\n<p>向 <code>xiangwenwe@foxmail.com</code> 发送邮件并且在邮件标题中著名 <code>[投稿]投稿稿件名称</code>。</p>\n<p>投稿方式二：</p>\n<p>Fork <a href=\"https://github.com/mulgore/mulgore.github.io\">mulgore.github.io</a>，向我们发送PR，具体的参考可阅读 <a href=\"https://github.com/mulgore/mulgore.github.io/tree/hexo\">PR投稿</a>。</p>\n<h2 id=\"课程合作\"><a href=\"#课程合作\" class=\"headerlink\" title=\"课程合作\"></a>课程合作</h2><p>Mulgore组织非常乐意通过课程的方式将知识分享出来，如果你有优秀的课题可以通过邮件的方式与我们联系。（只接受原创课程）</p>\n<p>邮件地址：<code>xiangwenwe@foxmail.com</code></p>\n<h2 id=\"广告合作业务\"><a href=\"#广告合作业务\" class=\"headerlink\" title=\"广告合作业务\"></a>广告合作业务</h2><p>原则上我们不接受广告业务，为了更好的阅读体验。但如果有好用的产品（可以帮助到开发者），我们非常乐意进行推广合作。</p>\n<p>邮件地址：<code>xiangwenwe@foxmail.com</code></p>\n"},{"title":"实战课程","date":"2016-05-24T09:05:37.000Z","_content":"\n### 课程列表\n\n我们会逐步开放学习前端技能的实战课程，欢迎拍砖。\n\n**react**\n\n名称 | 描述\n--- | ---\n[和我一起实战react](/2016/05/23/follow-react-lesson/) | 面向初中级开发者的实用教程，通过编写一个UI库来加深对react的理解\n[基于CNodeAPI使用react开发一个完整的Web应用](/2016/06/01/used-CNodeAPI-for-development-of-react-webapp/) | 面向中级开发者的实战教程，通过豆瓣第三方API编写一个完整的Web应用\n","source":"lesson/index.md","raw":"title: 实战课程\ndate: 2016-05-24 17:05:37\n---\n\n### 课程列表\n\n我们会逐步开放学习前端技能的实战课程，欢迎拍砖。\n\n**react**\n\n名称 | 描述\n--- | ---\n[和我一起实战react](/2016/05/23/follow-react-lesson/) | 面向初中级开发者的实用教程，通过编写一个UI库来加深对react的理解\n[基于CNodeAPI使用react开发一个完整的Web应用](/2016/06/01/used-CNodeAPI-for-development-of-react-webapp/) | 面向中级开发者的实战教程，通过豆瓣第三方API编写一个完整的Web应用\n","updated":"2016-06-14T05:31:59.000Z","path":"lesson/index.html","comments":1,"layout":"page","_id":"cipf0hk000006uejrywx464x4","content":"<h3 id=\"课程列表\"><a href=\"#课程列表\" class=\"headerlink\" title=\"课程列表\"></a>课程列表</h3><p>我们会逐步开放学习前端技能的实战课程，欢迎拍砖。</p>\n<p><strong>react</strong></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"/2016/05/23/follow-react-lesson/\">和我一起实战react</a></td>\n<td>面向初中级开发者的实用教程，通过编写一个UI库来加深对react的理解</td>\n</tr>\n<tr>\n<td><a href=\"/2016/06/01/used-CNodeAPI-for-development-of-react-webapp/\">基于CNodeAPI使用react开发一个完整的Web应用</a></td>\n<td>面向中级开发者的实战教程，通过豆瓣第三方API编写一个完整的Web应用</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h3 id=\"课程列表\"><a href=\"#课程列表\" class=\"headerlink\" title=\"课程列表\"></a>课程列表</h3><p>我们会逐步开放学习前端技能的实战课程，欢迎拍砖。</p>\n<p><strong>react</strong></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"/2016/05/23/follow-react-lesson/\">和我一起实战react</a></td>\n<td>面向初中级开发者的实用教程，通过编写一个UI库来加深对react的理解</td>\n</tr>\n<tr>\n<td><a href=\"/2016/06/01/used-CNodeAPI-for-development-of-react-webapp/\">基于CNodeAPI使用react开发一个完整的Web应用</a></td>\n<td>面向中级开发者的实战教程，通过豆瓣第三方API编写一个完整的Web应用</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"课多周刊","date":"2016-01-24T06:00:40.000Z","_content":"\n## 课多周刊介绍\n\n《课多周刊》是由 **微信公众号：前端Talk** 维护的一周为一期的期刊，专注分享一周精选的 **前端开发** 资料，每周五发布在网站上。\n\n- 为前端工程师精心筛选\n- 不包含任何垃圾信息\n- 不想阅读可以随时关闭浏览器\n- 聆听用户的声音，积极接受反馈\n\n**扫二维码** 或搜索 **fed-talk** ，关注我们的微信公众号。\n\n<div align=\"center\">\n<img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/weixin.jpg\" alt=\"\"/><br>\n</div>\n\n\n周刊列表：\n\n- [课多周刊第1期](/2016/06/02/keduo-weekly-1/)\n- [课多周刊第2期](/2016/06/11/keduo-weekly-2/)\n\n---\n\n升级之前的月刊，可访问：\n\n*\t[第四期](/2016/04/29/FED-Talk4/)\n*\t[第三期](/2016/03/29/FED-Talk3/)\n*\t[第二期](/2016/02/26/FED-Talk2/)\n*\t[第一期](/2016/01/24/FED-Talk1/)\n","source":"weekly/index.md","raw":"title: 课多周刊\ndate: 2016/01/24 14:00:40\n---\n\n## 课多周刊介绍\n\n《课多周刊》是由 **微信公众号：前端Talk** 维护的一周为一期的期刊，专注分享一周精选的 **前端开发** 资料，每周五发布在网站上。\n\n- 为前端工程师精心筛选\n- 不包含任何垃圾信息\n- 不想阅读可以随时关闭浏览器\n- 聆听用户的声音，积极接受反馈\n\n**扫二维码** 或搜索 **fed-talk** ，关注我们的微信公众号。\n\n<div align=\"center\">\n<img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/weixin.jpg\" alt=\"\"/><br>\n</div>\n\n\n周刊列表：\n\n- [课多周刊第1期](/2016/06/02/keduo-weekly-1/)\n- [课多周刊第2期](/2016/06/11/keduo-weekly-2/)\n\n---\n\n升级之前的月刊，可访问：\n\n*\t[第四期](/2016/04/29/FED-Talk4/)\n*\t[第三期](/2016/03/29/FED-Talk3/)\n*\t[第二期](/2016/02/26/FED-Talk2/)\n*\t[第一期](/2016/01/24/FED-Talk1/)\n","updated":"2016-06-14T05:31:59.000Z","path":"weekly/index.html","comments":1,"layout":"page","_id":"cipf0hk2v0028uejrw5y9h7p7","content":"<h2 id=\"课多周刊介绍\"><a href=\"#课多周刊介绍\" class=\"headerlink\" title=\"课多周刊介绍\"></a>课多周刊介绍</h2><p>《课多周刊》是由 <strong>微信公众号：前端Talk</strong> 维护的一周为一期的期刊，专注分享一周精选的 <strong>前端开发</strong> 资料，每周五发布在网站上。</p>\n<ul>\n<li>为前端工程师精心筛选</li>\n<li>不包含任何垃圾信息</li>\n<li>不想阅读可以随时关闭浏览器</li>\n<li>聆听用户的声音，积极接受反馈</li>\n</ul>\n<p><strong>扫二维码</strong> 或搜索 <strong>fed-talk</strong> ，关注我们的微信公众号。</p>\n<div align=\"center\"><br><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/weixin.jpg\" alt=\"\"><br><br></div>\n\n\n<p>周刊列表：</p>\n<ul>\n<li><a href=\"/2016/06/02/keduo-weekly-1/\">课多周刊第1期</a></li>\n<li><a href=\"/2016/06/11/keduo-weekly-2/\">课多周刊第2期</a></li>\n</ul>\n<hr>\n<p>升级之前的月刊，可访问：</p>\n<ul>\n<li><a href=\"/2016/04/29/FED-Talk4/\">第四期</a></li>\n<li><a href=\"/2016/03/29/FED-Talk3/\">第三期</a></li>\n<li><a href=\"/2016/02/26/FED-Talk2/\">第二期</a></li>\n<li><a href=\"/2016/01/24/FED-Talk1/\">第一期</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"课多周刊介绍\"><a href=\"#课多周刊介绍\" class=\"headerlink\" title=\"课多周刊介绍\"></a>课多周刊介绍</h2><p>《课多周刊》是由 <strong>微信公众号：前端Talk</strong> 维护的一周为一期的期刊，专注分享一周精选的 <strong>前端开发</strong> 资料，每周五发布在网站上。</p>\n<ul>\n<li>为前端工程师精心筛选</li>\n<li>不包含任何垃圾信息</li>\n<li>不想阅读可以随时关闭浏览器</li>\n<li>聆听用户的声音，积极接受反馈</li>\n</ul>\n<p><strong>扫二维码</strong> 或搜索 <strong>fed-talk</strong> ，关注我们的微信公众号。</p>\n<div align=\"center\"><br><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/weixin.jpg\" alt=\"\"/><br><br></div>\n\n\n<p>周刊列表：</p>\n<ul>\n<li><a href=\"/2016/06/02/keduo-weekly-1/\">课多周刊第1期</a></li>\n<li><a href=\"/2016/06/11/keduo-weekly-2/\">课多周刊第2期</a></li>\n</ul>\n<hr>\n<p>升级之前的月刊，可访问：</p>\n<ul>\n<li><a href=\"/2016/04/29/FED-Talk4/\">第四期</a></li>\n<li><a href=\"/2016/03/29/FED-Talk3/\">第三期</a></li>\n<li><a href=\"/2016/02/26/FED-Talk2/\">第二期</a></li>\n<li><a href=\"/2016/01/24/FED-Talk1/\">第一期</a></li>\n</ul>\n"}],"Post":[{"title":"FED-Talk月刊第一期（2016年1月）","date":"2016-01-24T06:00:40.000Z","banner":"http://o80ub63i5.bkt.clouddn.com/weekly/crocus-1261310_640.jpg","_content":"\n## 简介\n\n原《FED-Talk月刊》正式升级为《课多周刊》，继续为大家精选一周的前端专业技术。\n\n微信公众号 搜索 **fed-talk**\n\n## 月刊\n\n**月刊推荐：**\n\n- [前端开发基础－JavaScript 理论版](https://github.com/icepy/_posts/issues/12)\n\n*认知理论*\n\n- [近几年前端技术盘点以及 2016 年技术发展方向](http://www.barretlee.com/blog/2015/12/10/after-framework-we-gonna-to-hug-data/)\n\n*感受最近几年的变化，把握社区发展的趋势与动态。*\n\n\n**JavaScript**\n\n- [JavaScript基础 示例版](https://github.com/mzkmzk/Read/blob/master/ji_chu_.md)\n- [JavaScript事件委托的技术原理](http://www.webhek.com/event-delegate)\n- [使用requestAnimationFrame优化JavaScript动画性能](http://www.webhek.com/using-requestanimationframe)\n- [JS 一定要放在 Body 的最底部么？聊聊浏览器的渲染机制](http://segmentfault.com/a/1190000004292479)\n- [Web动画性能指南](http://alexorz.github.io/animation-performance-guide/)\n- [剖析Promise内部结构，一步一步实现一个完整的、能通过所有Test case的Promise类](https://github.com/xieranmaya/blog/issues/3)\n- [基于 Webpack 和 ES6 打造 JavaScript 类库](https://github.com/cssmagic/blog/issues/56)\n- [JavaScript Promise迷你书（中文版）](http://liubin.org/promises-book/)\n- [React.js 2016最佳实践](http://www.alloyteam.com/2016/01/reactjs-best-practices-for-2016/)\n- [Ballade: 重新诠释 Flux 架构](http://stylechen.com/ballade-reinterpreted-flux.html)\n- [Flux 架构入门教程](http://www.ruanyifeng.com/blog/2016/01/flux.html)\n- [karma 测试框架的前世今生](http://taobaofed.org/blog/2016/01/08/karma-origin/)\n- [Angular 2 VS. React： 血色将至](http://www.zcfy.cc/article/142)\n\n**CSS**\n\n- [CSS设置不同块级流方向时的属性百分比计算](http://segmentfault.com/a/1190000004257151)\n- [复选框的 CSS 魔法](http://jinlong.github.io/2016/01/14/checkbox-trickery-with-css/)\n- [CSS分层动画可以让元素沿弧形路径运动](http://jinlong.github.io/2016/01/14/moving-along-a-curved-path-in-css-with-layered-animation/)\n- [CSS代码重构与优化之路](http://luopq.com/2016/01/05/css-optimize/)\n- [时尚且健壮: 实现更优秀的CSS](http://www.infoq.com/cn/articles/guide-to-better-css)\n\n**Node.js**\n\n- [国内Nodejs 2015汇总](https://cnodejs.org/topic/5696e43e6272216e51bff67e)\n\n** Hybrid & Native **\n\n*暂无*\n\n**工具**\n\n- [PostCSS简介](http://www.zcfy.cc/article/81)\n- [像 Sublime Text 一样使用 Chrome DevTools](http://chinagdg.org/2015/12/%E5%83%8F-sublime-text-%E4%B8%80%E6%A0%B7%E4%BD%BF%E7%94%A8-chrome-devtools/)\n- [Sublime Text 3最好的功能、插件和设置](http://www.css88.com/archives/5858)\n- [webpack使用优化](http://www.alloyteam.com/2016/01/webpack-use-optimization/)\n\n**通信与安全**\n\n- [全栈工程师眼中的HTTP](http://www.epubit.com.cn/article/378)\n- [缓存使用与设计系列文章](http://carlosfu.iteye.com/blog/2269678)\n- [浏览器缓存知识小结及应用](http://www.cnblogs.com/lyzg/p/5125934.html)\n- [透过浏览器看HTTP缓存](http://www.cnblogs.com/skylar/p/browser-http-caching.html)\n- [理解RESTFul架构](http://mccxj.github.io/blog/20130530_introduce-to-rest.html)\n\n**数据结构与算法**\n\n- [我的算法学习之路](http://zh.lucida.me/blog/on-learning-algorithms/)\n- [常用数据结构及复杂度](http://www.cnblogs.com/gaochundong/p/3813252.html)\n\n**前端说说**\n\n- [我感觉到的前端变化](http://bbear.me/wo-suo-gan-jue-dao-de-qian-duan-bian-hua/)\n- [如何像后端一样写前端代码？](http://news.oneapm.com/hellomessage-url/)\n- [谈谈前端『新』技术](http://weibo.com/p/1001603934708609234550)\n- [20位最值得关注的 JS 开发者](http://www.zcfy.cc/article/111)\n- [Web开发学习之路是否有尽头](http://www.ganiks.me/how-to-avoid-listing-everything-but-carrying-out-little/)\n- [近几年前端技术盘点以及 2016 年技术发展方向](http://www.barretlee.com/blog/2015/12/10/after-framework-we-gonna-to-hug-data/)\n- [2015前端生态发展回顾](https://github.com/kuitos/kuitos.github.io/issues/32)\n","source":"_posts/FED-Talk1.md","raw":"title: FED-Talk月刊第一期（2016年1月）\ndate: 2016-01-24 14:00:40\ntags: 课多周刊\nbanner: http://o80ub63i5.bkt.clouddn.com/weekly/crocus-1261310_640.jpg\n---\n\n## 简介\n\n原《FED-Talk月刊》正式升级为《课多周刊》，继续为大家精选一周的前端专业技术。\n\n微信公众号 搜索 **fed-talk**\n\n## 月刊\n\n**月刊推荐：**\n\n- [前端开发基础－JavaScript 理论版](https://github.com/icepy/_posts/issues/12)\n\n*认知理论*\n\n- [近几年前端技术盘点以及 2016 年技术发展方向](http://www.barretlee.com/blog/2015/12/10/after-framework-we-gonna-to-hug-data/)\n\n*感受最近几年的变化，把握社区发展的趋势与动态。*\n\n\n**JavaScript**\n\n- [JavaScript基础 示例版](https://github.com/mzkmzk/Read/blob/master/ji_chu_.md)\n- [JavaScript事件委托的技术原理](http://www.webhek.com/event-delegate)\n- [使用requestAnimationFrame优化JavaScript动画性能](http://www.webhek.com/using-requestanimationframe)\n- [JS 一定要放在 Body 的最底部么？聊聊浏览器的渲染机制](http://segmentfault.com/a/1190000004292479)\n- [Web动画性能指南](http://alexorz.github.io/animation-performance-guide/)\n- [剖析Promise内部结构，一步一步实现一个完整的、能通过所有Test case的Promise类](https://github.com/xieranmaya/blog/issues/3)\n- [基于 Webpack 和 ES6 打造 JavaScript 类库](https://github.com/cssmagic/blog/issues/56)\n- [JavaScript Promise迷你书（中文版）](http://liubin.org/promises-book/)\n- [React.js 2016最佳实践](http://www.alloyteam.com/2016/01/reactjs-best-practices-for-2016/)\n- [Ballade: 重新诠释 Flux 架构](http://stylechen.com/ballade-reinterpreted-flux.html)\n- [Flux 架构入门教程](http://www.ruanyifeng.com/blog/2016/01/flux.html)\n- [karma 测试框架的前世今生](http://taobaofed.org/blog/2016/01/08/karma-origin/)\n- [Angular 2 VS. React： 血色将至](http://www.zcfy.cc/article/142)\n\n**CSS**\n\n- [CSS设置不同块级流方向时的属性百分比计算](http://segmentfault.com/a/1190000004257151)\n- [复选框的 CSS 魔法](http://jinlong.github.io/2016/01/14/checkbox-trickery-with-css/)\n- [CSS分层动画可以让元素沿弧形路径运动](http://jinlong.github.io/2016/01/14/moving-along-a-curved-path-in-css-with-layered-animation/)\n- [CSS代码重构与优化之路](http://luopq.com/2016/01/05/css-optimize/)\n- [时尚且健壮: 实现更优秀的CSS](http://www.infoq.com/cn/articles/guide-to-better-css)\n\n**Node.js**\n\n- [国内Nodejs 2015汇总](https://cnodejs.org/topic/5696e43e6272216e51bff67e)\n\n** Hybrid & Native **\n\n*暂无*\n\n**工具**\n\n- [PostCSS简介](http://www.zcfy.cc/article/81)\n- [像 Sublime Text 一样使用 Chrome DevTools](http://chinagdg.org/2015/12/%E5%83%8F-sublime-text-%E4%B8%80%E6%A0%B7%E4%BD%BF%E7%94%A8-chrome-devtools/)\n- [Sublime Text 3最好的功能、插件和设置](http://www.css88.com/archives/5858)\n- [webpack使用优化](http://www.alloyteam.com/2016/01/webpack-use-optimization/)\n\n**通信与安全**\n\n- [全栈工程师眼中的HTTP](http://www.epubit.com.cn/article/378)\n- [缓存使用与设计系列文章](http://carlosfu.iteye.com/blog/2269678)\n- [浏览器缓存知识小结及应用](http://www.cnblogs.com/lyzg/p/5125934.html)\n- [透过浏览器看HTTP缓存](http://www.cnblogs.com/skylar/p/browser-http-caching.html)\n- [理解RESTFul架构](http://mccxj.github.io/blog/20130530_introduce-to-rest.html)\n\n**数据结构与算法**\n\n- [我的算法学习之路](http://zh.lucida.me/blog/on-learning-algorithms/)\n- [常用数据结构及复杂度](http://www.cnblogs.com/gaochundong/p/3813252.html)\n\n**前端说说**\n\n- [我感觉到的前端变化](http://bbear.me/wo-suo-gan-jue-dao-de-qian-duan-bian-hua/)\n- [如何像后端一样写前端代码？](http://news.oneapm.com/hellomessage-url/)\n- [谈谈前端『新』技术](http://weibo.com/p/1001603934708609234550)\n- [20位最值得关注的 JS 开发者](http://www.zcfy.cc/article/111)\n- [Web开发学习之路是否有尽头](http://www.ganiks.me/how-to-avoid-listing-everything-but-carrying-out-little/)\n- [近几年前端技术盘点以及 2016 年技术发展方向](http://www.barretlee.com/blog/2015/12/10/after-framework-we-gonna-to-hug-data/)\n- [2015前端生态发展回顾](https://github.com/kuitos/kuitos.github.io/issues/32)\n","slug":"FED-Talk1","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hjzn0000uejr99lcz9uj","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>原《FED-Talk月刊》正式升级为《课多周刊》，继续为大家精选一周的前端专业技术。</p>\n<p>微信公众号 搜索 <strong>fed-talk</strong></p>\n<h2 id=\"月刊\"><a href=\"#月刊\" class=\"headerlink\" title=\"月刊\"></a>月刊</h2><p><strong>月刊推荐：</strong></p>\n<ul>\n<li><a href=\"https://github.com/icepy/_posts/issues/12\" target=\"_blank\" rel=\"external\">前端开发基础－JavaScript 理论版</a></li>\n</ul>\n<p><em>认知理论</em></p>\n<ul>\n<li><a href=\"http://www.barretlee.com/blog/2015/12/10/after-framework-we-gonna-to-hug-data/\" target=\"_blank\" rel=\"external\">近几年前端技术盘点以及 2016 年技术发展方向</a></li>\n</ul>\n<p><em>感受最近几年的变化，把握社区发展的趋势与动态。</em></p>\n<p><strong>JavaScript</strong></p>\n<ul>\n<li><a href=\"https://github.com/mzkmzk/Read/blob/master/ji_chu_.md\" target=\"_blank\" rel=\"external\">JavaScript基础 示例版</a></li>\n<li><a href=\"http://www.webhek.com/event-delegate\" target=\"_blank\" rel=\"external\">JavaScript事件委托的技术原理</a></li>\n<li><a href=\"http://www.webhek.com/using-requestanimationframe\" target=\"_blank\" rel=\"external\">使用requestAnimationFrame优化JavaScript动画性能</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000004292479\" target=\"_blank\" rel=\"external\">JS 一定要放在 Body 的最底部么？聊聊浏览器的渲染机制</a></li>\n<li><a href=\"http://alexorz.github.io/animation-performance-guide/\" target=\"_blank\" rel=\"external\">Web动画性能指南</a></li>\n<li><a href=\"https://github.com/xieranmaya/blog/issues/3\" target=\"_blank\" rel=\"external\">剖析Promise内部结构，一步一步实现一个完整的、能通过所有Test case的Promise类</a></li>\n<li><a href=\"https://github.com/cssmagic/blog/issues/56\" target=\"_blank\" rel=\"external\">基于 Webpack 和 ES6 打造 JavaScript 类库</a></li>\n<li><a href=\"http://liubin.org/promises-book/\" target=\"_blank\" rel=\"external\">JavaScript Promise迷你书（中文版）</a></li>\n<li><a href=\"http://www.alloyteam.com/2016/01/reactjs-best-practices-for-2016/\" target=\"_blank\" rel=\"external\">React.js 2016最佳实践</a></li>\n<li><a href=\"http://stylechen.com/ballade-reinterpreted-flux.html\" target=\"_blank\" rel=\"external\">Ballade: 重新诠释 Flux 架构</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/01/flux.html\" target=\"_blank\" rel=\"external\">Flux 架构入门教程</a></li>\n<li><a href=\"http://taobaofed.org/blog/2016/01/08/karma-origin/\" target=\"_blank\" rel=\"external\">karma 测试框架的前世今生</a></li>\n<li><a href=\"http://www.zcfy.cc/article/142\" target=\"_blank\" rel=\"external\">Angular 2 VS. React： 血色将至</a></li>\n</ul>\n<p><strong>CSS</strong></p>\n<ul>\n<li><a href=\"http://segmentfault.com/a/1190000004257151\" target=\"_blank\" rel=\"external\">CSS设置不同块级流方向时的属性百分比计算</a></li>\n<li><a href=\"http://jinlong.github.io/2016/01/14/checkbox-trickery-with-css/\" target=\"_blank\" rel=\"external\">复选框的 CSS 魔法</a></li>\n<li><a href=\"http://jinlong.github.io/2016/01/14/moving-along-a-curved-path-in-css-with-layered-animation/\" target=\"_blank\" rel=\"external\">CSS分层动画可以让元素沿弧形路径运动</a></li>\n<li><a href=\"http://luopq.com/2016/01/05/css-optimize/\" target=\"_blank\" rel=\"external\">CSS代码重构与优化之路</a></li>\n<li><a href=\"http://www.infoq.com/cn/articles/guide-to-better-css\" target=\"_blank\" rel=\"external\">时尚且健壮: 实现更优秀的CSS</a></li>\n</ul>\n<p><strong>Node.js</strong></p>\n<ul>\n<li><a href=\"https://cnodejs.org/topic/5696e43e6272216e51bff67e\" target=\"_blank\" rel=\"external\">国内Nodejs 2015汇总</a></li>\n</ul>\n<p><strong> Hybrid &amp; Native </strong></p>\n<p><em>暂无</em></p>\n<p><strong>工具</strong></p>\n<ul>\n<li><a href=\"http://www.zcfy.cc/article/81\" target=\"_blank\" rel=\"external\">PostCSS简介</a></li>\n<li><a href=\"http://chinagdg.org/2015/12/%E5%83%8F-sublime-text-%E4%B8%80%E6%A0%B7%E4%BD%BF%E7%94%A8-chrome-devtools/\" target=\"_blank\" rel=\"external\">像 Sublime Text 一样使用 Chrome DevTools</a></li>\n<li><a href=\"http://www.css88.com/archives/5858\" target=\"_blank\" rel=\"external\">Sublime Text 3最好的功能、插件和设置</a></li>\n<li><a href=\"http://www.alloyteam.com/2016/01/webpack-use-optimization/\" target=\"_blank\" rel=\"external\">webpack使用优化</a></li>\n</ul>\n<p><strong>通信与安全</strong></p>\n<ul>\n<li><a href=\"http://www.epubit.com.cn/article/378\" target=\"_blank\" rel=\"external\">全栈工程师眼中的HTTP</a></li>\n<li><a href=\"http://carlosfu.iteye.com/blog/2269678\" target=\"_blank\" rel=\"external\">缓存使用与设计系列文章</a></li>\n<li><a href=\"http://www.cnblogs.com/lyzg/p/5125934.html\" target=\"_blank\" rel=\"external\">浏览器缓存知识小结及应用</a></li>\n<li><a href=\"http://www.cnblogs.com/skylar/p/browser-http-caching.html\" target=\"_blank\" rel=\"external\">透过浏览器看HTTP缓存</a></li>\n<li><a href=\"http://mccxj.github.io/blog/20130530_introduce-to-rest.html\" target=\"_blank\" rel=\"external\">理解RESTFul架构</a></li>\n</ul>\n<p><strong>数据结构与算法</strong></p>\n<ul>\n<li><a href=\"http://zh.lucida.me/blog/on-learning-algorithms/\" target=\"_blank\" rel=\"external\">我的算法学习之路</a></li>\n<li><a href=\"http://www.cnblogs.com/gaochundong/p/3813252.html\" target=\"_blank\" rel=\"external\">常用数据结构及复杂度</a></li>\n</ul>\n<p><strong>前端说说</strong></p>\n<ul>\n<li><a href=\"http://bbear.me/wo-suo-gan-jue-dao-de-qian-duan-bian-hua/\" target=\"_blank\" rel=\"external\">我感觉到的前端变化</a></li>\n<li><a href=\"http://news.oneapm.com/hellomessage-url/\" target=\"_blank\" rel=\"external\">如何像后端一样写前端代码？</a></li>\n<li><a href=\"http://weibo.com/p/1001603934708609234550\" target=\"_blank\" rel=\"external\">谈谈前端『新』技术</a></li>\n<li><a href=\"http://www.zcfy.cc/article/111\" target=\"_blank\" rel=\"external\">20位最值得关注的 JS 开发者</a></li>\n<li><a href=\"http://www.ganiks.me/how-to-avoid-listing-everything-but-carrying-out-little/\" target=\"_blank\" rel=\"external\">Web开发学习之路是否有尽头</a></li>\n<li><a href=\"http://www.barretlee.com/blog/2015/12/10/after-framework-we-gonna-to-hug-data/\" target=\"_blank\" rel=\"external\">近几年前端技术盘点以及 2016 年技术发展方向</a></li>\n<li><a href=\"https://github.com/kuitos/kuitos.github.io/issues/32\" target=\"_blank\" rel=\"external\">2015前端生态发展回顾</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>原《FED-Talk月刊》正式升级为《课多周刊》，继续为大家精选一周的前端专业技术。</p>\n<p>微信公众号 搜索 <strong>fed-talk</strong></p>\n<h2 id=\"月刊\"><a href=\"#月刊\" class=\"headerlink\" title=\"月刊\"></a>月刊</h2><p><strong>月刊推荐：</strong></p>\n<ul>\n<li><a href=\"https://github.com/icepy/_posts/issues/12\">前端开发基础－JavaScript 理论版</a></li>\n</ul>\n<p><em>认知理论</em></p>\n<ul>\n<li><a href=\"http://www.barretlee.com/blog/2015/12/10/after-framework-we-gonna-to-hug-data/\">近几年前端技术盘点以及 2016 年技术发展方向</a></li>\n</ul>\n<p><em>感受最近几年的变化，把握社区发展的趋势与动态。</em></p>\n<p><strong>JavaScript</strong></p>\n<ul>\n<li><a href=\"https://github.com/mzkmzk/Read/blob/master/ji_chu_.md\">JavaScript基础 示例版</a></li>\n<li><a href=\"http://www.webhek.com/event-delegate\">JavaScript事件委托的技术原理</a></li>\n<li><a href=\"http://www.webhek.com/using-requestanimationframe\">使用requestAnimationFrame优化JavaScript动画性能</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000004292479\">JS 一定要放在 Body 的最底部么？聊聊浏览器的渲染机制</a></li>\n<li><a href=\"http://alexorz.github.io/animation-performance-guide/\">Web动画性能指南</a></li>\n<li><a href=\"https://github.com/xieranmaya/blog/issues/3\">剖析Promise内部结构，一步一步实现一个完整的、能通过所有Test case的Promise类</a></li>\n<li><a href=\"https://github.com/cssmagic/blog/issues/56\">基于 Webpack 和 ES6 打造 JavaScript 类库</a></li>\n<li><a href=\"http://liubin.org/promises-book/\">JavaScript Promise迷你书（中文版）</a></li>\n<li><a href=\"http://www.alloyteam.com/2016/01/reactjs-best-practices-for-2016/\">React.js 2016最佳实践</a></li>\n<li><a href=\"http://stylechen.com/ballade-reinterpreted-flux.html\">Ballade: 重新诠释 Flux 架构</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/01/flux.html\">Flux 架构入门教程</a></li>\n<li><a href=\"http://taobaofed.org/blog/2016/01/08/karma-origin/\">karma 测试框架的前世今生</a></li>\n<li><a href=\"http://www.zcfy.cc/article/142\">Angular 2 VS. React： 血色将至</a></li>\n</ul>\n<p><strong>CSS</strong></p>\n<ul>\n<li><a href=\"http://segmentfault.com/a/1190000004257151\">CSS设置不同块级流方向时的属性百分比计算</a></li>\n<li><a href=\"http://jinlong.github.io/2016/01/14/checkbox-trickery-with-css/\">复选框的 CSS 魔法</a></li>\n<li><a href=\"http://jinlong.github.io/2016/01/14/moving-along-a-curved-path-in-css-with-layered-animation/\">CSS分层动画可以让元素沿弧形路径运动</a></li>\n<li><a href=\"http://luopq.com/2016/01/05/css-optimize/\">CSS代码重构与优化之路</a></li>\n<li><a href=\"http://www.infoq.com/cn/articles/guide-to-better-css\">时尚且健壮: 实现更优秀的CSS</a></li>\n</ul>\n<p><strong>Node.js</strong></p>\n<ul>\n<li><a href=\"https://cnodejs.org/topic/5696e43e6272216e51bff67e\">国内Nodejs 2015汇总</a></li>\n</ul>\n<p><strong> Hybrid &amp; Native </strong></p>\n<p><em>暂无</em></p>\n<p><strong>工具</strong></p>\n<ul>\n<li><a href=\"http://www.zcfy.cc/article/81\">PostCSS简介</a></li>\n<li><a href=\"http://chinagdg.org/2015/12/%E5%83%8F-sublime-text-%E4%B8%80%E6%A0%B7%E4%BD%BF%E7%94%A8-chrome-devtools/\">像 Sublime Text 一样使用 Chrome DevTools</a></li>\n<li><a href=\"http://www.css88.com/archives/5858\">Sublime Text 3最好的功能、插件和设置</a></li>\n<li><a href=\"http://www.alloyteam.com/2016/01/webpack-use-optimization/\">webpack使用优化</a></li>\n</ul>\n<p><strong>通信与安全</strong></p>\n<ul>\n<li><a href=\"http://www.epubit.com.cn/article/378\">全栈工程师眼中的HTTP</a></li>\n<li><a href=\"http://carlosfu.iteye.com/blog/2269678\">缓存使用与设计系列文章</a></li>\n<li><a href=\"http://www.cnblogs.com/lyzg/p/5125934.html\">浏览器缓存知识小结及应用</a></li>\n<li><a href=\"http://www.cnblogs.com/skylar/p/browser-http-caching.html\">透过浏览器看HTTP缓存</a></li>\n<li><a href=\"http://mccxj.github.io/blog/20130530_introduce-to-rest.html\">理解RESTFul架构</a></li>\n</ul>\n<p><strong>数据结构与算法</strong></p>\n<ul>\n<li><a href=\"http://zh.lucida.me/blog/on-learning-algorithms/\">我的算法学习之路</a></li>\n<li><a href=\"http://www.cnblogs.com/gaochundong/p/3813252.html\">常用数据结构及复杂度</a></li>\n</ul>\n<p><strong>前端说说</strong></p>\n<ul>\n<li><a href=\"http://bbear.me/wo-suo-gan-jue-dao-de-qian-duan-bian-hua/\">我感觉到的前端变化</a></li>\n<li><a href=\"http://news.oneapm.com/hellomessage-url/\">如何像后端一样写前端代码？</a></li>\n<li><a href=\"http://weibo.com/p/1001603934708609234550\">谈谈前端『新』技术</a></li>\n<li><a href=\"http://www.zcfy.cc/article/111\">20位最值得关注的 JS 开发者</a></li>\n<li><a href=\"http://www.ganiks.me/how-to-avoid-listing-everything-but-carrying-out-little/\">Web开发学习之路是否有尽头</a></li>\n<li><a href=\"http://www.barretlee.com/blog/2015/12/10/after-framework-we-gonna-to-hug-data/\">近几年前端技术盘点以及 2016 年技术发展方向</a></li>\n<li><a href=\"https://github.com/kuitos/kuitos.github.io/issues/32\">2015前端生态发展回顾</a></li>\n</ul>\n"},{"title":"FED-Talk月刊第二期（2016年2月）","date":"2016-02-26T06:00:40.000Z","banner":"http://o80ub63i5.bkt.clouddn.com/weekly/lantern-163914_640.jpg","_content":"\n## 简介\n\n原《FED-Talk月刊》正式升级为《课多周刊》，继续为大家精选一周的前端专业技术。\n\n微信公众号 搜索 **fed-talk**\n\n## 月刊\n\n**FED-Talk推荐：**\n\n- [Babel 入门教程](http://www.ruanyifeng.com/blog/2016/01/babel.html)\n\n*这年头你不学习些ES2015都不好意思说自己从事前端开发，babel是一个ES6转ES5的编译器，可以将ES6编写的代码跑在浏览器上。*\n\n- [Rollup.js 下一代的ES6模块打包机](https://segmentfault.com/a/1190000004499989)\n\n*在大量使用Webpack的年代，换个打包工具玩玩，眼前一亮。*\n\n**JavaScript**\n\n- [Babel 入门教程](http://www.ruanyifeng.com/blog/2016/01/babel.html)\n- [如何给函数取个合适的名字](http://www.jianshu.com/p/e864b4b5b8f6)\n- [用JavaScript将Canvas内容转化成图片的方法](http://www.webhek.com/convert-canvas-image)\n- [[译]2016 - 属于网络流（web streams）的一年](http://www.w3ctech.com/topic/1693)\n- [JavaScript全讲-架构原则透析](http://mp.weixin.qq.com/s?__biz=MzAxNjQwNDY0MQ==&mid=403997163&idx=1&sn=d0e303ad9a927f398bacbec8e6c4e3a6&scene=0#wechat_redirect)\n- [JavaScript模块化指南](http://drakeleung.github.io/blog/2016/02/07/JavaScript-Module-A-Beginner-Guide/)\n- [谈谈 JS 中的严格模式](http://www.html-js.com/article/3443)\n- [谈谈使用 promise 时候的一些反模式](http://efe.baidu.com/blog/promises-anti-pattern/)\n- [后端程序员的 JavaScript 之旅 - 好的设计与坏的设计](http://lishaopeng.com/2016/01/16/js-good_bad/)\n- [Redux服务端渲染及webpack优化](http://galen-yip.com/react/webpack/2016/02/14/redux-server-rendering-and-webpack-optimization/)\n- [React 测试入门教程](http://www.ruanyifeng.com/blog/2016/02/react-testing-tutorial.html)\n- [React.js学习笔记之JSX解读](https://segmentfault.com/a/1190000004470135)\n\n**CSS**\n\n- [CSS Modules 详解](http://www.html5dw.com/post?id=1298)\n\n** Hybrid & Native **\n\n- [React Native JS Module 加载性能优化](https://yq.aliyun.com/articles/3208)\n- [Ionic 开发中遇到的问题以及后期发布 iOS/Android 的方方面面](http://blog.parryqiu.com/2015/11/22/ionic-development-issues/)\n\n**工具**\n\n- [Sublime Text 插件](http://chinagdg.org/2016/02/ttt1-sublime-plugins/)\n- [Seti UI 主题: 让你编辑器焕然一新](http://chinagdg.org/2016/02/ttt2-seti-ui/)\n- [《走进git时代系列一》 你该怎么玩？](https://yq.aliyun.com/articles/5843)\n- [JSDoc](http://www.css88.com/doc/jsdoc/index.html)\n- [学习Flexbox的18个优质资源](http://webres.wang/18-resources-to-learn-flexbox/)\n- [2015年末必备前端工具集](http://zxc0328.github.io/2015/12/28/2015-javascript-tools/)\n- [Webpack 2 有哪些新东西](http://mp.weixin.qq.com/s?__biz=MzIyMjE0ODQ0OQ==&mid=402764877&idx=1&sn=aa40a80bb1920a80fc187e8df99c4824#rd)\n\n**Node.js**\n\n- [Node编码规范](https://github.com/windyrobin/iFrame/blob/master/style.md)\n- [MongoDB中的日志系统](https://yq.aliyun.com/articles/5528)\n- [NodeJS服务监控报警系统的核心实现和开源共建](http://blogread.cn/it/article/7706?f=wb)\n- [【译】在 Chrome 开发者工具中调试 node.js](https://github.com/sqrthree/sqrthree.github.io/issues/8)\n\n**通信与安全**\n\n*暂时无*\n\n**数据结构与算法**\n\n*暂时无*\n\n**前端说说**\n\n- [2015-2016前端知识体系](http://ouvens.github.io/frontend-resource/2016/01/26/front-end-learning-list.html)\n- [2016：前端的路应该怎么走](http://zhuanlan.zhihu.com/haochuan/20550075)\n- [WebKit Web Inspector 十年回顾](http://zhuanlan.zhihu.com/FrontendMagazine/20563971)\n- [如何成为一名优秀的全栈工程师](http://www.jianshu.com/p/f0d134ed7fd0)\n- [知乎上前端开发领域有哪些值得推荐的问答？](https://www.zhihu.com/question/20246142/answer/14470387)\n- [为什么整个互联网行业都缺前端工程师？](http://zhuanlan.zhihu.com/FrontendMagazine/20598089)\n","source":"_posts/FED-Talk2.md","raw":"title: FED-Talk月刊第二期（2016年2月）\ndate: 2016-02-26 14:00:40\ntags: 课多周刊\nbanner: http://o80ub63i5.bkt.clouddn.com/weekly/lantern-163914_640.jpg\n---\n\n## 简介\n\n原《FED-Talk月刊》正式升级为《课多周刊》，继续为大家精选一周的前端专业技术。\n\n微信公众号 搜索 **fed-talk**\n\n## 月刊\n\n**FED-Talk推荐：**\n\n- [Babel 入门教程](http://www.ruanyifeng.com/blog/2016/01/babel.html)\n\n*这年头你不学习些ES2015都不好意思说自己从事前端开发，babel是一个ES6转ES5的编译器，可以将ES6编写的代码跑在浏览器上。*\n\n- [Rollup.js 下一代的ES6模块打包机](https://segmentfault.com/a/1190000004499989)\n\n*在大量使用Webpack的年代，换个打包工具玩玩，眼前一亮。*\n\n**JavaScript**\n\n- [Babel 入门教程](http://www.ruanyifeng.com/blog/2016/01/babel.html)\n- [如何给函数取个合适的名字](http://www.jianshu.com/p/e864b4b5b8f6)\n- [用JavaScript将Canvas内容转化成图片的方法](http://www.webhek.com/convert-canvas-image)\n- [[译]2016 - 属于网络流（web streams）的一年](http://www.w3ctech.com/topic/1693)\n- [JavaScript全讲-架构原则透析](http://mp.weixin.qq.com/s?__biz=MzAxNjQwNDY0MQ==&mid=403997163&idx=1&sn=d0e303ad9a927f398bacbec8e6c4e3a6&scene=0#wechat_redirect)\n- [JavaScript模块化指南](http://drakeleung.github.io/blog/2016/02/07/JavaScript-Module-A-Beginner-Guide/)\n- [谈谈 JS 中的严格模式](http://www.html-js.com/article/3443)\n- [谈谈使用 promise 时候的一些反模式](http://efe.baidu.com/blog/promises-anti-pattern/)\n- [后端程序员的 JavaScript 之旅 - 好的设计与坏的设计](http://lishaopeng.com/2016/01/16/js-good_bad/)\n- [Redux服务端渲染及webpack优化](http://galen-yip.com/react/webpack/2016/02/14/redux-server-rendering-and-webpack-optimization/)\n- [React 测试入门教程](http://www.ruanyifeng.com/blog/2016/02/react-testing-tutorial.html)\n- [React.js学习笔记之JSX解读](https://segmentfault.com/a/1190000004470135)\n\n**CSS**\n\n- [CSS Modules 详解](http://www.html5dw.com/post?id=1298)\n\n** Hybrid & Native **\n\n- [React Native JS Module 加载性能优化](https://yq.aliyun.com/articles/3208)\n- [Ionic 开发中遇到的问题以及后期发布 iOS/Android 的方方面面](http://blog.parryqiu.com/2015/11/22/ionic-development-issues/)\n\n**工具**\n\n- [Sublime Text 插件](http://chinagdg.org/2016/02/ttt1-sublime-plugins/)\n- [Seti UI 主题: 让你编辑器焕然一新](http://chinagdg.org/2016/02/ttt2-seti-ui/)\n- [《走进git时代系列一》 你该怎么玩？](https://yq.aliyun.com/articles/5843)\n- [JSDoc](http://www.css88.com/doc/jsdoc/index.html)\n- [学习Flexbox的18个优质资源](http://webres.wang/18-resources-to-learn-flexbox/)\n- [2015年末必备前端工具集](http://zxc0328.github.io/2015/12/28/2015-javascript-tools/)\n- [Webpack 2 有哪些新东西](http://mp.weixin.qq.com/s?__biz=MzIyMjE0ODQ0OQ==&mid=402764877&idx=1&sn=aa40a80bb1920a80fc187e8df99c4824#rd)\n\n**Node.js**\n\n- [Node编码规范](https://github.com/windyrobin/iFrame/blob/master/style.md)\n- [MongoDB中的日志系统](https://yq.aliyun.com/articles/5528)\n- [NodeJS服务监控报警系统的核心实现和开源共建](http://blogread.cn/it/article/7706?f=wb)\n- [【译】在 Chrome 开发者工具中调试 node.js](https://github.com/sqrthree/sqrthree.github.io/issues/8)\n\n**通信与安全**\n\n*暂时无*\n\n**数据结构与算法**\n\n*暂时无*\n\n**前端说说**\n\n- [2015-2016前端知识体系](http://ouvens.github.io/frontend-resource/2016/01/26/front-end-learning-list.html)\n- [2016：前端的路应该怎么走](http://zhuanlan.zhihu.com/haochuan/20550075)\n- [WebKit Web Inspector 十年回顾](http://zhuanlan.zhihu.com/FrontendMagazine/20563971)\n- [如何成为一名优秀的全栈工程师](http://www.jianshu.com/p/f0d134ed7fd0)\n- [知乎上前端开发领域有哪些值得推荐的问答？](https://www.zhihu.com/question/20246142/answer/14470387)\n- [为什么整个互联网行业都缺前端工程师？](http://zhuanlan.zhihu.com/FrontendMagazine/20598089)\n","slug":"FED-Talk2","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hjzt0002uejrx40ke2y4","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>原《FED-Talk月刊》正式升级为《课多周刊》，继续为大家精选一周的前端专业技术。</p>\n<p>微信公众号 搜索 <strong>fed-talk</strong></p>\n<h2 id=\"月刊\"><a href=\"#月刊\" class=\"headerlink\" title=\"月刊\"></a>月刊</h2><p><strong>FED-Talk推荐：</strong></p>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/01/babel.html\" target=\"_blank\" rel=\"external\">Babel 入门教程</a></li>\n</ul>\n<p><em>这年头你不学习些ES2015都不好意思说自己从事前端开发，babel是一个ES6转ES5的编译器，可以将ES6编写的代码跑在浏览器上。</em></p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000004499989\" target=\"_blank\" rel=\"external\">Rollup.js 下一代的ES6模块打包机</a></li>\n</ul>\n<p><em>在大量使用Webpack的年代，换个打包工具玩玩，眼前一亮。</em></p>\n<p><strong>JavaScript</strong></p>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/01/babel.html\" target=\"_blank\" rel=\"external\">Babel 入门教程</a></li>\n<li><a href=\"http://www.jianshu.com/p/e864b4b5b8f6\" target=\"_blank\" rel=\"external\">如何给函数取个合适的名字</a></li>\n<li><a href=\"http://www.webhek.com/convert-canvas-image\" target=\"_blank\" rel=\"external\">用JavaScript将Canvas内容转化成图片的方法</a></li>\n<li><a href=\"http://www.w3ctech.com/topic/1693\" target=\"_blank\" rel=\"external\">[译]2016 - 属于网络流（web streams）的一年</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxNjQwNDY0MQ==&amp;mid=403997163&amp;idx=1&amp;sn=d0e303ad9a927f398bacbec8e6c4e3a6&amp;scene=0#wechat_redirect\" target=\"_blank\" rel=\"external\">JavaScript全讲-架构原则透析</a></li>\n<li><a href=\"http://drakeleung.github.io/blog/2016/02/07/JavaScript-Module-A-Beginner-Guide/\" target=\"_blank\" rel=\"external\">JavaScript模块化指南</a></li>\n<li><a href=\"http://www.html-js.com/article/3443\" target=\"_blank\" rel=\"external\">谈谈 JS 中的严格模式</a></li>\n<li><a href=\"http://efe.baidu.com/blog/promises-anti-pattern/\" target=\"_blank\" rel=\"external\">谈谈使用 promise 时候的一些反模式</a></li>\n<li><a href=\"http://lishaopeng.com/2016/01/16/js-good_bad/\" target=\"_blank\" rel=\"external\">后端程序员的 JavaScript 之旅 - 好的设计与坏的设计</a></li>\n<li><a href=\"http://galen-yip.com/react/webpack/2016/02/14/redux-server-rendering-and-webpack-optimization/\" target=\"_blank\" rel=\"external\">Redux服务端渲染及webpack优化</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/02/react-testing-tutorial.html\" target=\"_blank\" rel=\"external\">React 测试入门教程</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000004470135\" target=\"_blank\" rel=\"external\">React.js学习笔记之JSX解读</a></li>\n</ul>\n<p><strong>CSS</strong></p>\n<ul>\n<li><a href=\"http://www.html5dw.com/post?id=1298\" target=\"_blank\" rel=\"external\">CSS Modules 详解</a></li>\n</ul>\n<p><strong> Hybrid &amp; Native </strong></p>\n<ul>\n<li><a href=\"https://yq.aliyun.com/articles/3208\" target=\"_blank\" rel=\"external\">React Native JS Module 加载性能优化</a></li>\n<li><a href=\"http://blog.parryqiu.com/2015/11/22/ionic-development-issues/\" target=\"_blank\" rel=\"external\">Ionic 开发中遇到的问题以及后期发布 iOS/Android 的方方面面</a></li>\n</ul>\n<p><strong>工具</strong></p>\n<ul>\n<li><a href=\"http://chinagdg.org/2016/02/ttt1-sublime-plugins/\" target=\"_blank\" rel=\"external\">Sublime Text 插件</a></li>\n<li><a href=\"http://chinagdg.org/2016/02/ttt2-seti-ui/\" target=\"_blank\" rel=\"external\">Seti UI 主题: 让你编辑器焕然一新</a></li>\n<li><a href=\"https://yq.aliyun.com/articles/5843\" target=\"_blank\" rel=\"external\">《走进git时代系列一》 你该怎么玩？</a></li>\n<li><a href=\"http://www.css88.com/doc/jsdoc/index.html\" target=\"_blank\" rel=\"external\">JSDoc</a></li>\n<li><a href=\"http://webres.wang/18-resources-to-learn-flexbox/\" target=\"_blank\" rel=\"external\">学习Flexbox的18个优质资源</a></li>\n<li><a href=\"http://zxc0328.github.io/2015/12/28/2015-javascript-tools/\" target=\"_blank\" rel=\"external\">2015年末必备前端工具集</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzIyMjE0ODQ0OQ==&amp;mid=402764877&amp;idx=1&amp;sn=aa40a80bb1920a80fc187e8df99c4824#rd\" target=\"_blank\" rel=\"external\">Webpack 2 有哪些新东西</a></li>\n</ul>\n<p><strong>Node.js</strong></p>\n<ul>\n<li><a href=\"https://github.com/windyrobin/iFrame/blob/master/style.md\" target=\"_blank\" rel=\"external\">Node编码规范</a></li>\n<li><a href=\"https://yq.aliyun.com/articles/5528\" target=\"_blank\" rel=\"external\">MongoDB中的日志系统</a></li>\n<li><a href=\"http://blogread.cn/it/article/7706?f=wb\" target=\"_blank\" rel=\"external\">NodeJS服务监控报警系统的核心实现和开源共建</a></li>\n<li><a href=\"https://github.com/sqrthree/sqrthree.github.io/issues/8\" target=\"_blank\" rel=\"external\">【译】在 Chrome 开发者工具中调试 node.js</a></li>\n</ul>\n<p><strong>通信与安全</strong></p>\n<p><em>暂时无</em></p>\n<p><strong>数据结构与算法</strong></p>\n<p><em>暂时无</em></p>\n<p><strong>前端说说</strong></p>\n<ul>\n<li><a href=\"http://ouvens.github.io/frontend-resource/2016/01/26/front-end-learning-list.html\" target=\"_blank\" rel=\"external\">2015-2016前端知识体系</a></li>\n<li><a href=\"http://zhuanlan.zhihu.com/haochuan/20550075\" target=\"_blank\" rel=\"external\">2016：前端的路应该怎么走</a></li>\n<li><a href=\"http://zhuanlan.zhihu.com/FrontendMagazine/20563971\" target=\"_blank\" rel=\"external\">WebKit Web Inspector 十年回顾</a></li>\n<li><a href=\"http://www.jianshu.com/p/f0d134ed7fd0\" target=\"_blank\" rel=\"external\">如何成为一名优秀的全栈工程师</a></li>\n<li><a href=\"https://www.zhihu.com/question/20246142/answer/14470387\" target=\"_blank\" rel=\"external\">知乎上前端开发领域有哪些值得推荐的问答？</a></li>\n<li><a href=\"http://zhuanlan.zhihu.com/FrontendMagazine/20598089\" target=\"_blank\" rel=\"external\">为什么整个互联网行业都缺前端工程师？</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>原《FED-Talk月刊》正式升级为《课多周刊》，继续为大家精选一周的前端专业技术。</p>\n<p>微信公众号 搜索 <strong>fed-talk</strong></p>\n<h2 id=\"月刊\"><a href=\"#月刊\" class=\"headerlink\" title=\"月刊\"></a>月刊</h2><p><strong>FED-Talk推荐：</strong></p>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/01/babel.html\">Babel 入门教程</a></li>\n</ul>\n<p><em>这年头你不学习些ES2015都不好意思说自己从事前端开发，babel是一个ES6转ES5的编译器，可以将ES6编写的代码跑在浏览器上。</em></p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000004499989\">Rollup.js 下一代的ES6模块打包机</a></li>\n</ul>\n<p><em>在大量使用Webpack的年代，换个打包工具玩玩，眼前一亮。</em></p>\n<p><strong>JavaScript</strong></p>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/01/babel.html\">Babel 入门教程</a></li>\n<li><a href=\"http://www.jianshu.com/p/e864b4b5b8f6\">如何给函数取个合适的名字</a></li>\n<li><a href=\"http://www.webhek.com/convert-canvas-image\">用JavaScript将Canvas内容转化成图片的方法</a></li>\n<li><a href=\"http://www.w3ctech.com/topic/1693\">[译]2016 - 属于网络流（web streams）的一年</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxNjQwNDY0MQ==&amp;mid=403997163&amp;idx=1&amp;sn=d0e303ad9a927f398bacbec8e6c4e3a6&amp;scene=0#wechat_redirect\">JavaScript全讲-架构原则透析</a></li>\n<li><a href=\"http://drakeleung.github.io/blog/2016/02/07/JavaScript-Module-A-Beginner-Guide/\">JavaScript模块化指南</a></li>\n<li><a href=\"http://www.html-js.com/article/3443\">谈谈 JS 中的严格模式</a></li>\n<li><a href=\"http://efe.baidu.com/blog/promises-anti-pattern/\">谈谈使用 promise 时候的一些反模式</a></li>\n<li><a href=\"http://lishaopeng.com/2016/01/16/js-good_bad/\">后端程序员的 JavaScript 之旅 - 好的设计与坏的设计</a></li>\n<li><a href=\"http://galen-yip.com/react/webpack/2016/02/14/redux-server-rendering-and-webpack-optimization/\">Redux服务端渲染及webpack优化</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/02/react-testing-tutorial.html\">React 测试入门教程</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000004470135\">React.js学习笔记之JSX解读</a></li>\n</ul>\n<p><strong>CSS</strong></p>\n<ul>\n<li><a href=\"http://www.html5dw.com/post?id=1298\">CSS Modules 详解</a></li>\n</ul>\n<p><strong> Hybrid &amp; Native </strong></p>\n<ul>\n<li><a href=\"https://yq.aliyun.com/articles/3208\">React Native JS Module 加载性能优化</a></li>\n<li><a href=\"http://blog.parryqiu.com/2015/11/22/ionic-development-issues/\">Ionic 开发中遇到的问题以及后期发布 iOS/Android 的方方面面</a></li>\n</ul>\n<p><strong>工具</strong></p>\n<ul>\n<li><a href=\"http://chinagdg.org/2016/02/ttt1-sublime-plugins/\">Sublime Text 插件</a></li>\n<li><a href=\"http://chinagdg.org/2016/02/ttt2-seti-ui/\">Seti UI 主题: 让你编辑器焕然一新</a></li>\n<li><a href=\"https://yq.aliyun.com/articles/5843\">《走进git时代系列一》 你该怎么玩？</a></li>\n<li><a href=\"http://www.css88.com/doc/jsdoc/index.html\">JSDoc</a></li>\n<li><a href=\"http://webres.wang/18-resources-to-learn-flexbox/\">学习Flexbox的18个优质资源</a></li>\n<li><a href=\"http://zxc0328.github.io/2015/12/28/2015-javascript-tools/\">2015年末必备前端工具集</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzIyMjE0ODQ0OQ==&amp;mid=402764877&amp;idx=1&amp;sn=aa40a80bb1920a80fc187e8df99c4824#rd\">Webpack 2 有哪些新东西</a></li>\n</ul>\n<p><strong>Node.js</strong></p>\n<ul>\n<li><a href=\"https://github.com/windyrobin/iFrame/blob/master/style.md\">Node编码规范</a></li>\n<li><a href=\"https://yq.aliyun.com/articles/5528\">MongoDB中的日志系统</a></li>\n<li><a href=\"http://blogread.cn/it/article/7706?f=wb\">NodeJS服务监控报警系统的核心实现和开源共建</a></li>\n<li><a href=\"https://github.com/sqrthree/sqrthree.github.io/issues/8\">【译】在 Chrome 开发者工具中调试 node.js</a></li>\n</ul>\n<p><strong>通信与安全</strong></p>\n<p><em>暂时无</em></p>\n<p><strong>数据结构与算法</strong></p>\n<p><em>暂时无</em></p>\n<p><strong>前端说说</strong></p>\n<ul>\n<li><a href=\"http://ouvens.github.io/frontend-resource/2016/01/26/front-end-learning-list.html\">2015-2016前端知识体系</a></li>\n<li><a href=\"http://zhuanlan.zhihu.com/haochuan/20550075\">2016：前端的路应该怎么走</a></li>\n<li><a href=\"http://zhuanlan.zhihu.com/FrontendMagazine/20563971\">WebKit Web Inspector 十年回顾</a></li>\n<li><a href=\"http://www.jianshu.com/p/f0d134ed7fd0\">如何成为一名优秀的全栈工程师</a></li>\n<li><a href=\"https://www.zhihu.com/question/20246142/answer/14470387\">知乎上前端开发领域有哪些值得推荐的问答？</a></li>\n<li><a href=\"http://zhuanlan.zhihu.com/FrontendMagazine/20598089\">为什么整个互联网行业都缺前端工程师？</a></li>\n</ul>\n"},{"title":"FED-Talk月刊第三期（2016年3月）","date":"2016-03-29T06:00:40.000Z","banner":"http://o80ub63i5.bkt.clouddn.com/weekly/cat-188088_640.jpg","_content":"\n## 简介\n\n原《FED-Talk月刊》正式升级为《课多周刊》，继续为大家精选一周的前端专业技术。\n\n微信公众号 搜索 **fed-talk**\n\n## 月刊\n\n**FED-Talk月刊推荐**\n\n- [iOS 架构模式 - 简述 MVC, MVP, MVVM 和 VIPER (译)](https://blog.coding.net/blog/ios-architecture-patterns)\n\n*MVC MVP MVVM VIPER 软件设计模式的解说，可以学习借鉴*\n\n- [前端动画原理与实现](http://matrix.h5jun.com/slide/show?id=117#/7)\n\n*很多基础动画的数学原理，看完我想搞动画不难了*\n\n- [2016 JavaScript 技术栈展望](http://pinggod.com/2016/2016-JavaScript-%E6%8A%80%E6%9C%AF%E6%A0%88%E5%B1%95%E6%9C%9B/)\n\n*社区发展的趋势与动态*\n\n**JavaScript**\n\n- [ES5和ES6中的继承](http://keenwon.com/1524.html)\n- [js设计模式系列之(一)请节约你的请求-代理模式](https://mp.weixin.qq.com/s?__biz=MzIwMTQwNTA3Nw==&mid=401999955&idx=1&sn=892195ffe88b124cbf14732d36aaebc7)\n- [函数式编程初体验](http://ddou.github.io/posts/functional-programming-in-real-world-2/)\n- [HTML5视频的那些事儿](http://yanhaijing.com/html/2016/03/12/html5-video/)\n\n**CSS**\n\n*暂时无*\n\n**Hybrid & Native**\n\n*暂时无*\n\n**工具**\n\n- [大前端工具集](https://github.com/nieweidong/fetool)\n- [web前端面试题总汇](http://www.cnblogs.com/bigboyLin/p/5272902.html)\n- [如何写一个webpack插件](http://www.alloyteam.com/2016/03/how-to-write-a-plug-in-webpack/)\n- [npm scripts](http://www.w3ctrain.com/2016/02/27/why-npm-scripts/)\n- [玩转 npm](http://www.alloyteam.com/2016/03/master-npm/)\n- [整理：手机端网页调试方案](https://segmentfault.com/a/1190000000313211)\n\n**通信与安全**\n\n- [HTTPS科普扫盲帖](https://segmentfault.com/a/1190000004523659)\n- [前端防御XSS](http://drops.wooyun.org/web/13009)\n- [CSRF漏洞的原理](https://www.zhuyingda.com/blog/b5.html)\n- [浏览器与服务器的消息通信](http://blog.brucefeng.info/post/brower-server-msg)\n\n**数据结构与算法**\n\n- [各种排序算法总结](http://www.jianshu.com/p/f5baf7f27a7e)\n\n**前端说说**\n\n- [关于前端面试](https://mdluo.github.io/blog/about-front-end-interview/)\n- [前端工程师的职业发展规划](https://github.com/f2e-journey/f2e-journey/blob/master/career-planning.md)\n- [在创业公司做架构师，是一种修炼](http://mp.weixin.qq.com/s?__biz=MzA3MzYwNjQ3NA==&mid=403264297&idx=1&sn=f5f1bfc5ae9f4d2bed782060e534297d&scene=2&srcid=0308Bl2AbOVUvcHPNFmMrKPZ&from=timeline&isappinstalled=0#wechat_redirect)\n- [程序员如何优雅的挣零花钱？](https://github.com/easychen/howto-make-more-money)\n","source":"_posts/FED-Talk3.md","raw":"title: FED-Talk月刊第三期（2016年3月）\ndate: 2016-03-29 14:00:40\ntags: 课多周刊\nbanner: http://o80ub63i5.bkt.clouddn.com/weekly/cat-188088_640.jpg\n---\n\n## 简介\n\n原《FED-Talk月刊》正式升级为《课多周刊》，继续为大家精选一周的前端专业技术。\n\n微信公众号 搜索 **fed-talk**\n\n## 月刊\n\n**FED-Talk月刊推荐**\n\n- [iOS 架构模式 - 简述 MVC, MVP, MVVM 和 VIPER (译)](https://blog.coding.net/blog/ios-architecture-patterns)\n\n*MVC MVP MVVM VIPER 软件设计模式的解说，可以学习借鉴*\n\n- [前端动画原理与实现](http://matrix.h5jun.com/slide/show?id=117#/7)\n\n*很多基础动画的数学原理，看完我想搞动画不难了*\n\n- [2016 JavaScript 技术栈展望](http://pinggod.com/2016/2016-JavaScript-%E6%8A%80%E6%9C%AF%E6%A0%88%E5%B1%95%E6%9C%9B/)\n\n*社区发展的趋势与动态*\n\n**JavaScript**\n\n- [ES5和ES6中的继承](http://keenwon.com/1524.html)\n- [js设计模式系列之(一)请节约你的请求-代理模式](https://mp.weixin.qq.com/s?__biz=MzIwMTQwNTA3Nw==&mid=401999955&idx=1&sn=892195ffe88b124cbf14732d36aaebc7)\n- [函数式编程初体验](http://ddou.github.io/posts/functional-programming-in-real-world-2/)\n- [HTML5视频的那些事儿](http://yanhaijing.com/html/2016/03/12/html5-video/)\n\n**CSS**\n\n*暂时无*\n\n**Hybrid & Native**\n\n*暂时无*\n\n**工具**\n\n- [大前端工具集](https://github.com/nieweidong/fetool)\n- [web前端面试题总汇](http://www.cnblogs.com/bigboyLin/p/5272902.html)\n- [如何写一个webpack插件](http://www.alloyteam.com/2016/03/how-to-write-a-plug-in-webpack/)\n- [npm scripts](http://www.w3ctrain.com/2016/02/27/why-npm-scripts/)\n- [玩转 npm](http://www.alloyteam.com/2016/03/master-npm/)\n- [整理：手机端网页调试方案](https://segmentfault.com/a/1190000000313211)\n\n**通信与安全**\n\n- [HTTPS科普扫盲帖](https://segmentfault.com/a/1190000004523659)\n- [前端防御XSS](http://drops.wooyun.org/web/13009)\n- [CSRF漏洞的原理](https://www.zhuyingda.com/blog/b5.html)\n- [浏览器与服务器的消息通信](http://blog.brucefeng.info/post/brower-server-msg)\n\n**数据结构与算法**\n\n- [各种排序算法总结](http://www.jianshu.com/p/f5baf7f27a7e)\n\n**前端说说**\n\n- [关于前端面试](https://mdluo.github.io/blog/about-front-end-interview/)\n- [前端工程师的职业发展规划](https://github.com/f2e-journey/f2e-journey/blob/master/career-planning.md)\n- [在创业公司做架构师，是一种修炼](http://mp.weixin.qq.com/s?__biz=MzA3MzYwNjQ3NA==&mid=403264297&idx=1&sn=f5f1bfc5ae9f4d2bed782060e534297d&scene=2&srcid=0308Bl2AbOVUvcHPNFmMrKPZ&from=timeline&isappinstalled=0#wechat_redirect)\n- [程序员如何优雅的挣零花钱？](https://github.com/easychen/howto-make-more-money)\n","slug":"FED-Talk3","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hjzy0005uejrai5x9s2v","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>原《FED-Talk月刊》正式升级为《课多周刊》，继续为大家精选一周的前端专业技术。</p>\n<p>微信公众号 搜索 <strong>fed-talk</strong></p>\n<h2 id=\"月刊\"><a href=\"#月刊\" class=\"headerlink\" title=\"月刊\"></a>月刊</h2><p><strong>FED-Talk月刊推荐</strong></p>\n<ul>\n<li><a href=\"https://blog.coding.net/blog/ios-architecture-patterns\" target=\"_blank\" rel=\"external\">iOS 架构模式 - 简述 MVC, MVP, MVVM 和 VIPER (译)</a></li>\n</ul>\n<p><em>MVC MVP MVVM VIPER 软件设计模式的解说，可以学习借鉴</em></p>\n<ul>\n<li><a href=\"http://matrix.h5jun.com/slide/show?id=117#/7\" target=\"_blank\" rel=\"external\">前端动画原理与实现</a></li>\n</ul>\n<p><em>很多基础动画的数学原理，看完我想搞动画不难了</em></p>\n<ul>\n<li><a href=\"http://pinggod.com/2016/2016-JavaScript-%E6%8A%80%E6%9C%AF%E6%A0%88%E5%B1%95%E6%9C%9B/\" target=\"_blank\" rel=\"external\">2016 JavaScript 技术栈展望</a></li>\n</ul>\n<p><em>社区发展的趋势与动态</em></p>\n<p><strong>JavaScript</strong></p>\n<ul>\n<li><a href=\"http://keenwon.com/1524.html\" target=\"_blank\" rel=\"external\">ES5和ES6中的继承</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzIwMTQwNTA3Nw==&amp;mid=401999955&amp;idx=1&amp;sn=892195ffe88b124cbf14732d36aaebc7\" target=\"_blank\" rel=\"external\">js设计模式系列之(一)请节约你的请求-代理模式</a></li>\n<li><a href=\"http://ddou.github.io/posts/functional-programming-in-real-world-2/\" target=\"_blank\" rel=\"external\">函数式编程初体验</a></li>\n<li><a href=\"http://yanhaijing.com/html/2016/03/12/html5-video/\" target=\"_blank\" rel=\"external\">HTML5视频的那些事儿</a></li>\n</ul>\n<p><strong>CSS</strong></p>\n<p><em>暂时无</em></p>\n<p><strong>Hybrid &amp; Native</strong></p>\n<p><em>暂时无</em></p>\n<p><strong>工具</strong></p>\n<ul>\n<li><a href=\"https://github.com/nieweidong/fetool\" target=\"_blank\" rel=\"external\">大前端工具集</a></li>\n<li><a href=\"http://www.cnblogs.com/bigboyLin/p/5272902.html\" target=\"_blank\" rel=\"external\">web前端面试题总汇</a></li>\n<li><a href=\"http://www.alloyteam.com/2016/03/how-to-write-a-plug-in-webpack/\" target=\"_blank\" rel=\"external\">如何写一个webpack插件</a></li>\n<li><a href=\"http://www.w3ctrain.com/2016/02/27/why-npm-scripts/\" target=\"_blank\" rel=\"external\">npm scripts</a></li>\n<li><a href=\"http://www.alloyteam.com/2016/03/master-npm/\" target=\"_blank\" rel=\"external\">玩转 npm</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000000313211\" target=\"_blank\" rel=\"external\">整理：手机端网页调试方案</a></li>\n</ul>\n<p><strong>通信与安全</strong></p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000004523659\" target=\"_blank\" rel=\"external\">HTTPS科普扫盲帖</a></li>\n<li><a href=\"http://drops.wooyun.org/web/13009\" target=\"_blank\" rel=\"external\">前端防御XSS</a></li>\n<li><a href=\"https://www.zhuyingda.com/blog/b5.html\" target=\"_blank\" rel=\"external\">CSRF漏洞的原理</a></li>\n<li><a href=\"http://blog.brucefeng.info/post/brower-server-msg\" target=\"_blank\" rel=\"external\">浏览器与服务器的消息通信</a></li>\n</ul>\n<p><strong>数据结构与算法</strong></p>\n<ul>\n<li><a href=\"http://www.jianshu.com/p/f5baf7f27a7e\" target=\"_blank\" rel=\"external\">各种排序算法总结</a></li>\n</ul>\n<p><strong>前端说说</strong></p>\n<ul>\n<li><a href=\"https://mdluo.github.io/blog/about-front-end-interview/\" target=\"_blank\" rel=\"external\">关于前端面试</a></li>\n<li><a href=\"https://github.com/f2e-journey/f2e-journey/blob/master/career-planning.md\" target=\"_blank\" rel=\"external\">前端工程师的职业发展规划</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzA3MzYwNjQ3NA==&amp;mid=403264297&amp;idx=1&amp;sn=f5f1bfc5ae9f4d2bed782060e534297d&amp;scene=2&amp;srcid=0308Bl2AbOVUvcHPNFmMrKPZ&amp;from=timeline&amp;isappinstalled=0#wechat_redirect\" target=\"_blank\" rel=\"external\">在创业公司做架构师，是一种修炼</a></li>\n<li><a href=\"https://github.com/easychen/howto-make-more-money\" target=\"_blank\" rel=\"external\">程序员如何优雅的挣零花钱？</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>原《FED-Talk月刊》正式升级为《课多周刊》，继续为大家精选一周的前端专业技术。</p>\n<p>微信公众号 搜索 <strong>fed-talk</strong></p>\n<h2 id=\"月刊\"><a href=\"#月刊\" class=\"headerlink\" title=\"月刊\"></a>月刊</h2><p><strong>FED-Talk月刊推荐</strong></p>\n<ul>\n<li><a href=\"https://blog.coding.net/blog/ios-architecture-patterns\">iOS 架构模式 - 简述 MVC, MVP, MVVM 和 VIPER (译)</a></li>\n</ul>\n<p><em>MVC MVP MVVM VIPER 软件设计模式的解说，可以学习借鉴</em></p>\n<ul>\n<li><a href=\"http://matrix.h5jun.com/slide/show?id=117#/7\">前端动画原理与实现</a></li>\n</ul>\n<p><em>很多基础动画的数学原理，看完我想搞动画不难了</em></p>\n<ul>\n<li><a href=\"http://pinggod.com/2016/2016-JavaScript-%E6%8A%80%E6%9C%AF%E6%A0%88%E5%B1%95%E6%9C%9B/\">2016 JavaScript 技术栈展望</a></li>\n</ul>\n<p><em>社区发展的趋势与动态</em></p>\n<p><strong>JavaScript</strong></p>\n<ul>\n<li><a href=\"http://keenwon.com/1524.html\">ES5和ES6中的继承</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzIwMTQwNTA3Nw==&amp;mid=401999955&amp;idx=1&amp;sn=892195ffe88b124cbf14732d36aaebc7\">js设计模式系列之(一)请节约你的请求-代理模式</a></li>\n<li><a href=\"http://ddou.github.io/posts/functional-programming-in-real-world-2/\">函数式编程初体验</a></li>\n<li><a href=\"http://yanhaijing.com/html/2016/03/12/html5-video/\">HTML5视频的那些事儿</a></li>\n</ul>\n<p><strong>CSS</strong></p>\n<p><em>暂时无</em></p>\n<p><strong>Hybrid &amp; Native</strong></p>\n<p><em>暂时无</em></p>\n<p><strong>工具</strong></p>\n<ul>\n<li><a href=\"https://github.com/nieweidong/fetool\">大前端工具集</a></li>\n<li><a href=\"http://www.cnblogs.com/bigboyLin/p/5272902.html\">web前端面试题总汇</a></li>\n<li><a href=\"http://www.alloyteam.com/2016/03/how-to-write-a-plug-in-webpack/\">如何写一个webpack插件</a></li>\n<li><a href=\"http://www.w3ctrain.com/2016/02/27/why-npm-scripts/\">npm scripts</a></li>\n<li><a href=\"http://www.alloyteam.com/2016/03/master-npm/\">玩转 npm</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000000313211\">整理：手机端网页调试方案</a></li>\n</ul>\n<p><strong>通信与安全</strong></p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000004523659\">HTTPS科普扫盲帖</a></li>\n<li><a href=\"http://drops.wooyun.org/web/13009\">前端防御XSS</a></li>\n<li><a href=\"https://www.zhuyingda.com/blog/b5.html\">CSRF漏洞的原理</a></li>\n<li><a href=\"http://blog.brucefeng.info/post/brower-server-msg\">浏览器与服务器的消息通信</a></li>\n</ul>\n<p><strong>数据结构与算法</strong></p>\n<ul>\n<li><a href=\"http://www.jianshu.com/p/f5baf7f27a7e\">各种排序算法总结</a></li>\n</ul>\n<p><strong>前端说说</strong></p>\n<ul>\n<li><a href=\"https://mdluo.github.io/blog/about-front-end-interview/\">关于前端面试</a></li>\n<li><a href=\"https://github.com/f2e-journey/f2e-journey/blob/master/career-planning.md\">前端工程师的职业发展规划</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzA3MzYwNjQ3NA==&amp;mid=403264297&amp;idx=1&amp;sn=f5f1bfc5ae9f4d2bed782060e534297d&amp;scene=2&amp;srcid=0308Bl2AbOVUvcHPNFmMrKPZ&amp;from=timeline&amp;isappinstalled=0#wechat_redirect\">在创业公司做架构师，是一种修炼</a></li>\n<li><a href=\"https://github.com/easychen/howto-make-more-money\">程序员如何优雅的挣零花钱？</a></li>\n</ul>\n"},{"title":"FED-Talk月刊第四期（2016年4月）","date":"2016-04-29T06:00:40.000Z","banner":"http://o80ub63i5.bkt.clouddn.com/weekly/sand-dunes-691431_640.jpg","_content":"\n## 简介\n\n原《FED-Talk月刊》正式升级为《课多周刊》，继续为大家精选一周的前端专业技术。\n\n微信公众号 搜索 **fed-talk**\n\n## 月刊\n\n**FED-Talk月刊推荐**\n\n- [面向协议的 MVVM 架构介绍](https://realm.io/cn/news/doios-natasha-murashev-protocol-oriented-mvvm/)\n\n*MVVM 架构介绍，虽然语言使用Swift来实现，但是思路可以借鉴。*\n\n- [淘宝首页性能优化实践](http://www.barretlee.com/blog/2016/04/01/optimization-in-taobao-homepage/)\n\n*性能优化，个人阅读完之后认为我们公司的PC业务可以大量的借鉴优化*\n\n**JavaScript**\n\n- [闭包里的自由变量](https://zhuanlan.zhihu.com/p/20658538)\n- [你好 ES2015](http://jinlong.github.io/2016/04/09/Say-Hello-To-ES2015/)\n- [CSS vs JS动画：谁更快？](http://zencode.in/19.CSS-vs-JS%E5%8A%A8%E7%94%BB%EF%BC%9A%E8%B0%81%E6%9B%B4%E5%BF%AB%EF%BC%9F.html)\n- [JavaScript 被忽视的细节](http://www.barretlee.com/blog/2016/04/18/javascript-detail/)\n- [基础 JavaScript 装逼指南](https://annatarhe.github.io/2016/04/19/hack-js-code.html)\n\n**CSS**\n\n- [【译】也许是你从未听过的在CSS领域最令人兴奋的发展](http://www.jqsite.com/notes/1604109666.html)\n- [最佳网页设计实践：简约主义和字体排版](http://www.ui.cn/detail/118664.html)\n- [简单易懂的CSS Modules](http://acgtofe.com/posts/2016/04/css-modules-made-simple)\n\n**Node.js**\n\n- [深入浅出 Koa](https://github.com/berwin/Blog/issues/8)\n- [Node.js年度技术栈推荐](https://github.com/nodeonly/stack)\n- [Node.js : 我只需要一个店小二](http://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&mid=2665513044&idx=1&sn=9b8526e9d641b970ee5ddac02dae3c57#rd)\n- [10 个最适合 Web 和 APP 开发的 NodeJS 框架](http://www.58maisui.com/2016/04/27/article-29/)\n\n**Hybrid & Native**\n\n- [豆瓣混合开发实践](http://lincode.github.io/Hybrid-Rexxar)\n- [f8app Facebook 开源的React Native 最佳学习模板](https://github.com/fbsamples/f8app)\n\n**工具**\n\n- [webpack实践最后一篇 ](https://github.com/icepy/_posts/issues/34)\n- [Sublime Text 特色插件推荐，持续更新！ （适用人群：学术写作，文学写作，网页编辑， Python， Java, Rust）](https://www.scislab.com/blog/sublime-text-te-se-cha-jian-tui-jian-gua-yong-ren-qun-python-java/)\n- [ionicons](http://ionicons.com/)\n\n**通信与安全**\n\n- [详解https是如何确保安全的？](http://www.wxtlife.com/2016/03/27/%E8%AF%A6%E8%A7%A3https%E6%98%AF%E5%A6%82%E4%BD%95%E7%A1%AE%E4%BF%9D%E5%AE%89%E5%85%A8%E7%9A%84%EF%BC%9F/)\n- [web中间人攻击的威胁](https://www.zhuyingda.com/blog/article.html?id=7)\n- [客户端API请求规范](http://blog.12xiaoshi.com/2016/03/31/tech/api-constraint_design/)\n- [WebGoat之Http Splitting攻击](http://qimingyu.github.io/2016/04/18/Webgoat%E4%B9%8BHttp%20Splitting%E6%94%BB%E5%87%BB/)\n\n**算法**\n\n- [算法与数据结构](https://github.com/ty4z2008/Qix/blob/master/algorithm.md)\n\n**前端说说**\n\n- [2016/04/18 React Native 开源一年的总结](https://github.com/gaohailang/blog/issues/23)\n- [我的Java后端书架 (2016年暮春3.0版) - 虽然是Java但是很多书籍在其他领域也用的上](http://calvin1978.blogcn.com/articles/javabookshelf.html)\n- [那些关于js的学习资料](https://annatarhe.github.io/2016/03/20/learning-resources-about-js.html)\n","source":"_posts/FED-Talk4.md","raw":"title: FED-Talk月刊第四期（2016年4月）\ndate: 2016-04-29 14:00:40\ntags: 课多周刊\nbanner: http://o80ub63i5.bkt.clouddn.com/weekly/sand-dunes-691431_640.jpg\n---\n\n## 简介\n\n原《FED-Talk月刊》正式升级为《课多周刊》，继续为大家精选一周的前端专业技术。\n\n微信公众号 搜索 **fed-talk**\n\n## 月刊\n\n**FED-Talk月刊推荐**\n\n- [面向协议的 MVVM 架构介绍](https://realm.io/cn/news/doios-natasha-murashev-protocol-oriented-mvvm/)\n\n*MVVM 架构介绍，虽然语言使用Swift来实现，但是思路可以借鉴。*\n\n- [淘宝首页性能优化实践](http://www.barretlee.com/blog/2016/04/01/optimization-in-taobao-homepage/)\n\n*性能优化，个人阅读完之后认为我们公司的PC业务可以大量的借鉴优化*\n\n**JavaScript**\n\n- [闭包里的自由变量](https://zhuanlan.zhihu.com/p/20658538)\n- [你好 ES2015](http://jinlong.github.io/2016/04/09/Say-Hello-To-ES2015/)\n- [CSS vs JS动画：谁更快？](http://zencode.in/19.CSS-vs-JS%E5%8A%A8%E7%94%BB%EF%BC%9A%E8%B0%81%E6%9B%B4%E5%BF%AB%EF%BC%9F.html)\n- [JavaScript 被忽视的细节](http://www.barretlee.com/blog/2016/04/18/javascript-detail/)\n- [基础 JavaScript 装逼指南](https://annatarhe.github.io/2016/04/19/hack-js-code.html)\n\n**CSS**\n\n- [【译】也许是你从未听过的在CSS领域最令人兴奋的发展](http://www.jqsite.com/notes/1604109666.html)\n- [最佳网页设计实践：简约主义和字体排版](http://www.ui.cn/detail/118664.html)\n- [简单易懂的CSS Modules](http://acgtofe.com/posts/2016/04/css-modules-made-simple)\n\n**Node.js**\n\n- [深入浅出 Koa](https://github.com/berwin/Blog/issues/8)\n- [Node.js年度技术栈推荐](https://github.com/nodeonly/stack)\n- [Node.js : 我只需要一个店小二](http://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&mid=2665513044&idx=1&sn=9b8526e9d641b970ee5ddac02dae3c57#rd)\n- [10 个最适合 Web 和 APP 开发的 NodeJS 框架](http://www.58maisui.com/2016/04/27/article-29/)\n\n**Hybrid & Native**\n\n- [豆瓣混合开发实践](http://lincode.github.io/Hybrid-Rexxar)\n- [f8app Facebook 开源的React Native 最佳学习模板](https://github.com/fbsamples/f8app)\n\n**工具**\n\n- [webpack实践最后一篇 ](https://github.com/icepy/_posts/issues/34)\n- [Sublime Text 特色插件推荐，持续更新！ （适用人群：学术写作，文学写作，网页编辑， Python， Java, Rust）](https://www.scislab.com/blog/sublime-text-te-se-cha-jian-tui-jian-gua-yong-ren-qun-python-java/)\n- [ionicons](http://ionicons.com/)\n\n**通信与安全**\n\n- [详解https是如何确保安全的？](http://www.wxtlife.com/2016/03/27/%E8%AF%A6%E8%A7%A3https%E6%98%AF%E5%A6%82%E4%BD%95%E7%A1%AE%E4%BF%9D%E5%AE%89%E5%85%A8%E7%9A%84%EF%BC%9F/)\n- [web中间人攻击的威胁](https://www.zhuyingda.com/blog/article.html?id=7)\n- [客户端API请求规范](http://blog.12xiaoshi.com/2016/03/31/tech/api-constraint_design/)\n- [WebGoat之Http Splitting攻击](http://qimingyu.github.io/2016/04/18/Webgoat%E4%B9%8BHttp%20Splitting%E6%94%BB%E5%87%BB/)\n\n**算法**\n\n- [算法与数据结构](https://github.com/ty4z2008/Qix/blob/master/algorithm.md)\n\n**前端说说**\n\n- [2016/04/18 React Native 开源一年的总结](https://github.com/gaohailang/blog/issues/23)\n- [我的Java后端书架 (2016年暮春3.0版) - 虽然是Java但是很多书籍在其他领域也用的上](http://calvin1978.blogcn.com/articles/javabookshelf.html)\n- [那些关于js的学习资料](https://annatarhe.github.io/2016/03/20/learning-resources-about-js.html)\n","slug":"FED-Talk4","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk010007uejrl54cpkgm","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>原《FED-Talk月刊》正式升级为《课多周刊》，继续为大家精选一周的前端专业技术。</p>\n<p>微信公众号 搜索 <strong>fed-talk</strong></p>\n<h2 id=\"月刊\"><a href=\"#月刊\" class=\"headerlink\" title=\"月刊\"></a>月刊</h2><p><strong>FED-Talk月刊推荐</strong></p>\n<ul>\n<li><a href=\"https://realm.io/cn/news/doios-natasha-murashev-protocol-oriented-mvvm/\" target=\"_blank\" rel=\"external\">面向协议的 MVVM 架构介绍</a></li>\n</ul>\n<p><em>MVVM 架构介绍，虽然语言使用Swift来实现，但是思路可以借鉴。</em></p>\n<ul>\n<li><a href=\"http://www.barretlee.com/blog/2016/04/01/optimization-in-taobao-homepage/\" target=\"_blank\" rel=\"external\">淘宝首页性能优化实践</a></li>\n</ul>\n<p><em>性能优化，个人阅读完之后认为我们公司的PC业务可以大量的借鉴优化</em></p>\n<p><strong>JavaScript</strong></p>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/20658538\" target=\"_blank\" rel=\"external\">闭包里的自由变量</a></li>\n<li><a href=\"http://jinlong.github.io/2016/04/09/Say-Hello-To-ES2015/\" target=\"_blank\" rel=\"external\">你好 ES2015</a></li>\n<li><a href=\"http://zencode.in/19.CSS-vs-JS%E5%8A%A8%E7%94%BB%EF%BC%9A%E8%B0%81%E6%9B%B4%E5%BF%AB%EF%BC%9F.html\" target=\"_blank\" rel=\"external\">CSS vs JS动画：谁更快？</a></li>\n<li><a href=\"http://www.barretlee.com/blog/2016/04/18/javascript-detail/\" target=\"_blank\" rel=\"external\">JavaScript 被忽视的细节</a></li>\n<li><a href=\"https://annatarhe.github.io/2016/04/19/hack-js-code.html\" target=\"_blank\" rel=\"external\">基础 JavaScript 装逼指南</a></li>\n</ul>\n<p><strong>CSS</strong></p>\n<ul>\n<li><a href=\"http://www.jqsite.com/notes/1604109666.html\" target=\"_blank\" rel=\"external\">【译】也许是你从未听过的在CSS领域最令人兴奋的发展</a></li>\n<li><a href=\"http://www.ui.cn/detail/118664.html\" target=\"_blank\" rel=\"external\">最佳网页设计实践：简约主义和字体排版</a></li>\n<li><a href=\"http://acgtofe.com/posts/2016/04/css-modules-made-simple\" target=\"_blank\" rel=\"external\">简单易懂的CSS Modules</a></li>\n</ul>\n<p><strong>Node.js</strong></p>\n<ul>\n<li><a href=\"https://github.com/berwin/Blog/issues/8\" target=\"_blank\" rel=\"external\">深入浅出 Koa</a></li>\n<li><a href=\"https://github.com/nodeonly/stack\" target=\"_blank\" rel=\"external\">Node.js年度技术栈推荐</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;mid=2665513044&amp;idx=1&amp;sn=9b8526e9d641b970ee5ddac02dae3c57#rd\" target=\"_blank\" rel=\"external\">Node.js : 我只需要一个店小二</a></li>\n<li><a href=\"http://www.58maisui.com/2016/04/27/article-29/\" target=\"_blank\" rel=\"external\">10 个最适合 Web 和 APP 开发的 NodeJS 框架</a></li>\n</ul>\n<p><strong>Hybrid &amp; Native</strong></p>\n<ul>\n<li><a href=\"http://lincode.github.io/Hybrid-Rexxar\" target=\"_blank\" rel=\"external\">豆瓣混合开发实践</a></li>\n<li><a href=\"https://github.com/fbsamples/f8app\" target=\"_blank\" rel=\"external\">f8app Facebook 开源的React Native 最佳学习模板</a></li>\n</ul>\n<p><strong>工具</strong></p>\n<ul>\n<li><a href=\"https://github.com/icepy/_posts/issues/34\" target=\"_blank\" rel=\"external\">webpack实践最后一篇 </a></li>\n<li><a href=\"https://www.scislab.com/blog/sublime-text-te-se-cha-jian-tui-jian-gua-yong-ren-qun-python-java/\" target=\"_blank\" rel=\"external\">Sublime Text 特色插件推荐，持续更新！ （适用人群：学术写作，文学写作，网页编辑， Python， Java, Rust）</a></li>\n<li><a href=\"http://ionicons.com/\" target=\"_blank\" rel=\"external\">ionicons</a></li>\n</ul>\n<p><strong>通信与安全</strong></p>\n<ul>\n<li><a href=\"http://www.wxtlife.com/2016/03/27/%E8%AF%A6%E8%A7%A3https%E6%98%AF%E5%A6%82%E4%BD%95%E7%A1%AE%E4%BF%9D%E5%AE%89%E5%85%A8%E7%9A%84%EF%BC%9F/\" target=\"_blank\" rel=\"external\">详解https是如何确保安全的？</a></li>\n<li><a href=\"https://www.zhuyingda.com/blog/article.html?id=7\" target=\"_blank\" rel=\"external\">web中间人攻击的威胁</a></li>\n<li><a href=\"http://blog.12xiaoshi.com/2016/03/31/tech/api-constraint_design/\" target=\"_blank\" rel=\"external\">客户端API请求规范</a></li>\n<li><a href=\"http://qimingyu.github.io/2016/04/18/Webgoat%E4%B9%8BHttp%20Splitting%E6%94%BB%E5%87%BB/\" target=\"_blank\" rel=\"external\">WebGoat之Http Splitting攻击</a></li>\n</ul>\n<p><strong>算法</strong></p>\n<ul>\n<li><a href=\"https://github.com/ty4z2008/Qix/blob/master/algorithm.md\" target=\"_blank\" rel=\"external\">算法与数据结构</a></li>\n</ul>\n<p><strong>前端说说</strong></p>\n<ul>\n<li><a href=\"https://github.com/gaohailang/blog/issues/23\" target=\"_blank\" rel=\"external\">2016/04/18 React Native 开源一年的总结</a></li>\n<li><a href=\"http://calvin1978.blogcn.com/articles/javabookshelf.html\" target=\"_blank\" rel=\"external\">我的Java后端书架 (2016年暮春3.0版) - 虽然是Java但是很多书籍在其他领域也用的上</a></li>\n<li><a href=\"https://annatarhe.github.io/2016/03/20/learning-resources-about-js.html\" target=\"_blank\" rel=\"external\">那些关于js的学习资料</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>原《FED-Talk月刊》正式升级为《课多周刊》，继续为大家精选一周的前端专业技术。</p>\n<p>微信公众号 搜索 <strong>fed-talk</strong></p>\n<h2 id=\"月刊\"><a href=\"#月刊\" class=\"headerlink\" title=\"月刊\"></a>月刊</h2><p><strong>FED-Talk月刊推荐</strong></p>\n<ul>\n<li><a href=\"https://realm.io/cn/news/doios-natasha-murashev-protocol-oriented-mvvm/\">面向协议的 MVVM 架构介绍</a></li>\n</ul>\n<p><em>MVVM 架构介绍，虽然语言使用Swift来实现，但是思路可以借鉴。</em></p>\n<ul>\n<li><a href=\"http://www.barretlee.com/blog/2016/04/01/optimization-in-taobao-homepage/\">淘宝首页性能优化实践</a></li>\n</ul>\n<p><em>性能优化，个人阅读完之后认为我们公司的PC业务可以大量的借鉴优化</em></p>\n<p><strong>JavaScript</strong></p>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/20658538\">闭包里的自由变量</a></li>\n<li><a href=\"http://jinlong.github.io/2016/04/09/Say-Hello-To-ES2015/\">你好 ES2015</a></li>\n<li><a href=\"http://zencode.in/19.CSS-vs-JS%E5%8A%A8%E7%94%BB%EF%BC%9A%E8%B0%81%E6%9B%B4%E5%BF%AB%EF%BC%9F.html\">CSS vs JS动画：谁更快？</a></li>\n<li><a href=\"http://www.barretlee.com/blog/2016/04/18/javascript-detail/\">JavaScript 被忽视的细节</a></li>\n<li><a href=\"https://annatarhe.github.io/2016/04/19/hack-js-code.html\">基础 JavaScript 装逼指南</a></li>\n</ul>\n<p><strong>CSS</strong></p>\n<ul>\n<li><a href=\"http://www.jqsite.com/notes/1604109666.html\">【译】也许是你从未听过的在CSS领域最令人兴奋的发展</a></li>\n<li><a href=\"http://www.ui.cn/detail/118664.html\">最佳网页设计实践：简约主义和字体排版</a></li>\n<li><a href=\"http://acgtofe.com/posts/2016/04/css-modules-made-simple\">简单易懂的CSS Modules</a></li>\n</ul>\n<p><strong>Node.js</strong></p>\n<ul>\n<li><a href=\"https://github.com/berwin/Blog/issues/8\">深入浅出 Koa</a></li>\n<li><a href=\"https://github.com/nodeonly/stack\">Node.js年度技术栈推荐</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;mid=2665513044&amp;idx=1&amp;sn=9b8526e9d641b970ee5ddac02dae3c57#rd\">Node.js : 我只需要一个店小二</a></li>\n<li><a href=\"http://www.58maisui.com/2016/04/27/article-29/\">10 个最适合 Web 和 APP 开发的 NodeJS 框架</a></li>\n</ul>\n<p><strong>Hybrid &amp; Native</strong></p>\n<ul>\n<li><a href=\"http://lincode.github.io/Hybrid-Rexxar\">豆瓣混合开发实践</a></li>\n<li><a href=\"https://github.com/fbsamples/f8app\">f8app Facebook 开源的React Native 最佳学习模板</a></li>\n</ul>\n<p><strong>工具</strong></p>\n<ul>\n<li><a href=\"https://github.com/icepy/_posts/issues/34\">webpack实践最后一篇 </a></li>\n<li><a href=\"https://www.scislab.com/blog/sublime-text-te-se-cha-jian-tui-jian-gua-yong-ren-qun-python-java/\">Sublime Text 特色插件推荐，持续更新！ （适用人群：学术写作，文学写作，网页编辑， Python， Java, Rust）</a></li>\n<li><a href=\"http://ionicons.com/\">ionicons</a></li>\n</ul>\n<p><strong>通信与安全</strong></p>\n<ul>\n<li><a href=\"http://www.wxtlife.com/2016/03/27/%E8%AF%A6%E8%A7%A3https%E6%98%AF%E5%A6%82%E4%BD%95%E7%A1%AE%E4%BF%9D%E5%AE%89%E5%85%A8%E7%9A%84%EF%BC%9F/\">详解https是如何确保安全的？</a></li>\n<li><a href=\"https://www.zhuyingda.com/blog/article.html?id=7\">web中间人攻击的威胁</a></li>\n<li><a href=\"http://blog.12xiaoshi.com/2016/03/31/tech/api-constraint_design/\">客户端API请求规范</a></li>\n<li><a href=\"http://qimingyu.github.io/2016/04/18/Webgoat%E4%B9%8BHttp%20Splitting%E6%94%BB%E5%87%BB/\">WebGoat之Http Splitting攻击</a></li>\n</ul>\n<p><strong>算法</strong></p>\n<ul>\n<li><a href=\"https://github.com/ty4z2008/Qix/blob/master/algorithm.md\">算法与数据结构</a></li>\n</ul>\n<p><strong>前端说说</strong></p>\n<ul>\n<li><a href=\"https://github.com/gaohailang/blog/issues/23\">2016/04/18 React Native 开源一年的总结</a></li>\n<li><a href=\"http://calvin1978.blogcn.com/articles/javabookshelf.html\">我的Java后端书架 (2016年暮春3.0版) - 虽然是Java但是很多书籍在其他领域也用的上</a></li>\n<li><a href=\"https://annatarhe.github.io/2016/03/20/learning-resources-about-js.html\">那些关于js的学习资料</a></li>\n</ul>\n"},{"title":"我是这样学习前端的","date":"2016-05-16T07:49:38.000Z","banner":"http://o80ub63i5.bkt.clouddn.com/image/issues-1.jpg","_content":"\n# 前沿\n\n> 算算时间今年（2016年）是进入前端开发这个领域第五个年头，自从上次总结完《我的编程之路》后，还想从更细节的方向上写一写自己是如何学习前端开发，并且还能够保持进步和对技术的敏感。\n\n对于现在进入这个领域的朋友们来说，很多东西其实你都可以选择放弃了，因为你的起点比之以前要提高了不少，但相对来说知识点又多了很多。PS：*至少你不用去兼容IE6了。*\n\n来看一看JavaScript的趋势图：\n\n> JavaScript 2016年5月 TOP 10\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/top20.png)\n\n> JavaScript 趋势图\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/index.png)\n\n> Github 2008-2015统计\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/github-languages.jpg)\n\n[最流行的编程语言JavaScript能做什么？](http://mp.weixin.qq.com/s?__biz=MjM5Mjg4NDMwMA==&mid=405412226&idx=1&sn=3bc7a9c6afd166591a90723a1802ed99&scene=4#wechat_redirect)\n\n虽然前端领域属于一个比较新的领域，但是至少它也发展了有很多年了。回顾从前，Web前端开发最基础核心的三剑客：*HTML*，*CSS*，*JavaScript*，可能还需要包括*Flash系列*，而现在除了*Flash*（如果你不是直播视频领域的话），基本上还扩充了*HTML5*，*CSS3*，*ES2015*，以及各种框架（backbone,react,angular等）。\n\n<!--more-->\n\n## 角色的定义\n\n前端开发也应该是**软件开发工程**，所以优秀的软件开发工程需要具备的知识，你也应该需要具备。\n\n1. 良好的数学逻辑\n2. 良好的数据结构与算法\n3. 操作系统\n4. 编译原理\n5. 计算机系统体系\n\n当你具备良好的基础知识时，对于**编程**二字才可能理解的更透彻。后续你才能进一步的去学习软件设计模式，标准，这些哲学范畴的思想，就好比你认识了汉字，才能阅读完一篇文章。\n\n当然如果你在学校学习的非常好，下列的学习资源推荐就当是复习吧。\n\n**学习资源推荐**\n\n1. 数学逻辑可以观看 *网易公开课* 或者 *iTunes U*\n2. 算法或者数据结构，你可以在[https://leetcode.com/](https://leetcode.com/)上刷题来练习\n3. 操作系统，我建议你阅读 **《操作系统精髓与设计原理》** 即可，如果理解起来费劲你可以继续去*公开课* 或者 *iTunes U*上搜索视频资源。PS：放心吧，肯定有。\n4. 编译原理，推荐在 *iTunes U* 搜索 **冯博琴老师** 的教学视频。\n5. 计算机系统体系有非常多的知识点，你可以继续搜索教学视频来观看。\n\n无论何时你都不能丢掉 *HTML*，*CSS*，这个问题在我的身上也出现过，过去很长的时间内我基本不怎么会 *CSS*，这也意味着当我需要去绘制UI时往往效率不高。\n\n其实，这个问题还是牵扯到了如何分配学习资源的问题，欢迎大家来讨论[《JS开发和重构这样的分工是否正确，JS开发者还需要继续深入学习CSS吗？》](https://github.com/icepy/_posts/issues/38)。\n\n如果你的基础知识还不够牢固，我推荐你阅读一下 **角色的定义** ，看一看你需要补全哪些方面的知识。如果你感觉你的基础知识还可以，请往下看：\n\n首先，我推荐大家先阅读一下 [重新介绍 JavaScript（JS 教程）](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript) 和 [层叠样式表 (Cascading Style Sheets)](https://developer.mozilla.org/zh-CN/docs/Web/CSS)\n\n**无经验的同学** 我推荐你先使用 [freeCodeCamp](https://www.freecodecamp.com/challenges/learn-how-free-code-camp-works)来学习基础的语法，配合 [JS bin](http://jsbin.com/tixoyutata/edit?html,css,js,console)来练习。另外，你还可以观看 [慕课网](http://www.imooc.com/) 中的 **HTML/CSS/JavaScript入门教学视频**来提高你的运用水平。\n\n**有其他语言开发经验的同学** 我推荐你直接学习一门框架，比如React或者Vue，先做一个小项目，比如React官方提供的To do应用，在这个过程中，你也基本熟悉了JS的语法，使用方式等。你可能还需要 [Devdocs](http://devdocs.io/) 来查看Api，这一点非常重要。\n\n当你渡过了入门阶段之后，如何提升可能会是你目前迫在眉睫的需求。回到Web领域，我们来看它的本质。本质是你所有的工作都在围绕着 **请求** 在处理逻辑。我认为提升的第一步是去研究 HTTP ，当你熟练掌握了 HTTP 以及它身后的 TCP之后，你才会真正理解Web开发的含义。（多线程处理，事件循环，缓存等等这些手段，不都是在如何处理请求么？）没事翻一翻《HTTP权威指南》还是有好处的。\n\n**套用一句老话，如果你的基础不扎实，一切都是“浮云”。**\n\n## 具备良好的视野\n\n> 良好的视野是你能看清楚趋势\n\n如果你现在还准备去学习 *Flash* ，那我只能说你的视野都被狗吃了。至少你可以通过社区来了解 *前端* 的发展动态，去了解出现了哪些新的框架，更新了哪些新的Api或者属性。未来一段时间内，国内或者国际厂商会使用哪些技术等等。\n\n最次一些的，你还可以关注 **Github** 来了解[项目](https://github.com/explore)的趋势。当然，你也可以阅读[https://www.awesomes.cn/rank?sort=trend](https://www.awesomes.cn/rank?sort=trend)\n\n瞧瞧这些年里前端发展的变化：\n\n1. 从框架层面开始：backbone -> angular -> react\n2. 工具生态：grunt -> gulp -> webpack\n3. 语言：JavaScript 1.3 -> ECMA 5 -> ECMA 2015，CSS2.1 -> CSS3.0，XHTML -> HTML4.0 -> HTML5.0\n4. Firefox OS （虽然它挂了）\n5. 桌面应用：NW.js -> Electron\n6. 出现了Node.js和Mongodb\n7. 服务端框架：Express -> koa\n8. 移动应用：PhoneGap -> Cordova | ionic -> React Native | weex\n9. 语法检查：jslint -> eslint\n10. 模块化：AMD | CMD -> Commonjs -> import export\n11. 语法增强：CoffeeScript -> Dart -> TypeScript\n\n... **旧技术虽然消亡了，但它们留下的思维启发永在。说不完的变化与发展，拥抱变化用心去体会吧。**\n\n## 戒浮躁，定乾坤\n\n> 随着前端生态圈的繁荣出产了更多的框架和解决方案。\n\n更久远之前我们是这样写前端的：\n\n使用jQuery来编写大量的业务逻辑和效果，圆角我需要四个图来拼接。\n\n2010-2016年的三个阶段：\n\n- 使用*backbone*的MVC组织源代码，大量的使用jQuery插件的形式来构建UI界面，那个年代仅用了*Grunt* 来处理一些合并，压缩的事情。\n- 构建工具换成了Gulp，对于业务进行了模块化分层（requirejs），研究angular.js来编写富应用程序。\n- 通过组件（react）来构建我们的Web页面，使用webpack来构建模块化和优化，平台向移动迁移，研究React Native这样的混合开发方式，并且使用上了ES6。\n\n生态圈的繁荣也容易让人产生选择困难症，东西越多越难选择，害怕今天刚学习了就被淘汰的心理。这个时候，我想最好的方式就是要戒浮躁，看着东西很多，其实选择一项，也足以。当你成为一个框架的大师时，你还害怕不能成为另一框架的大师吗？专业这个东西除了经验的积累和沉淀，最重要的本质是它们都是互相通顺的。\n\n目前，我选择了研究和使用react这样的生态做为自己的框架技术栈，从中学习也应用在公司的产品中，随着深挖它的源码，反而发现自己对于技术的理解又有了一次提升。\n\n## 做事更要学会思考\n\n对于刚刚参加工作的同学来说，思考比做事更重要。如果你为了业务而业务，不停的去堆积，只能说过些年你还是如此。去好好的想一想，编程到底是在做什么？\n\n**提出问题自问**\n\n1. 怎么才能写好代码，有时候洁癖或者说强迫症很可能会是你的原动力。\n2. 是不是该主动的去重构代码\n3. 我们需要对于业务代码进行一些分层吗？\n4. 我写的代码有没有符合团队制定的编程风格\n5. 我是不是该使用语言提供的Api，比如数组中的push，pop等。\n6. 公司使用的框架，我理解了吗？\n\n只有自己主动了，去思考了，才可能发现自己的很多问题，有时候自省也非常的重要。\n\n**学习Node**\n\n说真的Node.js在公司内部用于Web开发的场景并不是很多，仅仅是有一些尝试前后分离的项目，体验上来说依然不够友好。但是，这样的一个环境运行时，我认为是有必要学习的。更多的不谈，做为一个技术补充，它也是非常棒的。你可以先阅读 [七天学会NodeJS](http://nqdeng.github.io/7-days-nodejs/) 来入门，至少有一个普遍的了解。其次，建议你学习一个Web开发框架，比如 [koa](https://github.com/guo-yu/koa-guide)，然后，学习一下 [Mongoose](http://mongoosejs.com/) 来驱动数据。\n\n重要的是你应该一无既往的深入学习服务端的思想与知识。\n\n## 坚持写作\n\n> 坚持写作，是沉淀经验的最好机会\n\n所谓的温故而知新，专业在向前发展，接收的大量信息，在人脑中是有局限性的。很多知识，只会存在于一个印象或者一个引子，而写作不仅仅是分享，也是在沉淀你自己的经验。（这一个部分就不浪费篇幅了，我相信做为一个技术专业者，你应该懂的。）\n\n而且写作还能让你和其他开发者针对一个问题展开讨论，何乐而不为呢？\n\n## 提高工作或者学习的效率\n\n提高工作或者学习效率应该是一件非常重要的事情，首先应该需要合理的制定任务与时间，我相信 [trello](https://trello.com/)应该会是一个非常好的工具，来制定Task。\n\n其次，你还应该纪录自己的编程时间，用来了解每天都在编写哪些代码。你可以使用[WakaTime](https://wakatime.com)来分析你的编程。\n\n在学习过程中，你也可以使用[jsbin](http://jsbin.com/)来运行你的代码，观察结果。\n\n最后我认为你需要善用Chrome的书签，将一些资源进行合理的分类。\n\n**推荐列表**\n\n1. [Pocket](https://getpocket.com/)：收集和分类文章资源\n2. 在Chrome商店中搜索 **DHC** ，**Postman**，**JSON Editor** ：处理请求测试，JSON编辑和格式化\n3. [Web 技术文档](https://developer.mozilla.org/zh-CN/docs/Web) ：火狐提供的Web技术文档，查询的好帮手\n4. [http://caniuse.com/](http://caniuse.com/) ：查询CSS3,HTML5的支持度\n5. [https://kangax.github.io/compat-table/es6/](https://kangax.github.io/compat-table/es6/) ：查询ES6的支持度\n6. [Devdocs](http://devdocs.io/) ：框架文档集合\n7. [Travis-CI](https://travis-ci.org/) ：持续集成，我认为如果你善用它，可以帮助你解决很多事情\n8. [HTML5 Test](http://html5test.com/) ：打开这个网页可以将你使用的浏览器对HTML5的支持情况打印出来\n\n@guonanci 推荐 [https://github.com/buunguyen/octotree](https://github.com/buunguyen/octotree)\n\n学习任何一门技术，最重要的是要有耐心和恒心，不然一切都是“浮云”。\n\n工具篇，我建议大家阅读[《总结个人2015提高前端效率的方法和工具》](https://github.com/icepy/_posts/blob/master/blog/2015%E5%B9%B4%E5%89%8D%E7%AB%AF%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E7%9A%84%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7.md)\n","source":"_posts/issues-1.md","raw":"title: 我是这样学习前端的\ndate: 2016-05-16 15:49:38\ntags: 前端漫谈\nbanner: http://o80ub63i5.bkt.clouddn.com/image/issues-1.jpg\n---\n\n# 前沿\n\n> 算算时间今年（2016年）是进入前端开发这个领域第五个年头，自从上次总结完《我的编程之路》后，还想从更细节的方向上写一写自己是如何学习前端开发，并且还能够保持进步和对技术的敏感。\n\n对于现在进入这个领域的朋友们来说，很多东西其实你都可以选择放弃了，因为你的起点比之以前要提高了不少，但相对来说知识点又多了很多。PS：*至少你不用去兼容IE6了。*\n\n来看一看JavaScript的趋势图：\n\n> JavaScript 2016年5月 TOP 10\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/top20.png)\n\n> JavaScript 趋势图\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/index.png)\n\n> Github 2008-2015统计\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/github-languages.jpg)\n\n[最流行的编程语言JavaScript能做什么？](http://mp.weixin.qq.com/s?__biz=MjM5Mjg4NDMwMA==&mid=405412226&idx=1&sn=3bc7a9c6afd166591a90723a1802ed99&scene=4#wechat_redirect)\n\n虽然前端领域属于一个比较新的领域，但是至少它也发展了有很多年了。回顾从前，Web前端开发最基础核心的三剑客：*HTML*，*CSS*，*JavaScript*，可能还需要包括*Flash系列*，而现在除了*Flash*（如果你不是直播视频领域的话），基本上还扩充了*HTML5*，*CSS3*，*ES2015*，以及各种框架（backbone,react,angular等）。\n\n<!--more-->\n\n## 角色的定义\n\n前端开发也应该是**软件开发工程**，所以优秀的软件开发工程需要具备的知识，你也应该需要具备。\n\n1. 良好的数学逻辑\n2. 良好的数据结构与算法\n3. 操作系统\n4. 编译原理\n5. 计算机系统体系\n\n当你具备良好的基础知识时，对于**编程**二字才可能理解的更透彻。后续你才能进一步的去学习软件设计模式，标准，这些哲学范畴的思想，就好比你认识了汉字，才能阅读完一篇文章。\n\n当然如果你在学校学习的非常好，下列的学习资源推荐就当是复习吧。\n\n**学习资源推荐**\n\n1. 数学逻辑可以观看 *网易公开课* 或者 *iTunes U*\n2. 算法或者数据结构，你可以在[https://leetcode.com/](https://leetcode.com/)上刷题来练习\n3. 操作系统，我建议你阅读 **《操作系统精髓与设计原理》** 即可，如果理解起来费劲你可以继续去*公开课* 或者 *iTunes U*上搜索视频资源。PS：放心吧，肯定有。\n4. 编译原理，推荐在 *iTunes U* 搜索 **冯博琴老师** 的教学视频。\n5. 计算机系统体系有非常多的知识点，你可以继续搜索教学视频来观看。\n\n无论何时你都不能丢掉 *HTML*，*CSS*，这个问题在我的身上也出现过，过去很长的时间内我基本不怎么会 *CSS*，这也意味着当我需要去绘制UI时往往效率不高。\n\n其实，这个问题还是牵扯到了如何分配学习资源的问题，欢迎大家来讨论[《JS开发和重构这样的分工是否正确，JS开发者还需要继续深入学习CSS吗？》](https://github.com/icepy/_posts/issues/38)。\n\n如果你的基础知识还不够牢固，我推荐你阅读一下 **角色的定义** ，看一看你需要补全哪些方面的知识。如果你感觉你的基础知识还可以，请往下看：\n\n首先，我推荐大家先阅读一下 [重新介绍 JavaScript（JS 教程）](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript) 和 [层叠样式表 (Cascading Style Sheets)](https://developer.mozilla.org/zh-CN/docs/Web/CSS)\n\n**无经验的同学** 我推荐你先使用 [freeCodeCamp](https://www.freecodecamp.com/challenges/learn-how-free-code-camp-works)来学习基础的语法，配合 [JS bin](http://jsbin.com/tixoyutata/edit?html,css,js,console)来练习。另外，你还可以观看 [慕课网](http://www.imooc.com/) 中的 **HTML/CSS/JavaScript入门教学视频**来提高你的运用水平。\n\n**有其他语言开发经验的同学** 我推荐你直接学习一门框架，比如React或者Vue，先做一个小项目，比如React官方提供的To do应用，在这个过程中，你也基本熟悉了JS的语法，使用方式等。你可能还需要 [Devdocs](http://devdocs.io/) 来查看Api，这一点非常重要。\n\n当你渡过了入门阶段之后，如何提升可能会是你目前迫在眉睫的需求。回到Web领域，我们来看它的本质。本质是你所有的工作都在围绕着 **请求** 在处理逻辑。我认为提升的第一步是去研究 HTTP ，当你熟练掌握了 HTTP 以及它身后的 TCP之后，你才会真正理解Web开发的含义。（多线程处理，事件循环，缓存等等这些手段，不都是在如何处理请求么？）没事翻一翻《HTTP权威指南》还是有好处的。\n\n**套用一句老话，如果你的基础不扎实，一切都是“浮云”。**\n\n## 具备良好的视野\n\n> 良好的视野是你能看清楚趋势\n\n如果你现在还准备去学习 *Flash* ，那我只能说你的视野都被狗吃了。至少你可以通过社区来了解 *前端* 的发展动态，去了解出现了哪些新的框架，更新了哪些新的Api或者属性。未来一段时间内，国内或者国际厂商会使用哪些技术等等。\n\n最次一些的，你还可以关注 **Github** 来了解[项目](https://github.com/explore)的趋势。当然，你也可以阅读[https://www.awesomes.cn/rank?sort=trend](https://www.awesomes.cn/rank?sort=trend)\n\n瞧瞧这些年里前端发展的变化：\n\n1. 从框架层面开始：backbone -> angular -> react\n2. 工具生态：grunt -> gulp -> webpack\n3. 语言：JavaScript 1.3 -> ECMA 5 -> ECMA 2015，CSS2.1 -> CSS3.0，XHTML -> HTML4.0 -> HTML5.0\n4. Firefox OS （虽然它挂了）\n5. 桌面应用：NW.js -> Electron\n6. 出现了Node.js和Mongodb\n7. 服务端框架：Express -> koa\n8. 移动应用：PhoneGap -> Cordova | ionic -> React Native | weex\n9. 语法检查：jslint -> eslint\n10. 模块化：AMD | CMD -> Commonjs -> import export\n11. 语法增强：CoffeeScript -> Dart -> TypeScript\n\n... **旧技术虽然消亡了，但它们留下的思维启发永在。说不完的变化与发展，拥抱变化用心去体会吧。**\n\n## 戒浮躁，定乾坤\n\n> 随着前端生态圈的繁荣出产了更多的框架和解决方案。\n\n更久远之前我们是这样写前端的：\n\n使用jQuery来编写大量的业务逻辑和效果，圆角我需要四个图来拼接。\n\n2010-2016年的三个阶段：\n\n- 使用*backbone*的MVC组织源代码，大量的使用jQuery插件的形式来构建UI界面，那个年代仅用了*Grunt* 来处理一些合并，压缩的事情。\n- 构建工具换成了Gulp，对于业务进行了模块化分层（requirejs），研究angular.js来编写富应用程序。\n- 通过组件（react）来构建我们的Web页面，使用webpack来构建模块化和优化，平台向移动迁移，研究React Native这样的混合开发方式，并且使用上了ES6。\n\n生态圈的繁荣也容易让人产生选择困难症，东西越多越难选择，害怕今天刚学习了就被淘汰的心理。这个时候，我想最好的方式就是要戒浮躁，看着东西很多，其实选择一项，也足以。当你成为一个框架的大师时，你还害怕不能成为另一框架的大师吗？专业这个东西除了经验的积累和沉淀，最重要的本质是它们都是互相通顺的。\n\n目前，我选择了研究和使用react这样的生态做为自己的框架技术栈，从中学习也应用在公司的产品中，随着深挖它的源码，反而发现自己对于技术的理解又有了一次提升。\n\n## 做事更要学会思考\n\n对于刚刚参加工作的同学来说，思考比做事更重要。如果你为了业务而业务，不停的去堆积，只能说过些年你还是如此。去好好的想一想，编程到底是在做什么？\n\n**提出问题自问**\n\n1. 怎么才能写好代码，有时候洁癖或者说强迫症很可能会是你的原动力。\n2. 是不是该主动的去重构代码\n3. 我们需要对于业务代码进行一些分层吗？\n4. 我写的代码有没有符合团队制定的编程风格\n5. 我是不是该使用语言提供的Api，比如数组中的push，pop等。\n6. 公司使用的框架，我理解了吗？\n\n只有自己主动了，去思考了，才可能发现自己的很多问题，有时候自省也非常的重要。\n\n**学习Node**\n\n说真的Node.js在公司内部用于Web开发的场景并不是很多，仅仅是有一些尝试前后分离的项目，体验上来说依然不够友好。但是，这样的一个环境运行时，我认为是有必要学习的。更多的不谈，做为一个技术补充，它也是非常棒的。你可以先阅读 [七天学会NodeJS](http://nqdeng.github.io/7-days-nodejs/) 来入门，至少有一个普遍的了解。其次，建议你学习一个Web开发框架，比如 [koa](https://github.com/guo-yu/koa-guide)，然后，学习一下 [Mongoose](http://mongoosejs.com/) 来驱动数据。\n\n重要的是你应该一无既往的深入学习服务端的思想与知识。\n\n## 坚持写作\n\n> 坚持写作，是沉淀经验的最好机会\n\n所谓的温故而知新，专业在向前发展，接收的大量信息，在人脑中是有局限性的。很多知识，只会存在于一个印象或者一个引子，而写作不仅仅是分享，也是在沉淀你自己的经验。（这一个部分就不浪费篇幅了，我相信做为一个技术专业者，你应该懂的。）\n\n而且写作还能让你和其他开发者针对一个问题展开讨论，何乐而不为呢？\n\n## 提高工作或者学习的效率\n\n提高工作或者学习效率应该是一件非常重要的事情，首先应该需要合理的制定任务与时间，我相信 [trello](https://trello.com/)应该会是一个非常好的工具，来制定Task。\n\n其次，你还应该纪录自己的编程时间，用来了解每天都在编写哪些代码。你可以使用[WakaTime](https://wakatime.com)来分析你的编程。\n\n在学习过程中，你也可以使用[jsbin](http://jsbin.com/)来运行你的代码，观察结果。\n\n最后我认为你需要善用Chrome的书签，将一些资源进行合理的分类。\n\n**推荐列表**\n\n1. [Pocket](https://getpocket.com/)：收集和分类文章资源\n2. 在Chrome商店中搜索 **DHC** ，**Postman**，**JSON Editor** ：处理请求测试，JSON编辑和格式化\n3. [Web 技术文档](https://developer.mozilla.org/zh-CN/docs/Web) ：火狐提供的Web技术文档，查询的好帮手\n4. [http://caniuse.com/](http://caniuse.com/) ：查询CSS3,HTML5的支持度\n5. [https://kangax.github.io/compat-table/es6/](https://kangax.github.io/compat-table/es6/) ：查询ES6的支持度\n6. [Devdocs](http://devdocs.io/) ：框架文档集合\n7. [Travis-CI](https://travis-ci.org/) ：持续集成，我认为如果你善用它，可以帮助你解决很多事情\n8. [HTML5 Test](http://html5test.com/) ：打开这个网页可以将你使用的浏览器对HTML5的支持情况打印出来\n\n@guonanci 推荐 [https://github.com/buunguyen/octotree](https://github.com/buunguyen/octotree)\n\n学习任何一门技术，最重要的是要有耐心和恒心，不然一切都是“浮云”。\n\n工具篇，我建议大家阅读[《总结个人2015提高前端效率的方法和工具》](https://github.com/icepy/_posts/blob/master/blog/2015%E5%B9%B4%E5%89%8D%E7%AB%AF%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E7%9A%84%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7.md)\n","slug":"issues-1","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk030009uejrs3xk2xws","content":"<h1 id=\"前沿\"><a href=\"#前沿\" class=\"headerlink\" title=\"前沿\"></a>前沿</h1><blockquote>\n<p>算算时间今年（2016年）是进入前端开发这个领域第五个年头，自从上次总结完《我的编程之路》后，还想从更细节的方向上写一写自己是如何学习前端开发，并且还能够保持进步和对技术的敏感。</p>\n</blockquote>\n<p>对于现在进入这个领域的朋友们来说，很多东西其实你都可以选择放弃了，因为你的起点比之以前要提高了不少，但相对来说知识点又多了很多。PS：<em>至少你不用去兼容IE6了。</em></p>\n<p>来看一看JavaScript的趋势图：</p>\n<blockquote>\n<p>JavaScript 2016年5月 TOP 10</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/top20.png\" alt=\"\"></p>\n<blockquote>\n<p>JavaScript 趋势图</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/index.png\" alt=\"\"></p>\n<blockquote>\n<p>Github 2008-2015统计</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/github-languages.jpg\" alt=\"\"></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5Mjg4NDMwMA==&amp;mid=405412226&amp;idx=1&amp;sn=3bc7a9c6afd166591a90723a1802ed99&amp;scene=4#wechat_redirect\" target=\"_blank\" rel=\"external\">最流行的编程语言JavaScript能做什么？</a></p>\n<p>虽然前端领域属于一个比较新的领域，但是至少它也发展了有很多年了。回顾从前，Web前端开发最基础核心的三剑客：<em>HTML</em>，<em>CSS</em>，<em>JavaScript</em>，可能还需要包括<em>Flash系列</em>，而现在除了<em>Flash</em>（如果你不是直播视频领域的话），基本上还扩充了<em>HTML5</em>，<em>CSS3</em>，<em>ES2015</em>，以及各种框架（backbone,react,angular等）。</p>\n<a id=\"more\"></a>\n<h2 id=\"角色的定义\"><a href=\"#角色的定义\" class=\"headerlink\" title=\"角色的定义\"></a>角色的定义</h2><p>前端开发也应该是<strong>软件开发工程</strong>，所以优秀的软件开发工程需要具备的知识，你也应该需要具备。</p>\n<ol>\n<li>良好的数学逻辑</li>\n<li>良好的数据结构与算法</li>\n<li>操作系统</li>\n<li>编译原理</li>\n<li>计算机系统体系</li>\n</ol>\n<p>当你具备良好的基础知识时，对于<strong>编程</strong>二字才可能理解的更透彻。后续你才能进一步的去学习软件设计模式，标准，这些哲学范畴的思想，就好比你认识了汉字，才能阅读完一篇文章。</p>\n<p>当然如果你在学校学习的非常好，下列的学习资源推荐就当是复习吧。</p>\n<p><strong>学习资源推荐</strong></p>\n<ol>\n<li>数学逻辑可以观看 <em>网易公开课</em> 或者 <em>iTunes U</em></li>\n<li>算法或者数据结构，你可以在<a href=\"https://leetcode.com/\" target=\"_blank\" rel=\"external\">https://leetcode.com/</a>上刷题来练习</li>\n<li>操作系统，我建议你阅读 <strong>《操作系统精髓与设计原理》</strong> 即可，如果理解起来费劲你可以继续去<em>公开课</em> 或者 <em>iTunes U</em>上搜索视频资源。PS：放心吧，肯定有。</li>\n<li>编译原理，推荐在 <em>iTunes U</em> 搜索 <strong>冯博琴老师</strong> 的教学视频。</li>\n<li>计算机系统体系有非常多的知识点，你可以继续搜索教学视频来观看。</li>\n</ol>\n<p>无论何时你都不能丢掉 <em>HTML</em>，<em>CSS</em>，这个问题在我的身上也出现过，过去很长的时间内我基本不怎么会 <em>CSS</em>，这也意味着当我需要去绘制UI时往往效率不高。</p>\n<p>其实，这个问题还是牵扯到了如何分配学习资源的问题，欢迎大家来讨论<a href=\"https://github.com/icepy/_posts/issues/38\" target=\"_blank\" rel=\"external\">《JS开发和重构这样的分工是否正确，JS开发者还需要继续深入学习CSS吗？》</a>。</p>\n<p>如果你的基础知识还不够牢固，我推荐你阅读一下 <strong>角色的定义</strong> ，看一看你需要补全哪些方面的知识。如果你感觉你的基础知识还可以，请往下看：</p>\n<p>首先，我推荐大家先阅读一下 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript\" target=\"_blank\" rel=\"external\">重新介绍 JavaScript（JS 教程）</a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS\" target=\"_blank\" rel=\"external\">层叠样式表 (Cascading Style Sheets)</a></p>\n<p><strong>无经验的同学</strong> 我推荐你先使用 <a href=\"https://www.freecodecamp.com/challenges/learn-how-free-code-camp-works\" target=\"_blank\" rel=\"external\">freeCodeCamp</a>来学习基础的语法，配合 <a href=\"http://jsbin.com/tixoyutata/edit?html,css,js,console\" target=\"_blank\" rel=\"external\">JS bin</a>来练习。另外，你还可以观看 <a href=\"http://www.imooc.com/\" target=\"_blank\" rel=\"external\">慕课网</a> 中的 <strong>HTML/CSS/JavaScript入门教学视频</strong>来提高你的运用水平。</p>\n<p><strong>有其他语言开发经验的同学</strong> 我推荐你直接学习一门框架，比如React或者Vue，先做一个小项目，比如React官方提供的To do应用，在这个过程中，你也基本熟悉了JS的语法，使用方式等。你可能还需要 <a href=\"http://devdocs.io/\" target=\"_blank\" rel=\"external\">Devdocs</a> 来查看Api，这一点非常重要。</p>\n<p>当你渡过了入门阶段之后，如何提升可能会是你目前迫在眉睫的需求。回到Web领域，我们来看它的本质。本质是你所有的工作都在围绕着 <strong>请求</strong> 在处理逻辑。我认为提升的第一步是去研究 HTTP ，当你熟练掌握了 HTTP 以及它身后的 TCP之后，你才会真正理解Web开发的含义。（多线程处理，事件循环，缓存等等这些手段，不都是在如何处理请求么？）没事翻一翻《HTTP权威指南》还是有好处的。</p>\n<p><strong>套用一句老话，如果你的基础不扎实，一切都是“浮云”。</strong></p>\n<h2 id=\"具备良好的视野\"><a href=\"#具备良好的视野\" class=\"headerlink\" title=\"具备良好的视野\"></a>具备良好的视野</h2><blockquote>\n<p>良好的视野是你能看清楚趋势</p>\n</blockquote>\n<p>如果你现在还准备去学习 <em>Flash</em> ，那我只能说你的视野都被狗吃了。至少你可以通过社区来了解 <em>前端</em> 的发展动态，去了解出现了哪些新的框架，更新了哪些新的Api或者属性。未来一段时间内，国内或者国际厂商会使用哪些技术等等。</p>\n<p>最次一些的，你还可以关注 <strong>Github</strong> 来了解<a href=\"https://github.com/explore\" target=\"_blank\" rel=\"external\">项目</a>的趋势。当然，你也可以阅读<a href=\"https://www.awesomes.cn/rank?sort=trend\" target=\"_blank\" rel=\"external\">https://www.awesomes.cn/rank?sort=trend</a></p>\n<p>瞧瞧这些年里前端发展的变化：</p>\n<ol>\n<li>从框架层面开始：backbone -&gt; angular -&gt; react</li>\n<li>工具生态：grunt -&gt; gulp -&gt; webpack</li>\n<li>语言：JavaScript 1.3 -&gt; ECMA 5 -&gt; ECMA 2015，CSS2.1 -&gt; CSS3.0，XHTML -&gt; HTML4.0 -&gt; HTML5.0</li>\n<li>Firefox OS （虽然它挂了）</li>\n<li>桌面应用：NW.js -&gt; Electron</li>\n<li>出现了Node.js和Mongodb</li>\n<li>服务端框架：Express -&gt; koa</li>\n<li>移动应用：PhoneGap -&gt; Cordova | ionic -&gt; React Native | weex</li>\n<li>语法检查：jslint -&gt; eslint</li>\n<li>模块化：AMD | CMD -&gt; Commonjs -&gt; import export</li>\n<li>语法增强：CoffeeScript -&gt; Dart -&gt; TypeScript</li>\n</ol>\n<p>… <strong>旧技术虽然消亡了，但它们留下的思维启发永在。说不完的变化与发展，拥抱变化用心去体会吧。</strong></p>\n<h2 id=\"戒浮躁，定乾坤\"><a href=\"#戒浮躁，定乾坤\" class=\"headerlink\" title=\"戒浮躁，定乾坤\"></a>戒浮躁，定乾坤</h2><blockquote>\n<p>随着前端生态圈的繁荣出产了更多的框架和解决方案。</p>\n</blockquote>\n<p>更久远之前我们是这样写前端的：</p>\n<p>使用jQuery来编写大量的业务逻辑和效果，圆角我需要四个图来拼接。</p>\n<p>2010-2016年的三个阶段：</p>\n<ul>\n<li>使用<em>backbone</em>的MVC组织源代码，大量的使用jQuery插件的形式来构建UI界面，那个年代仅用了<em>Grunt</em> 来处理一些合并，压缩的事情。</li>\n<li>构建工具换成了Gulp，对于业务进行了模块化分层（requirejs），研究angular.js来编写富应用程序。</li>\n<li>通过组件（react）来构建我们的Web页面，使用webpack来构建模块化和优化，平台向移动迁移，研究React Native这样的混合开发方式，并且使用上了ES6。</li>\n</ul>\n<p>生态圈的繁荣也容易让人产生选择困难症，东西越多越难选择，害怕今天刚学习了就被淘汰的心理。这个时候，我想最好的方式就是要戒浮躁，看着东西很多，其实选择一项，也足以。当你成为一个框架的大师时，你还害怕不能成为另一框架的大师吗？专业这个东西除了经验的积累和沉淀，最重要的本质是它们都是互相通顺的。</p>\n<p>目前，我选择了研究和使用react这样的生态做为自己的框架技术栈，从中学习也应用在公司的产品中，随着深挖它的源码，反而发现自己对于技术的理解又有了一次提升。</p>\n<h2 id=\"做事更要学会思考\"><a href=\"#做事更要学会思考\" class=\"headerlink\" title=\"做事更要学会思考\"></a>做事更要学会思考</h2><p>对于刚刚参加工作的同学来说，思考比做事更重要。如果你为了业务而业务，不停的去堆积，只能说过些年你还是如此。去好好的想一想，编程到底是在做什么？</p>\n<p><strong>提出问题自问</strong></p>\n<ol>\n<li>怎么才能写好代码，有时候洁癖或者说强迫症很可能会是你的原动力。</li>\n<li>是不是该主动的去重构代码</li>\n<li>我们需要对于业务代码进行一些分层吗？</li>\n<li>我写的代码有没有符合团队制定的编程风格</li>\n<li>我是不是该使用语言提供的Api，比如数组中的push，pop等。</li>\n<li>公司使用的框架，我理解了吗？</li>\n</ol>\n<p>只有自己主动了，去思考了，才可能发现自己的很多问题，有时候自省也非常的重要。</p>\n<p><strong>学习Node</strong></p>\n<p>说真的Node.js在公司内部用于Web开发的场景并不是很多，仅仅是有一些尝试前后分离的项目，体验上来说依然不够友好。但是，这样的一个环境运行时，我认为是有必要学习的。更多的不谈，做为一个技术补充，它也是非常棒的。你可以先阅读 <a href=\"http://nqdeng.github.io/7-days-nodejs/\" target=\"_blank\" rel=\"external\">七天学会NodeJS</a> 来入门，至少有一个普遍的了解。其次，建议你学习一个Web开发框架，比如 <a href=\"https://github.com/guo-yu/koa-guide\" target=\"_blank\" rel=\"external\">koa</a>，然后，学习一下 <a href=\"http://mongoosejs.com/\" target=\"_blank\" rel=\"external\">Mongoose</a> 来驱动数据。</p>\n<p>重要的是你应该一无既往的深入学习服务端的思想与知识。</p>\n<h2 id=\"坚持写作\"><a href=\"#坚持写作\" class=\"headerlink\" title=\"坚持写作\"></a>坚持写作</h2><blockquote>\n<p>坚持写作，是沉淀经验的最好机会</p>\n</blockquote>\n<p>所谓的温故而知新，专业在向前发展，接收的大量信息，在人脑中是有局限性的。很多知识，只会存在于一个印象或者一个引子，而写作不仅仅是分享，也是在沉淀你自己的经验。（这一个部分就不浪费篇幅了，我相信做为一个技术专业者，你应该懂的。）</p>\n<p>而且写作还能让你和其他开发者针对一个问题展开讨论，何乐而不为呢？</p>\n<h2 id=\"提高工作或者学习的效率\"><a href=\"#提高工作或者学习的效率\" class=\"headerlink\" title=\"提高工作或者学习的效率\"></a>提高工作或者学习的效率</h2><p>提高工作或者学习效率应该是一件非常重要的事情，首先应该需要合理的制定任务与时间，我相信 <a href=\"https://trello.com/\" target=\"_blank\" rel=\"external\">trello</a>应该会是一个非常好的工具，来制定Task。</p>\n<p>其次，你还应该纪录自己的编程时间，用来了解每天都在编写哪些代码。你可以使用<a href=\"https://wakatime.com\" target=\"_blank\" rel=\"external\">WakaTime</a>来分析你的编程。</p>\n<p>在学习过程中，你也可以使用<a href=\"http://jsbin.com/\" target=\"_blank\" rel=\"external\">jsbin</a>来运行你的代码，观察结果。</p>\n<p>最后我认为你需要善用Chrome的书签，将一些资源进行合理的分类。</p>\n<p><strong>推荐列表</strong></p>\n<ol>\n<li><a href=\"https://getpocket.com/\" target=\"_blank\" rel=\"external\">Pocket</a>：收集和分类文章资源</li>\n<li>在Chrome商店中搜索 <strong>DHC</strong> ，<strong>Postman</strong>，<strong>JSON Editor</strong> ：处理请求测试，JSON编辑和格式化</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web\" target=\"_blank\" rel=\"external\">Web 技术文档</a> ：火狐提供的Web技术文档，查询的好帮手</li>\n<li><a href=\"http://caniuse.com/\" target=\"_blank\" rel=\"external\">http://caniuse.com/</a> ：查询CSS3,HTML5的支持度</li>\n<li><a href=\"https://kangax.github.io/compat-table/es6/\" target=\"_blank\" rel=\"external\">https://kangax.github.io/compat-table/es6/</a> ：查询ES6的支持度</li>\n<li><a href=\"http://devdocs.io/\" target=\"_blank\" rel=\"external\">Devdocs</a> ：框架文档集合</li>\n<li><a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"external\">Travis-CI</a> ：持续集成，我认为如果你善用它，可以帮助你解决很多事情</li>\n<li><a href=\"http://html5test.com/\" target=\"_blank\" rel=\"external\">HTML5 Test</a> ：打开这个网页可以将你使用的浏览器对HTML5的支持情况打印出来</li>\n</ol>\n<p>@guonanci 推荐 <a href=\"https://github.com/buunguyen/octotree\" target=\"_blank\" rel=\"external\">https://github.com/buunguyen/octotree</a></p>\n<p>学习任何一门技术，最重要的是要有耐心和恒心，不然一切都是“浮云”。</p>\n<p>工具篇，我建议大家阅读<a href=\"https://github.com/icepy/_posts/blob/master/blog/2015%E5%B9%B4%E5%89%8D%E7%AB%AF%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E7%9A%84%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7.md\" target=\"_blank\" rel=\"external\">《总结个人2015提高前端效率的方法和工具》</a></p>\n","excerpt":"<h1 id=\"前沿\"><a href=\"#前沿\" class=\"headerlink\" title=\"前沿\"></a>前沿</h1><blockquote>\n<p>算算时间今年（2016年）是进入前端开发这个领域第五个年头，自从上次总结完《我的编程之路》后，还想从更细节的方向上写一写自己是如何学习前端开发，并且还能够保持进步和对技术的敏感。</p>\n</blockquote>\n<p>对于现在进入这个领域的朋友们来说，很多东西其实你都可以选择放弃了，因为你的起点比之以前要提高了不少，但相对来说知识点又多了很多。PS：<em>至少你不用去兼容IE6了。</em></p>\n<p>来看一看JavaScript的趋势图：</p>\n<blockquote>\n<p>JavaScript 2016年5月 TOP 10</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/top20.png\" alt=\"\"></p>\n<blockquote>\n<p>JavaScript 趋势图</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/index.png\" alt=\"\"></p>\n<blockquote>\n<p>Github 2008-2015统计</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/github-languages.jpg\" alt=\"\"></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5Mjg4NDMwMA==&amp;mid=405412226&amp;idx=1&amp;sn=3bc7a9c6afd166591a90723a1802ed99&amp;scene=4#wechat_redirect\">最流行的编程语言JavaScript能做什么？</a></p>\n<p>虽然前端领域属于一个比较新的领域，但是至少它也发展了有很多年了。回顾从前，Web前端开发最基础核心的三剑客：<em>HTML</em>，<em>CSS</em>，<em>JavaScript</em>，可能还需要包括<em>Flash系列</em>，而现在除了<em>Flash</em>（如果你不是直播视频领域的话），基本上还扩充了<em>HTML5</em>，<em>CSS3</em>，<em>ES2015</em>，以及各种框架（backbone,react,angular等）。</p>","more":"<h2 id=\"角色的定义\"><a href=\"#角色的定义\" class=\"headerlink\" title=\"角色的定义\"></a>角色的定义</h2><p>前端开发也应该是<strong>软件开发工程</strong>，所以优秀的软件开发工程需要具备的知识，你也应该需要具备。</p>\n<ol>\n<li>良好的数学逻辑</li>\n<li>良好的数据结构与算法</li>\n<li>操作系统</li>\n<li>编译原理</li>\n<li>计算机系统体系</li>\n</ol>\n<p>当你具备良好的基础知识时，对于<strong>编程</strong>二字才可能理解的更透彻。后续你才能进一步的去学习软件设计模式，标准，这些哲学范畴的思想，就好比你认识了汉字，才能阅读完一篇文章。</p>\n<p>当然如果你在学校学习的非常好，下列的学习资源推荐就当是复习吧。</p>\n<p><strong>学习资源推荐</strong></p>\n<ol>\n<li>数学逻辑可以观看 <em>网易公开课</em> 或者 <em>iTunes U</em></li>\n<li>算法或者数据结构，你可以在<a href=\"https://leetcode.com/\">https://leetcode.com/</a>上刷题来练习</li>\n<li>操作系统，我建议你阅读 <strong>《操作系统精髓与设计原理》</strong> 即可，如果理解起来费劲你可以继续去<em>公开课</em> 或者 <em>iTunes U</em>上搜索视频资源。PS：放心吧，肯定有。</li>\n<li>编译原理，推荐在 <em>iTunes U</em> 搜索 <strong>冯博琴老师</strong> 的教学视频。</li>\n<li>计算机系统体系有非常多的知识点，你可以继续搜索教学视频来观看。</li>\n</ol>\n<p>无论何时你都不能丢掉 <em>HTML</em>，<em>CSS</em>，这个问题在我的身上也出现过，过去很长的时间内我基本不怎么会 <em>CSS</em>，这也意味着当我需要去绘制UI时往往效率不高。</p>\n<p>其实，这个问题还是牵扯到了如何分配学习资源的问题，欢迎大家来讨论<a href=\"https://github.com/icepy/_posts/issues/38\">《JS开发和重构这样的分工是否正确，JS开发者还需要继续深入学习CSS吗？》</a>。</p>\n<p>如果你的基础知识还不够牢固，我推荐你阅读一下 <strong>角色的定义</strong> ，看一看你需要补全哪些方面的知识。如果你感觉你的基础知识还可以，请往下看：</p>\n<p>首先，我推荐大家先阅读一下 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">重新介绍 JavaScript（JS 教程）</a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS\">层叠样式表 (Cascading Style Sheets)</a></p>\n<p><strong>无经验的同学</strong> 我推荐你先使用 <a href=\"https://www.freecodecamp.com/challenges/learn-how-free-code-camp-works\">freeCodeCamp</a>来学习基础的语法，配合 <a href=\"http://jsbin.com/tixoyutata/edit?html,css,js,console\">JS bin</a>来练习。另外，你还可以观看 <a href=\"http://www.imooc.com/\">慕课网</a> 中的 <strong>HTML/CSS/JavaScript入门教学视频</strong>来提高你的运用水平。</p>\n<p><strong>有其他语言开发经验的同学</strong> 我推荐你直接学习一门框架，比如React或者Vue，先做一个小项目，比如React官方提供的To do应用，在这个过程中，你也基本熟悉了JS的语法，使用方式等。你可能还需要 <a href=\"http://devdocs.io/\">Devdocs</a> 来查看Api，这一点非常重要。</p>\n<p>当你渡过了入门阶段之后，如何提升可能会是你目前迫在眉睫的需求。回到Web领域，我们来看它的本质。本质是你所有的工作都在围绕着 <strong>请求</strong> 在处理逻辑。我认为提升的第一步是去研究 HTTP ，当你熟练掌握了 HTTP 以及它身后的 TCP之后，你才会真正理解Web开发的含义。（多线程处理，事件循环，缓存等等这些手段，不都是在如何处理请求么？）没事翻一翻《HTTP权威指南》还是有好处的。</p>\n<p><strong>套用一句老话，如果你的基础不扎实，一切都是“浮云”。</strong></p>\n<h2 id=\"具备良好的视野\"><a href=\"#具备良好的视野\" class=\"headerlink\" title=\"具备良好的视野\"></a>具备良好的视野</h2><blockquote>\n<p>良好的视野是你能看清楚趋势</p>\n</blockquote>\n<p>如果你现在还准备去学习 <em>Flash</em> ，那我只能说你的视野都被狗吃了。至少你可以通过社区来了解 <em>前端</em> 的发展动态，去了解出现了哪些新的框架，更新了哪些新的Api或者属性。未来一段时间内，国内或者国际厂商会使用哪些技术等等。</p>\n<p>最次一些的，你还可以关注 <strong>Github</strong> 来了解<a href=\"https://github.com/explore\">项目</a>的趋势。当然，你也可以阅读<a href=\"https://www.awesomes.cn/rank?sort=trend\">https://www.awesomes.cn/rank?sort=trend</a></p>\n<p>瞧瞧这些年里前端发展的变化：</p>\n<ol>\n<li>从框架层面开始：backbone -&gt; angular -&gt; react</li>\n<li>工具生态：grunt -&gt; gulp -&gt; webpack</li>\n<li>语言：JavaScript 1.3 -&gt; ECMA 5 -&gt; ECMA 2015，CSS2.1 -&gt; CSS3.0，XHTML -&gt; HTML4.0 -&gt; HTML5.0</li>\n<li>Firefox OS （虽然它挂了）</li>\n<li>桌面应用：NW.js -&gt; Electron</li>\n<li>出现了Node.js和Mongodb</li>\n<li>服务端框架：Express -&gt; koa</li>\n<li>移动应用：PhoneGap -&gt; Cordova | ionic -&gt; React Native | weex</li>\n<li>语法检查：jslint -&gt; eslint</li>\n<li>模块化：AMD | CMD -&gt; Commonjs -&gt; import export</li>\n<li>语法增强：CoffeeScript -&gt; Dart -&gt; TypeScript</li>\n</ol>\n<p>… <strong>旧技术虽然消亡了，但它们留下的思维启发永在。说不完的变化与发展，拥抱变化用心去体会吧。</strong></p>\n<h2 id=\"戒浮躁，定乾坤\"><a href=\"#戒浮躁，定乾坤\" class=\"headerlink\" title=\"戒浮躁，定乾坤\"></a>戒浮躁，定乾坤</h2><blockquote>\n<p>随着前端生态圈的繁荣出产了更多的框架和解决方案。</p>\n</blockquote>\n<p>更久远之前我们是这样写前端的：</p>\n<p>使用jQuery来编写大量的业务逻辑和效果，圆角我需要四个图来拼接。</p>\n<p>2010-2016年的三个阶段：</p>\n<ul>\n<li>使用<em>backbone</em>的MVC组织源代码，大量的使用jQuery插件的形式来构建UI界面，那个年代仅用了<em>Grunt</em> 来处理一些合并，压缩的事情。</li>\n<li>构建工具换成了Gulp，对于业务进行了模块化分层（requirejs），研究angular.js来编写富应用程序。</li>\n<li>通过组件（react）来构建我们的Web页面，使用webpack来构建模块化和优化，平台向移动迁移，研究React Native这样的混合开发方式，并且使用上了ES6。</li>\n</ul>\n<p>生态圈的繁荣也容易让人产生选择困难症，东西越多越难选择，害怕今天刚学习了就被淘汰的心理。这个时候，我想最好的方式就是要戒浮躁，看着东西很多，其实选择一项，也足以。当你成为一个框架的大师时，你还害怕不能成为另一框架的大师吗？专业这个东西除了经验的积累和沉淀，最重要的本质是它们都是互相通顺的。</p>\n<p>目前，我选择了研究和使用react这样的生态做为自己的框架技术栈，从中学习也应用在公司的产品中，随着深挖它的源码，反而发现自己对于技术的理解又有了一次提升。</p>\n<h2 id=\"做事更要学会思考\"><a href=\"#做事更要学会思考\" class=\"headerlink\" title=\"做事更要学会思考\"></a>做事更要学会思考</h2><p>对于刚刚参加工作的同学来说，思考比做事更重要。如果你为了业务而业务，不停的去堆积，只能说过些年你还是如此。去好好的想一想，编程到底是在做什么？</p>\n<p><strong>提出问题自问</strong></p>\n<ol>\n<li>怎么才能写好代码，有时候洁癖或者说强迫症很可能会是你的原动力。</li>\n<li>是不是该主动的去重构代码</li>\n<li>我们需要对于业务代码进行一些分层吗？</li>\n<li>我写的代码有没有符合团队制定的编程风格</li>\n<li>我是不是该使用语言提供的Api，比如数组中的push，pop等。</li>\n<li>公司使用的框架，我理解了吗？</li>\n</ol>\n<p>只有自己主动了，去思考了，才可能发现自己的很多问题，有时候自省也非常的重要。</p>\n<p><strong>学习Node</strong></p>\n<p>说真的Node.js在公司内部用于Web开发的场景并不是很多，仅仅是有一些尝试前后分离的项目，体验上来说依然不够友好。但是，这样的一个环境运行时，我认为是有必要学习的。更多的不谈，做为一个技术补充，它也是非常棒的。你可以先阅读 <a href=\"http://nqdeng.github.io/7-days-nodejs/\">七天学会NodeJS</a> 来入门，至少有一个普遍的了解。其次，建议你学习一个Web开发框架，比如 <a href=\"https://github.com/guo-yu/koa-guide\">koa</a>，然后，学习一下 <a href=\"http://mongoosejs.com/\">Mongoose</a> 来驱动数据。</p>\n<p>重要的是你应该一无既往的深入学习服务端的思想与知识。</p>\n<h2 id=\"坚持写作\"><a href=\"#坚持写作\" class=\"headerlink\" title=\"坚持写作\"></a>坚持写作</h2><blockquote>\n<p>坚持写作，是沉淀经验的最好机会</p>\n</blockquote>\n<p>所谓的温故而知新，专业在向前发展，接收的大量信息，在人脑中是有局限性的。很多知识，只会存在于一个印象或者一个引子，而写作不仅仅是分享，也是在沉淀你自己的经验。（这一个部分就不浪费篇幅了，我相信做为一个技术专业者，你应该懂的。）</p>\n<p>而且写作还能让你和其他开发者针对一个问题展开讨论，何乐而不为呢？</p>\n<h2 id=\"提高工作或者学习的效率\"><a href=\"#提高工作或者学习的效率\" class=\"headerlink\" title=\"提高工作或者学习的效率\"></a>提高工作或者学习的效率</h2><p>提高工作或者学习效率应该是一件非常重要的事情，首先应该需要合理的制定任务与时间，我相信 <a href=\"https://trello.com/\">trello</a>应该会是一个非常好的工具，来制定Task。</p>\n<p>其次，你还应该纪录自己的编程时间，用来了解每天都在编写哪些代码。你可以使用<a href=\"https://wakatime.com\">WakaTime</a>来分析你的编程。</p>\n<p>在学习过程中，你也可以使用<a href=\"http://jsbin.com/\">jsbin</a>来运行你的代码，观察结果。</p>\n<p>最后我认为你需要善用Chrome的书签，将一些资源进行合理的分类。</p>\n<p><strong>推荐列表</strong></p>\n<ol>\n<li><a href=\"https://getpocket.com/\">Pocket</a>：收集和分类文章资源</li>\n<li>在Chrome商店中搜索 <strong>DHC</strong> ，<strong>Postman</strong>，<strong>JSON Editor</strong> ：处理请求测试，JSON编辑和格式化</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web\">Web 技术文档</a> ：火狐提供的Web技术文档，查询的好帮手</li>\n<li><a href=\"http://caniuse.com/\">http://caniuse.com/</a> ：查询CSS3,HTML5的支持度</li>\n<li><a href=\"https://kangax.github.io/compat-table/es6/\">https://kangax.github.io/compat-table/es6/</a> ：查询ES6的支持度</li>\n<li><a href=\"http://devdocs.io/\">Devdocs</a> ：框架文档集合</li>\n<li><a href=\"https://travis-ci.org/\">Travis-CI</a> ：持续集成，我认为如果你善用它，可以帮助你解决很多事情</li>\n<li><a href=\"http://html5test.com/\">HTML5 Test</a> ：打开这个网页可以将你使用的浏览器对HTML5的支持情况打印出来</li>\n</ol>\n<p>@guonanci 推荐 <a href=\"https://github.com/buunguyen/octotree\">https://github.com/buunguyen/octotree</a></p>\n<p>学习任何一门技术，最重要的是要有耐心和恒心，不然一切都是“浮云”。</p>\n<p>工具篇，我建议大家阅读<a href=\"https://github.com/icepy/_posts/blob/master/blog/2015%E5%B9%B4%E5%89%8D%E7%AB%AF%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E7%9A%84%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7.md\">《总结个人2015提高前端效率的方法和工具》</a></p>"},{"title":"和我一起实战react","date":"2016-05-23T07:24:24.000Z","banner":"http://o80ub63i5.bkt.clouddn.com/lesson/follow-react-lesson.jpg","_content":"\n本次课程面向初中级前端开发人员以及对react感兴趣的其他开发者，同时我希望你能具备如下知识的储备。\n\n*\t可以使用npm\n*\t熟悉一些基础的ES2015语法\n*\tGit的基础操作\n*\tHTML/CSS/JavaScript基础知识\n*\tSublime，Atom，WebStorm的基础使用\n*\tChrome调试\n\n本次课程的源代码放置在 [kodo](https://github.com/mulgore/kodo) 项目中，你可以在此获取源代码。\n\n本次课程使用的稿件使用GitBook编写，你可以访问 [《和我一起实战react》](https://www.gitbook.com/book/icepy/follow-react/details) 来阅读本次课程的书籍。\n\n本次课程的任务管理使用了Trello，你可以访问 [进度和计划安排](https://trello.com/b/L6ohrKhq) 来了解实战项目的\n\n如果对课程及内容有任何反馈，可以在 [issues](https://github.com/mulgore/kodo/issues) 中发起你的需求。或者关注我的微信公众号：fed_talk，来向我反馈。\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/weixin.jpg)\n","source":"_posts/follow-react-lesson.md","raw":"title: 和我一起实战react\ndate: 2016-05-23 15:24:24\ntags: 实战课程\nbanner: http://o80ub63i5.bkt.clouddn.com/lesson/follow-react-lesson.jpg\n---\n\n本次课程面向初中级前端开发人员以及对react感兴趣的其他开发者，同时我希望你能具备如下知识的储备。\n\n*\t可以使用npm\n*\t熟悉一些基础的ES2015语法\n*\tGit的基础操作\n*\tHTML/CSS/JavaScript基础知识\n*\tSublime，Atom，WebStorm的基础使用\n*\tChrome调试\n\n本次课程的源代码放置在 [kodo](https://github.com/mulgore/kodo) 项目中，你可以在此获取源代码。\n\n本次课程使用的稿件使用GitBook编写，你可以访问 [《和我一起实战react》](https://www.gitbook.com/book/icepy/follow-react/details) 来阅读本次课程的书籍。\n\n本次课程的任务管理使用了Trello，你可以访问 [进度和计划安排](https://trello.com/b/L6ohrKhq) 来了解实战项目的\n\n如果对课程及内容有任何反馈，可以在 [issues](https://github.com/mulgore/kodo/issues) 中发起你的需求。或者关注我的微信公众号：fed_talk，来向我反馈。\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/weixin.jpg)\n","slug":"follow-react-lesson","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk08000buejrzm4h0gr8","content":"<p>本次课程面向初中级前端开发人员以及对react感兴趣的其他开发者，同时我希望你能具备如下知识的储备。</p>\n<ul>\n<li>可以使用npm</li>\n<li>熟悉一些基础的ES2015语法</li>\n<li>Git的基础操作</li>\n<li>HTML/CSS/JavaScript基础知识</li>\n<li>Sublime，Atom，WebStorm的基础使用</li>\n<li>Chrome调试</li>\n</ul>\n<p>本次课程的源代码放置在 <a href=\"https://github.com/mulgore/kodo\" target=\"_blank\" rel=\"external\">kodo</a> 项目中，你可以在此获取源代码。</p>\n<p>本次课程使用的稿件使用GitBook编写，你可以访问 <a href=\"https://www.gitbook.com/book/icepy/follow-react/details\" target=\"_blank\" rel=\"external\">《和我一起实战react》</a> 来阅读本次课程的书籍。</p>\n<p>本次课程的任务管理使用了Trello，你可以访问 <a href=\"https://trello.com/b/L6ohrKhq\" target=\"_blank\" rel=\"external\">进度和计划安排</a> 来了解实战项目的</p>\n<p>如果对课程及内容有任何反馈，可以在 <a href=\"https://github.com/mulgore/kodo/issues\" target=\"_blank\" rel=\"external\">issues</a> 中发起你的需求。或者关注我的微信公众号：fed_talk，来向我反馈。</p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/weixin.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<p>本次课程面向初中级前端开发人员以及对react感兴趣的其他开发者，同时我希望你能具备如下知识的储备。</p>\n<ul>\n<li>可以使用npm</li>\n<li>熟悉一些基础的ES2015语法</li>\n<li>Git的基础操作</li>\n<li>HTML/CSS/JavaScript基础知识</li>\n<li>Sublime，Atom，WebStorm的基础使用</li>\n<li>Chrome调试</li>\n</ul>\n<p>本次课程的源代码放置在 <a href=\"https://github.com/mulgore/kodo\">kodo</a> 项目中，你可以在此获取源代码。</p>\n<p>本次课程使用的稿件使用GitBook编写，你可以访问 <a href=\"https://www.gitbook.com/book/icepy/follow-react/details\">《和我一起实战react》</a> 来阅读本次课程的书籍。</p>\n<p>本次课程的任务管理使用了Trello，你可以访问 <a href=\"https://trello.com/b/L6ohrKhq\">进度和计划安排</a> 来了解实战项目的</p>\n<p>如果对课程及内容有任何反馈，可以在 <a href=\"https://github.com/mulgore/kodo/issues\">issues</a> 中发起你的需求。或者关注我的微信公众号：fed_talk，来向我反馈。</p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/weixin.jpg\" alt=\"\"></p>\n"},{"title":"玩转NPM","date":"2016-04-27T10:13:44.000Z","banner":"https://www.npmjs.com/static/images/npm-logo.svg","_content":"\n自从转向了Node开发之后，对于NPM的熟悉程度越来越高，这一篇文章希望可以让大家都能“玩转NPM”。\n\n做为Node世界里的包管理器，我想大家从Grunt时代起就已经熟练的使用npm install命令来安装一些依赖完成前端自动化构建任务。但是，你真的了解它么？package.json文件中常常记录了大量的信息，有哪些是你必须要有的元数据呢？大部分人都会使用npm install react --save-dev来写入package.json文件。（但很不幸，这是不对的）\n\n## 正确的区分环境依赖\n\n首先我想说明的是package.json对于NPM来说是非常重要的元数据集，对于我们的应用来说，package.json文件使用`dependencies`和`devDependencies`来定义应用依赖和开发环境依赖，如果你还无法搞清楚这些，我建议你继续往下阅读。对于一个Web应用来说你的自动构建任务所依赖的包，它属于开发环境依赖，如果你的Web应用依赖jQuery来发起Ajax请求，它应该属于应用依赖。\n\n    npm install webpack --save-dev\n    npm install jquery --save\n\n应用依赖和开发环境依赖是有区别的，因为如果你的Web应用依赖的jquery写入到了开发环境依赖中，它是无法更新的，除非你手动修改package.json文件中的版本信息，并且将`node_modules`中的jquery删除和重新使用npm install安装之外，你别无它法。正确的姿势是写入应用依赖，并且用`npm update  jquery --save`方式来更新你的jquery。\n\n<!--more-->\n\n## NPM 命令系统\n\n学习如下的常用命令，你可以很快的上手熟悉npm。\n\n**如何使用帮助信息**\n\n熟悉常用的帮助命令有助于你了解npm，输入如下：\n\n    npm help install\n\n这个命令可以获取`install`命令的详细信息。\n\n你也可以输入：\n\n    npm -l\n\n来查看各命令的简单用法。\n\n**初始化package.json**\n\n    npm init\n\n关于`package.json`文件中元数据的定义，推荐大家阅读一个翻译版本：[npm的package.json中文文档](https://github.com/ericdum/mujiang.info/issues/6/)\n\n**搜索与查询**\n\n你可以使用`search`命令来搜索`npm`仓库\n\n    npm search jquery\n\n我该如何去查询jquery的信息呢？你可以使用npm info jquery来查询jquery，比较悲剧的是信息量非常大，也许不是太适合阅读，如果你有过linux编程或者使用过linux的经验，那么你肯定知道pipe（管道）这样的东西，|做为管道符，利用它可以做很多事情。\n\n    npm info jquery | grep 1.12.3\n\n最直接的方式是你使用npm dist-tag ls jquery使用它可以查询jquery的版本，如果你想按照特定的版本使用@符合连接版本号即可，比如这样npm install jquery@1.12.3。\n\n**全局安装**\n\n安装全局的包，比如我们经常使用的nodemon可以进行全局安装。\n\n    npm install -g nodemon\n\n这与局部安装只是多了一个-g而已。\n\n**删除**\n\n有安装那么肯定有对应的删除，使用npm uninstall jquery来删除你的jquery。\n\n**更新**\n\n你可以先使用`npm outdated`来检查当前安装的所有npm包是否有更新，如果有列出信息，则说明需要更新了。如果无，则不需要任何更新。\n\n更新时你可以使用`npm update`命令来更新所有可更新包，如果你只想更新某个具体的包，只需要输入如下：\n\n    npm update jquery\n\n**发布**\n\n如果你想发布一个包到NPM，首先你需要注册一个账号，你可以在[网站](https://www.npmjs.com/)上注册，也可以使用npm adduser命令（如果你是在网站上注册的，在发布之前需要记得在命令行中再输入一次npm adduser并且输入你的账号，密码和邮箱）\n\n然后使用npm publish来指定一个目录来发布，如果没有发布成功（说明你想发布的包名字被人注册了）。\n\n**更新已发布包的版本信息**\n\n当我修改了包中的一些文件后再次发布需要你修改package.json文件中的version信息（手动修改也不是不行），当然你可以使用相应的命令来完成这些。\n\nnpm version patch修改版本信息中第z位的数字+1。\n\nnpm version minor修改版本信息中第y位的数字+1，并且重置第z位的数字为0。\n\nnpm version major修改版本信息中第x位的数字+1，并且重置第y位和第z位的数字为0。\n\n**废弃已发布的某个版本的模块**\n\n自从出现了`npm `事件之后，想删除模块并不是那么简单了。不过，好在你可以使用`npm deprecate`命令来废弃你某个版本的模块。\n\n    npm deprecate base-extend-backbone@\"<0.1.4\" \"bug fixed in v0.1.4\"\n\n这样当用户安装小于`v0.1.4`版本的模块时，会在命令行中得到一行警告信息。\n\n**link**\n\n在开发npm包的时候，有时候你期望可以边开发边试用，你知道的常规情况下使用一个模块，需要将它安装到`node_modules`目录中。`link`命令就是可以这样方便的让你可以在开发中使用你的模块。\n\n假设你有一个`src/githubApi`模块，首先你需要在模块目录中运行`npm link`命令。\n\n    cd src/githubApi\n    npm link\n\n这个时候`githubApi`已经可以全局调用了，因为`npm link`命令帮助我们在npm的全局模块目录中生成了一个符号链接文件。\n\n现在cd到你的项目目录中，假设你有一个这样的项目`blog/`\n\n    cd blog/\n    npm link githubApi\n\n现在你可以在项目中加载`githubApi`模块了：\n\n```JavaScript\nvar githubApi = require('githubApi');\n```\n\n如果你不需要它的时候，你可以通过`unlink`来删除，比如\n\n    cd blog\n    npm unlink githubApi\n\n## NPM SCRIPTS系统\n\nnpm不仅可以用于模块管理，也可以执行相应的脚本，在`package.json`文件中`scripts`可以定义一些脚本命令，让npm直接调用。\n\n```JavaScript\n\"scripts\": {\n    \"test\": \"mocha --colors test/*.spec.js\",\n    \"start\": \"gulp server\",\n    \"dev\": \"webpack --watch --colors --config bin/webpack.dev.config.js\",\n    \"product\": \"gulp build\",\n    \"preproduct\": \"webpack --colors --config bin/webpack.product.config.js --optimize-minimize\",\n    \"eslint\": \"eslint app/src/ app/stylesheets\",\n    \"precommit\": \"npm run eslint\"\n}\n```\n\n现在你可以直接使用`npm run dev`来执行`webpack`的构建任务。\n\n可喜的是npm run 为每一个命令都提供了`pre-`和`post-`两个钩子（hook），有了这些其实，你可以做很多事情，比如`precommit`，在git commit之前先通过eslint检查，如果检查未通过直接阻止commit。推荐大家使用[https://github.com/typicode/husky](https://github.com/typicode/husky)项目来为团队指定一些初级的review。\n\n最有意思的是，你还可以使用`package.json`文件中的内部变量，使用`$npm_package_xxx`的方式来引用。\n\n\n## 最后\n\n俗话说：师傅领进门，修行看个人。更多NPM的信息，就要看大家平时在使用的过程中慢慢去积累了。最后，再给大家推荐一个npm 镜像：[https://npm.taobao.org/](https://npm.taobao.org/)\n","source":"_posts/issues-2.md","raw":"title: 玩转NPM\ndate: 2016-04-27 18:13:44\ntags: Node.js\nbanner: https://www.npmjs.com/static/images/npm-logo.svg\n---\n\n自从转向了Node开发之后，对于NPM的熟悉程度越来越高，这一篇文章希望可以让大家都能“玩转NPM”。\n\n做为Node世界里的包管理器，我想大家从Grunt时代起就已经熟练的使用npm install命令来安装一些依赖完成前端自动化构建任务。但是，你真的了解它么？package.json文件中常常记录了大量的信息，有哪些是你必须要有的元数据呢？大部分人都会使用npm install react --save-dev来写入package.json文件。（但很不幸，这是不对的）\n\n## 正确的区分环境依赖\n\n首先我想说明的是package.json对于NPM来说是非常重要的元数据集，对于我们的应用来说，package.json文件使用`dependencies`和`devDependencies`来定义应用依赖和开发环境依赖，如果你还无法搞清楚这些，我建议你继续往下阅读。对于一个Web应用来说你的自动构建任务所依赖的包，它属于开发环境依赖，如果你的Web应用依赖jQuery来发起Ajax请求，它应该属于应用依赖。\n\n    npm install webpack --save-dev\n    npm install jquery --save\n\n应用依赖和开发环境依赖是有区别的，因为如果你的Web应用依赖的jquery写入到了开发环境依赖中，它是无法更新的，除非你手动修改package.json文件中的版本信息，并且将`node_modules`中的jquery删除和重新使用npm install安装之外，你别无它法。正确的姿势是写入应用依赖，并且用`npm update  jquery --save`方式来更新你的jquery。\n\n<!--more-->\n\n## NPM 命令系统\n\n学习如下的常用命令，你可以很快的上手熟悉npm。\n\n**如何使用帮助信息**\n\n熟悉常用的帮助命令有助于你了解npm，输入如下：\n\n    npm help install\n\n这个命令可以获取`install`命令的详细信息。\n\n你也可以输入：\n\n    npm -l\n\n来查看各命令的简单用法。\n\n**初始化package.json**\n\n    npm init\n\n关于`package.json`文件中元数据的定义，推荐大家阅读一个翻译版本：[npm的package.json中文文档](https://github.com/ericdum/mujiang.info/issues/6/)\n\n**搜索与查询**\n\n你可以使用`search`命令来搜索`npm`仓库\n\n    npm search jquery\n\n我该如何去查询jquery的信息呢？你可以使用npm info jquery来查询jquery，比较悲剧的是信息量非常大，也许不是太适合阅读，如果你有过linux编程或者使用过linux的经验，那么你肯定知道pipe（管道）这样的东西，|做为管道符，利用它可以做很多事情。\n\n    npm info jquery | grep 1.12.3\n\n最直接的方式是你使用npm dist-tag ls jquery使用它可以查询jquery的版本，如果你想按照特定的版本使用@符合连接版本号即可，比如这样npm install jquery@1.12.3。\n\n**全局安装**\n\n安装全局的包，比如我们经常使用的nodemon可以进行全局安装。\n\n    npm install -g nodemon\n\n这与局部安装只是多了一个-g而已。\n\n**删除**\n\n有安装那么肯定有对应的删除，使用npm uninstall jquery来删除你的jquery。\n\n**更新**\n\n你可以先使用`npm outdated`来检查当前安装的所有npm包是否有更新，如果有列出信息，则说明需要更新了。如果无，则不需要任何更新。\n\n更新时你可以使用`npm update`命令来更新所有可更新包，如果你只想更新某个具体的包，只需要输入如下：\n\n    npm update jquery\n\n**发布**\n\n如果你想发布一个包到NPM，首先你需要注册一个账号，你可以在[网站](https://www.npmjs.com/)上注册，也可以使用npm adduser命令（如果你是在网站上注册的，在发布之前需要记得在命令行中再输入一次npm adduser并且输入你的账号，密码和邮箱）\n\n然后使用npm publish来指定一个目录来发布，如果没有发布成功（说明你想发布的包名字被人注册了）。\n\n**更新已发布包的版本信息**\n\n当我修改了包中的一些文件后再次发布需要你修改package.json文件中的version信息（手动修改也不是不行），当然你可以使用相应的命令来完成这些。\n\nnpm version patch修改版本信息中第z位的数字+1。\n\nnpm version minor修改版本信息中第y位的数字+1，并且重置第z位的数字为0。\n\nnpm version major修改版本信息中第x位的数字+1，并且重置第y位和第z位的数字为0。\n\n**废弃已发布的某个版本的模块**\n\n自从出现了`npm `事件之后，想删除模块并不是那么简单了。不过，好在你可以使用`npm deprecate`命令来废弃你某个版本的模块。\n\n    npm deprecate base-extend-backbone@\"<0.1.4\" \"bug fixed in v0.1.4\"\n\n这样当用户安装小于`v0.1.4`版本的模块时，会在命令行中得到一行警告信息。\n\n**link**\n\n在开发npm包的时候，有时候你期望可以边开发边试用，你知道的常规情况下使用一个模块，需要将它安装到`node_modules`目录中。`link`命令就是可以这样方便的让你可以在开发中使用你的模块。\n\n假设你有一个`src/githubApi`模块，首先你需要在模块目录中运行`npm link`命令。\n\n    cd src/githubApi\n    npm link\n\n这个时候`githubApi`已经可以全局调用了，因为`npm link`命令帮助我们在npm的全局模块目录中生成了一个符号链接文件。\n\n现在cd到你的项目目录中，假设你有一个这样的项目`blog/`\n\n    cd blog/\n    npm link githubApi\n\n现在你可以在项目中加载`githubApi`模块了：\n\n```JavaScript\nvar githubApi = require('githubApi');\n```\n\n如果你不需要它的时候，你可以通过`unlink`来删除，比如\n\n    cd blog\n    npm unlink githubApi\n\n## NPM SCRIPTS系统\n\nnpm不仅可以用于模块管理，也可以执行相应的脚本，在`package.json`文件中`scripts`可以定义一些脚本命令，让npm直接调用。\n\n```JavaScript\n\"scripts\": {\n    \"test\": \"mocha --colors test/*.spec.js\",\n    \"start\": \"gulp server\",\n    \"dev\": \"webpack --watch --colors --config bin/webpack.dev.config.js\",\n    \"product\": \"gulp build\",\n    \"preproduct\": \"webpack --colors --config bin/webpack.product.config.js --optimize-minimize\",\n    \"eslint\": \"eslint app/src/ app/stylesheets\",\n    \"precommit\": \"npm run eslint\"\n}\n```\n\n现在你可以直接使用`npm run dev`来执行`webpack`的构建任务。\n\n可喜的是npm run 为每一个命令都提供了`pre-`和`post-`两个钩子（hook），有了这些其实，你可以做很多事情，比如`precommit`，在git commit之前先通过eslint检查，如果检查未通过直接阻止commit。推荐大家使用[https://github.com/typicode/husky](https://github.com/typicode/husky)项目来为团队指定一些初级的review。\n\n最有意思的是，你还可以使用`package.json`文件中的内部变量，使用`$npm_package_xxx`的方式来引用。\n\n\n## 最后\n\n俗话说：师傅领进门，修行看个人。更多NPM的信息，就要看大家平时在使用的过程中慢慢去积累了。最后，再给大家推荐一个npm 镜像：[https://npm.taobao.org/](https://npm.taobao.org/)\n","slug":"issues-2","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk0b000euejr7h5ngwe6","content":"<p>自从转向了Node开发之后，对于NPM的熟悉程度越来越高，这一篇文章希望可以让大家都能“玩转NPM”。</p>\n<p>做为Node世界里的包管理器，我想大家从Grunt时代起就已经熟练的使用npm install命令来安装一些依赖完成前端自动化构建任务。但是，你真的了解它么？package.json文件中常常记录了大量的信息，有哪些是你必须要有的元数据呢？大部分人都会使用npm install react –save-dev来写入package.json文件。（但很不幸，这是不对的）</p>\n<h2 id=\"正确的区分环境依赖\"><a href=\"#正确的区分环境依赖\" class=\"headerlink\" title=\"正确的区分环境依赖\"></a>正确的区分环境依赖</h2><p>首先我想说明的是package.json对于NPM来说是非常重要的元数据集，对于我们的应用来说，package.json文件使用<code>dependencies</code>和<code>devDependencies</code>来定义应用依赖和开发环境依赖，如果你还无法搞清楚这些，我建议你继续往下阅读。对于一个Web应用来说你的自动构建任务所依赖的包，它属于开发环境依赖，如果你的Web应用依赖jQuery来发起Ajax请求，它应该属于应用依赖。</p>\n<pre><code>npm install webpack --save-dev\nnpm install jquery --save\n</code></pre><p>应用依赖和开发环境依赖是有区别的，因为如果你的Web应用依赖的jquery写入到了开发环境依赖中，它是无法更新的，除非你手动修改package.json文件中的版本信息，并且将<code>node_modules</code>中的jquery删除和重新使用npm install安装之外，你别无它法。正确的姿势是写入应用依赖，并且用<code>npm update  jquery --save</code>方式来更新你的jquery。</p>\n<a id=\"more\"></a>\n<h2 id=\"NPM-命令系统\"><a href=\"#NPM-命令系统\" class=\"headerlink\" title=\"NPM 命令系统\"></a>NPM 命令系统</h2><p>学习如下的常用命令，你可以很快的上手熟悉npm。</p>\n<p><strong>如何使用帮助信息</strong></p>\n<p>熟悉常用的帮助命令有助于你了解npm，输入如下：</p>\n<pre><code>npm help install\n</code></pre><p>这个命令可以获取<code>install</code>命令的详细信息。</p>\n<p>你也可以输入：</p>\n<pre><code>npm -l\n</code></pre><p>来查看各命令的简单用法。</p>\n<p><strong>初始化package.json</strong></p>\n<pre><code>npm init\n</code></pre><p>关于<code>package.json</code>文件中元数据的定义，推荐大家阅读一个翻译版本：<a href=\"https://github.com/ericdum/mujiang.info/issues/6/\" target=\"_blank\" rel=\"external\">npm的package.json中文文档</a></p>\n<p><strong>搜索与查询</strong></p>\n<p>你可以使用<code>search</code>命令来搜索<code>npm</code>仓库</p>\n<pre><code>npm search jquery\n</code></pre><p>我该如何去查询jquery的信息呢？你可以使用npm info jquery来查询jquery，比较悲剧的是信息量非常大，也许不是太适合阅读，如果你有过linux编程或者使用过linux的经验，那么你肯定知道pipe（管道）这样的东西，|做为管道符，利用它可以做很多事情。</p>\n<pre><code>npm info jquery | grep 1.12.3\n</code></pre><p>最直接的方式是你使用npm dist-tag ls jquery使用它可以查询jquery的版本，如果你想按照特定的版本使用@符合连接版本号即可，比如这样npm install jquery@1.12.3。</p>\n<p><strong>全局安装</strong></p>\n<p>安装全局的包，比如我们经常使用的nodemon可以进行全局安装。</p>\n<pre><code>npm install -g nodemon\n</code></pre><p>这与局部安装只是多了一个-g而已。</p>\n<p><strong>删除</strong></p>\n<p>有安装那么肯定有对应的删除，使用npm uninstall jquery来删除你的jquery。</p>\n<p><strong>更新</strong></p>\n<p>你可以先使用<code>npm outdated</code>来检查当前安装的所有npm包是否有更新，如果有列出信息，则说明需要更新了。如果无，则不需要任何更新。</p>\n<p>更新时你可以使用<code>npm update</code>命令来更新所有可更新包，如果你只想更新某个具体的包，只需要输入如下：</p>\n<pre><code>npm update jquery\n</code></pre><p><strong>发布</strong></p>\n<p>如果你想发布一个包到NPM，首先你需要注册一个账号，你可以在<a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"external\">网站</a>上注册，也可以使用npm adduser命令（如果你是在网站上注册的，在发布之前需要记得在命令行中再输入一次npm adduser并且输入你的账号，密码和邮箱）</p>\n<p>然后使用npm publish来指定一个目录来发布，如果没有发布成功（说明你想发布的包名字被人注册了）。</p>\n<p><strong>更新已发布包的版本信息</strong></p>\n<p>当我修改了包中的一些文件后再次发布需要你修改package.json文件中的version信息（手动修改也不是不行），当然你可以使用相应的命令来完成这些。</p>\n<p>npm version patch修改版本信息中第z位的数字+1。</p>\n<p>npm version minor修改版本信息中第y位的数字+1，并且重置第z位的数字为0。</p>\n<p>npm version major修改版本信息中第x位的数字+1，并且重置第y位和第z位的数字为0。</p>\n<p><strong>废弃已发布的某个版本的模块</strong></p>\n<p>自从出现了<code>npm</code>事件之后，想删除模块并不是那么简单了。不过，好在你可以使用<code>npm deprecate</code>命令来废弃你某个版本的模块。</p>\n<pre><code>npm deprecate base-extend-backbone@&quot;&lt;0.1.4&quot; &quot;bug fixed in v0.1.4&quot;\n</code></pre><p>这样当用户安装小于<code>v0.1.4</code>版本的模块时，会在命令行中得到一行警告信息。</p>\n<p><strong>link</strong></p>\n<p>在开发npm包的时候，有时候你期望可以边开发边试用，你知道的常规情况下使用一个模块，需要将它安装到<code>node_modules</code>目录中。<code>link</code>命令就是可以这样方便的让你可以在开发中使用你的模块。</p>\n<p>假设你有一个<code>src/githubApi</code>模块，首先你需要在模块目录中运行<code>npm link</code>命令。</p>\n<pre><code>cd src/githubApi\nnpm link\n</code></pre><p>这个时候<code>githubApi</code>已经可以全局调用了，因为<code>npm link</code>命令帮助我们在npm的全局模块目录中生成了一个符号链接文件。</p>\n<p>现在cd到你的项目目录中，假设你有一个这样的项目<code>blog/</code></p>\n<pre><code>cd blog/\nnpm link githubApi\n</code></pre><p>现在你可以在项目中加载<code>githubApi</code>模块了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> githubApi = <span class=\"built_in\">require</span>(<span class=\"string\">'githubApi'</span>);</span><br></pre></td></tr></table></figure>\n<p>如果你不需要它的时候，你可以通过<code>unlink</code>来删除，比如</p>\n<pre><code>cd blog\nnpm unlink githubApi\n</code></pre><h2 id=\"NPM-SCRIPTS系统\"><a href=\"#NPM-SCRIPTS系统\" class=\"headerlink\" title=\"NPM SCRIPTS系统\"></a>NPM SCRIPTS系统</h2><p>npm不仅可以用于模块管理，也可以执行相应的脚本，在<code>package.json</code>文件中<code>scripts</code>可以定义一些脚本命令，让npm直接调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"mocha --colors test/*.spec.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"gulp server\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"webpack --watch --colors --config bin/webpack.dev.config.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"product\"</span>: <span class=\"string\">\"gulp build\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"preproduct\"</span>: <span class=\"string\">\"webpack --colors --config bin/webpack.product.config.js --optimize-minimize\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"eslint\"</span>: <span class=\"string\">\"eslint app/src/ app/stylesheets\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"precommit\"</span>: <span class=\"string\">\"npm run eslint\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在你可以直接使用<code>npm run dev</code>来执行<code>webpack</code>的构建任务。</p>\n<p>可喜的是npm run 为每一个命令都提供了<code>pre-</code>和<code>post-</code>两个钩子（hook），有了这些其实，你可以做很多事情，比如<code>precommit</code>，在git commit之前先通过eslint检查，如果检查未通过直接阻止commit。推荐大家使用<a href=\"https://github.com/typicode/husky\" target=\"_blank\" rel=\"external\">https://github.com/typicode/husky</a>项目来为团队指定一些初级的review。</p>\n<p>最有意思的是，你还可以使用<code>package.json</code>文件中的内部变量，使用<code>$npm_package_xxx</code>的方式来引用。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>俗话说：师傅领进门，修行看个人。更多NPM的信息，就要看大家平时在使用的过程中慢慢去积累了。最后，再给大家推荐一个npm 镜像：<a href=\"https://npm.taobao.org/\" target=\"_blank\" rel=\"external\">https://npm.taobao.org/</a></p>\n","excerpt":"<p>自从转向了Node开发之后，对于NPM的熟悉程度越来越高，这一篇文章希望可以让大家都能“玩转NPM”。</p>\n<p>做为Node世界里的包管理器，我想大家从Grunt时代起就已经熟练的使用npm install命令来安装一些依赖完成前端自动化构建任务。但是，你真的了解它么？package.json文件中常常记录了大量的信息，有哪些是你必须要有的元数据呢？大部分人都会使用npm install react –save-dev来写入package.json文件。（但很不幸，这是不对的）</p>\n<h2 id=\"正确的区分环境依赖\"><a href=\"#正确的区分环境依赖\" class=\"headerlink\" title=\"正确的区分环境依赖\"></a>正确的区分环境依赖</h2><p>首先我想说明的是package.json对于NPM来说是非常重要的元数据集，对于我们的应用来说，package.json文件使用<code>dependencies</code>和<code>devDependencies</code>来定义应用依赖和开发环境依赖，如果你还无法搞清楚这些，我建议你继续往下阅读。对于一个Web应用来说你的自动构建任务所依赖的包，它属于开发环境依赖，如果你的Web应用依赖jQuery来发起Ajax请求，它应该属于应用依赖。</p>\n<pre><code>npm install webpack --save-dev\nnpm install jquery --save\n</code></pre><p>应用依赖和开发环境依赖是有区别的，因为如果你的Web应用依赖的jquery写入到了开发环境依赖中，它是无法更新的，除非你手动修改package.json文件中的版本信息，并且将<code>node_modules</code>中的jquery删除和重新使用npm install安装之外，你别无它法。正确的姿势是写入应用依赖，并且用<code>npm update  jquery --save</code>方式来更新你的jquery。</p>","more":"<h2 id=\"NPM-命令系统\"><a href=\"#NPM-命令系统\" class=\"headerlink\" title=\"NPM 命令系统\"></a>NPM 命令系统</h2><p>学习如下的常用命令，你可以很快的上手熟悉npm。</p>\n<p><strong>如何使用帮助信息</strong></p>\n<p>熟悉常用的帮助命令有助于你了解npm，输入如下：</p>\n<pre><code>npm help install\n</code></pre><p>这个命令可以获取<code>install</code>命令的详细信息。</p>\n<p>你也可以输入：</p>\n<pre><code>npm -l\n</code></pre><p>来查看各命令的简单用法。</p>\n<p><strong>初始化package.json</strong></p>\n<pre><code>npm init\n</code></pre><p>关于<code>package.json</code>文件中元数据的定义，推荐大家阅读一个翻译版本：<a href=\"https://github.com/ericdum/mujiang.info/issues/6/\">npm的package.json中文文档</a></p>\n<p><strong>搜索与查询</strong></p>\n<p>你可以使用<code>search</code>命令来搜索<code>npm</code>仓库</p>\n<pre><code>npm search jquery\n</code></pre><p>我该如何去查询jquery的信息呢？你可以使用npm info jquery来查询jquery，比较悲剧的是信息量非常大，也许不是太适合阅读，如果你有过linux编程或者使用过linux的经验，那么你肯定知道pipe（管道）这样的东西，|做为管道符，利用它可以做很多事情。</p>\n<pre><code>npm info jquery | grep 1.12.3\n</code></pre><p>最直接的方式是你使用npm dist-tag ls jquery使用它可以查询jquery的版本，如果你想按照特定的版本使用@符合连接版本号即可，比如这样npm install jquery@1.12.3。</p>\n<p><strong>全局安装</strong></p>\n<p>安装全局的包，比如我们经常使用的nodemon可以进行全局安装。</p>\n<pre><code>npm install -g nodemon\n</code></pre><p>这与局部安装只是多了一个-g而已。</p>\n<p><strong>删除</strong></p>\n<p>有安装那么肯定有对应的删除，使用npm uninstall jquery来删除你的jquery。</p>\n<p><strong>更新</strong></p>\n<p>你可以先使用<code>npm outdated</code>来检查当前安装的所有npm包是否有更新，如果有列出信息，则说明需要更新了。如果无，则不需要任何更新。</p>\n<p>更新时你可以使用<code>npm update</code>命令来更新所有可更新包，如果你只想更新某个具体的包，只需要输入如下：</p>\n<pre><code>npm update jquery\n</code></pre><p><strong>发布</strong></p>\n<p>如果你想发布一个包到NPM，首先你需要注册一个账号，你可以在<a href=\"https://www.npmjs.com/\">网站</a>上注册，也可以使用npm adduser命令（如果你是在网站上注册的，在发布之前需要记得在命令行中再输入一次npm adduser并且输入你的账号，密码和邮箱）</p>\n<p>然后使用npm publish来指定一个目录来发布，如果没有发布成功（说明你想发布的包名字被人注册了）。</p>\n<p><strong>更新已发布包的版本信息</strong></p>\n<p>当我修改了包中的一些文件后再次发布需要你修改package.json文件中的version信息（手动修改也不是不行），当然你可以使用相应的命令来完成这些。</p>\n<p>npm version patch修改版本信息中第z位的数字+1。</p>\n<p>npm version minor修改版本信息中第y位的数字+1，并且重置第z位的数字为0。</p>\n<p>npm version major修改版本信息中第x位的数字+1，并且重置第y位和第z位的数字为0。</p>\n<p><strong>废弃已发布的某个版本的模块</strong></p>\n<p>自从出现了<code>npm</code>事件之后，想删除模块并不是那么简单了。不过，好在你可以使用<code>npm deprecate</code>命令来废弃你某个版本的模块。</p>\n<pre><code>npm deprecate base-extend-backbone@&quot;&lt;0.1.4&quot; &quot;bug fixed in v0.1.4&quot;\n</code></pre><p>这样当用户安装小于<code>v0.1.4</code>版本的模块时，会在命令行中得到一行警告信息。</p>\n<p><strong>link</strong></p>\n<p>在开发npm包的时候，有时候你期望可以边开发边试用，你知道的常规情况下使用一个模块，需要将它安装到<code>node_modules</code>目录中。<code>link</code>命令就是可以这样方便的让你可以在开发中使用你的模块。</p>\n<p>假设你有一个<code>src/githubApi</code>模块，首先你需要在模块目录中运行<code>npm link</code>命令。</p>\n<pre><code>cd src/githubApi\nnpm link\n</code></pre><p>这个时候<code>githubApi</code>已经可以全局调用了，因为<code>npm link</code>命令帮助我们在npm的全局模块目录中生成了一个符号链接文件。</p>\n<p>现在cd到你的项目目录中，假设你有一个这样的项目<code>blog/</code></p>\n<pre><code>cd blog/\nnpm link githubApi\n</code></pre><p>现在你可以在项目中加载<code>githubApi</code>模块了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> githubApi = <span class=\"built_in\">require</span>(<span class=\"string\">'githubApi'</span>);</span><br></pre></td></tr></table></figure>\n<p>如果你不需要它的时候，你可以通过<code>unlink</code>来删除，比如</p>\n<pre><code>cd blog\nnpm unlink githubApi\n</code></pre><h2 id=\"NPM-SCRIPTS系统\"><a href=\"#NPM-SCRIPTS系统\" class=\"headerlink\" title=\"NPM SCRIPTS系统\"></a>NPM SCRIPTS系统</h2><p>npm不仅可以用于模块管理，也可以执行相应的脚本，在<code>package.json</code>文件中<code>scripts</code>可以定义一些脚本命令，让npm直接调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"mocha --colors test/*.spec.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"gulp server\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"webpack --watch --colors --config bin/webpack.dev.config.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"product\"</span>: <span class=\"string\">\"gulp build\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"preproduct\"</span>: <span class=\"string\">\"webpack --colors --config bin/webpack.product.config.js --optimize-minimize\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"eslint\"</span>: <span class=\"string\">\"eslint app/src/ app/stylesheets\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"precommit\"</span>: <span class=\"string\">\"npm run eslint\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在你可以直接使用<code>npm run dev</code>来执行<code>webpack</code>的构建任务。</p>\n<p>可喜的是npm run 为每一个命令都提供了<code>pre-</code>和<code>post-</code>两个钩子（hook），有了这些其实，你可以做很多事情，比如<code>precommit</code>，在git commit之前先通过eslint检查，如果检查未通过直接阻止commit。推荐大家使用<a href=\"https://github.com/typicode/husky\">https://github.com/typicode/husky</a>项目来为团队指定一些初级的review。</p>\n<p>最有意思的是，你还可以使用<code>package.json</code>文件中的内部变量，使用<code>$npm_package_xxx</code>的方式来引用。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>俗话说：师傅领进门，修行看个人。更多NPM的信息，就要看大家平时在使用的过程中慢慢去积累了。最后，再给大家推荐一个npm 镜像：<a href=\"https://npm.taobao.org/\">https://npm.taobao.org/</a></p>"},{"title":"webpack实践最后一篇","date":"2016-04-14T10:20:07.000Z","_content":"\n> 温故而知新\n\n这应该是目前这个阶段最后一篇关于webpack的实践经验，也许你会学习到该用怎样的思想去使用webpack，也许你会认为这是一坨屎一样的文字。不过，我会尽量的描述，我们的实践以及给出一份在Mac和Win下的Demo，这个项目也是我们应用在PC端的实践，访问[https://github.com/sapling-team/generator-sapling-pc](https://github.com/sapling-team/generator-sapling-pc)来阅读我们PC端的脚手架吧。（完美兼容IE8+）\n\n我们对`backbone`也提供了一份有用的扩展，可访问：[https://github.com/sapling-team/base-extend-backbone](https://github.com/sapling-team/base-extend-backbone)\n\n更多基础的配置信息，建议大家阅读[《webpack在PC项目中的应用》](https://github.com/icepy/_posts/issues/25)\n\n<!--more-->\n\n## 该用什么样的思想来使用\n\n> 你用的始终还是Node.js环境\n\n我觉得你应该要忘记webpack，因为你使用的终归还是Node.js。为什么这么说，因为如果只使用简单的配置，你可能只把它做为一个模块加载器。如果你熟练的使用了Node.Js那么恭喜你，我们将用环境的思维来使用它，并用Node.Js来驱动你的构建流程。（NPM可以使用的模块，你都可以在构建环境中使用）\n\n首先，我们应该将脚本文件放置在bin目录下，这是unix编程的常识。接着，对于你的产品，定义两个环境：dev和product，在NPM Scripts中使用`NODE_ENV=dev webpack --config bin/webpack.config`，然后在脚本文件中使用`process.env.NODE_ENV`来获取环境变量并区分执行。（很不幸的是，Win用户无法获取ENV，所以你需要建立两个文件来做dev和product）\n\n## 抽象dir\n\n抽象你的目录资源，设计一定的规则，可以进行批处理配置信息。\n\n\tnpm install glob --save-dev --verbose\n\n我们的入口文件都放置在src中，根据业务特点来命名，比如：`index.js`，`code.js`。\n\n```JavaScript\nvar path = require('path');\nvar glob = require('glob');\n\nmodule.exports = getEntry;\n\nfunction getEntry(sourcePath){\n    var entrys = {};\n    var basename;\n    glob.sync(sourcePath).forEach(function(entry){\n        basename = path.basename(entry,path.extname(entry));\n        entrys[basename] = entry;\n    });\n    return entrys;\n}\n```\n在`webpack.dev.config.js`文件，可以通过getEntry函数来统一处理入口，并得到`entry`配置对象。如果你是多页面多入口的项目，建议你使用统一的命名规则，比如页面叫`index.html`，那么你的js和css入口文件也应该叫`index.js`和`index.css`。\n\n## include\n\n> 在编译期来决定最终呈现什么样的HTML\n\n在后端语言的模板中`include`是一个非常有用的特性，因为它可以抽象分离不同的HTML结构，来达到复用的目的。\n\n\tnpm install jade-loader --save-dev --verbose\n\n```jade\ndoctype html\nhtml(lang=\"en\")\n    head\n        - var titleValue = htmlWebpackPlugin.options.title\n        title=titleValue\n        meta(charset=\"UTF-8\")\n    body\n        include common/header\n        include index/container\n        include common/footer\n        include common/lib\n```\n\n```jade\n- var src;\n- var map = ['jquery/dist/jquery.min.js','underscore/underscore-min.js','backbone/backbone-min.js']\nif htmlWebpackPlugin.options.cdn\n    - src = 'http://127.0.0.1:3000/www/link/'\nelse\n    - src = '/link/'\neach val in map\n    script(type=\"text/javascript\",src=src+val)\n```\n```JavaScript\n{\n    test:/.jade$/,\n    loader:'jade-loader',\n    exclude:/(node_modules)/\n}\n```\n不仅如此`jade`还可以做更高灵活的配置。\n\n## html-webpack-plugin\n\n如果你是多页面，或者单页应用都需要这个插件来帮忙处理HTML的内容，比如上述的jade模板的`include`。\n\n```JavaScript\nvar pages = getEntry('./app/web/*.jade');\nfor(var chunkname in pages){\n    var conf = {\n        cdn:false,\n        filename:chunkname+'.html',\n        template:pages[chunkname],\n        inject:true,\n        minify:{\n            removeComments:true,\n            collapseWhitespace: false\n        },\n        chunks:['common',chunkname],\n        hash:false\n    }\n    plugins.push(new HtmlWebpackPlugin(conf));\n}\n```\n根据`抽象dir`的方法，我们可以通过`getEntry`来获取一个pages对象，并使用chunks来处理每一个入口页面的依赖。\n\n如果你是单页应用，你只需要添加一次HtmlWebpackPlugin插件即可。\n\n## 如何优化\n\n> 优化，但不要过度的优化\n\n运行`npm run product`来构建你的发布资源。\n\n过度优化的结果：\n\n```Less\n.title {\n  margin-left: auto;\n  margin-right: auto;\n  .size(margin-top, 15px);\n  .size(margin-bottom, 15px);\n}\n```\n最后经过webpack的优化变成了：\n\n```CSS\n.title {\n  margin: 2.6408vh auto 2.6408vh;\n  margin-top: 1.5rem;\n  margin-bottom: 1.5rem;\n}\n```\n那么问题来了Android4.3以下版本是不支持vw,vh单位的。\n\n我认为对于一个项目，优化的方式应该可以从下列的几个点中去挖掘：\n\n**externals 分离**\n\n善用`externals`将过大的文件分离出去，然后再用`script`标签引用即可。\n\n**alias机制**\n\n给一些模块启用别名，来提高webpack的搜索速度。\n\n**将某些对象暴露在全局**\n\n- 在loader中使用`expose`将对象暴露出去`loader: 'expose?jQuery'`\n- 使用`ProvidePlugin`插件的帮助\n\n```JavaScript\nnew webpack.ProvidePlugin({\n    \"M\": \"mock\",\n}),\n```\n假设`mock`对象中有`set`，`get`方法，那么此刻你可以在使用`M.set`，`M.get`方式来调用。\n\n**启用热替换**\n\n- 将代码内敛到入口js文件中，然后启动`webpack.HotModuleReplacementPlugin`插件\n- 使用自带的`webpack-dev-server`启动一个服务器\n- 直接在`webpack.config.js`文件中配置\n\n```JavaScript\n//配置\n\ndevServer:{\n\tport:4000,\n\tcontentBase:'./app',\n\thistoryApiFallback:true\n}\n\n```\n**合理的使用CommonsChunkPlugin将每一个chunk分割开，并提取**\n\n`CommonsChunkPlugin`有一些属性，比如`minChunks`可以设置如果`require`几次再提取的问题。\n\n**个别项目环境变量优化**\n\n定义你的`process.env.NODE_ENV`变量，启用`DefinePlugin`插件来优化警告信息，很多框架，比如react都带有警告，比如：\n\n```JavaScript\nif(process.env.NODE_ENV !== 'production'){\n\n}\n```\n\n在prodcut期，我们可以通过`DefinePlugin`来打入环境变量来将这些剔除。\n\n```JavaScript\nplugins.push(new webpack.DefinePlugin({\n    'process.env':{\n        'NODE_ENV':JSON.stringify(process.env.NODE_ENV)\n    }\n}));\n```\n\n构建期间`process.env.NODE_ENV !== 'production'`会变成：\n\n```JavaScript\nif(false){\n\n}\n```\n\n压缩工具，会忽略false内的内容，你会发现体积将减少了很多。\n\n## 清理工作\n\n每次`npm run product`之后，因为设置了`hash`属性，所以会生成不同的文件，那么问题来了，我无法清理www目录，那么这时候，就可以换到Node.js的文件系统上了。\n\n```JavaScript\nvar fs = require('fs');\nvar path = require('path');\nvar containerPath = path.resolve('./');\n\nmodule.exports = rmdir;\n\nfunction rmdir(dirPath){\n    dirPath = path.resolve(containerPath,dirPath);\n    var dirs = [];\n    collection(dirPath,dirs);\n    dirs.forEach(function(v){\n        var status = fs.rmdirSync(v);\n        if(status){\n            console.log(status);\n        }\n    });\n}\n\nfunction collection(url,dirs){\n    var stat = fs.statSync(url);\n    if(stat.isDirectory()){\n        dirs.unshift(url);\n        recursion(url,dirs);\n    }else{\n        if(stat.isFile()){\n            fs.unlinkSync(url);\n        }\n    }\n}\n\nfunction recursion(url,dirs){\n    var arr = fs.readdirSync(url);\n    var i = 0;\n    var le = arr.length;\n    for(;i<le;i++){\n        var v = path.resolve(url,arr[i]);\n        collection(v,dirs);\n    }\n}\n```\n\n## 运行脚手架Demo\n\n你可以下载脚手架项目跑一跑：[https://github.com/sapling-team/generator-sapling-pc](https://github.com/sapling-team/generator-sapling-pc)\n\n最终的发布可能还是需要gulp的一些辅助，不过这不要紧了，它只是帮助我们挪动了一些文件，最终成为了一个`www`目录。\n","source":"_posts/issues-4.md","raw":"title: webpack实践最后一篇\ndate: 2016-04-14 18:20:07\ntags: webpack\n---\n\n> 温故而知新\n\n这应该是目前这个阶段最后一篇关于webpack的实践经验，也许你会学习到该用怎样的思想去使用webpack，也许你会认为这是一坨屎一样的文字。不过，我会尽量的描述，我们的实践以及给出一份在Mac和Win下的Demo，这个项目也是我们应用在PC端的实践，访问[https://github.com/sapling-team/generator-sapling-pc](https://github.com/sapling-team/generator-sapling-pc)来阅读我们PC端的脚手架吧。（完美兼容IE8+）\n\n我们对`backbone`也提供了一份有用的扩展，可访问：[https://github.com/sapling-team/base-extend-backbone](https://github.com/sapling-team/base-extend-backbone)\n\n更多基础的配置信息，建议大家阅读[《webpack在PC项目中的应用》](https://github.com/icepy/_posts/issues/25)\n\n<!--more-->\n\n## 该用什么样的思想来使用\n\n> 你用的始终还是Node.js环境\n\n我觉得你应该要忘记webpack，因为你使用的终归还是Node.js。为什么这么说，因为如果只使用简单的配置，你可能只把它做为一个模块加载器。如果你熟练的使用了Node.Js那么恭喜你，我们将用环境的思维来使用它，并用Node.Js来驱动你的构建流程。（NPM可以使用的模块，你都可以在构建环境中使用）\n\n首先，我们应该将脚本文件放置在bin目录下，这是unix编程的常识。接着，对于你的产品，定义两个环境：dev和product，在NPM Scripts中使用`NODE_ENV=dev webpack --config bin/webpack.config`，然后在脚本文件中使用`process.env.NODE_ENV`来获取环境变量并区分执行。（很不幸的是，Win用户无法获取ENV，所以你需要建立两个文件来做dev和product）\n\n## 抽象dir\n\n抽象你的目录资源，设计一定的规则，可以进行批处理配置信息。\n\n\tnpm install glob --save-dev --verbose\n\n我们的入口文件都放置在src中，根据业务特点来命名，比如：`index.js`，`code.js`。\n\n```JavaScript\nvar path = require('path');\nvar glob = require('glob');\n\nmodule.exports = getEntry;\n\nfunction getEntry(sourcePath){\n    var entrys = {};\n    var basename;\n    glob.sync(sourcePath).forEach(function(entry){\n        basename = path.basename(entry,path.extname(entry));\n        entrys[basename] = entry;\n    });\n    return entrys;\n}\n```\n在`webpack.dev.config.js`文件，可以通过getEntry函数来统一处理入口，并得到`entry`配置对象。如果你是多页面多入口的项目，建议你使用统一的命名规则，比如页面叫`index.html`，那么你的js和css入口文件也应该叫`index.js`和`index.css`。\n\n## include\n\n> 在编译期来决定最终呈现什么样的HTML\n\n在后端语言的模板中`include`是一个非常有用的特性，因为它可以抽象分离不同的HTML结构，来达到复用的目的。\n\n\tnpm install jade-loader --save-dev --verbose\n\n```jade\ndoctype html\nhtml(lang=\"en\")\n    head\n        - var titleValue = htmlWebpackPlugin.options.title\n        title=titleValue\n        meta(charset=\"UTF-8\")\n    body\n        include common/header\n        include index/container\n        include common/footer\n        include common/lib\n```\n\n```jade\n- var src;\n- var map = ['jquery/dist/jquery.min.js','underscore/underscore-min.js','backbone/backbone-min.js']\nif htmlWebpackPlugin.options.cdn\n    - src = 'http://127.0.0.1:3000/www/link/'\nelse\n    - src = '/link/'\neach val in map\n    script(type=\"text/javascript\",src=src+val)\n```\n```JavaScript\n{\n    test:/.jade$/,\n    loader:'jade-loader',\n    exclude:/(node_modules)/\n}\n```\n不仅如此`jade`还可以做更高灵活的配置。\n\n## html-webpack-plugin\n\n如果你是多页面，或者单页应用都需要这个插件来帮忙处理HTML的内容，比如上述的jade模板的`include`。\n\n```JavaScript\nvar pages = getEntry('./app/web/*.jade');\nfor(var chunkname in pages){\n    var conf = {\n        cdn:false,\n        filename:chunkname+'.html',\n        template:pages[chunkname],\n        inject:true,\n        minify:{\n            removeComments:true,\n            collapseWhitespace: false\n        },\n        chunks:['common',chunkname],\n        hash:false\n    }\n    plugins.push(new HtmlWebpackPlugin(conf));\n}\n```\n根据`抽象dir`的方法，我们可以通过`getEntry`来获取一个pages对象，并使用chunks来处理每一个入口页面的依赖。\n\n如果你是单页应用，你只需要添加一次HtmlWebpackPlugin插件即可。\n\n## 如何优化\n\n> 优化，但不要过度的优化\n\n运行`npm run product`来构建你的发布资源。\n\n过度优化的结果：\n\n```Less\n.title {\n  margin-left: auto;\n  margin-right: auto;\n  .size(margin-top, 15px);\n  .size(margin-bottom, 15px);\n}\n```\n最后经过webpack的优化变成了：\n\n```CSS\n.title {\n  margin: 2.6408vh auto 2.6408vh;\n  margin-top: 1.5rem;\n  margin-bottom: 1.5rem;\n}\n```\n那么问题来了Android4.3以下版本是不支持vw,vh单位的。\n\n我认为对于一个项目，优化的方式应该可以从下列的几个点中去挖掘：\n\n**externals 分离**\n\n善用`externals`将过大的文件分离出去，然后再用`script`标签引用即可。\n\n**alias机制**\n\n给一些模块启用别名，来提高webpack的搜索速度。\n\n**将某些对象暴露在全局**\n\n- 在loader中使用`expose`将对象暴露出去`loader: 'expose?jQuery'`\n- 使用`ProvidePlugin`插件的帮助\n\n```JavaScript\nnew webpack.ProvidePlugin({\n    \"M\": \"mock\",\n}),\n```\n假设`mock`对象中有`set`，`get`方法，那么此刻你可以在使用`M.set`，`M.get`方式来调用。\n\n**启用热替换**\n\n- 将代码内敛到入口js文件中，然后启动`webpack.HotModuleReplacementPlugin`插件\n- 使用自带的`webpack-dev-server`启动一个服务器\n- 直接在`webpack.config.js`文件中配置\n\n```JavaScript\n//配置\n\ndevServer:{\n\tport:4000,\n\tcontentBase:'./app',\n\thistoryApiFallback:true\n}\n\n```\n**合理的使用CommonsChunkPlugin将每一个chunk分割开，并提取**\n\n`CommonsChunkPlugin`有一些属性，比如`minChunks`可以设置如果`require`几次再提取的问题。\n\n**个别项目环境变量优化**\n\n定义你的`process.env.NODE_ENV`变量，启用`DefinePlugin`插件来优化警告信息，很多框架，比如react都带有警告，比如：\n\n```JavaScript\nif(process.env.NODE_ENV !== 'production'){\n\n}\n```\n\n在prodcut期，我们可以通过`DefinePlugin`来打入环境变量来将这些剔除。\n\n```JavaScript\nplugins.push(new webpack.DefinePlugin({\n    'process.env':{\n        'NODE_ENV':JSON.stringify(process.env.NODE_ENV)\n    }\n}));\n```\n\n构建期间`process.env.NODE_ENV !== 'production'`会变成：\n\n```JavaScript\nif(false){\n\n}\n```\n\n压缩工具，会忽略false内的内容，你会发现体积将减少了很多。\n\n## 清理工作\n\n每次`npm run product`之后，因为设置了`hash`属性，所以会生成不同的文件，那么问题来了，我无法清理www目录，那么这时候，就可以换到Node.js的文件系统上了。\n\n```JavaScript\nvar fs = require('fs');\nvar path = require('path');\nvar containerPath = path.resolve('./');\n\nmodule.exports = rmdir;\n\nfunction rmdir(dirPath){\n    dirPath = path.resolve(containerPath,dirPath);\n    var dirs = [];\n    collection(dirPath,dirs);\n    dirs.forEach(function(v){\n        var status = fs.rmdirSync(v);\n        if(status){\n            console.log(status);\n        }\n    });\n}\n\nfunction collection(url,dirs){\n    var stat = fs.statSync(url);\n    if(stat.isDirectory()){\n        dirs.unshift(url);\n        recursion(url,dirs);\n    }else{\n        if(stat.isFile()){\n            fs.unlinkSync(url);\n        }\n    }\n}\n\nfunction recursion(url,dirs){\n    var arr = fs.readdirSync(url);\n    var i = 0;\n    var le = arr.length;\n    for(;i<le;i++){\n        var v = path.resolve(url,arr[i]);\n        collection(v,dirs);\n    }\n}\n```\n\n## 运行脚手架Demo\n\n你可以下载脚手架项目跑一跑：[https://github.com/sapling-team/generator-sapling-pc](https://github.com/sapling-team/generator-sapling-pc)\n\n最终的发布可能还是需要gulp的一些辅助，不过这不要紧了，它只是帮助我们挪动了一些文件，最终成为了一个`www`目录。\n","slug":"issues-4","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk0d000guejr67t5lag2","content":"<blockquote>\n<p>温故而知新</p>\n</blockquote>\n<p>这应该是目前这个阶段最后一篇关于webpack的实践经验，也许你会学习到该用怎样的思想去使用webpack，也许你会认为这是一坨屎一样的文字。不过，我会尽量的描述，我们的实践以及给出一份在Mac和Win下的Demo，这个项目也是我们应用在PC端的实践，访问<a href=\"https://github.com/sapling-team/generator-sapling-pc\" target=\"_blank\" rel=\"external\">https://github.com/sapling-team/generator-sapling-pc</a>来阅读我们PC端的脚手架吧。（完美兼容IE8+）</p>\n<p>我们对<code>backbone</code>也提供了一份有用的扩展，可访问：<a href=\"https://github.com/sapling-team/base-extend-backbone\" target=\"_blank\" rel=\"external\">https://github.com/sapling-team/base-extend-backbone</a></p>\n<p>更多基础的配置信息，建议大家阅读<a href=\"https://github.com/icepy/_posts/issues/25\" target=\"_blank\" rel=\"external\">《webpack在PC项目中的应用》</a></p>\n<a id=\"more\"></a>\n<h2 id=\"该用什么样的思想来使用\"><a href=\"#该用什么样的思想来使用\" class=\"headerlink\" title=\"该用什么样的思想来使用\"></a>该用什么样的思想来使用</h2><blockquote>\n<p>你用的始终还是Node.js环境</p>\n</blockquote>\n<p>我觉得你应该要忘记webpack，因为你使用的终归还是Node.js。为什么这么说，因为如果只使用简单的配置，你可能只把它做为一个模块加载器。如果你熟练的使用了Node.Js那么恭喜你，我们将用环境的思维来使用它，并用Node.Js来驱动你的构建流程。（NPM可以使用的模块，你都可以在构建环境中使用）</p>\n<p>首先，我们应该将脚本文件放置在bin目录下，这是unix编程的常识。接着，对于你的产品，定义两个环境：dev和product，在NPM Scripts中使用<code>NODE_ENV=dev webpack --config bin/webpack.config</code>，然后在脚本文件中使用<code>process.env.NODE_ENV</code>来获取环境变量并区分执行。（很不幸的是，Win用户无法获取ENV，所以你需要建立两个文件来做dev和product）</p>\n<h2 id=\"抽象dir\"><a href=\"#抽象dir\" class=\"headerlink\" title=\"抽象dir\"></a>抽象dir</h2><p>抽象你的目录资源，设计一定的规则，可以进行批处理配置信息。</p>\n<pre><code>npm install glob --save-dev --verbose\n</code></pre><p>我们的入口文件都放置在src中，根据业务特点来命名，比如：<code>index.js</code>，<code>code.js</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">'glob'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = getEntry;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getEntry</span>(<span class=\"params\">sourcePath</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> entrys = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> basename;</span><br><span class=\"line\">    glob.sync(sourcePath).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">entry</span>)</span>&#123;</span><br><span class=\"line\">        basename = path.basename(entry,path.extname(entry));</span><br><span class=\"line\">        entrys[basename] = entry;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> entrys;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>webpack.dev.config.js</code>文件，可以通过getEntry函数来统一处理入口，并得到<code>entry</code>配置对象。如果你是多页面多入口的项目，建议你使用统一的命名规则，比如页面叫<code>index.html</code>，那么你的js和css入口文件也应该叫<code>index.js</code>和<code>index.css</code>。</p>\n<h2 id=\"include\"><a href=\"#include\" class=\"headerlink\" title=\"include\"></a>include</h2><blockquote>\n<p>在编译期来决定最终呈现什么样的HTML</p>\n</blockquote>\n<p>在后端语言的模板中<code>include</code>是一个非常有用的特性，因为它可以抽象分离不同的HTML结构，来达到复用的目的。</p>\n<pre><code>npm install jade-loader --save-dev --verbose\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doctype html</span><br><span class=\"line\">html(lang=&quot;en&quot;)</span><br><span class=\"line\">    head</span><br><span class=\"line\">        - var titleValue = htmlWebpackPlugin.options.title</span><br><span class=\"line\">        title=titleValue</span><br><span class=\"line\">        meta(charset=&quot;UTF-8&quot;)</span><br><span class=\"line\">    body</span><br><span class=\"line\">        include common/header</span><br><span class=\"line\">        include index/container</span><br><span class=\"line\">        include common/footer</span><br><span class=\"line\">        include common/lib</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- var src;</span><br><span class=\"line\">- var map = [&apos;jquery/dist/jquery.min.js&apos;,&apos;underscore/underscore-min.js&apos;,&apos;backbone/backbone-min.js&apos;]</span><br><span class=\"line\">if htmlWebpackPlugin.options.cdn</span><br><span class=\"line\">    - src = &apos;http://127.0.0.1:3000/www/link/&apos;</span><br><span class=\"line\">else</span><br><span class=\"line\">    - src = &apos;/link/&apos;</span><br><span class=\"line\">each val in map</span><br><span class=\"line\">    script(type=&quot;text/javascript&quot;,src=src+val)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test:<span class=\"regexp\">/.jade$/</span>,</span><br><span class=\"line\">    loader:<span class=\"string\">'jade-loader'</span>,</span><br><span class=\"line\">    exclude:<span class=\"regexp\">/(node_modules)/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不仅如此<code>jade</code>还可以做更高灵活的配置。</p>\n<h2 id=\"html-webpack-plugin\"><a href=\"#html-webpack-plugin\" class=\"headerlink\" title=\"html-webpack-plugin\"></a>html-webpack-plugin</h2><p>如果你是多页面，或者单页应用都需要这个插件来帮忙处理HTML的内容，比如上述的jade模板的<code>include</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pages = getEntry(<span class=\"string\">'./app/web/*.jade'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> chunkname <span class=\"keyword\">in</span> pages)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> conf = &#123;</span><br><span class=\"line\">        cdn:<span class=\"literal\">false</span>,</span><br><span class=\"line\">        filename:chunkname+<span class=\"string\">'.html'</span>,</span><br><span class=\"line\">        template:pages[chunkname],</span><br><span class=\"line\">        inject:<span class=\"literal\">true</span>,</span><br><span class=\"line\">        minify:&#123;</span><br><span class=\"line\">            removeComments:<span class=\"literal\">true</span>,</span><br><span class=\"line\">            collapseWhitespace: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        chunks:[<span class=\"string\">'common'</span>,chunkname],</span><br><span class=\"line\">        hash:<span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    plugins.push(<span class=\"keyword\">new</span> HtmlWebpackPlugin(conf));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据<code>抽象dir</code>的方法，我们可以通过<code>getEntry</code>来获取一个pages对象，并使用chunks来处理每一个入口页面的依赖。</p>\n<p>如果你是单页应用，你只需要添加一次HtmlWebpackPlugin插件即可。</p>\n<h2 id=\"如何优化\"><a href=\"#如何优化\" class=\"headerlink\" title=\"如何优化\"></a>如何优化</h2><blockquote>\n<p>优化，但不要过度的优化</p>\n</blockquote>\n<p>运行<code>npm run product</code>来构建你的发布资源。</p>\n<p>过度优化的结果：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: auto;</span><br><span class=\"line\">  <span class=\"selector-class\">.size</span>(margin-top, <span class=\"number\">15px</span>);</span><br><span class=\"line\">  <span class=\"selector-class\">.size</span>(margin-bottom, <span class=\"number\">15px</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后经过webpack的优化变成了：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">2.6408vh</span> auto <span class=\"number\">2.6408vh</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">1.5rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">1.5rem</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么问题来了Android4.3以下版本是不支持vw,vh单位的。</p>\n<p>我认为对于一个项目，优化的方式应该可以从下列的几个点中去挖掘：</p>\n<p><strong>externals 分离</strong></p>\n<p>善用<code>externals</code>将过大的文件分离出去，然后再用<code>script</code>标签引用即可。</p>\n<p><strong>alias机制</strong></p>\n<p>给一些模块启用别名，来提高webpack的搜索速度。</p>\n<p><strong>将某些对象暴露在全局</strong></p>\n<ul>\n<li>在loader中使用<code>expose</code>将对象暴露出去<code>loader: &#39;expose?jQuery&#39;</code></li>\n<li>使用<code>ProvidePlugin</code>插件的帮助</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">    <span class=\"string\">\"M\"</span>: <span class=\"string\">\"mock\"</span>,</span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n<p>假设<code>mock</code>对象中有<code>set</code>，<code>get</code>方法，那么此刻你可以在使用<code>M.set</code>，<code>M.get</code>方式来调用。</p>\n<p><strong>启用热替换</strong></p>\n<ul>\n<li>将代码内敛到入口js文件中，然后启动<code>webpack.HotModuleReplacementPlugin</code>插件</li>\n<li>使用自带的<code>webpack-dev-server</code>启动一个服务器</li>\n<li>直接在<code>webpack.config.js</code>文件中配置</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">devServer:&#123;</span><br><span class=\"line\">\tport:<span class=\"number\">4000</span>,</span><br><span class=\"line\">\tcontentBase:<span class=\"string\">'./app'</span>,</span><br><span class=\"line\">\thistoryApiFallback:<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>合理的使用CommonsChunkPlugin将每一个chunk分割开，并提取</strong></p>\n<p><code>CommonsChunkPlugin</code>有一些属性，比如<code>minChunks</code>可以设置如果<code>require</code>几次再提取的问题。</p>\n<p><strong>个别项目环境变量优化</strong></p>\n<p>定义你的<code>process.env.NODE_ENV</code>变量，启用<code>DefinePlugin</code>插件来优化警告信息，很多框架，比如react都带有警告，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(process.env.NODE_ENV !== <span class=\"string\">'production'</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在prodcut期，我们可以通过<code>DefinePlugin</code>来打入环境变量来将这些剔除。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins.push(<span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">    <span class=\"string\">'process.env'</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">'NODE_ENV'</span>:<span class=\"built_in\">JSON</span>.stringify(process.env.NODE_ENV)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<p>构建期间<code>process.env.NODE_ENV !== &#39;production&#39;</code>会变成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>压缩工具，会忽略false内的内容，你会发现体积将减少了很多。</p>\n<h2 id=\"清理工作\"><a href=\"#清理工作\" class=\"headerlink\" title=\"清理工作\"></a>清理工作</h2><p>每次<code>npm run product</code>之后，因为设置了<code>hash</code>属性，所以会生成不同的文件，那么问题来了，我无法清理www目录，那么这时候，就可以换到Node.js的文件系统上了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> containerPath = path.resolve(<span class=\"string\">'./'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = rmdir;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rmdir</span>(<span class=\"params\">dirPath</span>)</span>&#123;</span><br><span class=\"line\">    dirPath = path.resolve(containerPath,dirPath);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dirs = [];</span><br><span class=\"line\">    collection(dirPath,dirs);</span><br><span class=\"line\">    dirs.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> status = fs.rmdirSync(v);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(status)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(status);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">collection</span>(<span class=\"params\">url,dirs</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> stat = fs.statSync(url);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(stat.isDirectory())&#123;</span><br><span class=\"line\">        dirs.unshift(url);</span><br><span class=\"line\">        recursion(url,dirs);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(stat.isFile())&#123;</span><br><span class=\"line\">            fs.unlinkSync(url);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">recursion</span>(<span class=\"params\">url,dirs</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = fs.readdirSync(url);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> le = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;i&lt;le;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> v = path.resolve(url,arr[i]);</span><br><span class=\"line\">        collection(v,dirs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行脚手架Demo\"><a href=\"#运行脚手架Demo\" class=\"headerlink\" title=\"运行脚手架Demo\"></a>运行脚手架Demo</h2><p>你可以下载脚手架项目跑一跑：<a href=\"https://github.com/sapling-team/generator-sapling-pc\" target=\"_blank\" rel=\"external\">https://github.com/sapling-team/generator-sapling-pc</a></p>\n<p>最终的发布可能还是需要gulp的一些辅助，不过这不要紧了，它只是帮助我们挪动了一些文件，最终成为了一个<code>www</code>目录。</p>\n","excerpt":"<blockquote>\n<p>温故而知新</p>\n</blockquote>\n<p>这应该是目前这个阶段最后一篇关于webpack的实践经验，也许你会学习到该用怎样的思想去使用webpack，也许你会认为这是一坨屎一样的文字。不过，我会尽量的描述，我们的实践以及给出一份在Mac和Win下的Demo，这个项目也是我们应用在PC端的实践，访问<a href=\"https://github.com/sapling-team/generator-sapling-pc\">https://github.com/sapling-team/generator-sapling-pc</a>来阅读我们PC端的脚手架吧。（完美兼容IE8+）</p>\n<p>我们对<code>backbone</code>也提供了一份有用的扩展，可访问：<a href=\"https://github.com/sapling-team/base-extend-backbone\">https://github.com/sapling-team/base-extend-backbone</a></p>\n<p>更多基础的配置信息，建议大家阅读<a href=\"https://github.com/icepy/_posts/issues/25\">《webpack在PC项目中的应用》</a></p>","more":"<h2 id=\"该用什么样的思想来使用\"><a href=\"#该用什么样的思想来使用\" class=\"headerlink\" title=\"该用什么样的思想来使用\"></a>该用什么样的思想来使用</h2><blockquote>\n<p>你用的始终还是Node.js环境</p>\n</blockquote>\n<p>我觉得你应该要忘记webpack，因为你使用的终归还是Node.js。为什么这么说，因为如果只使用简单的配置，你可能只把它做为一个模块加载器。如果你熟练的使用了Node.Js那么恭喜你，我们将用环境的思维来使用它，并用Node.Js来驱动你的构建流程。（NPM可以使用的模块，你都可以在构建环境中使用）</p>\n<p>首先，我们应该将脚本文件放置在bin目录下，这是unix编程的常识。接着，对于你的产品，定义两个环境：dev和product，在NPM Scripts中使用<code>NODE_ENV=dev webpack --config bin/webpack.config</code>，然后在脚本文件中使用<code>process.env.NODE_ENV</code>来获取环境变量并区分执行。（很不幸的是，Win用户无法获取ENV，所以你需要建立两个文件来做dev和product）</p>\n<h2 id=\"抽象dir\"><a href=\"#抽象dir\" class=\"headerlink\" title=\"抽象dir\"></a>抽象dir</h2><p>抽象你的目录资源，设计一定的规则，可以进行批处理配置信息。</p>\n<pre><code>npm install glob --save-dev --verbose\n</code></pre><p>我们的入口文件都放置在src中，根据业务特点来命名，比如：<code>index.js</code>，<code>code.js</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">'glob'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = getEntry;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getEntry</span>(<span class=\"params\">sourcePath</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> entrys = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> basename;</span><br><span class=\"line\">    glob.sync(sourcePath).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">entry</span>)</span>&#123;</span><br><span class=\"line\">        basename = path.basename(entry,path.extname(entry));</span><br><span class=\"line\">        entrys[basename] = entry;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> entrys;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>webpack.dev.config.js</code>文件，可以通过getEntry函数来统一处理入口，并得到<code>entry</code>配置对象。如果你是多页面多入口的项目，建议你使用统一的命名规则，比如页面叫<code>index.html</code>，那么你的js和css入口文件也应该叫<code>index.js</code>和<code>index.css</code>。</p>\n<h2 id=\"include\"><a href=\"#include\" class=\"headerlink\" title=\"include\"></a>include</h2><blockquote>\n<p>在编译期来决定最终呈现什么样的HTML</p>\n</blockquote>\n<p>在后端语言的模板中<code>include</code>是一个非常有用的特性，因为它可以抽象分离不同的HTML结构，来达到复用的目的。</p>\n<pre><code>npm install jade-loader --save-dev --verbose\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doctype html</span><br><span class=\"line\">html(lang=&quot;en&quot;)</span><br><span class=\"line\">    head</span><br><span class=\"line\">        - var titleValue = htmlWebpackPlugin.options.title</span><br><span class=\"line\">        title=titleValue</span><br><span class=\"line\">        meta(charset=&quot;UTF-8&quot;)</span><br><span class=\"line\">    body</span><br><span class=\"line\">        include common/header</span><br><span class=\"line\">        include index/container</span><br><span class=\"line\">        include common/footer</span><br><span class=\"line\">        include common/lib</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- var src;</span><br><span class=\"line\">- var map = [&apos;jquery/dist/jquery.min.js&apos;,&apos;underscore/underscore-min.js&apos;,&apos;backbone/backbone-min.js&apos;]</span><br><span class=\"line\">if htmlWebpackPlugin.options.cdn</span><br><span class=\"line\">    - src = &apos;http://127.0.0.1:3000/www/link/&apos;</span><br><span class=\"line\">else</span><br><span class=\"line\">    - src = &apos;/link/&apos;</span><br><span class=\"line\">each val in map</span><br><span class=\"line\">    script(type=&quot;text/javascript&quot;,src=src+val)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test:<span class=\"regexp\">/.jade$/</span>,</span><br><span class=\"line\">    loader:<span class=\"string\">'jade-loader'</span>,</span><br><span class=\"line\">    exclude:<span class=\"regexp\">/(node_modules)/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不仅如此<code>jade</code>还可以做更高灵活的配置。</p>\n<h2 id=\"html-webpack-plugin\"><a href=\"#html-webpack-plugin\" class=\"headerlink\" title=\"html-webpack-plugin\"></a>html-webpack-plugin</h2><p>如果你是多页面，或者单页应用都需要这个插件来帮忙处理HTML的内容，比如上述的jade模板的<code>include</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pages = getEntry(<span class=\"string\">'./app/web/*.jade'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> chunkname <span class=\"keyword\">in</span> pages)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> conf = &#123;</span><br><span class=\"line\">        cdn:<span class=\"literal\">false</span>,</span><br><span class=\"line\">        filename:chunkname+<span class=\"string\">'.html'</span>,</span><br><span class=\"line\">        template:pages[chunkname],</span><br><span class=\"line\">        inject:<span class=\"literal\">true</span>,</span><br><span class=\"line\">        minify:&#123;</span><br><span class=\"line\">            removeComments:<span class=\"literal\">true</span>,</span><br><span class=\"line\">            collapseWhitespace: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        chunks:[<span class=\"string\">'common'</span>,chunkname],</span><br><span class=\"line\">        hash:<span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    plugins.push(<span class=\"keyword\">new</span> HtmlWebpackPlugin(conf));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据<code>抽象dir</code>的方法，我们可以通过<code>getEntry</code>来获取一个pages对象，并使用chunks来处理每一个入口页面的依赖。</p>\n<p>如果你是单页应用，你只需要添加一次HtmlWebpackPlugin插件即可。</p>\n<h2 id=\"如何优化\"><a href=\"#如何优化\" class=\"headerlink\" title=\"如何优化\"></a>如何优化</h2><blockquote>\n<p>优化，但不要过度的优化</p>\n</blockquote>\n<p>运行<code>npm run product</code>来构建你的发布资源。</p>\n<p>过度优化的结果：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: auto;</span><br><span class=\"line\">  <span class=\"selector-class\">.size</span>(margin-top, <span class=\"number\">15px</span>);</span><br><span class=\"line\">  <span class=\"selector-class\">.size</span>(margin-bottom, <span class=\"number\">15px</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后经过webpack的优化变成了：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">2.6408vh</span> auto <span class=\"number\">2.6408vh</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">1.5rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">1.5rem</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么问题来了Android4.3以下版本是不支持vw,vh单位的。</p>\n<p>我认为对于一个项目，优化的方式应该可以从下列的几个点中去挖掘：</p>\n<p><strong>externals 分离</strong></p>\n<p>善用<code>externals</code>将过大的文件分离出去，然后再用<code>script</code>标签引用即可。</p>\n<p><strong>alias机制</strong></p>\n<p>给一些模块启用别名，来提高webpack的搜索速度。</p>\n<p><strong>将某些对象暴露在全局</strong></p>\n<ul>\n<li>在loader中使用<code>expose</code>将对象暴露出去<code>loader: &#39;expose?jQuery&#39;</code></li>\n<li>使用<code>ProvidePlugin</code>插件的帮助</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">    <span class=\"string\">\"M\"</span>: <span class=\"string\">\"mock\"</span>,</span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n<p>假设<code>mock</code>对象中有<code>set</code>，<code>get</code>方法，那么此刻你可以在使用<code>M.set</code>，<code>M.get</code>方式来调用。</p>\n<p><strong>启用热替换</strong></p>\n<ul>\n<li>将代码内敛到入口js文件中，然后启动<code>webpack.HotModuleReplacementPlugin</code>插件</li>\n<li>使用自带的<code>webpack-dev-server</code>启动一个服务器</li>\n<li>直接在<code>webpack.config.js</code>文件中配置</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">devServer:&#123;</span><br><span class=\"line\">\tport:<span class=\"number\">4000</span>,</span><br><span class=\"line\">\tcontentBase:<span class=\"string\">'./app'</span>,</span><br><span class=\"line\">\thistoryApiFallback:<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>合理的使用CommonsChunkPlugin将每一个chunk分割开，并提取</strong></p>\n<p><code>CommonsChunkPlugin</code>有一些属性，比如<code>minChunks</code>可以设置如果<code>require</code>几次再提取的问题。</p>\n<p><strong>个别项目环境变量优化</strong></p>\n<p>定义你的<code>process.env.NODE_ENV</code>变量，启用<code>DefinePlugin</code>插件来优化警告信息，很多框架，比如react都带有警告，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(process.env.NODE_ENV !== <span class=\"string\">'production'</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在prodcut期，我们可以通过<code>DefinePlugin</code>来打入环境变量来将这些剔除。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins.push(<span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">    <span class=\"string\">'process.env'</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">'NODE_ENV'</span>:<span class=\"built_in\">JSON</span>.stringify(process.env.NODE_ENV)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<p>构建期间<code>process.env.NODE_ENV !== &#39;production&#39;</code>会变成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>压缩工具，会忽略false内的内容，你会发现体积将减少了很多。</p>\n<h2 id=\"清理工作\"><a href=\"#清理工作\" class=\"headerlink\" title=\"清理工作\"></a>清理工作</h2><p>每次<code>npm run product</code>之后，因为设置了<code>hash</code>属性，所以会生成不同的文件，那么问题来了，我无法清理www目录，那么这时候，就可以换到Node.js的文件系统上了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> containerPath = path.resolve(<span class=\"string\">'./'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = rmdir;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rmdir</span>(<span class=\"params\">dirPath</span>)</span>&#123;</span><br><span class=\"line\">    dirPath = path.resolve(containerPath,dirPath);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dirs = [];</span><br><span class=\"line\">    collection(dirPath,dirs);</span><br><span class=\"line\">    dirs.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> status = fs.rmdirSync(v);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(status)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(status);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">collection</span>(<span class=\"params\">url,dirs</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> stat = fs.statSync(url);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(stat.isDirectory())&#123;</span><br><span class=\"line\">        dirs.unshift(url);</span><br><span class=\"line\">        recursion(url,dirs);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(stat.isFile())&#123;</span><br><span class=\"line\">            fs.unlinkSync(url);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">recursion</span>(<span class=\"params\">url,dirs</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = fs.readdirSync(url);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> le = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;i&lt;le;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> v = path.resolve(url,arr[i]);</span><br><span class=\"line\">        collection(v,dirs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行脚手架Demo\"><a href=\"#运行脚手架Demo\" class=\"headerlink\" title=\"运行脚手架Demo\"></a>运行脚手架Demo</h2><p>你可以下载脚手架项目跑一跑：<a href=\"https://github.com/sapling-team/generator-sapling-pc\">https://github.com/sapling-team/generator-sapling-pc</a></p>\n<p>最终的发布可能还是需要gulp的一些辅助，不过这不要紧了，它只是帮助我们挪动了一些文件，最终成为了一个<code>www</code>目录。</p>"},{"title":"Swift的期待","date":"2016-04-16T10:17:36.000Z","_content":"\n> 会当凌绝顶，一览众山小。\n\n**摘要：去年底苹果开源 Swift 之后，Google、Facebook和Uber三个互联网巨头就曾在伦敦召开会议讨论Swift在各自开发战略中的地位。近日业界有消息传出，谷歌有意考虑将Swift作为Android开发的第一语言，而Facebook和Uber也计划在运营中提高Swift的地位。**\n\n虽然这是一则被科技媒体爆出来的新闻，但是让我对Swift报有更强烈的期待。\n\n紧接着一个PR被Swift团队接受了：[https://github.com/apple/swift/pull/1442](https://github.com/apple/swift/pull/1442)\n\n*This adds an Android target for the stdlib. It is also the first example of cross-compiling outside of Darwin: a Linux host machine builds for an Android target.*\n\n目前`Swift`已经支持了Mac和Linux两个平台，虽然`Linux`支持的是`Ubuntu`。\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/swift.png)\n\n如果`Swift`是一个江湖，那么：\n\n<!--more-->\n\n**道统**\n\n- [swift-lldb](https://github.com/apple/swift-lldb)\n- [swift-clang](https://github.com/apple/swift-clang)\n- [swift-llvm](https://github.com/apple/swift-llvm)\n- [swift-package-manager](https://github.com/apple/swift-package-manager)\n\n这是江湖中最顶级的道统，天下武功（基于Swift开源的框架或者实现）皆出于此。\n\n**道统管理**\n\n[https://github.com/kylef/swiftenv](https://github.com/kylef/swiftenv)相当于Node.js中的nvm，你可以使用它来管理Swift的版本。当然相比于JavaScript的jsbin，Swift也存在一个Web的运行时，你可以通过它来学习Swift的基础心法：[http://www.runswiftlang.com/](http://www.runswiftlang.com/)。\n\n**道统的公告**\n\n如果你想知道`Swift`下一步的发展计划，你可以访问[https://github.com/apple/swift-evolution](https://github.com/apple/swift-evolution)来了解`Swift`团队的动态，目前的动态信息是Development major version: Swift 3.0，Expected release date: Late 2016。\n\n## 武功用于何处\n\n突然间感觉到Swift与JavaScript的比较，有种相同类似的意义，那么让我们看一看Swift究竟能做些什么。\n\n**开发iOS Mac Apple Watch平台的App**\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/apple.png)\n\n这一点上毫无疑问，Apple推出的这一语言目的就是替换Objective-C在iOS，Mac平台上的`地位`（Apple Watch必须使用Swift开发，如果说开源可能谁都没发想到，那一届的WWDC确实很惊喜），有一点需要注意的是，如果你的App需要提交到Apple的商店，那么你必须使用Xcode自带的Swift版本（目前是2.2）。\n\n如果你想学习Swift，我特别的推荐你查看：[https://github.com/ipader/SwiftGuide](https://github.com/ipader/SwiftGuide)，当然官网也是不错的去处。\n\n当然，随着`iOS Mac Apple Watch`平台的武功秘籍，流派的发展各路武功你都可以使用[CocoaPods](https://cocoapods.org/)来进行管理，相当于Node.js之`NPM`。\n\n**Android-虚位以待**\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/android.png)\n\n随着科技新闻的曝光和FB工程师的一次PR（开源社区），这个方面绝对有很大的想象空间。如果`Google`决定将`Swift`应用到Andorid平台，这无疑对开发者来说将有大大的好处。\n\n来来来，看一个Swift跑在Android上的`Hello World`：[https://github.com/SwiftAndroid/swift/](https://github.com/SwiftAndroid/swift/)\n\n**服务端**\n\n> Hello，服务端 Swift\n\n如果说安全和性能是Swift最大的优势外，它的简单易学也是它最大的优点。\n\n- [Perfect](https://github.com/PerfectlySoft/Perfect/)\n- [Kitura](https://github.com/IBM-Swift/Kitura)\n- [Express](https://github.com/crossroadlabs/Express)\n\n`Perfect`是用Swift语言的Web开发和其他REST服务的框架，提供了一套进行服务端和客户端开发的核心工具，尤其是还供了在服务端开发中非常重要的MySQL, PostgreSQL, MondoDB数据库连接器。\n\n`Kitura`是IBM公司开源的一套web开发框架。\n\n`Express`让我想到了Node.js社区的`express`web开发框架，没错你能看见非常熟悉的语法和使用方式。\n\n至于数据库，你想连接哪个都行。\n\n**数据可视化**\n\n数据可视化（哪都有它），比如Web的D3.js，当然Swift也有它对应的实现可用（而且N+1多），我用过的是[https://github.com/danielgindi/Charts](https://github.com/danielgindi/Charts)。\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/charts.png)\n\n**AI**\n\n这年头不玩玩人工智能和深度学习都不好意思了，没错Swift也有一个对应的开源实现：[https://github.com/collinhundley/Swift-AI](https://github.com/collinhundley/Swift-AI)。\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/ai.png)\n\n------\n\n还有太多太多的领域（硬件，物联网，游戏等等）就不一一例举了，当然它无法进入Web客户端领域（这里绝对是JavaScript的天下。）\n\n## 未来\n\n静静的等待3.0以及它的爆发；\n","source":"_posts/issues-3.md","raw":"title: Swift的期待\ndate: 2016-04-16 18:17:36\ntags: Swift\n---\n\n> 会当凌绝顶，一览众山小。\n\n**摘要：去年底苹果开源 Swift 之后，Google、Facebook和Uber三个互联网巨头就曾在伦敦召开会议讨论Swift在各自开发战略中的地位。近日业界有消息传出，谷歌有意考虑将Swift作为Android开发的第一语言，而Facebook和Uber也计划在运营中提高Swift的地位。**\n\n虽然这是一则被科技媒体爆出来的新闻，但是让我对Swift报有更强烈的期待。\n\n紧接着一个PR被Swift团队接受了：[https://github.com/apple/swift/pull/1442](https://github.com/apple/swift/pull/1442)\n\n*This adds an Android target for the stdlib. It is also the first example of cross-compiling outside of Darwin: a Linux host machine builds for an Android target.*\n\n目前`Swift`已经支持了Mac和Linux两个平台，虽然`Linux`支持的是`Ubuntu`。\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/swift.png)\n\n如果`Swift`是一个江湖，那么：\n\n<!--more-->\n\n**道统**\n\n- [swift-lldb](https://github.com/apple/swift-lldb)\n- [swift-clang](https://github.com/apple/swift-clang)\n- [swift-llvm](https://github.com/apple/swift-llvm)\n- [swift-package-manager](https://github.com/apple/swift-package-manager)\n\n这是江湖中最顶级的道统，天下武功（基于Swift开源的框架或者实现）皆出于此。\n\n**道统管理**\n\n[https://github.com/kylef/swiftenv](https://github.com/kylef/swiftenv)相当于Node.js中的nvm，你可以使用它来管理Swift的版本。当然相比于JavaScript的jsbin，Swift也存在一个Web的运行时，你可以通过它来学习Swift的基础心法：[http://www.runswiftlang.com/](http://www.runswiftlang.com/)。\n\n**道统的公告**\n\n如果你想知道`Swift`下一步的发展计划，你可以访问[https://github.com/apple/swift-evolution](https://github.com/apple/swift-evolution)来了解`Swift`团队的动态，目前的动态信息是Development major version: Swift 3.0，Expected release date: Late 2016。\n\n## 武功用于何处\n\n突然间感觉到Swift与JavaScript的比较，有种相同类似的意义，那么让我们看一看Swift究竟能做些什么。\n\n**开发iOS Mac Apple Watch平台的App**\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/apple.png)\n\n这一点上毫无疑问，Apple推出的这一语言目的就是替换Objective-C在iOS，Mac平台上的`地位`（Apple Watch必须使用Swift开发，如果说开源可能谁都没发想到，那一届的WWDC确实很惊喜），有一点需要注意的是，如果你的App需要提交到Apple的商店，那么你必须使用Xcode自带的Swift版本（目前是2.2）。\n\n如果你想学习Swift，我特别的推荐你查看：[https://github.com/ipader/SwiftGuide](https://github.com/ipader/SwiftGuide)，当然官网也是不错的去处。\n\n当然，随着`iOS Mac Apple Watch`平台的武功秘籍，流派的发展各路武功你都可以使用[CocoaPods](https://cocoapods.org/)来进行管理，相当于Node.js之`NPM`。\n\n**Android-虚位以待**\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/android.png)\n\n随着科技新闻的曝光和FB工程师的一次PR（开源社区），这个方面绝对有很大的想象空间。如果`Google`决定将`Swift`应用到Andorid平台，这无疑对开发者来说将有大大的好处。\n\n来来来，看一个Swift跑在Android上的`Hello World`：[https://github.com/SwiftAndroid/swift/](https://github.com/SwiftAndroid/swift/)\n\n**服务端**\n\n> Hello，服务端 Swift\n\n如果说安全和性能是Swift最大的优势外，它的简单易学也是它最大的优点。\n\n- [Perfect](https://github.com/PerfectlySoft/Perfect/)\n- [Kitura](https://github.com/IBM-Swift/Kitura)\n- [Express](https://github.com/crossroadlabs/Express)\n\n`Perfect`是用Swift语言的Web开发和其他REST服务的框架，提供了一套进行服务端和客户端开发的核心工具，尤其是还供了在服务端开发中非常重要的MySQL, PostgreSQL, MondoDB数据库连接器。\n\n`Kitura`是IBM公司开源的一套web开发框架。\n\n`Express`让我想到了Node.js社区的`express`web开发框架，没错你能看见非常熟悉的语法和使用方式。\n\n至于数据库，你想连接哪个都行。\n\n**数据可视化**\n\n数据可视化（哪都有它），比如Web的D3.js，当然Swift也有它对应的实现可用（而且N+1多），我用过的是[https://github.com/danielgindi/Charts](https://github.com/danielgindi/Charts)。\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/charts.png)\n\n**AI**\n\n这年头不玩玩人工智能和深度学习都不好意思了，没错Swift也有一个对应的开源实现：[https://github.com/collinhundley/Swift-AI](https://github.com/collinhundley/Swift-AI)。\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/ai.png)\n\n------\n\n还有太多太多的领域（硬件，物联网，游戏等等）就不一一例举了，当然它无法进入Web客户端领域（这里绝对是JavaScript的天下。）\n\n## 未来\n\n静静的等待3.0以及它的爆发；\n","slug":"issues-3","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk0h000iuejru7i17qkz","content":"<blockquote>\n<p>会当凌绝顶，一览众山小。</p>\n</blockquote>\n<p><strong>摘要：去年底苹果开源 Swift 之后，Google、Facebook和Uber三个互联网巨头就曾在伦敦召开会议讨论Swift在各自开发战略中的地位。近日业界有消息传出，谷歌有意考虑将Swift作为Android开发的第一语言，而Facebook和Uber也计划在运营中提高Swift的地位。</strong></p>\n<p>虽然这是一则被科技媒体爆出来的新闻，但是让我对Swift报有更强烈的期待。</p>\n<p>紧接着一个PR被Swift团队接受了：<a href=\"https://github.com/apple/swift/pull/1442\" target=\"_blank\" rel=\"external\">https://github.com/apple/swift/pull/1442</a></p>\n<p><em>This adds an Android target for the stdlib. It is also the first example of cross-compiling outside of Darwin: a Linux host machine builds for an Android target.</em></p>\n<p>目前<code>Swift</code>已经支持了Mac和Linux两个平台，虽然<code>Linux</code>支持的是<code>Ubuntu</code>。</p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/swift.png\" alt=\"\"></p>\n<p>如果<code>Swift</code>是一个江湖，那么：</p>\n<a id=\"more\"></a>\n<p><strong>道统</strong></p>\n<ul>\n<li><a href=\"https://github.com/apple/swift-lldb\" target=\"_blank\" rel=\"external\">swift-lldb</a></li>\n<li><a href=\"https://github.com/apple/swift-clang\" target=\"_blank\" rel=\"external\">swift-clang</a></li>\n<li><a href=\"https://github.com/apple/swift-llvm\" target=\"_blank\" rel=\"external\">swift-llvm</a></li>\n<li><a href=\"https://github.com/apple/swift-package-manager\" target=\"_blank\" rel=\"external\">swift-package-manager</a></li>\n</ul>\n<p>这是江湖中最顶级的道统，天下武功（基于Swift开源的框架或者实现）皆出于此。</p>\n<p><strong>道统管理</strong></p>\n<p><a href=\"https://github.com/kylef/swiftenv\" target=\"_blank\" rel=\"external\">https://github.com/kylef/swiftenv</a>相当于Node.js中的nvm，你可以使用它来管理Swift的版本。当然相比于JavaScript的jsbin，Swift也存在一个Web的运行时，你可以通过它来学习Swift的基础心法：<a href=\"http://www.runswiftlang.com/\" target=\"_blank\" rel=\"external\">http://www.runswiftlang.com/</a>。</p>\n<p><strong>道统的公告</strong></p>\n<p>如果你想知道<code>Swift</code>下一步的发展计划，你可以访问<a href=\"https://github.com/apple/swift-evolution\" target=\"_blank\" rel=\"external\">https://github.com/apple/swift-evolution</a>来了解<code>Swift</code>团队的动态，目前的动态信息是Development major version: Swift 3.0，Expected release date: Late 2016。</p>\n<h2 id=\"武功用于何处\"><a href=\"#武功用于何处\" class=\"headerlink\" title=\"武功用于何处\"></a>武功用于何处</h2><p>突然间感觉到Swift与JavaScript的比较，有种相同类似的意义，那么让我们看一看Swift究竟能做些什么。</p>\n<p><strong>开发iOS Mac Apple Watch平台的App</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/apple.png\" alt=\"\"></p>\n<p>这一点上毫无疑问，Apple推出的这一语言目的就是替换Objective-C在iOS，Mac平台上的<code>地位</code>（Apple Watch必须使用Swift开发，如果说开源可能谁都没发想到，那一届的WWDC确实很惊喜），有一点需要注意的是，如果你的App需要提交到Apple的商店，那么你必须使用Xcode自带的Swift版本（目前是2.2）。</p>\n<p>如果你想学习Swift，我特别的推荐你查看：<a href=\"https://github.com/ipader/SwiftGuide\" target=\"_blank\" rel=\"external\">https://github.com/ipader/SwiftGuide</a>，当然官网也是不错的去处。</p>\n<p>当然，随着<code>iOS Mac Apple Watch</code>平台的武功秘籍，流派的发展各路武功你都可以使用<a href=\"https://cocoapods.org/\" target=\"_blank\" rel=\"external\">CocoaPods</a>来进行管理，相当于Node.js之<code>NPM</code>。</p>\n<p><strong>Android-虚位以待</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/android.png\" alt=\"\"></p>\n<p>随着科技新闻的曝光和FB工程师的一次PR（开源社区），这个方面绝对有很大的想象空间。如果<code>Google</code>决定将<code>Swift</code>应用到Andorid平台，这无疑对开发者来说将有大大的好处。</p>\n<p>来来来，看一个Swift跑在Android上的<code>Hello World</code>：<a href=\"https://github.com/SwiftAndroid/swift/\" target=\"_blank\" rel=\"external\">https://github.com/SwiftAndroid/swift/</a></p>\n<p><strong>服务端</strong></p>\n<blockquote>\n<p>Hello，服务端 Swift</p>\n</blockquote>\n<p>如果说安全和性能是Swift最大的优势外，它的简单易学也是它最大的优点。</p>\n<ul>\n<li><a href=\"https://github.com/PerfectlySoft/Perfect/\" target=\"_blank\" rel=\"external\">Perfect</a></li>\n<li><a href=\"https://github.com/IBM-Swift/Kitura\" target=\"_blank\" rel=\"external\">Kitura</a></li>\n<li><a href=\"https://github.com/crossroadlabs/Express\" target=\"_blank\" rel=\"external\">Express</a></li>\n</ul>\n<p><code>Perfect</code>是用Swift语言的Web开发和其他REST服务的框架，提供了一套进行服务端和客户端开发的核心工具，尤其是还供了在服务端开发中非常重要的MySQL, PostgreSQL, MondoDB数据库连接器。</p>\n<p><code>Kitura</code>是IBM公司开源的一套web开发框架。</p>\n<p><code>Express</code>让我想到了Node.js社区的<code>express</code>web开发框架，没错你能看见非常熟悉的语法和使用方式。</p>\n<p>至于数据库，你想连接哪个都行。</p>\n<p><strong>数据可视化</strong></p>\n<p>数据可视化（哪都有它），比如Web的D3.js，当然Swift也有它对应的实现可用（而且N+1多），我用过的是<a href=\"https://github.com/danielgindi/Charts\" target=\"_blank\" rel=\"external\">https://github.com/danielgindi/Charts</a>。</p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/charts.png\" alt=\"\"></p>\n<p><strong>AI</strong></p>\n<p>这年头不玩玩人工智能和深度学习都不好意思了，没错Swift也有一个对应的开源实现：<a href=\"https://github.com/collinhundley/Swift-AI\" target=\"_blank\" rel=\"external\">https://github.com/collinhundley/Swift-AI</a>。</p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/ai.png\" alt=\"\"></p>\n<hr>\n<p>还有太多太多的领域（硬件，物联网，游戏等等）就不一一例举了，当然它无法进入Web客户端领域（这里绝对是JavaScript的天下。）</p>\n<h2 id=\"未来\"><a href=\"#未来\" class=\"headerlink\" title=\"未来\"></a>未来</h2><p>静静的等待3.0以及它的爆发；</p>\n","excerpt":"<blockquote>\n<p>会当凌绝顶，一览众山小。</p>\n</blockquote>\n<p><strong>摘要：去年底苹果开源 Swift 之后，Google、Facebook和Uber三个互联网巨头就曾在伦敦召开会议讨论Swift在各自开发战略中的地位。近日业界有消息传出，谷歌有意考虑将Swift作为Android开发的第一语言，而Facebook和Uber也计划在运营中提高Swift的地位。</strong></p>\n<p>虽然这是一则被科技媒体爆出来的新闻，但是让我对Swift报有更强烈的期待。</p>\n<p>紧接着一个PR被Swift团队接受了：<a href=\"https://github.com/apple/swift/pull/1442\">https://github.com/apple/swift/pull/1442</a></p>\n<p><em>This adds an Android target for the stdlib. It is also the first example of cross-compiling outside of Darwin: a Linux host machine builds for an Android target.</em></p>\n<p>目前<code>Swift</code>已经支持了Mac和Linux两个平台，虽然<code>Linux</code>支持的是<code>Ubuntu</code>。</p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/swift.png\" alt=\"\"></p>\n<p>如果<code>Swift</code>是一个江湖，那么：</p>","more":"<p><strong>道统</strong></p>\n<ul>\n<li><a href=\"https://github.com/apple/swift-lldb\">swift-lldb</a></li>\n<li><a href=\"https://github.com/apple/swift-clang\">swift-clang</a></li>\n<li><a href=\"https://github.com/apple/swift-llvm\">swift-llvm</a></li>\n<li><a href=\"https://github.com/apple/swift-package-manager\">swift-package-manager</a></li>\n</ul>\n<p>这是江湖中最顶级的道统，天下武功（基于Swift开源的框架或者实现）皆出于此。</p>\n<p><strong>道统管理</strong></p>\n<p><a href=\"https://github.com/kylef/swiftenv\">https://github.com/kylef/swiftenv</a>相当于Node.js中的nvm，你可以使用它来管理Swift的版本。当然相比于JavaScript的jsbin，Swift也存在一个Web的运行时，你可以通过它来学习Swift的基础心法：<a href=\"http://www.runswiftlang.com/\">http://www.runswiftlang.com/</a>。</p>\n<p><strong>道统的公告</strong></p>\n<p>如果你想知道<code>Swift</code>下一步的发展计划，你可以访问<a href=\"https://github.com/apple/swift-evolution\">https://github.com/apple/swift-evolution</a>来了解<code>Swift</code>团队的动态，目前的动态信息是Development major version: Swift 3.0，Expected release date: Late 2016。</p>\n<h2 id=\"武功用于何处\"><a href=\"#武功用于何处\" class=\"headerlink\" title=\"武功用于何处\"></a>武功用于何处</h2><p>突然间感觉到Swift与JavaScript的比较，有种相同类似的意义，那么让我们看一看Swift究竟能做些什么。</p>\n<p><strong>开发iOS Mac Apple Watch平台的App</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/apple.png\" alt=\"\"></p>\n<p>这一点上毫无疑问，Apple推出的这一语言目的就是替换Objective-C在iOS，Mac平台上的<code>地位</code>（Apple Watch必须使用Swift开发，如果说开源可能谁都没发想到，那一届的WWDC确实很惊喜），有一点需要注意的是，如果你的App需要提交到Apple的商店，那么你必须使用Xcode自带的Swift版本（目前是2.2）。</p>\n<p>如果你想学习Swift，我特别的推荐你查看：<a href=\"https://github.com/ipader/SwiftGuide\">https://github.com/ipader/SwiftGuide</a>，当然官网也是不错的去处。</p>\n<p>当然，随着<code>iOS Mac Apple Watch</code>平台的武功秘籍，流派的发展各路武功你都可以使用<a href=\"https://cocoapods.org/\">CocoaPods</a>来进行管理，相当于Node.js之<code>NPM</code>。</p>\n<p><strong>Android-虚位以待</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/android.png\" alt=\"\"></p>\n<p>随着科技新闻的曝光和FB工程师的一次PR（开源社区），这个方面绝对有很大的想象空间。如果<code>Google</code>决定将<code>Swift</code>应用到Andorid平台，这无疑对开发者来说将有大大的好处。</p>\n<p>来来来，看一个Swift跑在Android上的<code>Hello World</code>：<a href=\"https://github.com/SwiftAndroid/swift/\">https://github.com/SwiftAndroid/swift/</a></p>\n<p><strong>服务端</strong></p>\n<blockquote>\n<p>Hello，服务端 Swift</p>\n</blockquote>\n<p>如果说安全和性能是Swift最大的优势外，它的简单易学也是它最大的优点。</p>\n<ul>\n<li><a href=\"https://github.com/PerfectlySoft/Perfect/\">Perfect</a></li>\n<li><a href=\"https://github.com/IBM-Swift/Kitura\">Kitura</a></li>\n<li><a href=\"https://github.com/crossroadlabs/Express\">Express</a></li>\n</ul>\n<p><code>Perfect</code>是用Swift语言的Web开发和其他REST服务的框架，提供了一套进行服务端和客户端开发的核心工具，尤其是还供了在服务端开发中非常重要的MySQL, PostgreSQL, MondoDB数据库连接器。</p>\n<p><code>Kitura</code>是IBM公司开源的一套web开发框架。</p>\n<p><code>Express</code>让我想到了Node.js社区的<code>express</code>web开发框架，没错你能看见非常熟悉的语法和使用方式。</p>\n<p>至于数据库，你想连接哪个都行。</p>\n<p><strong>数据可视化</strong></p>\n<p>数据可视化（哪都有它），比如Web的D3.js，当然Swift也有它对应的实现可用（而且N+1多），我用过的是<a href=\"https://github.com/danielgindi/Charts\">https://github.com/danielgindi/Charts</a>。</p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/charts.png\" alt=\"\"></p>\n<p><strong>AI</strong></p>\n<p>这年头不玩玩人工智能和深度学习都不好意思了，没错Swift也有一个对应的开源实现：<a href=\"https://github.com/collinhundley/Swift-AI\">https://github.com/collinhundley/Swift-AI</a>。</p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/ai.png\" alt=\"\"></p>\n<hr>\n<p>还有太多太多的领域（硬件，物联网，游戏等等）就不一一例举了，当然它无法进入Web客户端领域（这里绝对是JavaScript的天下。）</p>\n<h2 id=\"未来\"><a href=\"#未来\" class=\"headerlink\" title=\"未来\"></a>未来</h2><p>静静的等待3.0以及它的爆发；</p>"},{"title":"使用Travis-CI+Coveralls让你的Github开源项目持续集成","date":"2016-04-07T10:34:04.000Z","_content":"\n> 我在成长为最好的自己；\n\n对于经常浏览`Github`的朋友来说，是不是会经常看见下图这样的状态图标？\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/build-state-icon.png)\n\n## 这是什么？\n\nTravis-CI是一个持续集成构建项目，使用了小清新的yml语法，你可以把它想象成一个Web的linux系统，通过yml语法来驱动执行。（你可以这么想象），它对于Github上的开源项目是免费的，当然private repo 就有些小贵了。\n\nCoveralls是一个自动化测试覆盖率的服务。\n\n在使用这两个服务之前默认你已经熟练操作Github了，接下来我将使用`Mocha`，`Chai`来构建一个自动化测试。\n\n<!--more-->\n\n## 准备工作\n\n使用你的Github账户 login [https://travis-ci.org/](https://travis-ci.org/)，点击右上角的`Accounts`到达一个页面，点击其中的`Sync account`，同步一下Github上公开的仓库。其实Travis-CI的官网已经给出了详细的步奏，接下来就是选择你要持续集成的项目，打开开关，创建配置文件，触发第一次钩子。\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/sync-repo.png)\n\n    npm install mocha chai --save-dev --verbose\n\n\n使用你的Github账户 login [https://coveralls.io/](https://coveralls.io/)，点击右上角的`ADD REPOS`，开启一个仓库。\n\n    npm install coveralls --save-dev --verbose\n\n*备注：所有的例子运行于Mac，windows系统可能有些差异*\n\n## 开始\n\n在项目的根目录创建`.travis.yml`文件，并且书写描述信息：\n\n```yml\nlanguage: node_js\nsudo: true\nnode_js:\n  - '4.1.1'\ncache:\n  directories:\n    - node_modules\nbefore_install:\n    - npm install\nscript:\n  - npm test\n  - npm run dev\n  - npm run build\n  - npm run checkdir\nafter_script:\n  - npm run coverage\n```\n\n我们创建的是一个JavaScript项目，所以`language`选择`node_js`，并且选择一个版本。`Travis-CI`默认是会执行`npm test`的，所以我们还需要保证`npm test`可用。关于NPM SCRIPT HOOK的使用，推荐大家阅读[《npm-scripts》](https://docs.npmjs.com/misc/scripts)。\n\n`Travis-CI`对于执行环境它提供了一个对应的`生命周期`，比如`before_install`，`after_script`等，这个周期是为了方便每一个命令的前后顺序可以确保正确。当然对于我们而言最重要的地方在于`script`，它是一个顺序的执行，（一行执行完再执行一行）。\n\n接下来我们还需要安装一下 [istanbul](https://github.com/gotwarlost/istanbul)，它可以生成`LCOV`文件，这是[https://coveralls.io/](https://coveralls.io/)服务所需要的东西。\n\n    npm install istanbul --save-dev --verbose\n\n*注意事项：istanbul mocha coveralls 最好不要全局安装，可能会出现莫名其妙的问题*\n\n以`ManagedObject`类为例子：\n\n```JavaScript\nvar chai = require('chai');\nvar Manage = require('../../src/entity/ManagedObject');\nvar expect = chai.expect;\n// 省略....\ndescribe('ManagerObject', function() {\n    // 省略....\n    describe('$sort 对实体内部的某项数据进行排序，第二个参数是要排序数据的.结构化表达式，第二个参数是排序的根据',function(){\n        it('测试.表达式< 降序',function(){\n            expect(manager.$sort('items','id.<')).to.eql(sortTestData)\n        })\n\n        it('测试.表达式> 升序',function(){\n            expect(managerT.$sort('items','id.>')).to.eql(sortTestDataT)\n        })\n\n        it('测试 function进行排序',function(){\n            expect(managerT.$sort('items',function(){\n                return true\n            })).to.eql(sortTestDataT.reverse())\n        })\n    })\n})\n```\n\n编写npm scripts hook：\n\n```JavaScript\n    \"scirpts\":{\n         \"test\": \"node ./node_modules/.bin/istanbul cover ./node_modules/mocha/bin/_mocha --colors ./configs/mocha/**/*.test.js\",\n         \"coverage\": \"cat ./coverage/lcov.info | coveralls\"\n    }\n\n```\n\n- node ./node_modules/.bin/istanbul cover 调用istanbul执行cover命令（默认生成LCOV文件）\n- ./node_modules/mocha/bin/_mocha --colors ./configs/mocha/**/*.test.js 关联mocha测试驱动程序，执行configs/mocha目录下的后缀是.test.js测试用例文件_\n- cat ./coverage/lcov.info 在终端打印\n- coveralls 执行coveralls服务（如果是公开的项目，不需要集成任何token在.travis.yml文件中）\n\n## 最后\n\n    git push origin master\n\n提交一次commit来触发`Travis-CI`，你就能得到下图了：\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/travis-ci.png)\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/coveralls.png)\n\n在构建的过程中，你可能还需要注意一些问题：\n\n- yml格式需要书写正确（确保每个space都必须要正确，travis-ci提供了一个检测工具），其实提交到Github之后如果你的yml格式没有写对，是不会有style的。\n- 使用脚本的时候不要使用watch模式，这样会构建失败\n- 对于npm安装，不需要打印安装信息（因为log太多也会构建失败）\n\n当然`Travis-CI`还有许多更高级的用法，需要大家一一去挖掘了。\n","source":"_posts/issues-5.md","raw":"title: 使用Travis-CI+Coveralls让你的Github开源项目持续集成\ndate: 2016-04-7 18:34:04\ntags: 工具\n---\n\n> 我在成长为最好的自己；\n\n对于经常浏览`Github`的朋友来说，是不是会经常看见下图这样的状态图标？\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/build-state-icon.png)\n\n## 这是什么？\n\nTravis-CI是一个持续集成构建项目，使用了小清新的yml语法，你可以把它想象成一个Web的linux系统，通过yml语法来驱动执行。（你可以这么想象），它对于Github上的开源项目是免费的，当然private repo 就有些小贵了。\n\nCoveralls是一个自动化测试覆盖率的服务。\n\n在使用这两个服务之前默认你已经熟练操作Github了，接下来我将使用`Mocha`，`Chai`来构建一个自动化测试。\n\n<!--more-->\n\n## 准备工作\n\n使用你的Github账户 login [https://travis-ci.org/](https://travis-ci.org/)，点击右上角的`Accounts`到达一个页面，点击其中的`Sync account`，同步一下Github上公开的仓库。其实Travis-CI的官网已经给出了详细的步奏，接下来就是选择你要持续集成的项目，打开开关，创建配置文件，触发第一次钩子。\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/sync-repo.png)\n\n    npm install mocha chai --save-dev --verbose\n\n\n使用你的Github账户 login [https://coveralls.io/](https://coveralls.io/)，点击右上角的`ADD REPOS`，开启一个仓库。\n\n    npm install coveralls --save-dev --verbose\n\n*备注：所有的例子运行于Mac，windows系统可能有些差异*\n\n## 开始\n\n在项目的根目录创建`.travis.yml`文件，并且书写描述信息：\n\n```yml\nlanguage: node_js\nsudo: true\nnode_js:\n  - '4.1.1'\ncache:\n  directories:\n    - node_modules\nbefore_install:\n    - npm install\nscript:\n  - npm test\n  - npm run dev\n  - npm run build\n  - npm run checkdir\nafter_script:\n  - npm run coverage\n```\n\n我们创建的是一个JavaScript项目，所以`language`选择`node_js`，并且选择一个版本。`Travis-CI`默认是会执行`npm test`的，所以我们还需要保证`npm test`可用。关于NPM SCRIPT HOOK的使用，推荐大家阅读[《npm-scripts》](https://docs.npmjs.com/misc/scripts)。\n\n`Travis-CI`对于执行环境它提供了一个对应的`生命周期`，比如`before_install`，`after_script`等，这个周期是为了方便每一个命令的前后顺序可以确保正确。当然对于我们而言最重要的地方在于`script`，它是一个顺序的执行，（一行执行完再执行一行）。\n\n接下来我们还需要安装一下 [istanbul](https://github.com/gotwarlost/istanbul)，它可以生成`LCOV`文件，这是[https://coveralls.io/](https://coveralls.io/)服务所需要的东西。\n\n    npm install istanbul --save-dev --verbose\n\n*注意事项：istanbul mocha coveralls 最好不要全局安装，可能会出现莫名其妙的问题*\n\n以`ManagedObject`类为例子：\n\n```JavaScript\nvar chai = require('chai');\nvar Manage = require('../../src/entity/ManagedObject');\nvar expect = chai.expect;\n// 省略....\ndescribe('ManagerObject', function() {\n    // 省略....\n    describe('$sort 对实体内部的某项数据进行排序，第二个参数是要排序数据的.结构化表达式，第二个参数是排序的根据',function(){\n        it('测试.表达式< 降序',function(){\n            expect(manager.$sort('items','id.<')).to.eql(sortTestData)\n        })\n\n        it('测试.表达式> 升序',function(){\n            expect(managerT.$sort('items','id.>')).to.eql(sortTestDataT)\n        })\n\n        it('测试 function进行排序',function(){\n            expect(managerT.$sort('items',function(){\n                return true\n            })).to.eql(sortTestDataT.reverse())\n        })\n    })\n})\n```\n\n编写npm scripts hook：\n\n```JavaScript\n    \"scirpts\":{\n         \"test\": \"node ./node_modules/.bin/istanbul cover ./node_modules/mocha/bin/_mocha --colors ./configs/mocha/**/*.test.js\",\n         \"coverage\": \"cat ./coverage/lcov.info | coveralls\"\n    }\n\n```\n\n- node ./node_modules/.bin/istanbul cover 调用istanbul执行cover命令（默认生成LCOV文件）\n- ./node_modules/mocha/bin/_mocha --colors ./configs/mocha/**/*.test.js 关联mocha测试驱动程序，执行configs/mocha目录下的后缀是.test.js测试用例文件_\n- cat ./coverage/lcov.info 在终端打印\n- coveralls 执行coveralls服务（如果是公开的项目，不需要集成任何token在.travis.yml文件中）\n\n## 最后\n\n    git push origin master\n\n提交一次commit来触发`Travis-CI`，你就能得到下图了：\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/travis-ci.png)\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/coveralls.png)\n\n在构建的过程中，你可能还需要注意一些问题：\n\n- yml格式需要书写正确（确保每个space都必须要正确，travis-ci提供了一个检测工具），其实提交到Github之后如果你的yml格式没有写对，是不会有style的。\n- 使用脚本的时候不要使用watch模式，这样会构建失败\n- 对于npm安装，不需要打印安装信息（因为log太多也会构建失败）\n\n当然`Travis-CI`还有许多更高级的用法，需要大家一一去挖掘了。\n","slug":"issues-5","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk0k000kuejr5giamp18","content":"<blockquote>\n<p>我在成长为最好的自己；</p>\n</blockquote>\n<p>对于经常浏览<code>Github</code>的朋友来说，是不是会经常看见下图这样的状态图标？</p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/build-state-icon.png\" alt=\"\"></p>\n<h2 id=\"这是什么？\"><a href=\"#这是什么？\" class=\"headerlink\" title=\"这是什么？\"></a>这是什么？</h2><p>Travis-CI是一个持续集成构建项目，使用了小清新的yml语法，你可以把它想象成一个Web的linux系统，通过yml语法来驱动执行。（你可以这么想象），它对于Github上的开源项目是免费的，当然private repo 就有些小贵了。</p>\n<p>Coveralls是一个自动化测试覆盖率的服务。</p>\n<p>在使用这两个服务之前默认你已经熟练操作Github了，接下来我将使用<code>Mocha</code>，<code>Chai</code>来构建一个自动化测试。</p>\n<a id=\"more\"></a>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>使用你的Github账户 login <a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"external\">https://travis-ci.org/</a>，点击右上角的<code>Accounts</code>到达一个页面，点击其中的<code>Sync account</code>，同步一下Github上公开的仓库。其实Travis-CI的官网已经给出了详细的步奏，接下来就是选择你要持续集成的项目，打开开关，创建配置文件，触发第一次钩子。</p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/sync-repo.png\" alt=\"\"></p>\n<pre><code>npm install mocha chai --save-dev --verbose\n</code></pre><p>使用你的Github账户 login <a href=\"https://coveralls.io/\" target=\"_blank\" rel=\"external\">https://coveralls.io/</a>，点击右上角的<code>ADD REPOS</code>，开启一个仓库。</p>\n<pre><code>npm install coveralls --save-dev --verbose\n</code></pre><p><em>备注：所有的例子运行于Mac，windows系统可能有些差异</em></p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>在项目的根目录创建<code>.travis.yml</code>文件，并且书写描述信息：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> node_js</span><br><span class=\"line\"><span class=\"attr\">sudo:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">'4.1.1'</span></span><br><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\"><span class=\"attr\">  directories:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> node_modules</span><br><span class=\"line\"><span class=\"attr\">before_install:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> npm install</span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> npm test</span><br><span class=\"line\"><span class=\"bullet\">  -</span> npm run dev</span><br><span class=\"line\"><span class=\"bullet\">  -</span> npm run build</span><br><span class=\"line\"><span class=\"bullet\">  -</span> npm run checkdir</span><br><span class=\"line\"><span class=\"attr\">after_script:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> npm run coverage</span><br></pre></td></tr></table></figure>\n<p>我们创建的是一个JavaScript项目，所以<code>language</code>选择<code>node_js</code>，并且选择一个版本。<code>Travis-CI</code>默认是会执行<code>npm test</code>的，所以我们还需要保证<code>npm test</code>可用。关于NPM SCRIPT HOOK的使用，推荐大家阅读<a href=\"https://docs.npmjs.com/misc/scripts\" target=\"_blank\" rel=\"external\">《npm-scripts》</a>。</p>\n<p><code>Travis-CI</code>对于执行环境它提供了一个对应的<code>生命周期</code>，比如<code>before_install</code>，<code>after_script</code>等，这个周期是为了方便每一个命令的前后顺序可以确保正确。当然对于我们而言最重要的地方在于<code>script</code>，它是一个顺序的执行，（一行执行完再执行一行）。</p>\n<p>接下来我们还需要安装一下 <a href=\"https://github.com/gotwarlost/istanbul\" target=\"_blank\" rel=\"external\">istanbul</a>，它可以生成<code>LCOV</code>文件，这是<a href=\"https://coveralls.io/\" target=\"_blank\" rel=\"external\">https://coveralls.io/</a>服务所需要的东西。</p>\n<pre><code>npm install istanbul --save-dev --verbose\n</code></pre><p><em>注意事项：istanbul mocha coveralls 最好不要全局安装，可能会出现莫名其妙的问题</em></p>\n<p>以<code>ManagedObject</code>类为例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> chai = <span class=\"built_in\">require</span>(<span class=\"string\">'chai'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Manage = <span class=\"built_in\">require</span>(<span class=\"string\">'../../src/entity/ManagedObject'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> expect = chai.expect;</span><br><span class=\"line\"><span class=\"comment\">// 省略....</span></span><br><span class=\"line\">describe(<span class=\"string\">'ManagerObject'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 省略....</span></span><br><span class=\"line\">    describe(<span class=\"string\">'$sort 对实体内部的某项数据进行排序，第二个参数是要排序数据的.结构化表达式，第二个参数是排序的根据'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        it(<span class=\"string\">'测试.表达式&lt; 降序'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            expect(manager.$sort(<span class=\"string\">'items'</span>,<span class=\"string\">'id.&lt;'</span>)).to.eql(sortTestData)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        it(<span class=\"string\">'测试.表达式&gt; 升序'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            expect(managerT.$sort(<span class=\"string\">'items'</span>,<span class=\"string\">'id.&gt;'</span>)).to.eql(sortTestDataT)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        it(<span class=\"string\">'测试 function进行排序'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            expect(managerT.$sort(<span class=\"string\">'items'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;)).to.eql(sortTestDataT.reverse())</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>编写npm scripts hook：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scirpts\"</span>:&#123;</span><br><span class=\"line\">     <span class=\"string\">\"test\"</span>: <span class=\"string\">\"node ./node_modules/.bin/istanbul cover ./node_modules/mocha/bin/_mocha --colors ./configs/mocha/**/*.test.js\"</span>,</span><br><span class=\"line\">     <span class=\"string\">\"coverage\"</span>: <span class=\"string\">\"cat ./coverage/lcov.info | coveralls\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>node ./node_modules/.bin/istanbul cover 调用istanbul执行cover命令（默认生成LCOV文件）</li>\n<li>./node_modules/mocha/bin/<em>mocha –colors ./configs/mocha/<em>*/</em>.test.js 关联mocha测试驱动程序，执行configs/mocha目录下的后缀是.test.js测试用例文件</em></li>\n<li>cat ./coverage/lcov.info 在终端打印</li>\n<li>coveralls 执行coveralls服务（如果是公开的项目，不需要集成任何token在.travis.yml文件中）</li>\n</ul>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><pre><code>git push origin master\n</code></pre><p>提交一次commit来触发<code>Travis-CI</code>，你就能得到下图了：</p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/travis-ci.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/coveralls.png\" alt=\"\"></p>\n<p>在构建的过程中，你可能还需要注意一些问题：</p>\n<ul>\n<li>yml格式需要书写正确（确保每个space都必须要正确，travis-ci提供了一个检测工具），其实提交到Github之后如果你的yml格式没有写对，是不会有style的。</li>\n<li>使用脚本的时候不要使用watch模式，这样会构建失败</li>\n<li>对于npm安装，不需要打印安装信息（因为log太多也会构建失败）</li>\n</ul>\n<p>当然<code>Travis-CI</code>还有许多更高级的用法，需要大家一一去挖掘了。</p>\n","excerpt":"<blockquote>\n<p>我在成长为最好的自己；</p>\n</blockquote>\n<p>对于经常浏览<code>Github</code>的朋友来说，是不是会经常看见下图这样的状态图标？</p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/build-state-icon.png\" alt=\"\"></p>\n<h2 id=\"这是什么？\"><a href=\"#这是什么？\" class=\"headerlink\" title=\"这是什么？\"></a>这是什么？</h2><p>Travis-CI是一个持续集成构建项目，使用了小清新的yml语法，你可以把它想象成一个Web的linux系统，通过yml语法来驱动执行。（你可以这么想象），它对于Github上的开源项目是免费的，当然private repo 就有些小贵了。</p>\n<p>Coveralls是一个自动化测试覆盖率的服务。</p>\n<p>在使用这两个服务之前默认你已经熟练操作Github了，接下来我将使用<code>Mocha</code>，<code>Chai</code>来构建一个自动化测试。</p>","more":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>使用你的Github账户 login <a href=\"https://travis-ci.org/\">https://travis-ci.org/</a>，点击右上角的<code>Accounts</code>到达一个页面，点击其中的<code>Sync account</code>，同步一下Github上公开的仓库。其实Travis-CI的官网已经给出了详细的步奏，接下来就是选择你要持续集成的项目，打开开关，创建配置文件，触发第一次钩子。</p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/sync-repo.png\" alt=\"\"></p>\n<pre><code>npm install mocha chai --save-dev --verbose\n</code></pre><p>使用你的Github账户 login <a href=\"https://coveralls.io/\">https://coveralls.io/</a>，点击右上角的<code>ADD REPOS</code>，开启一个仓库。</p>\n<pre><code>npm install coveralls --save-dev --verbose\n</code></pre><p><em>备注：所有的例子运行于Mac，windows系统可能有些差异</em></p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>在项目的根目录创建<code>.travis.yml</code>文件，并且书写描述信息：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> node_js</span><br><span class=\"line\"><span class=\"attr\">sudo:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">'4.1.1'</span></span><br><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\"><span class=\"attr\">  directories:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> node_modules</span><br><span class=\"line\"><span class=\"attr\">before_install:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> npm install</span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> npm test</span><br><span class=\"line\"><span class=\"bullet\">  -</span> npm run dev</span><br><span class=\"line\"><span class=\"bullet\">  -</span> npm run build</span><br><span class=\"line\"><span class=\"bullet\">  -</span> npm run checkdir</span><br><span class=\"line\"><span class=\"attr\">after_script:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> npm run coverage</span><br></pre></td></tr></table></figure>\n<p>我们创建的是一个JavaScript项目，所以<code>language</code>选择<code>node_js</code>，并且选择一个版本。<code>Travis-CI</code>默认是会执行<code>npm test</code>的，所以我们还需要保证<code>npm test</code>可用。关于NPM SCRIPT HOOK的使用，推荐大家阅读<a href=\"https://docs.npmjs.com/misc/scripts\">《npm-scripts》</a>。</p>\n<p><code>Travis-CI</code>对于执行环境它提供了一个对应的<code>生命周期</code>，比如<code>before_install</code>，<code>after_script</code>等，这个周期是为了方便每一个命令的前后顺序可以确保正确。当然对于我们而言最重要的地方在于<code>script</code>，它是一个顺序的执行，（一行执行完再执行一行）。</p>\n<p>接下来我们还需要安装一下 <a href=\"https://github.com/gotwarlost/istanbul\">istanbul</a>，它可以生成<code>LCOV</code>文件，这是<a href=\"https://coveralls.io/\">https://coveralls.io/</a>服务所需要的东西。</p>\n<pre><code>npm install istanbul --save-dev --verbose\n</code></pre><p><em>注意事项：istanbul mocha coveralls 最好不要全局安装，可能会出现莫名其妙的问题</em></p>\n<p>以<code>ManagedObject</code>类为例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> chai = <span class=\"built_in\">require</span>(<span class=\"string\">'chai'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Manage = <span class=\"built_in\">require</span>(<span class=\"string\">'../../src/entity/ManagedObject'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> expect = chai.expect;</span><br><span class=\"line\"><span class=\"comment\">// 省略....</span></span><br><span class=\"line\">describe(<span class=\"string\">'ManagerObject'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 省略....</span></span><br><span class=\"line\">    describe(<span class=\"string\">'$sort 对实体内部的某项数据进行排序，第二个参数是要排序数据的.结构化表达式，第二个参数是排序的根据'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        it(<span class=\"string\">'测试.表达式&lt; 降序'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            expect(manager.$sort(<span class=\"string\">'items'</span>,<span class=\"string\">'id.&lt;'</span>)).to.eql(sortTestData)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        it(<span class=\"string\">'测试.表达式&gt; 升序'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            expect(managerT.$sort(<span class=\"string\">'items'</span>,<span class=\"string\">'id.&gt;'</span>)).to.eql(sortTestDataT)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        it(<span class=\"string\">'测试 function进行排序'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            expect(managerT.$sort(<span class=\"string\">'items'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;)).to.eql(sortTestDataT.reverse())</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>编写npm scripts hook：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scirpts\"</span>:&#123;</span><br><span class=\"line\">     <span class=\"string\">\"test\"</span>: <span class=\"string\">\"node ./node_modules/.bin/istanbul cover ./node_modules/mocha/bin/_mocha --colors ./configs/mocha/**/*.test.js\"</span>,</span><br><span class=\"line\">     <span class=\"string\">\"coverage\"</span>: <span class=\"string\">\"cat ./coverage/lcov.info | coveralls\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>node ./node_modules/.bin/istanbul cover 调用istanbul执行cover命令（默认生成LCOV文件）</li>\n<li>./node_modules/mocha/bin/<em>mocha –colors ./configs/mocha/<em>*/</em>.test.js 关联mocha测试驱动程序，执行configs/mocha目录下的后缀是.test.js测试用例文件</em></li>\n<li>cat ./coverage/lcov.info 在终端打印</li>\n<li>coveralls 执行coveralls服务（如果是公开的项目，不需要集成任何token在.travis.yml文件中）</li>\n</ul>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><pre><code>git push origin master\n</code></pre><p>提交一次commit来触发<code>Travis-CI</code>，你就能得到下图了：</p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/travis-ci.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/coveralls.png\" alt=\"\"></p>\n<p>在构建的过程中，你可能还需要注意一些问题：</p>\n<ul>\n<li>yml格式需要书写正确（确保每个space都必须要正确，travis-ci提供了一个检测工具），其实提交到Github之后如果你的yml格式没有写对，是不会有style的。</li>\n<li>使用脚本的时候不要使用watch模式，这样会构建失败</li>\n<li>对于npm安装，不需要打印安装信息（因为log太多也会构建失败）</li>\n</ul>\n<p>当然<code>Travis-CI</code>还有许多更高级的用法，需要大家一一去挖掘了。</p>"},{"title":"我的编程之路","date":"2016-04-04T10:50:37.000Z","banner":"http://o80ub63i5.bkt.clouddn.com/image/issues-6.jpg","_content":"\n> 光阴荏苒，岁月蹉跎；\n\n前些日子看电视剧翻到了刘烨的《血色浪漫》，其实我是一个很感性的人，电视剧中的人物：钟跃民，张海洋，周晓白，一幕一幕的从脑中闪过，很钦佩钟跃民对于人生的感悟，他有着无拘无束，散漫自由的天性。同时又善于在逆境中寻找乐趣（在陕北插队时），他很坚强，也很勇猛，可以用不文明对待不文明的方式来解决很多问题。他也很讲义气，可以在患难中把一张烧饼分给朋友吃的那种人。或多，或少，我和钟跃民的性格有大部分的相像，怀旧，又对于“新生活“而憧憬。\n\n说到编程其实我是半路出身的人，在很多年之前编程对于我形同“在塔克拉玛干中找绿洲一般”，撞上完全看概率。在很小的时候家里没有电脑，但是却有小霸王，（还是父亲从广州托人邮寄回来的）虽然父亲希望我能用它学习打字，不过多数情况下，我都用它在玩《魂斗罗》了。最开始接触编程（有意识的）还是在读高中的时候，学校对于市里的《电脑比赛》很重视，虽然是打字，以及基础的C语言（题目我还记得很清楚，输出一个乘法表）。但是我没有继续学习，比赛完之后就抛之脑后了。不过可喜的是，我竟然发现自己很喜欢电脑课老师推荐学习的python，坚持阅读完了一本书：\n\n[![](https://img3.doubanio.com/lpic/s2604186.jpg)](https://book.douban.com/subject/2137490/)\n\n高中读完（没有去念大学），一直在雪峰山里的老家，过着自己的隐居生活，一过既是三年。\n\n<!--more-->\n\n至今我都还能想到那一年刚到长沙（2011年）的夏天，穿着短袖站在长沙火车站，脸油油的一夜未睡，从怀化到长沙的绿皮火车需要开一个通宵才能到长沙。（去找第一份工作，当时还叫网页制作），那时候的我如同一个小白，大约知道一些标签（去面试之前，临时看了看百度的信息，不要问我Google是什么，当时真只知道百度。）面试我的大哥姓周，现在我们还是很好的朋友（他在长沙结婚，生子，有了自己的事业和家庭，过的很幸福），就这样误打误撞的得到了一份工作（有人教，真的很爽），不过自己也够上进，知道该怎么去学习真的很重要。人生的第一站，都要经过很多挫折，痛苦，也可能是磨难才能有成长，成长虽然伴随着阵痛，这大概就是人生的无奈了吧。我很庆幸自己没有经过太多的挫折，一路走来在不同的阶段都有不同的人给予了帮助。在长沙的三个月里，我学习了很多东西（华声在线）。\n\n- div+css布局（position布局和float布局）\n- 了解到了基础的语义化（比如超链接的时候用a标签，标题用h系列标签，按钮用button，行内用span）\n- 学习了JavaScript基础（比如大量的使用函数，俗称面向过程编程，一个功能一个函数，大的功能用很多个小函数组合而成）\n- 接触了jQuery（会用DOM选择器，那个年代没有比jQuery更好的解决方案）\n- 了解到了IE6兼容性的问题（虽然，我现在都忘记的差不多了）\n\n阅读到的书有：\n\n[![](https://img3.doubanio.com/lpic/s4380650.jpg)](https://book.douban.com/subject/4861462/)\n\n[![](https://img3.doubanio.com/lpic/s3103215.jpg)](https://book.douban.com/subject/3082278/)\n\n[![](https://img3.doubanio.com/lpic/s24398905.jpg)](https://book.douban.com/subject/4111399/)\n\n[![](http://ec4.images-amazon.com/images/I/51hoD75E26L._SX397_BO1,204,203,200_.jpg)]()\n\nPS：这四本书有些年头了。\n\n真正开始有意识的对编程的认知还是要从珠海开始，那时候在自己的心里才建立起了体系。不得不说，从长沙到珠海的跨越对于自己的职业和专业有了非常大的促进作用。远光软件是一家企业管理和社会服务信息系统供应商，以国家电网，南方电网做为主要的服务客户（当然还有五大发电集团以及珠海市市政系统的研发）。到远光软件，做的第一个项目就是《费用报销系统》，这是一个典型的单页应用（SAP），在客户端层面进行了MVC分层，模块化，以及大量的操作表格（编辑费用报销流程）和Ajax的交互。在珠海认识了博士（我的导师，远光软件对于新入职的员工都会安排一个专职的导师来辅助新员工展开工作，博士后来自己去创业了，他一直想开一家属于自己的咖啡店，虽然经历了挫折，最后加入了魅族）。要说到如何加入远光软件，不得不说（平时的兴趣爱好说不定在某些时候真能有所帮助）。我们部门的总经理是一个很nice的茶友和网友（当时玩博客园），这样看来帮助还真是无声无息之间就发生了，我得到了一次机会，回过头来看，这真的是人生的转折。\n\n- 了解到了MVC，参与了公司内部MVC框架的开发（seeker.js）\n- 重新学习了JavaScript，对于这门语言有了更深刻的体会\n- 了解到了Ajax以及网络传输层的通信（HTTP）\n- 开始认识到构建一个大型项目，模块化的重要性\n- 开始了解到有Grunt这么一个构建工具\n- 学习了Node.js\n\n在珠海的日子里现在想起来自己的状态：就是一个只会学习的机器。那段时间，我对Objective-C产生了浓厚的兴趣，开始自己倒腾黑苹果，学习Objective-C，CocoaTouch框架，参与部门内部项目的开发（虽然半途夭折了），接触到了UNIX操作系统，这才发现自己一直使用的windows好low啊。那个时候的自己真让自己怀念，其实学习它真的是一种精神（不断的探索，不断的吸取），坚持下来之后，才能知道雨后会不会是彩虹。也是在这一段时间里，我加入了一个网友组织的前端分享网站（2012年）：[w3cplus](http://www.w3cplus.com/)，认识了大漠，为之，99，993，也有了一个不常用的ID《文人》，多数情况下，我一直用着自己的icepy（直到后来我才认识到ID混乱带来的麻烦，就索性一直用着icepy了。），只是现在和为之联系的比较少了，知道他去了腾讯。在生活里，人与人的相处分阶段，天下没有不散的宴席，这是真的。\n\n在珠海这一过就是两年，阅读的书籍非常多，多到自己都数不清楚了，大体上来说分为了两个部分，语言类的和编程思想类的，印象中大约还能记得的就只有这些了：\n\n*JavaScript*\n\n[![](https://img3.doubanio.com/lpic/s5860151.jpg)](https://book.douban.com/subject/2228378/)\n\n[![](https://img3.doubanio.com/lpic/s3651235.jpg)](https://book.douban.com/subject/3590768/)\n\n[![](https://img3.doubanio.com/lpic/s3398900.jpg)](https://book.douban.com/subject/3329540/)\n\n[![](https://img3.doubanio.com/lpic/s8958650.jpg)](https://book.douban.com/subject/10546125/)\n\n[![](https://img3.doubanio.com/lpic/s6245861.jpg)](https://book.douban.com/subject/5362856/)\n\n*iOS*\n\n[![](https://img3.doubanio.com/lpic/s3885296.jpg)](https://book.douban.com/subject/3864073/)\n\n[![](https://img3.doubanio.com/lpic/s28020216.jpg)](https://book.douban.com/subject/6920082/)\n\n[![](https://img3.doubanio.com/lpic/s3890550.jpg)](https://book.douban.com/subject/3870385/)\n\n*编程思想类*\n\n[![](http://ec4.images-amazon.com/images/I/51L3vC93PEL._SX383_BO1,204,203,200_.jpg)](https://book.douban.com/subject/10746113/)\n\n[![](http://ec4.images-amazon.com/images/I/51yWNzHYyUL._SX357_BO1,204,203,200_.jpg)](https://book.douban.com/subject/1152912/)\n\n[![](http://ec4.images-amazon.com/images/I/51yo0pczfbL._SX340_BO1,204,203,200_.jpg)](http://www.amazon.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E7%B2%BE%E9%AB%93%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86-%E6%96%AF%E6%89%98%E6%9E%97%E6%96%AF/dp/B0041859AI/ref=sr_1_2?ie=UTF8&qid=1459746651&sr=8-2&keywords=%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%B2%BE%E9%AB%93%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86)\n\n[![](http://ec4.images-amazon.com/images/I/51U7%2BI63eWL._SX354_BO1,204,203,200_.jpg)](https://book.douban.com/subject/1139426/)\n\n阅读完那三本书（iOS）之后其他时间学习iOS开发就靠官方文档以及Google了，其实中间很长一段时间内自己并不清楚自己到底喜欢哪一个，索性两个都比较深入的学习了，当时自己都不知道这个决定对于今后有多大的影响，后来我才发现我特别的适合做混合应用（Hybrid App）或者手机端的开发，因为我对Native（iOS端）的熟悉程度不亚于前端（HTML,CSS,JavaScript）。慢慢的对于应用我更关注代码的层次维护性与可读性，使用Instruments来分析优化iOS应用，抓包分析HTTP，在设计（软件设计模式）与编写之际找到一个平衡。真的还要感谢网易公司（黄易^_^）推出了《网易公开课》[http://open.163.com/](http://open.163.com/)补全了我大量计算机方面的基础知识。\n\n2013年底，我去了上海住在为之家中，有一段时间里都快不知道该去做些什么。后来经过大漠的推荐，我去了携程无线事业部面试，这是一个很棒的团队。有幸加入其中，真觉得自己的选择和方向是对的。虽然，我们最后解散分拆了（很可惜）。携程的App和手机网站全部使用Hybrid技术来构建，一套代码运行在三端（iOS，Android，Mobile）。在无线事业部感觉每一天都过的很新鲜，因为我能做很多事情，一是验证自己的想法，二是积累了大量的实践经验，三是我可以做更多混合编程的东西。我的leader有泉帮助我很快的适应了携程的技术栈（当时使用的是requirejs，zepto，backbone，underscore搭建起来的技术栈），至今我都还能想起来在携程认识的那些人，跟着张老虎跑门票的业务（还有汗巾一起），听刘大师吹牛皮，张爸爸讲UI组件，帮助淳敏用python写了一个打包工具，看磊BB（叶小钗）指点江山，意气风发。大格子汉卿聊上海话，左盟主策笑傲江湖，明星弄《酒店》。是的，就是这样的一个团队，虽然每天都很“苦逼”（几乎每天都很正能量的忙到十点，十一点），却也收获了更多。\n\n- 通过bridge（自定义协议）与Native进行交互\n- 研究了phoneGap的技术，比如在“后台”相对于前端Native就是后台，进行网络，线程的优化\n- 研究了辅助前端调试的工具，比如远程代理，客户端App代理\n- 对JavaScript语言有了更深刻的理解\n- 使用Node.js跑SEO页面，对Node.js掌握的比较全面了，采用新的技术解决回调过深的问题\n\n在携程一直到无线事业部解散，分拆陆陆续续待了十个月，虽然很短暂，但是却印证了自己所想，在心底一直坚持的信念，有了一次很充分的肯定：使用前端技术开发手机App。\n\n[![](https://img3.doubanio.com/lpic/s25933771.jpg)](https://book.douban.com/subject/22190840/)\n\n[![](https://img3.doubanio.com/lpic/s9066310.jpg)](https://book.douban.com/subject/10608238/)\n\n[![](https://img3.doubanio.com/lpic/s27269296.jpg)](https://book.douban.com/subject/25768396/)\n\n这一年里一共买了三本书，不知道为什么后面这些年买书买的比较少了，更多的是通过开源社区来获取资料，学习。虽然我在珠海的时候就注册了[Github icepy](https://github.com/icepy)，但是开始玩起来还是去了携程之后。\n\n三月份（2015年）我去了每日优鲜，当时我们七个人（两个纯前端，我和小袁，现在和我一起在《音悦台》，凤鸣偶尔会帮助我们，四个python服务端，一个切图的女同学）在望京对面的麒麟社（看起来很像家居楼，比较破），用[ionic](http://ionicframework.com/)快速搭建了跑在三端（iOS，Android，微信端）的每日优鲜App。中间经历了很多很痛苦的试验阶段，包括有兼容微信（JS SDK），ionic是一套基于AngularJS的混合应用开发框架，在每日优鲜即将搬入望京SOHO的前三天，我离开了。其实，当时我并不知道自己想要去做些什么，但是又不得不去做些什么。（现在的每日优鲜App早已经用原生语言重写了一套，部分混合了一些前端页面，他们发展的很不错。）\n\n在外面的世界混了一圈，心里有了些疲惫，特别是听到了《去大理》，《一人一花》，想起了雪峰山的家乡，于是就回去了。本来应该很满意的过着自己的隐居生活，和同学开始筹备了一个养殖场和果园，也写好了相应的微信网站和运营计划，我想我们原生态的农业产品，在长沙，怀化等城市中应该会有很大的需求，因为人们对于食品安全的关注度比以往都高了很多很多。很不幸，因为合伙人理念的冲突，我又失败了。\n\n九月份（2015年），我又去北京找了一个工作，负责乐家园社区O2O项目的前端设计，两个人搭起来了一个社区App，我们采用backbone很快堆出了原形，看起来发展势头很良好，可是这一年资本寒冬来了，12月份老板调整了方向，开始做物业管理系统基本放弃了to C的产品，物业管理系统使用了react，es2015，webpack来搭建，可是我依然选择了离开。\n\n从携程离职之后的2015年并不是很顺利，起伏经历了很多，但是这一年里却是买书读书读的非常多的一年（[2015年我阅读的书籍](https://github.com/icepy/_posts/issues/20)），这是一个很有趣的现象，当然我闲下来的时候（我并不知道该去做些什么，只剩读书了。），读书成了我唯一的爱好。\n\n- 学习了react，es2015，webpack\n- 开始去了解和掌握react native的知识\n- 更深入的学习了iOS，包括有新推出的Swift语言\n- 关注的点更多的是在于编程思想方面，比如最佳的实践，如何采用合适的技术栈搭建产品，编程的规范，自动化CI方面等基础设施的研究\n- 对于开源社区的依赖程度更高了，比如现今成了Github的重度用户\n\n[![](https://img3.doubanio.com/lpic/s6164140.jpg)](https://book.douban.com/subject/4826290/)\n\n## 2016年（如今）\n\n总的来说我依然很看好JavaScript的应用范围，也打算继续耕耘在这个领域中，努力使自己的知识结构体系可以保持与世界趋势的同步。\n\n现在我是音悦台的一名软件开发工程师（2016年2月），主要的工作就是Web开发，虽然我做了很多基础决策方面的事情以及帮助团队成长（三个臭皮匠顶一个诸葛亮）。今后的很长的时间里，我依然会保持对技术的敏感与同步，其实写到最后，千言万语貌似还有很多话未说完。我很不希望，像很多前辈说的那样，编程是一个青春饭，人到了一定的年龄（你在知乎上搜索，很多都是30岁之后该如何转型的帖子），这是国情吗？于是，我拒绝了管理岗位，我更希望自己可以做一个纯粹热爱技术的人。\n\n下一个阶段（主要给刚入行的同学看）：\n\n**保持对新技术的敏感**\n\n对技术的热爱是你保持对新技术的敏感正确姿势。\n\n**遇到问题该怎么办**\n\n其实大部分的问题真的都是小问题，首先自己不能害怕问题，先在Google中搜索一下可以解决掉80%以上的问题，其次对于复杂的问题可能需要分解一下源代码，从其逻辑中查找问题，最后自己实在不爽（造个轮子）。\n\n**组织自己的开发环境**\n\n建议大家熟练的使用一套自己的开发环境，比如快捷键，oh-my-zsh，IDE。前端首推的IDE是Webstorm，然后是Atom，最后是Sublime Text 3。\n\n不要问我为什么没有Vim，因为大家可以使用这些编辑器或者IDE的vim插件，比如我就使用Atom的vim-mode。\n\n**老生常谈的如何学习**\n\n保持对技术的热爱，你有兴趣才可能去学习，勉强（强扭的瓜不甜）是会很痛苦的，如果你有兴趣，Github上大量的资源会让你根本学不完。\n\n**弄个云服务器**\n\n如果有兴趣和有时间弄一个阿里云或者其他任何云服务器，自己去捣腾一下，能更清楚认识Web开发。\n\n----\n\n写在最后：\n\n如果你对《音悦台》有兴趣，可以先读[《浅谈音悦台PC端（前端开发）的改造，告别刀耕火种 》](https://github.com/icepy/_posts/issues/29)对我们即将做的事情有一些了解，我们需要优秀的开发者加入，一起来完善这些，有兴趣的朋友，可以将简历发送到[xiangwenwe@foxmail.com]()，期待～。\n","source":"_posts/issues-6.md","raw":"title: 我的编程之路\ndate: 2016-04-4 18:50:37\ntags: 前端漫谈\nbanner: http://o80ub63i5.bkt.clouddn.com/image/issues-6.jpg\n---\n\n> 光阴荏苒，岁月蹉跎；\n\n前些日子看电视剧翻到了刘烨的《血色浪漫》，其实我是一个很感性的人，电视剧中的人物：钟跃民，张海洋，周晓白，一幕一幕的从脑中闪过，很钦佩钟跃民对于人生的感悟，他有着无拘无束，散漫自由的天性。同时又善于在逆境中寻找乐趣（在陕北插队时），他很坚强，也很勇猛，可以用不文明对待不文明的方式来解决很多问题。他也很讲义气，可以在患难中把一张烧饼分给朋友吃的那种人。或多，或少，我和钟跃民的性格有大部分的相像，怀旧，又对于“新生活“而憧憬。\n\n说到编程其实我是半路出身的人，在很多年之前编程对于我形同“在塔克拉玛干中找绿洲一般”，撞上完全看概率。在很小的时候家里没有电脑，但是却有小霸王，（还是父亲从广州托人邮寄回来的）虽然父亲希望我能用它学习打字，不过多数情况下，我都用它在玩《魂斗罗》了。最开始接触编程（有意识的）还是在读高中的时候，学校对于市里的《电脑比赛》很重视，虽然是打字，以及基础的C语言（题目我还记得很清楚，输出一个乘法表）。但是我没有继续学习，比赛完之后就抛之脑后了。不过可喜的是，我竟然发现自己很喜欢电脑课老师推荐学习的python，坚持阅读完了一本书：\n\n[![](https://img3.doubanio.com/lpic/s2604186.jpg)](https://book.douban.com/subject/2137490/)\n\n高中读完（没有去念大学），一直在雪峰山里的老家，过着自己的隐居生活，一过既是三年。\n\n<!--more-->\n\n至今我都还能想到那一年刚到长沙（2011年）的夏天，穿着短袖站在长沙火车站，脸油油的一夜未睡，从怀化到长沙的绿皮火车需要开一个通宵才能到长沙。（去找第一份工作，当时还叫网页制作），那时候的我如同一个小白，大约知道一些标签（去面试之前，临时看了看百度的信息，不要问我Google是什么，当时真只知道百度。）面试我的大哥姓周，现在我们还是很好的朋友（他在长沙结婚，生子，有了自己的事业和家庭，过的很幸福），就这样误打误撞的得到了一份工作（有人教，真的很爽），不过自己也够上进，知道该怎么去学习真的很重要。人生的第一站，都要经过很多挫折，痛苦，也可能是磨难才能有成长，成长虽然伴随着阵痛，这大概就是人生的无奈了吧。我很庆幸自己没有经过太多的挫折，一路走来在不同的阶段都有不同的人给予了帮助。在长沙的三个月里，我学习了很多东西（华声在线）。\n\n- div+css布局（position布局和float布局）\n- 了解到了基础的语义化（比如超链接的时候用a标签，标题用h系列标签，按钮用button，行内用span）\n- 学习了JavaScript基础（比如大量的使用函数，俗称面向过程编程，一个功能一个函数，大的功能用很多个小函数组合而成）\n- 接触了jQuery（会用DOM选择器，那个年代没有比jQuery更好的解决方案）\n- 了解到了IE6兼容性的问题（虽然，我现在都忘记的差不多了）\n\n阅读到的书有：\n\n[![](https://img3.doubanio.com/lpic/s4380650.jpg)](https://book.douban.com/subject/4861462/)\n\n[![](https://img3.doubanio.com/lpic/s3103215.jpg)](https://book.douban.com/subject/3082278/)\n\n[![](https://img3.doubanio.com/lpic/s24398905.jpg)](https://book.douban.com/subject/4111399/)\n\n[![](http://ec4.images-amazon.com/images/I/51hoD75E26L._SX397_BO1,204,203,200_.jpg)]()\n\nPS：这四本书有些年头了。\n\n真正开始有意识的对编程的认知还是要从珠海开始，那时候在自己的心里才建立起了体系。不得不说，从长沙到珠海的跨越对于自己的职业和专业有了非常大的促进作用。远光软件是一家企业管理和社会服务信息系统供应商，以国家电网，南方电网做为主要的服务客户（当然还有五大发电集团以及珠海市市政系统的研发）。到远光软件，做的第一个项目就是《费用报销系统》，这是一个典型的单页应用（SAP），在客户端层面进行了MVC分层，模块化，以及大量的操作表格（编辑费用报销流程）和Ajax的交互。在珠海认识了博士（我的导师，远光软件对于新入职的员工都会安排一个专职的导师来辅助新员工展开工作，博士后来自己去创业了，他一直想开一家属于自己的咖啡店，虽然经历了挫折，最后加入了魅族）。要说到如何加入远光软件，不得不说（平时的兴趣爱好说不定在某些时候真能有所帮助）。我们部门的总经理是一个很nice的茶友和网友（当时玩博客园），这样看来帮助还真是无声无息之间就发生了，我得到了一次机会，回过头来看，这真的是人生的转折。\n\n- 了解到了MVC，参与了公司内部MVC框架的开发（seeker.js）\n- 重新学习了JavaScript，对于这门语言有了更深刻的体会\n- 了解到了Ajax以及网络传输层的通信（HTTP）\n- 开始认识到构建一个大型项目，模块化的重要性\n- 开始了解到有Grunt这么一个构建工具\n- 学习了Node.js\n\n在珠海的日子里现在想起来自己的状态：就是一个只会学习的机器。那段时间，我对Objective-C产生了浓厚的兴趣，开始自己倒腾黑苹果，学习Objective-C，CocoaTouch框架，参与部门内部项目的开发（虽然半途夭折了），接触到了UNIX操作系统，这才发现自己一直使用的windows好low啊。那个时候的自己真让自己怀念，其实学习它真的是一种精神（不断的探索，不断的吸取），坚持下来之后，才能知道雨后会不会是彩虹。也是在这一段时间里，我加入了一个网友组织的前端分享网站（2012年）：[w3cplus](http://www.w3cplus.com/)，认识了大漠，为之，99，993，也有了一个不常用的ID《文人》，多数情况下，我一直用着自己的icepy（直到后来我才认识到ID混乱带来的麻烦，就索性一直用着icepy了。），只是现在和为之联系的比较少了，知道他去了腾讯。在生活里，人与人的相处分阶段，天下没有不散的宴席，这是真的。\n\n在珠海这一过就是两年，阅读的书籍非常多，多到自己都数不清楚了，大体上来说分为了两个部分，语言类的和编程思想类的，印象中大约还能记得的就只有这些了：\n\n*JavaScript*\n\n[![](https://img3.doubanio.com/lpic/s5860151.jpg)](https://book.douban.com/subject/2228378/)\n\n[![](https://img3.doubanio.com/lpic/s3651235.jpg)](https://book.douban.com/subject/3590768/)\n\n[![](https://img3.doubanio.com/lpic/s3398900.jpg)](https://book.douban.com/subject/3329540/)\n\n[![](https://img3.doubanio.com/lpic/s8958650.jpg)](https://book.douban.com/subject/10546125/)\n\n[![](https://img3.doubanio.com/lpic/s6245861.jpg)](https://book.douban.com/subject/5362856/)\n\n*iOS*\n\n[![](https://img3.doubanio.com/lpic/s3885296.jpg)](https://book.douban.com/subject/3864073/)\n\n[![](https://img3.doubanio.com/lpic/s28020216.jpg)](https://book.douban.com/subject/6920082/)\n\n[![](https://img3.doubanio.com/lpic/s3890550.jpg)](https://book.douban.com/subject/3870385/)\n\n*编程思想类*\n\n[![](http://ec4.images-amazon.com/images/I/51L3vC93PEL._SX383_BO1,204,203,200_.jpg)](https://book.douban.com/subject/10746113/)\n\n[![](http://ec4.images-amazon.com/images/I/51yWNzHYyUL._SX357_BO1,204,203,200_.jpg)](https://book.douban.com/subject/1152912/)\n\n[![](http://ec4.images-amazon.com/images/I/51yo0pczfbL._SX340_BO1,204,203,200_.jpg)](http://www.amazon.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E7%B2%BE%E9%AB%93%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86-%E6%96%AF%E6%89%98%E6%9E%97%E6%96%AF/dp/B0041859AI/ref=sr_1_2?ie=UTF8&qid=1459746651&sr=8-2&keywords=%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%B2%BE%E9%AB%93%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86)\n\n[![](http://ec4.images-amazon.com/images/I/51U7%2BI63eWL._SX354_BO1,204,203,200_.jpg)](https://book.douban.com/subject/1139426/)\n\n阅读完那三本书（iOS）之后其他时间学习iOS开发就靠官方文档以及Google了，其实中间很长一段时间内自己并不清楚自己到底喜欢哪一个，索性两个都比较深入的学习了，当时自己都不知道这个决定对于今后有多大的影响，后来我才发现我特别的适合做混合应用（Hybrid App）或者手机端的开发，因为我对Native（iOS端）的熟悉程度不亚于前端（HTML,CSS,JavaScript）。慢慢的对于应用我更关注代码的层次维护性与可读性，使用Instruments来分析优化iOS应用，抓包分析HTTP，在设计（软件设计模式）与编写之际找到一个平衡。真的还要感谢网易公司（黄易^_^）推出了《网易公开课》[http://open.163.com/](http://open.163.com/)补全了我大量计算机方面的基础知识。\n\n2013年底，我去了上海住在为之家中，有一段时间里都快不知道该去做些什么。后来经过大漠的推荐，我去了携程无线事业部面试，这是一个很棒的团队。有幸加入其中，真觉得自己的选择和方向是对的。虽然，我们最后解散分拆了（很可惜）。携程的App和手机网站全部使用Hybrid技术来构建，一套代码运行在三端（iOS，Android，Mobile）。在无线事业部感觉每一天都过的很新鲜，因为我能做很多事情，一是验证自己的想法，二是积累了大量的实践经验，三是我可以做更多混合编程的东西。我的leader有泉帮助我很快的适应了携程的技术栈（当时使用的是requirejs，zepto，backbone，underscore搭建起来的技术栈），至今我都还能想起来在携程认识的那些人，跟着张老虎跑门票的业务（还有汗巾一起），听刘大师吹牛皮，张爸爸讲UI组件，帮助淳敏用python写了一个打包工具，看磊BB（叶小钗）指点江山，意气风发。大格子汉卿聊上海话，左盟主策笑傲江湖，明星弄《酒店》。是的，就是这样的一个团队，虽然每天都很“苦逼”（几乎每天都很正能量的忙到十点，十一点），却也收获了更多。\n\n- 通过bridge（自定义协议）与Native进行交互\n- 研究了phoneGap的技术，比如在“后台”相对于前端Native就是后台，进行网络，线程的优化\n- 研究了辅助前端调试的工具，比如远程代理，客户端App代理\n- 对JavaScript语言有了更深刻的理解\n- 使用Node.js跑SEO页面，对Node.js掌握的比较全面了，采用新的技术解决回调过深的问题\n\n在携程一直到无线事业部解散，分拆陆陆续续待了十个月，虽然很短暂，但是却印证了自己所想，在心底一直坚持的信念，有了一次很充分的肯定：使用前端技术开发手机App。\n\n[![](https://img3.doubanio.com/lpic/s25933771.jpg)](https://book.douban.com/subject/22190840/)\n\n[![](https://img3.doubanio.com/lpic/s9066310.jpg)](https://book.douban.com/subject/10608238/)\n\n[![](https://img3.doubanio.com/lpic/s27269296.jpg)](https://book.douban.com/subject/25768396/)\n\n这一年里一共买了三本书，不知道为什么后面这些年买书买的比较少了，更多的是通过开源社区来获取资料，学习。虽然我在珠海的时候就注册了[Github icepy](https://github.com/icepy)，但是开始玩起来还是去了携程之后。\n\n三月份（2015年）我去了每日优鲜，当时我们七个人（两个纯前端，我和小袁，现在和我一起在《音悦台》，凤鸣偶尔会帮助我们，四个python服务端，一个切图的女同学）在望京对面的麒麟社（看起来很像家居楼，比较破），用[ionic](http://ionicframework.com/)快速搭建了跑在三端（iOS，Android，微信端）的每日优鲜App。中间经历了很多很痛苦的试验阶段，包括有兼容微信（JS SDK），ionic是一套基于AngularJS的混合应用开发框架，在每日优鲜即将搬入望京SOHO的前三天，我离开了。其实，当时我并不知道自己想要去做些什么，但是又不得不去做些什么。（现在的每日优鲜App早已经用原生语言重写了一套，部分混合了一些前端页面，他们发展的很不错。）\n\n在外面的世界混了一圈，心里有了些疲惫，特别是听到了《去大理》，《一人一花》，想起了雪峰山的家乡，于是就回去了。本来应该很满意的过着自己的隐居生活，和同学开始筹备了一个养殖场和果园，也写好了相应的微信网站和运营计划，我想我们原生态的农业产品，在长沙，怀化等城市中应该会有很大的需求，因为人们对于食品安全的关注度比以往都高了很多很多。很不幸，因为合伙人理念的冲突，我又失败了。\n\n九月份（2015年），我又去北京找了一个工作，负责乐家园社区O2O项目的前端设计，两个人搭起来了一个社区App，我们采用backbone很快堆出了原形，看起来发展势头很良好，可是这一年资本寒冬来了，12月份老板调整了方向，开始做物业管理系统基本放弃了to C的产品，物业管理系统使用了react，es2015，webpack来搭建，可是我依然选择了离开。\n\n从携程离职之后的2015年并不是很顺利，起伏经历了很多，但是这一年里却是买书读书读的非常多的一年（[2015年我阅读的书籍](https://github.com/icepy/_posts/issues/20)），这是一个很有趣的现象，当然我闲下来的时候（我并不知道该去做些什么，只剩读书了。），读书成了我唯一的爱好。\n\n- 学习了react，es2015，webpack\n- 开始去了解和掌握react native的知识\n- 更深入的学习了iOS，包括有新推出的Swift语言\n- 关注的点更多的是在于编程思想方面，比如最佳的实践，如何采用合适的技术栈搭建产品，编程的规范，自动化CI方面等基础设施的研究\n- 对于开源社区的依赖程度更高了，比如现今成了Github的重度用户\n\n[![](https://img3.doubanio.com/lpic/s6164140.jpg)](https://book.douban.com/subject/4826290/)\n\n## 2016年（如今）\n\n总的来说我依然很看好JavaScript的应用范围，也打算继续耕耘在这个领域中，努力使自己的知识结构体系可以保持与世界趋势的同步。\n\n现在我是音悦台的一名软件开发工程师（2016年2月），主要的工作就是Web开发，虽然我做了很多基础决策方面的事情以及帮助团队成长（三个臭皮匠顶一个诸葛亮）。今后的很长的时间里，我依然会保持对技术的敏感与同步，其实写到最后，千言万语貌似还有很多话未说完。我很不希望，像很多前辈说的那样，编程是一个青春饭，人到了一定的年龄（你在知乎上搜索，很多都是30岁之后该如何转型的帖子），这是国情吗？于是，我拒绝了管理岗位，我更希望自己可以做一个纯粹热爱技术的人。\n\n下一个阶段（主要给刚入行的同学看）：\n\n**保持对新技术的敏感**\n\n对技术的热爱是你保持对新技术的敏感正确姿势。\n\n**遇到问题该怎么办**\n\n其实大部分的问题真的都是小问题，首先自己不能害怕问题，先在Google中搜索一下可以解决掉80%以上的问题，其次对于复杂的问题可能需要分解一下源代码，从其逻辑中查找问题，最后自己实在不爽（造个轮子）。\n\n**组织自己的开发环境**\n\n建议大家熟练的使用一套自己的开发环境，比如快捷键，oh-my-zsh，IDE。前端首推的IDE是Webstorm，然后是Atom，最后是Sublime Text 3。\n\n不要问我为什么没有Vim，因为大家可以使用这些编辑器或者IDE的vim插件，比如我就使用Atom的vim-mode。\n\n**老生常谈的如何学习**\n\n保持对技术的热爱，你有兴趣才可能去学习，勉强（强扭的瓜不甜）是会很痛苦的，如果你有兴趣，Github上大量的资源会让你根本学不完。\n\n**弄个云服务器**\n\n如果有兴趣和有时间弄一个阿里云或者其他任何云服务器，自己去捣腾一下，能更清楚认识Web开发。\n\n----\n\n写在最后：\n\n如果你对《音悦台》有兴趣，可以先读[《浅谈音悦台PC端（前端开发）的改造，告别刀耕火种 》](https://github.com/icepy/_posts/issues/29)对我们即将做的事情有一些了解，我们需要优秀的开发者加入，一起来完善这些，有兴趣的朋友，可以将简历发送到[xiangwenwe@foxmail.com]()，期待～。\n","slug":"issues-6","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk0l000luejrghenktex","content":"<blockquote>\n<p>光阴荏苒，岁月蹉跎；</p>\n</blockquote>\n<p>前些日子看电视剧翻到了刘烨的《血色浪漫》，其实我是一个很感性的人，电视剧中的人物：钟跃民，张海洋，周晓白，一幕一幕的从脑中闪过，很钦佩钟跃民对于人生的感悟，他有着无拘无束，散漫自由的天性。同时又善于在逆境中寻找乐趣（在陕北插队时），他很坚强，也很勇猛，可以用不文明对待不文明的方式来解决很多问题。他也很讲义气，可以在患难中把一张烧饼分给朋友吃的那种人。或多，或少，我和钟跃民的性格有大部分的相像，怀旧，又对于“新生活“而憧憬。</p>\n<p>说到编程其实我是半路出身的人，在很多年之前编程对于我形同“在塔克拉玛干中找绿洲一般”，撞上完全看概率。在很小的时候家里没有电脑，但是却有小霸王，（还是父亲从广州托人邮寄回来的）虽然父亲希望我能用它学习打字，不过多数情况下，我都用它在玩《魂斗罗》了。最开始接触编程（有意识的）还是在读高中的时候，学校对于市里的《电脑比赛》很重视，虽然是打字，以及基础的C语言（题目我还记得很清楚，输出一个乘法表）。但是我没有继续学习，比赛完之后就抛之脑后了。不过可喜的是，我竟然发现自己很喜欢电脑课老师推荐学习的python，坚持阅读完了一本书：</p>\n<p><a href=\"https://book.douban.com/subject/2137490/\" target=\"_blank\" rel=\"external\"><img src=\"https://img3.doubanio.com/lpic/s2604186.jpg\" alt=\"\"></a></p>\n<p>高中读完（没有去念大学），一直在雪峰山里的老家，过着自己的隐居生活，一过既是三年。</p>\n<a id=\"more\"></a>\n<p>至今我都还能想到那一年刚到长沙（2011年）的夏天，穿着短袖站在长沙火车站，脸油油的一夜未睡，从怀化到长沙的绿皮火车需要开一个通宵才能到长沙。（去找第一份工作，当时还叫网页制作），那时候的我如同一个小白，大约知道一些标签（去面试之前，临时看了看百度的信息，不要问我Google是什么，当时真只知道百度。）面试我的大哥姓周，现在我们还是很好的朋友（他在长沙结婚，生子，有了自己的事业和家庭，过的很幸福），就这样误打误撞的得到了一份工作（有人教，真的很爽），不过自己也够上进，知道该怎么去学习真的很重要。人生的第一站，都要经过很多挫折，痛苦，也可能是磨难才能有成长，成长虽然伴随着阵痛，这大概就是人生的无奈了吧。我很庆幸自己没有经过太多的挫折，一路走来在不同的阶段都有不同的人给予了帮助。在长沙的三个月里，我学习了很多东西（华声在线）。</p>\n<ul>\n<li>div+css布局（position布局和float布局）</li>\n<li>了解到了基础的语义化（比如超链接的时候用a标签，标题用h系列标签，按钮用button，行内用span）</li>\n<li>学习了JavaScript基础（比如大量的使用函数，俗称面向过程编程，一个功能一个函数，大的功能用很多个小函数组合而成）</li>\n<li>接触了jQuery（会用DOM选择器，那个年代没有比jQuery更好的解决方案）</li>\n<li>了解到了IE6兼容性的问题（虽然，我现在都忘记的差不多了）</li>\n</ul>\n<p>阅读到的书有：</p>\n<p><a href=\"https://book.douban.com/subject/4861462/\" target=\"_blank\" rel=\"external\"><img src=\"https://img3.doubanio.com/lpic/s4380650.jpg\" alt=\"\"></a></p>\n<p><a href=\"https://book.douban.com/subject/3082278/\" target=\"_blank\" rel=\"external\"><img src=\"https://img3.doubanio.com/lpic/s3103215.jpg\" alt=\"\"></a></p>\n<p><a href=\"https://book.douban.com/subject/4111399/\" target=\"_blank\" rel=\"external\"><img src=\"https://img3.doubanio.com/lpic/s24398905.jpg\" alt=\"\"></a></p>\n<p><a href=\"\"><img src=\"http://ec4.images-amazon.com/images/I/51hoD75E26L._SX397_BO1,204,203,200_.jpg\" alt=\"\"></a></p>\n<p>PS：这四本书有些年头了。</p>\n<p>真正开始有意识的对编程的认知还是要从珠海开始，那时候在自己的心里才建立起了体系。不得不说，从长沙到珠海的跨越对于自己的职业和专业有了非常大的促进作用。远光软件是一家企业管理和社会服务信息系统供应商，以国家电网，南方电网做为主要的服务客户（当然还有五大发电集团以及珠海市市政系统的研发）。到远光软件，做的第一个项目就是《费用报销系统》，这是一个典型的单页应用（SAP），在客户端层面进行了MVC分层，模块化，以及大量的操作表格（编辑费用报销流程）和Ajax的交互。在珠海认识了博士（我的导师，远光软件对于新入职的员工都会安排一个专职的导师来辅助新员工展开工作，博士后来自己去创业了，他一直想开一家属于自己的咖啡店，虽然经历了挫折，最后加入了魅族）。要说到如何加入远光软件，不得不说（平时的兴趣爱好说不定在某些时候真能有所帮助）。我们部门的总经理是一个很nice的茶友和网友（当时玩博客园），这样看来帮助还真是无声无息之间就发生了，我得到了一次机会，回过头来看，这真的是人生的转折。</p>\n<ul>\n<li>了解到了MVC，参与了公司内部MVC框架的开发（seeker.js）</li>\n<li>重新学习了JavaScript，对于这门语言有了更深刻的体会</li>\n<li>了解到了Ajax以及网络传输层的通信（HTTP）</li>\n<li>开始认识到构建一个大型项目，模块化的重要性</li>\n<li>开始了解到有Grunt这么一个构建工具</li>\n<li>学习了Node.js</li>\n</ul>\n<p>在珠海的日子里现在想起来自己的状态：就是一个只会学习的机器。那段时间，我对Objective-C产生了浓厚的兴趣，开始自己倒腾黑苹果，学习Objective-C，CocoaTouch框架，参与部门内部项目的开发（虽然半途夭折了），接触到了UNIX操作系统，这才发现自己一直使用的windows好low啊。那个时候的自己真让自己怀念，其实学习它真的是一种精神（不断的探索，不断的吸取），坚持下来之后，才能知道雨后会不会是彩虹。也是在这一段时间里，我加入了一个网友组织的前端分享网站（2012年）：<a href=\"http://www.w3cplus.com/\" target=\"_blank\" rel=\"external\">w3cplus</a>，认识了大漠，为之，99，993，也有了一个不常用的ID《文人》，多数情况下，我一直用着自己的icepy（直到后来我才认识到ID混乱带来的麻烦，就索性一直用着icepy了。），只是现在和为之联系的比较少了，知道他去了腾讯。在生活里，人与人的相处分阶段，天下没有不散的宴席，这是真的。</p>\n<p>在珠海这一过就是两年，阅读的书籍非常多，多到自己都数不清楚了，大体上来说分为了两个部分，语言类的和编程思想类的，印象中大约还能记得的就只有这些了：</p>\n<p><em>JavaScript</em></p>\n<p><a href=\"https://book.douban.com/subject/2228378/\" target=\"_blank\" rel=\"external\"><img src=\"https://img3.doubanio.com/lpic/s5860151.jpg\" alt=\"\"></a></p>\n<p><a href=\"https://book.douban.com/subject/3590768/\" target=\"_blank\" rel=\"external\"><img src=\"https://img3.doubanio.com/lpic/s3651235.jpg\" alt=\"\"></a></p>\n<p><a href=\"https://book.douban.com/subject/3329540/\" target=\"_blank\" rel=\"external\"><img src=\"https://img3.doubanio.com/lpic/s3398900.jpg\" alt=\"\"></a></p>\n<p><a href=\"https://book.douban.com/subject/10546125/\" target=\"_blank\" rel=\"external\"><img src=\"https://img3.doubanio.com/lpic/s8958650.jpg\" alt=\"\"></a></p>\n<p><a href=\"https://book.douban.com/subject/5362856/\" target=\"_blank\" rel=\"external\"><img src=\"https://img3.doubanio.com/lpic/s6245861.jpg\" alt=\"\"></a></p>\n<p><em>iOS</em></p>\n<p><a href=\"https://book.douban.com/subject/3864073/\" target=\"_blank\" rel=\"external\"><img src=\"https://img3.doubanio.com/lpic/s3885296.jpg\" alt=\"\"></a></p>\n<p><a href=\"https://book.douban.com/subject/6920082/\" target=\"_blank\" rel=\"external\"><img src=\"https://img3.doubanio.com/lpic/s28020216.jpg\" alt=\"\"></a></p>\n<p><a href=\"https://book.douban.com/subject/3870385/\" target=\"_blank\" rel=\"external\"><img src=\"https://img3.doubanio.com/lpic/s3890550.jpg\" alt=\"\"></a></p>\n<p><em>编程思想类</em></p>\n<p><a href=\"https://book.douban.com/subject/10746113/\" target=\"_blank\" rel=\"external\"><img src=\"http://ec4.images-amazon.com/images/I/51L3vC93PEL._SX383_BO1,204,203,200_.jpg\" alt=\"\"></a></p>\n<p><a href=\"https://book.douban.com/subject/1152912/\" target=\"_blank\" rel=\"external\"><img src=\"http://ec4.images-amazon.com/images/I/51yWNzHYyUL._SX357_BO1,204,203,200_.jpg\" alt=\"\"></a></p>\n<p><a href=\"http://www.amazon.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E7%B2%BE%E9%AB%93%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86-%E6%96%AF%E6%89%98%E6%9E%97%E6%96%AF/dp/B0041859AI/ref=sr_1_2?ie=UTF8&amp;qid=1459746651&amp;sr=8-2&amp;keywords=%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%B2%BE%E9%AB%93%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86\" target=\"_blank\" rel=\"external\"><img src=\"http://ec4.images-amazon.com/images/I/51yo0pczfbL._SX340_BO1,204,203,200_.jpg\" alt=\"\"></a></p>\n<p><a href=\"https://book.douban.com/subject/1139426/\" target=\"_blank\" rel=\"external\"><img src=\"http://ec4.images-amazon.com/images/I/51U7%2BI63eWL._SX354_BO1,204,203,200_.jpg\" alt=\"\"></a></p>\n<p>阅读完那三本书（iOS）之后其他时间学习iOS开发就靠官方文档以及Google了，其实中间很长一段时间内自己并不清楚自己到底喜欢哪一个，索性两个都比较深入的学习了，当时自己都不知道这个决定对于今后有多大的影响，后来我才发现我特别的适合做混合应用（Hybrid App）或者手机端的开发，因为我对Native（iOS端）的熟悉程度不亚于前端（HTML,CSS,JavaScript）。慢慢的对于应用我更关注代码的层次维护性与可读性，使用Instruments来分析优化iOS应用，抓包分析HTTP，在设计（软件设计模式）与编写之际找到一个平衡。真的还要感谢网易公司（黄易^_^）推出了《网易公开课》<a href=\"http://open.163.com/\" target=\"_blank\" rel=\"external\">http://open.163.com/</a>补全了我大量计算机方面的基础知识。</p>\n<p>2013年底，我去了上海住在为之家中，有一段时间里都快不知道该去做些什么。后来经过大漠的推荐，我去了携程无线事业部面试，这是一个很棒的团队。有幸加入其中，真觉得自己的选择和方向是对的。虽然，我们最后解散分拆了（很可惜）。携程的App和手机网站全部使用Hybrid技术来构建，一套代码运行在三端（iOS，Android，Mobile）。在无线事业部感觉每一天都过的很新鲜，因为我能做很多事情，一是验证自己的想法，二是积累了大量的实践经验，三是我可以做更多混合编程的东西。我的leader有泉帮助我很快的适应了携程的技术栈（当时使用的是requirejs，zepto，backbone，underscore搭建起来的技术栈），至今我都还能想起来在携程认识的那些人，跟着张老虎跑门票的业务（还有汗巾一起），听刘大师吹牛皮，张爸爸讲UI组件，帮助淳敏用python写了一个打包工具，看磊BB（叶小钗）指点江山，意气风发。大格子汉卿聊上海话，左盟主策笑傲江湖，明星弄《酒店》。是的，就是这样的一个团队，虽然每天都很“苦逼”（几乎每天都很正能量的忙到十点，十一点），却也收获了更多。</p>\n<ul>\n<li>通过bridge（自定义协议）与Native进行交互</li>\n<li>研究了phoneGap的技术，比如在“后台”相对于前端Native就是后台，进行网络，线程的优化</li>\n<li>研究了辅助前端调试的工具，比如远程代理，客户端App代理</li>\n<li>对JavaScript语言有了更深刻的理解</li>\n<li>使用Node.js跑SEO页面，对Node.js掌握的比较全面了，采用新的技术解决回调过深的问题</li>\n</ul>\n<p>在携程一直到无线事业部解散，分拆陆陆续续待了十个月，虽然很短暂，但是却印证了自己所想，在心底一直坚持的信念，有了一次很充分的肯定：使用前端技术开发手机App。</p>\n<p><a href=\"https://book.douban.com/subject/22190840/\" target=\"_blank\" rel=\"external\"><img src=\"https://img3.doubanio.com/lpic/s25933771.jpg\" alt=\"\"></a></p>\n<p><a href=\"https://book.douban.com/subject/10608238/\" target=\"_blank\" rel=\"external\"><img src=\"https://img3.doubanio.com/lpic/s9066310.jpg\" alt=\"\"></a></p>\n<p><a href=\"https://book.douban.com/subject/25768396/\" target=\"_blank\" rel=\"external\"><img src=\"https://img3.doubanio.com/lpic/s27269296.jpg\" alt=\"\"></a></p>\n<p>这一年里一共买了三本书，不知道为什么后面这些年买书买的比较少了，更多的是通过开源社区来获取资料，学习。虽然我在珠海的时候就注册了<a href=\"https://github.com/icepy\" target=\"_blank\" rel=\"external\">Github icepy</a>，但是开始玩起来还是去了携程之后。</p>\n<p>三月份（2015年）我去了每日优鲜，当时我们七个人（两个纯前端，我和小袁，现在和我一起在《音悦台》，凤鸣偶尔会帮助我们，四个python服务端，一个切图的女同学）在望京对面的麒麟社（看起来很像家居楼，比较破），用<a href=\"http://ionicframework.com/\" target=\"_blank\" rel=\"external\">ionic</a>快速搭建了跑在三端（iOS，Android，微信端）的每日优鲜App。中间经历了很多很痛苦的试验阶段，包括有兼容微信（JS SDK），ionic是一套基于AngularJS的混合应用开发框架，在每日优鲜即将搬入望京SOHO的前三天，我离开了。其实，当时我并不知道自己想要去做些什么，但是又不得不去做些什么。（现在的每日优鲜App早已经用原生语言重写了一套，部分混合了一些前端页面，他们发展的很不错。）</p>\n<p>在外面的世界混了一圈，心里有了些疲惫，特别是听到了《去大理》，《一人一花》，想起了雪峰山的家乡，于是就回去了。本来应该很满意的过着自己的隐居生活，和同学开始筹备了一个养殖场和果园，也写好了相应的微信网站和运营计划，我想我们原生态的农业产品，在长沙，怀化等城市中应该会有很大的需求，因为人们对于食品安全的关注度比以往都高了很多很多。很不幸，因为合伙人理念的冲突，我又失败了。</p>\n<p>九月份（2015年），我又去北京找了一个工作，负责乐家园社区O2O项目的前端设计，两个人搭起来了一个社区App，我们采用backbone很快堆出了原形，看起来发展势头很良好，可是这一年资本寒冬来了，12月份老板调整了方向，开始做物业管理系统基本放弃了to C的产品，物业管理系统使用了react，es2015，webpack来搭建，可是我依然选择了离开。</p>\n<p>从携程离职之后的2015年并不是很顺利，起伏经历了很多，但是这一年里却是买书读书读的非常多的一年（<a href=\"https://github.com/icepy/_posts/issues/20\" target=\"_blank\" rel=\"external\">2015年我阅读的书籍</a>），这是一个很有趣的现象，当然我闲下来的时候（我并不知道该去做些什么，只剩读书了。），读书成了我唯一的爱好。</p>\n<ul>\n<li>学习了react，es2015，webpack</li>\n<li>开始去了解和掌握react native的知识</li>\n<li>更深入的学习了iOS，包括有新推出的Swift语言</li>\n<li>关注的点更多的是在于编程思想方面，比如最佳的实践，如何采用合适的技术栈搭建产品，编程的规范，自动化CI方面等基础设施的研究</li>\n<li>对于开源社区的依赖程度更高了，比如现今成了Github的重度用户</li>\n</ul>\n<p><a href=\"https://book.douban.com/subject/4826290/\" target=\"_blank\" rel=\"external\"><img src=\"https://img3.doubanio.com/lpic/s6164140.jpg\" alt=\"\"></a></p>\n<h2 id=\"2016年（如今）\"><a href=\"#2016年（如今）\" class=\"headerlink\" title=\"2016年（如今）\"></a>2016年（如今）</h2><p>总的来说我依然很看好JavaScript的应用范围，也打算继续耕耘在这个领域中，努力使自己的知识结构体系可以保持与世界趋势的同步。</p>\n<p>现在我是音悦台的一名软件开发工程师（2016年2月），主要的工作就是Web开发，虽然我做了很多基础决策方面的事情以及帮助团队成长（三个臭皮匠顶一个诸葛亮）。今后的很长的时间里，我依然会保持对技术的敏感与同步，其实写到最后，千言万语貌似还有很多话未说完。我很不希望，像很多前辈说的那样，编程是一个青春饭，人到了一定的年龄（你在知乎上搜索，很多都是30岁之后该如何转型的帖子），这是国情吗？于是，我拒绝了管理岗位，我更希望自己可以做一个纯粹热爱技术的人。</p>\n<p>下一个阶段（主要给刚入行的同学看）：</p>\n<p><strong>保持对新技术的敏感</strong></p>\n<p>对技术的热爱是你保持对新技术的敏感正确姿势。</p>\n<p><strong>遇到问题该怎么办</strong></p>\n<p>其实大部分的问题真的都是小问题，首先自己不能害怕问题，先在Google中搜索一下可以解决掉80%以上的问题，其次对于复杂的问题可能需要分解一下源代码，从其逻辑中查找问题，最后自己实在不爽（造个轮子）。</p>\n<p><strong>组织自己的开发环境</strong></p>\n<p>建议大家熟练的使用一套自己的开发环境，比如快捷键，oh-my-zsh，IDE。前端首推的IDE是Webstorm，然后是Atom，最后是Sublime Text 3。</p>\n<p>不要问我为什么没有Vim，因为大家可以使用这些编辑器或者IDE的vim插件，比如我就使用Atom的vim-mode。</p>\n<p><strong>老生常谈的如何学习</strong></p>\n<p>保持对技术的热爱，你有兴趣才可能去学习，勉强（强扭的瓜不甜）是会很痛苦的，如果你有兴趣，Github上大量的资源会让你根本学不完。</p>\n<p><strong>弄个云服务器</strong></p>\n<p>如果有兴趣和有时间弄一个阿里云或者其他任何云服务器，自己去捣腾一下，能更清楚认识Web开发。</p>\n<hr>\n<p>写在最后：</p>\n<p>如果你对《音悦台》有兴趣，可以先读<a href=\"https://github.com/icepy/_posts/issues/29\" target=\"_blank\" rel=\"external\">《浅谈音悦台PC端（前端开发）的改造，告别刀耕火种 》</a>对我们即将做的事情有一些了解，我们需要优秀的开发者加入，一起来完善这些，有兴趣的朋友，可以将简历发送到<a href=\"\">xiangwenwe@foxmail.com</a>，期待～。</p>\n","excerpt":"<blockquote>\n<p>光阴荏苒，岁月蹉跎；</p>\n</blockquote>\n<p>前些日子看电视剧翻到了刘烨的《血色浪漫》，其实我是一个很感性的人，电视剧中的人物：钟跃民，张海洋，周晓白，一幕一幕的从脑中闪过，很钦佩钟跃民对于人生的感悟，他有着无拘无束，散漫自由的天性。同时又善于在逆境中寻找乐趣（在陕北插队时），他很坚强，也很勇猛，可以用不文明对待不文明的方式来解决很多问题。他也很讲义气，可以在患难中把一张烧饼分给朋友吃的那种人。或多，或少，我和钟跃民的性格有大部分的相像，怀旧，又对于“新生活“而憧憬。</p>\n<p>说到编程其实我是半路出身的人，在很多年之前编程对于我形同“在塔克拉玛干中找绿洲一般”，撞上完全看概率。在很小的时候家里没有电脑，但是却有小霸王，（还是父亲从广州托人邮寄回来的）虽然父亲希望我能用它学习打字，不过多数情况下，我都用它在玩《魂斗罗》了。最开始接触编程（有意识的）还是在读高中的时候，学校对于市里的《电脑比赛》很重视，虽然是打字，以及基础的C语言（题目我还记得很清楚，输出一个乘法表）。但是我没有继续学习，比赛完之后就抛之脑后了。不过可喜的是，我竟然发现自己很喜欢电脑课老师推荐学习的python，坚持阅读完了一本书：</p>\n<p><a href=\"https://book.douban.com/subject/2137490/\"><img src=\"https://img3.doubanio.com/lpic/s2604186.jpg\" alt=\"\"></a></p>\n<p>高中读完（没有去念大学），一直在雪峰山里的老家，过着自己的隐居生活，一过既是三年。</p>","more":"<p>至今我都还能想到那一年刚到长沙（2011年）的夏天，穿着短袖站在长沙火车站，脸油油的一夜未睡，从怀化到长沙的绿皮火车需要开一个通宵才能到长沙。（去找第一份工作，当时还叫网页制作），那时候的我如同一个小白，大约知道一些标签（去面试之前，临时看了看百度的信息，不要问我Google是什么，当时真只知道百度。）面试我的大哥姓周，现在我们还是很好的朋友（他在长沙结婚，生子，有了自己的事业和家庭，过的很幸福），就这样误打误撞的得到了一份工作（有人教，真的很爽），不过自己也够上进，知道该怎么去学习真的很重要。人生的第一站，都要经过很多挫折，痛苦，也可能是磨难才能有成长，成长虽然伴随着阵痛，这大概就是人生的无奈了吧。我很庆幸自己没有经过太多的挫折，一路走来在不同的阶段都有不同的人给予了帮助。在长沙的三个月里，我学习了很多东西（华声在线）。</p>\n<ul>\n<li>div+css布局（position布局和float布局）</li>\n<li>了解到了基础的语义化（比如超链接的时候用a标签，标题用h系列标签，按钮用button，行内用span）</li>\n<li>学习了JavaScript基础（比如大量的使用函数，俗称面向过程编程，一个功能一个函数，大的功能用很多个小函数组合而成）</li>\n<li>接触了jQuery（会用DOM选择器，那个年代没有比jQuery更好的解决方案）</li>\n<li>了解到了IE6兼容性的问题（虽然，我现在都忘记的差不多了）</li>\n</ul>\n<p>阅读到的书有：</p>\n<p><a href=\"https://book.douban.com/subject/4861462/\"><img src=\"https://img3.doubanio.com/lpic/s4380650.jpg\" alt=\"\"></a></p>\n<p><a href=\"https://book.douban.com/subject/3082278/\"><img src=\"https://img3.doubanio.com/lpic/s3103215.jpg\" alt=\"\"></a></p>\n<p><a href=\"https://book.douban.com/subject/4111399/\"><img src=\"https://img3.doubanio.com/lpic/s24398905.jpg\" alt=\"\"></a></p>\n<p><a href=\"\"><img src=\"http://ec4.images-amazon.com/images/I/51hoD75E26L._SX397_BO1,204,203,200_.jpg\" alt=\"\"></a></p>\n<p>PS：这四本书有些年头了。</p>\n<p>真正开始有意识的对编程的认知还是要从珠海开始，那时候在自己的心里才建立起了体系。不得不说，从长沙到珠海的跨越对于自己的职业和专业有了非常大的促进作用。远光软件是一家企业管理和社会服务信息系统供应商，以国家电网，南方电网做为主要的服务客户（当然还有五大发电集团以及珠海市市政系统的研发）。到远光软件，做的第一个项目就是《费用报销系统》，这是一个典型的单页应用（SAP），在客户端层面进行了MVC分层，模块化，以及大量的操作表格（编辑费用报销流程）和Ajax的交互。在珠海认识了博士（我的导师，远光软件对于新入职的员工都会安排一个专职的导师来辅助新员工展开工作，博士后来自己去创业了，他一直想开一家属于自己的咖啡店，虽然经历了挫折，最后加入了魅族）。要说到如何加入远光软件，不得不说（平时的兴趣爱好说不定在某些时候真能有所帮助）。我们部门的总经理是一个很nice的茶友和网友（当时玩博客园），这样看来帮助还真是无声无息之间就发生了，我得到了一次机会，回过头来看，这真的是人生的转折。</p>\n<ul>\n<li>了解到了MVC，参与了公司内部MVC框架的开发（seeker.js）</li>\n<li>重新学习了JavaScript，对于这门语言有了更深刻的体会</li>\n<li>了解到了Ajax以及网络传输层的通信（HTTP）</li>\n<li>开始认识到构建一个大型项目，模块化的重要性</li>\n<li>开始了解到有Grunt这么一个构建工具</li>\n<li>学习了Node.js</li>\n</ul>\n<p>在珠海的日子里现在想起来自己的状态：就是一个只会学习的机器。那段时间，我对Objective-C产生了浓厚的兴趣，开始自己倒腾黑苹果，学习Objective-C，CocoaTouch框架，参与部门内部项目的开发（虽然半途夭折了），接触到了UNIX操作系统，这才发现自己一直使用的windows好low啊。那个时候的自己真让自己怀念，其实学习它真的是一种精神（不断的探索，不断的吸取），坚持下来之后，才能知道雨后会不会是彩虹。也是在这一段时间里，我加入了一个网友组织的前端分享网站（2012年）：<a href=\"http://www.w3cplus.com/\">w3cplus</a>，认识了大漠，为之，99，993，也有了一个不常用的ID《文人》，多数情况下，我一直用着自己的icepy（直到后来我才认识到ID混乱带来的麻烦，就索性一直用着icepy了。），只是现在和为之联系的比较少了，知道他去了腾讯。在生活里，人与人的相处分阶段，天下没有不散的宴席，这是真的。</p>\n<p>在珠海这一过就是两年，阅读的书籍非常多，多到自己都数不清楚了，大体上来说分为了两个部分，语言类的和编程思想类的，印象中大约还能记得的就只有这些了：</p>\n<p><em>JavaScript</em></p>\n<p><a href=\"https://book.douban.com/subject/2228378/\"><img src=\"https://img3.doubanio.com/lpic/s5860151.jpg\" alt=\"\"></a></p>\n<p><a href=\"https://book.douban.com/subject/3590768/\"><img src=\"https://img3.doubanio.com/lpic/s3651235.jpg\" alt=\"\"></a></p>\n<p><a href=\"https://book.douban.com/subject/3329540/\"><img src=\"https://img3.doubanio.com/lpic/s3398900.jpg\" alt=\"\"></a></p>\n<p><a href=\"https://book.douban.com/subject/10546125/\"><img src=\"https://img3.doubanio.com/lpic/s8958650.jpg\" alt=\"\"></a></p>\n<p><a href=\"https://book.douban.com/subject/5362856/\"><img src=\"https://img3.doubanio.com/lpic/s6245861.jpg\" alt=\"\"></a></p>\n<p><em>iOS</em></p>\n<p><a href=\"https://book.douban.com/subject/3864073/\"><img src=\"https://img3.doubanio.com/lpic/s3885296.jpg\" alt=\"\"></a></p>\n<p><a href=\"https://book.douban.com/subject/6920082/\"><img src=\"https://img3.doubanio.com/lpic/s28020216.jpg\" alt=\"\"></a></p>\n<p><a href=\"https://book.douban.com/subject/3870385/\"><img src=\"https://img3.doubanio.com/lpic/s3890550.jpg\" alt=\"\"></a></p>\n<p><em>编程思想类</em></p>\n<p><a href=\"https://book.douban.com/subject/10746113/\"><img src=\"http://ec4.images-amazon.com/images/I/51L3vC93PEL._SX383_BO1,204,203,200_.jpg\" alt=\"\"></a></p>\n<p><a href=\"https://book.douban.com/subject/1152912/\"><img src=\"http://ec4.images-amazon.com/images/I/51yWNzHYyUL._SX357_BO1,204,203,200_.jpg\" alt=\"\"></a></p>\n<p><a href=\"http://www.amazon.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E7%B2%BE%E9%AB%93%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86-%E6%96%AF%E6%89%98%E6%9E%97%E6%96%AF/dp/B0041859AI/ref=sr_1_2?ie=UTF8&amp;qid=1459746651&amp;sr=8-2&amp;keywords=%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%B2%BE%E9%AB%93%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86\"><img src=\"http://ec4.images-amazon.com/images/I/51yo0pczfbL._SX340_BO1,204,203,200_.jpg\" alt=\"\"></a></p>\n<p><a href=\"https://book.douban.com/subject/1139426/\"><img src=\"http://ec4.images-amazon.com/images/I/51U7%2BI63eWL._SX354_BO1,204,203,200_.jpg\" alt=\"\"></a></p>\n<p>阅读完那三本书（iOS）之后其他时间学习iOS开发就靠官方文档以及Google了，其实中间很长一段时间内自己并不清楚自己到底喜欢哪一个，索性两个都比较深入的学习了，当时自己都不知道这个决定对于今后有多大的影响，后来我才发现我特别的适合做混合应用（Hybrid App）或者手机端的开发，因为我对Native（iOS端）的熟悉程度不亚于前端（HTML,CSS,JavaScript）。慢慢的对于应用我更关注代码的层次维护性与可读性，使用Instruments来分析优化iOS应用，抓包分析HTTP，在设计（软件设计模式）与编写之际找到一个平衡。真的还要感谢网易公司（黄易^_^）推出了《网易公开课》<a href=\"http://open.163.com/\">http://open.163.com/</a>补全了我大量计算机方面的基础知识。</p>\n<p>2013年底，我去了上海住在为之家中，有一段时间里都快不知道该去做些什么。后来经过大漠的推荐，我去了携程无线事业部面试，这是一个很棒的团队。有幸加入其中，真觉得自己的选择和方向是对的。虽然，我们最后解散分拆了（很可惜）。携程的App和手机网站全部使用Hybrid技术来构建，一套代码运行在三端（iOS，Android，Mobile）。在无线事业部感觉每一天都过的很新鲜，因为我能做很多事情，一是验证自己的想法，二是积累了大量的实践经验，三是我可以做更多混合编程的东西。我的leader有泉帮助我很快的适应了携程的技术栈（当时使用的是requirejs，zepto，backbone，underscore搭建起来的技术栈），至今我都还能想起来在携程认识的那些人，跟着张老虎跑门票的业务（还有汗巾一起），听刘大师吹牛皮，张爸爸讲UI组件，帮助淳敏用python写了一个打包工具，看磊BB（叶小钗）指点江山，意气风发。大格子汉卿聊上海话，左盟主策笑傲江湖，明星弄《酒店》。是的，就是这样的一个团队，虽然每天都很“苦逼”（几乎每天都很正能量的忙到十点，十一点），却也收获了更多。</p>\n<ul>\n<li>通过bridge（自定义协议）与Native进行交互</li>\n<li>研究了phoneGap的技术，比如在“后台”相对于前端Native就是后台，进行网络，线程的优化</li>\n<li>研究了辅助前端调试的工具，比如远程代理，客户端App代理</li>\n<li>对JavaScript语言有了更深刻的理解</li>\n<li>使用Node.js跑SEO页面，对Node.js掌握的比较全面了，采用新的技术解决回调过深的问题</li>\n</ul>\n<p>在携程一直到无线事业部解散，分拆陆陆续续待了十个月，虽然很短暂，但是却印证了自己所想，在心底一直坚持的信念，有了一次很充分的肯定：使用前端技术开发手机App。</p>\n<p><a href=\"https://book.douban.com/subject/22190840/\"><img src=\"https://img3.doubanio.com/lpic/s25933771.jpg\" alt=\"\"></a></p>\n<p><a href=\"https://book.douban.com/subject/10608238/\"><img src=\"https://img3.doubanio.com/lpic/s9066310.jpg\" alt=\"\"></a></p>\n<p><a href=\"https://book.douban.com/subject/25768396/\"><img src=\"https://img3.doubanio.com/lpic/s27269296.jpg\" alt=\"\"></a></p>\n<p>这一年里一共买了三本书，不知道为什么后面这些年买书买的比较少了，更多的是通过开源社区来获取资料，学习。虽然我在珠海的时候就注册了<a href=\"https://github.com/icepy\">Github icepy</a>，但是开始玩起来还是去了携程之后。</p>\n<p>三月份（2015年）我去了每日优鲜，当时我们七个人（两个纯前端，我和小袁，现在和我一起在《音悦台》，凤鸣偶尔会帮助我们，四个python服务端，一个切图的女同学）在望京对面的麒麟社（看起来很像家居楼，比较破），用<a href=\"http://ionicframework.com/\">ionic</a>快速搭建了跑在三端（iOS，Android，微信端）的每日优鲜App。中间经历了很多很痛苦的试验阶段，包括有兼容微信（JS SDK），ionic是一套基于AngularJS的混合应用开发框架，在每日优鲜即将搬入望京SOHO的前三天，我离开了。其实，当时我并不知道自己想要去做些什么，但是又不得不去做些什么。（现在的每日优鲜App早已经用原生语言重写了一套，部分混合了一些前端页面，他们发展的很不错。）</p>\n<p>在外面的世界混了一圈，心里有了些疲惫，特别是听到了《去大理》，《一人一花》，想起了雪峰山的家乡，于是就回去了。本来应该很满意的过着自己的隐居生活，和同学开始筹备了一个养殖场和果园，也写好了相应的微信网站和运营计划，我想我们原生态的农业产品，在长沙，怀化等城市中应该会有很大的需求，因为人们对于食品安全的关注度比以往都高了很多很多。很不幸，因为合伙人理念的冲突，我又失败了。</p>\n<p>九月份（2015年），我又去北京找了一个工作，负责乐家园社区O2O项目的前端设计，两个人搭起来了一个社区App，我们采用backbone很快堆出了原形，看起来发展势头很良好，可是这一年资本寒冬来了，12月份老板调整了方向，开始做物业管理系统基本放弃了to C的产品，物业管理系统使用了react，es2015，webpack来搭建，可是我依然选择了离开。</p>\n<p>从携程离职之后的2015年并不是很顺利，起伏经历了很多，但是这一年里却是买书读书读的非常多的一年（<a href=\"https://github.com/icepy/_posts/issues/20\">2015年我阅读的书籍</a>），这是一个很有趣的现象，当然我闲下来的时候（我并不知道该去做些什么，只剩读书了。），读书成了我唯一的爱好。</p>\n<ul>\n<li>学习了react，es2015，webpack</li>\n<li>开始去了解和掌握react native的知识</li>\n<li>更深入的学习了iOS，包括有新推出的Swift语言</li>\n<li>关注的点更多的是在于编程思想方面，比如最佳的实践，如何采用合适的技术栈搭建产品，编程的规范，自动化CI方面等基础设施的研究</li>\n<li>对于开源社区的依赖程度更高了，比如现今成了Github的重度用户</li>\n</ul>\n<p><a href=\"https://book.douban.com/subject/4826290/\"><img src=\"https://img3.doubanio.com/lpic/s6164140.jpg\" alt=\"\"></a></p>\n<h2 id=\"2016年（如今）\"><a href=\"#2016年（如今）\" class=\"headerlink\" title=\"2016年（如今）\"></a>2016年（如今）</h2><p>总的来说我依然很看好JavaScript的应用范围，也打算继续耕耘在这个领域中，努力使自己的知识结构体系可以保持与世界趋势的同步。</p>\n<p>现在我是音悦台的一名软件开发工程师（2016年2月），主要的工作就是Web开发，虽然我做了很多基础决策方面的事情以及帮助团队成长（三个臭皮匠顶一个诸葛亮）。今后的很长的时间里，我依然会保持对技术的敏感与同步，其实写到最后，千言万语貌似还有很多话未说完。我很不希望，像很多前辈说的那样，编程是一个青春饭，人到了一定的年龄（你在知乎上搜索，很多都是30岁之后该如何转型的帖子），这是国情吗？于是，我拒绝了管理岗位，我更希望自己可以做一个纯粹热爱技术的人。</p>\n<p>下一个阶段（主要给刚入行的同学看）：</p>\n<p><strong>保持对新技术的敏感</strong></p>\n<p>对技术的热爱是你保持对新技术的敏感正确姿势。</p>\n<p><strong>遇到问题该怎么办</strong></p>\n<p>其实大部分的问题真的都是小问题，首先自己不能害怕问题，先在Google中搜索一下可以解决掉80%以上的问题，其次对于复杂的问题可能需要分解一下源代码，从其逻辑中查找问题，最后自己实在不爽（造个轮子）。</p>\n<p><strong>组织自己的开发环境</strong></p>\n<p>建议大家熟练的使用一套自己的开发环境，比如快捷键，oh-my-zsh，IDE。前端首推的IDE是Webstorm，然后是Atom，最后是Sublime Text 3。</p>\n<p>不要问我为什么没有Vim，因为大家可以使用这些编辑器或者IDE的vim插件，比如我就使用Atom的vim-mode。</p>\n<p><strong>老生常谈的如何学习</strong></p>\n<p>保持对技术的热爱，你有兴趣才可能去学习，勉强（强扭的瓜不甜）是会很痛苦的，如果你有兴趣，Github上大量的资源会让你根本学不完。</p>\n<p><strong>弄个云服务器</strong></p>\n<p>如果有兴趣和有时间弄一个阿里云或者其他任何云服务器，自己去捣腾一下，能更清楚认识Web开发。</p>\n<hr>\n<p>写在最后：</p>\n<p>如果你对《音悦台》有兴趣，可以先读<a href=\"https://github.com/icepy/_posts/issues/29\">《浅谈音悦台PC端（前端开发）的改造，告别刀耕火种 》</a>对我们即将做的事情有一些了解，我们需要优秀的开发者加入，一起来完善这些，有兴趣的朋友，可以将简历发送到<a href=\"\">xiangwenwe@foxmail.com</a>，期待～。</p>"},{"title":"事件监听器","date":"2016-02-22T04:10:07.000Z","_content":"\n事件监听器对于“订阅发布”模式，非常有用，在我们常用的一些事件中，比如`click`，也可以看做为一种“订阅发布”模型。今天除了写一写自定义的事件监听器，也想和大家一起复习一下Web前端的事件系统。\n\n**复习浏览器事件**\n\n事件顺序有两种类型：\n\n- 事件捕获\n- 事件冒泡\n\n关于浏览器的历史原因，大家可以Google一下补脑；事件冒泡，从事件自身开始传播，一直到不确定的事件目标。而事件捕获正好与此相反，从不具体的事件目标，传播到事件的自身。而我们经常使用的DOM标准事件模型，则同时支持这两种顺序。但是，它的顺序是先发生捕获，再冒泡。\n\n```JavaScript\n    addEventListener(type,handler,bool)\n```\n\n**事件捕获使用场景**\n\n根据*事件捕获*的特点来说，特别和操作系统有些相似，如果我想做全局的事件监听，比如document下所有的子节点，在某个条件下点击无效。这种情况就非常适合*事件捕获*来实现：\n\n```JavaScript\n    var doc = document;\n    var cancel = true;\n    doc.addEventListener('click',function(e){\n        if(cancel){\n            e.stopPropagation();\n            e.preventDefault();\n        }\n    },true)\n```\n\n\n**事件冒泡使用场景**\n\n比如在`onmousemove`这高频繁的场景中，可以进一步通过取消事件冒泡，打断它向上传播。\n\n## 自定义事件监听器\n\n在前几年，大家都在使用jQuery的时候，特别喜欢它实现的*事件系统*，包括有on注册，once注册一次，off解除，trigger触发几个操作。有了事件监听器，我们可以根据这个功能实现很多有用的场景，比如一个应用的某些状态，是根据用户的行为而改变的，但是这个行为却又是我无法预期的，通过事件监听器，可以辅助我们处理好这样的业务。\n\n有些时候，我们可能需要一个单实例，那么once就有用武之地了。\n\n```Swift\n    //Swift 版的单例\n    class var sharedInstanceManager: ValiantCenterManager {\n        struct centerStatic {\n            static var onceToken:dispatch_once_t = 0\n            static var instance:ValiantCenterManager? = nil\n        }\n        dispatch_once(&centerStatic.onceToken) { () -> Void in\n            centerStatic.instance = ValiantCenterManager()\n        }\n        return centerStatic.instance!\n    }\n```\n\n**那么如何一步一步实现事件监听器**\n\n假设我们有一个Event类，在这个类中的内部有一个this._events = []数组属性，它是用来装载所有的自定义事件。\n\n*首先，我们需要实现的是$on注册事件方法。*\n\n```JavaScript\nEvent.prototype.$on = function(event,fun){\n        let cbs = this._events[event]\n        cbs ? cbs.push(fun) : this._events[event] = []\n        if (!cbs) {\n            this._events[event].push(fun)\n        }\n        return this\n}\n```\n\n这里为什么要将this._events设计为二维数组？因为事件可以是多个，但是事件名可能相同。这个逻辑意图非常的明显，根据event参数从this._events中获取是否存在。如果不存在，创建一个event为key的数组，并将事件句柄程序push到数组中。\n\n*我们还需要实现$trigger触发事件方法*\n\n```JavaScript\n        Event.prototype.$trigger = function(event){\n            let isString = typeof event === 'string'\n            event = isString ? event : event.name\n            let cbs = this._events[event]\n            let args = tools.toArray(arguments,1)\n            if (cbs) {\n                let i = 0\n                let j = cbs.length\n                for(;i<j;i++){\n                    let cb = cbs[i]\n                    cb.apply(this,args)\n                }\n            }\n        }\n```\n\n逻辑依然非常简单，通过事件名从this._events获取相应的事件句柄程序数组，然后将arguments转成数组，（这里考虑的是可能会传入参数）如果事件句柄程序数组存在，进行循环，再讲args参数apply给每一个取出来的事件句柄程序。\n\n*我们最后需要$off解除事件方法*\n\n```JavaScript\n    Event.prototype.$off = function(event,fun){\n        let cbs = this._events[event]\n\n        //事件列队中无事件\n        if (!cbs) {\n            return this\n        }\n\n        //删除所有的事件\n        if (!event && !fun) {\n            this._events = {}\n            return this;\n        }\n\n        //只有事件名称时\n        if (event && !fun) {\n            this._events[event] = null\n            return this\n        }\n\n        //删除某个事件队列中的某个事件\n        let cb;\n        let i = cbs.length\n        while(i--){\n            cb = cbs[i]\n            if (cb === fun || cb.fun === fun) {\n                cbs.splice(i,1)\n                break\n            }\n        }\n        return this\n    }\n```\n\n解除事件方法的逻辑可能相比之下稍许多了些，比如只存在事件组key名的情况，或者删除某个事件队列中的某个事件句柄程序。\n\n**有了它之后对于前端的工作有哪些帮助？**\n\n我可以想象到，在做手机版的SAP应用时，基于router的生命周期，就需要自定义事件监听器的帮助。使用它，其实你也了解了一种编程模型：“订阅发布”模式或者“通知机制”。当然，还有一些其他的场景。事件，对于前端而言，是一个非常需要掌握的技能。不管是DOM标准事件，还是自定义的事件监听器。\n","source":"_posts/javascript-event-handler.md","raw":"title: 事件监听器\ndate: 2016-02-22 12:10:07\ntags: JavaScript\n---\n\n事件监听器对于“订阅发布”模式，非常有用，在我们常用的一些事件中，比如`click`，也可以看做为一种“订阅发布”模型。今天除了写一写自定义的事件监听器，也想和大家一起复习一下Web前端的事件系统。\n\n**复习浏览器事件**\n\n事件顺序有两种类型：\n\n- 事件捕获\n- 事件冒泡\n\n关于浏览器的历史原因，大家可以Google一下补脑；事件冒泡，从事件自身开始传播，一直到不确定的事件目标。而事件捕获正好与此相反，从不具体的事件目标，传播到事件的自身。而我们经常使用的DOM标准事件模型，则同时支持这两种顺序。但是，它的顺序是先发生捕获，再冒泡。\n\n```JavaScript\n    addEventListener(type,handler,bool)\n```\n\n**事件捕获使用场景**\n\n根据*事件捕获*的特点来说，特别和操作系统有些相似，如果我想做全局的事件监听，比如document下所有的子节点，在某个条件下点击无效。这种情况就非常适合*事件捕获*来实现：\n\n```JavaScript\n    var doc = document;\n    var cancel = true;\n    doc.addEventListener('click',function(e){\n        if(cancel){\n            e.stopPropagation();\n            e.preventDefault();\n        }\n    },true)\n```\n\n\n**事件冒泡使用场景**\n\n比如在`onmousemove`这高频繁的场景中，可以进一步通过取消事件冒泡，打断它向上传播。\n\n## 自定义事件监听器\n\n在前几年，大家都在使用jQuery的时候，特别喜欢它实现的*事件系统*，包括有on注册，once注册一次，off解除，trigger触发几个操作。有了事件监听器，我们可以根据这个功能实现很多有用的场景，比如一个应用的某些状态，是根据用户的行为而改变的，但是这个行为却又是我无法预期的，通过事件监听器，可以辅助我们处理好这样的业务。\n\n有些时候，我们可能需要一个单实例，那么once就有用武之地了。\n\n```Swift\n    //Swift 版的单例\n    class var sharedInstanceManager: ValiantCenterManager {\n        struct centerStatic {\n            static var onceToken:dispatch_once_t = 0\n            static var instance:ValiantCenterManager? = nil\n        }\n        dispatch_once(&centerStatic.onceToken) { () -> Void in\n            centerStatic.instance = ValiantCenterManager()\n        }\n        return centerStatic.instance!\n    }\n```\n\n**那么如何一步一步实现事件监听器**\n\n假设我们有一个Event类，在这个类中的内部有一个this._events = []数组属性，它是用来装载所有的自定义事件。\n\n*首先，我们需要实现的是$on注册事件方法。*\n\n```JavaScript\nEvent.prototype.$on = function(event,fun){\n        let cbs = this._events[event]\n        cbs ? cbs.push(fun) : this._events[event] = []\n        if (!cbs) {\n            this._events[event].push(fun)\n        }\n        return this\n}\n```\n\n这里为什么要将this._events设计为二维数组？因为事件可以是多个，但是事件名可能相同。这个逻辑意图非常的明显，根据event参数从this._events中获取是否存在。如果不存在，创建一个event为key的数组，并将事件句柄程序push到数组中。\n\n*我们还需要实现$trigger触发事件方法*\n\n```JavaScript\n        Event.prototype.$trigger = function(event){\n            let isString = typeof event === 'string'\n            event = isString ? event : event.name\n            let cbs = this._events[event]\n            let args = tools.toArray(arguments,1)\n            if (cbs) {\n                let i = 0\n                let j = cbs.length\n                for(;i<j;i++){\n                    let cb = cbs[i]\n                    cb.apply(this,args)\n                }\n            }\n        }\n```\n\n逻辑依然非常简单，通过事件名从this._events获取相应的事件句柄程序数组，然后将arguments转成数组，（这里考虑的是可能会传入参数）如果事件句柄程序数组存在，进行循环，再讲args参数apply给每一个取出来的事件句柄程序。\n\n*我们最后需要$off解除事件方法*\n\n```JavaScript\n    Event.prototype.$off = function(event,fun){\n        let cbs = this._events[event]\n\n        //事件列队中无事件\n        if (!cbs) {\n            return this\n        }\n\n        //删除所有的事件\n        if (!event && !fun) {\n            this._events = {}\n            return this;\n        }\n\n        //只有事件名称时\n        if (event && !fun) {\n            this._events[event] = null\n            return this\n        }\n\n        //删除某个事件队列中的某个事件\n        let cb;\n        let i = cbs.length\n        while(i--){\n            cb = cbs[i]\n            if (cb === fun || cb.fun === fun) {\n                cbs.splice(i,1)\n                break\n            }\n        }\n        return this\n    }\n```\n\n解除事件方法的逻辑可能相比之下稍许多了些，比如只存在事件组key名的情况，或者删除某个事件队列中的某个事件句柄程序。\n\n**有了它之后对于前端的工作有哪些帮助？**\n\n我可以想象到，在做手机版的SAP应用时，基于router的生命周期，就需要自定义事件监听器的帮助。使用它，其实你也了解了一种编程模型：“订阅发布”模式或者“通知机制”。当然，还有一些其他的场景。事件，对于前端而言，是一个非常需要掌握的技能。不管是DOM标准事件，还是自定义的事件监听器。\n","slug":"javascript-event-handler","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk0m000ouejrplcdudhs","content":"<p>事件监听器对于“订阅发布”模式，非常有用，在我们常用的一些事件中，比如<code>click</code>，也可以看做为一种“订阅发布”模型。今天除了写一写自定义的事件监听器，也想和大家一起复习一下Web前端的事件系统。</p>\n<p><strong>复习浏览器事件</strong></p>\n<p>事件顺序有两种类型：</p>\n<ul>\n<li>事件捕获</li>\n<li>事件冒泡</li>\n</ul>\n<p>关于浏览器的历史原因，大家可以Google一下补脑；事件冒泡，从事件自身开始传播，一直到不确定的事件目标。而事件捕获正好与此相反，从不具体的事件目标，传播到事件的自身。而我们经常使用的DOM标准事件模型，则同时支持这两种顺序。但是，它的顺序是先发生捕获，再冒泡。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addEventListener(type,handler,bool)</span><br></pre></td></tr></table></figure>\n<p><strong>事件捕获使用场景</strong></p>\n<p>根据<em>事件捕获</em>的特点来说，特别和操作系统有些相似，如果我想做全局的事件监听，比如document下所有的子节点，在某个条件下点击无效。这种情况就非常适合<em>事件捕获</em>来实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> doc = <span class=\"built_in\">document</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> cancel = <span class=\"literal\">true</span>;</span><br><span class=\"line\">doc.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cancel)&#123;</span><br><span class=\"line\">        e.stopPropagation();</span><br><span class=\"line\">        e.preventDefault();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,<span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>事件冒泡使用场景</strong></p>\n<p>比如在<code>onmousemove</code>这高频繁的场景中，可以进一步通过取消事件冒泡，打断它向上传播。</p>\n<h2 id=\"自定义事件监听器\"><a href=\"#自定义事件监听器\" class=\"headerlink\" title=\"自定义事件监听器\"></a>自定义事件监听器</h2><p>在前几年，大家都在使用jQuery的时候，特别喜欢它实现的<em>事件系统</em>，包括有on注册，once注册一次，off解除，trigger触发几个操作。有了事件监听器，我们可以根据这个功能实现很多有用的场景，比如一个应用的某些状态，是根据用户的行为而改变的，但是这个行为却又是我无法预期的，通过事件监听器，可以辅助我们处理好这样的业务。</p>\n<p>有些时候，我们可能需要一个单实例，那么once就有用武之地了。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Swift 版的单例</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">var</span> <span class=\"title\">sharedInstanceManager</span>: <span class=\"title\">ValiantCenterManager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">centerStatic</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> onceToken:dispatch_once_t = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> instance:<span class=\"type\">ValiantCenterManager</span>? = <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dispatch_once(&amp;centerStatic.onceToken) &#123; () -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        centerStatic.instance = <span class=\"type\">ValiantCenterManager</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> centerStatic.instance!</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>那么如何一步一步实现事件监听器</strong></p>\n<p>假设我们有一个Event类，在这个类中的内部有一个this._events = []数组属性，它是用来装载所有的自定义事件。</p>\n<p><em>首先，我们需要实现的是$on注册事件方法。</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Event.prototype.$on = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event,fun</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cbs = <span class=\"keyword\">this</span>._events[event]</span><br><span class=\"line\">        cbs ? cbs.push(fun) : <span class=\"keyword\">this</span>._events[event] = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!cbs) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._events[event].push(fun)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里为什么要将this._events设计为二维数组？因为事件可以是多个，但是事件名可能相同。这个逻辑意图非常的明显，根据event参数从this._events中获取是否存在。如果不存在，创建一个event为key的数组，并将事件句柄程序push到数组中。</p>\n<p><em>我们还需要实现$trigger触发事件方法</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Event.prototype.$trigger = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isString = <span class=\"keyword\">typeof</span> event === <span class=\"string\">'string'</span></span><br><span class=\"line\">    event = isString ? event : event.name</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cbs = <span class=\"keyword\">this</span>._events[event]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = tools.toArray(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cbs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> j = cbs.length</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;i&lt;j;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> cb = cbs[i]</span><br><span class=\"line\">            cb.apply(<span class=\"keyword\">this</span>,args)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>逻辑依然非常简单，通过事件名从this._events获取相应的事件句柄程序数组，然后将arguments转成数组，（这里考虑的是可能会传入参数）如果事件句柄程序数组存在，进行循环，再讲args参数apply给每一个取出来的事件句柄程序。</p>\n<p><em>我们最后需要$off解除事件方法</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Event.prototype.$off = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event,fun</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cbs = <span class=\"keyword\">this</span>._events[event]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//事件列队中无事件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cbs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除所有的事件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!event &amp;&amp; !fun) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._events = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//只有事件名称时</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event &amp;&amp; !fun) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._events[event] = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除某个事件队列中的某个事件</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cb;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = cbs.length</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i--)&#123;</span><br><span class=\"line\">        cb = cbs[i]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cb === fun || cb.fun === fun) &#123;</span><br><span class=\"line\">            cbs.splice(i,<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解除事件方法的逻辑可能相比之下稍许多了些，比如只存在事件组key名的情况，或者删除某个事件队列中的某个事件句柄程序。</p>\n<p><strong>有了它之后对于前端的工作有哪些帮助？</strong></p>\n<p>我可以想象到，在做手机版的SAP应用时，基于router的生命周期，就需要自定义事件监听器的帮助。使用它，其实你也了解了一种编程模型：“订阅发布”模式或者“通知机制”。当然，还有一些其他的场景。事件，对于前端而言，是一个非常需要掌握的技能。不管是DOM标准事件，还是自定义的事件监听器。</p>\n","excerpt":"","more":"<p>事件监听器对于“订阅发布”模式，非常有用，在我们常用的一些事件中，比如<code>click</code>，也可以看做为一种“订阅发布”模型。今天除了写一写自定义的事件监听器，也想和大家一起复习一下Web前端的事件系统。</p>\n<p><strong>复习浏览器事件</strong></p>\n<p>事件顺序有两种类型：</p>\n<ul>\n<li>事件捕获</li>\n<li>事件冒泡</li>\n</ul>\n<p>关于浏览器的历史原因，大家可以Google一下补脑；事件冒泡，从事件自身开始传播，一直到不确定的事件目标。而事件捕获正好与此相反，从不具体的事件目标，传播到事件的自身。而我们经常使用的DOM标准事件模型，则同时支持这两种顺序。但是，它的顺序是先发生捕获，再冒泡。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addEventListener(type,handler,bool)</span><br></pre></td></tr></table></figure>\n<p><strong>事件捕获使用场景</strong></p>\n<p>根据<em>事件捕获</em>的特点来说，特别和操作系统有些相似，如果我想做全局的事件监听，比如document下所有的子节点，在某个条件下点击无效。这种情况就非常适合<em>事件捕获</em>来实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> doc = <span class=\"built_in\">document</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> cancel = <span class=\"literal\">true</span>;</span><br><span class=\"line\">doc.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cancel)&#123;</span><br><span class=\"line\">        e.stopPropagation();</span><br><span class=\"line\">        e.preventDefault();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,<span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>事件冒泡使用场景</strong></p>\n<p>比如在<code>onmousemove</code>这高频繁的场景中，可以进一步通过取消事件冒泡，打断它向上传播。</p>\n<h2 id=\"自定义事件监听器\"><a href=\"#自定义事件监听器\" class=\"headerlink\" title=\"自定义事件监听器\"></a>自定义事件监听器</h2><p>在前几年，大家都在使用jQuery的时候，特别喜欢它实现的<em>事件系统</em>，包括有on注册，once注册一次，off解除，trigger触发几个操作。有了事件监听器，我们可以根据这个功能实现很多有用的场景，比如一个应用的某些状态，是根据用户的行为而改变的，但是这个行为却又是我无法预期的，通过事件监听器，可以辅助我们处理好这样的业务。</p>\n<p>有些时候，我们可能需要一个单实例，那么once就有用武之地了。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Swift 版的单例</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">var</span> <span class=\"title\">sharedInstanceManager</span>: <span class=\"title\">ValiantCenterManager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">centerStatic</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> onceToken:dispatch_once_t = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> instance:<span class=\"type\">ValiantCenterManager</span>? = <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dispatch_once(&amp;centerStatic.onceToken) &#123; () -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        centerStatic.instance = <span class=\"type\">ValiantCenterManager</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> centerStatic.instance!</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>那么如何一步一步实现事件监听器</strong></p>\n<p>假设我们有一个Event类，在这个类中的内部有一个this._events = []数组属性，它是用来装载所有的自定义事件。</p>\n<p><em>首先，我们需要实现的是$on注册事件方法。</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Event.prototype.$on = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event,fun</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cbs = <span class=\"keyword\">this</span>._events[event]</span><br><span class=\"line\">        cbs ? cbs.push(fun) : <span class=\"keyword\">this</span>._events[event] = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!cbs) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._events[event].push(fun)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里为什么要将this._events设计为二维数组？因为事件可以是多个，但是事件名可能相同。这个逻辑意图非常的明显，根据event参数从this._events中获取是否存在。如果不存在，创建一个event为key的数组，并将事件句柄程序push到数组中。</p>\n<p><em>我们还需要实现$trigger触发事件方法</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Event.prototype.$trigger = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isString = <span class=\"keyword\">typeof</span> event === <span class=\"string\">'string'</span></span><br><span class=\"line\">    event = isString ? event : event.name</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cbs = <span class=\"keyword\">this</span>._events[event]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = tools.toArray(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cbs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> j = cbs.length</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;i&lt;j;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> cb = cbs[i]</span><br><span class=\"line\">            cb.apply(<span class=\"keyword\">this</span>,args)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>逻辑依然非常简单，通过事件名从this._events获取相应的事件句柄程序数组，然后将arguments转成数组，（这里考虑的是可能会传入参数）如果事件句柄程序数组存在，进行循环，再讲args参数apply给每一个取出来的事件句柄程序。</p>\n<p><em>我们最后需要$off解除事件方法</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Event.prototype.$off = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event,fun</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cbs = <span class=\"keyword\">this</span>._events[event]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//事件列队中无事件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cbs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除所有的事件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!event &amp;&amp; !fun) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._events = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//只有事件名称时</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event &amp;&amp; !fun) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._events[event] = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除某个事件队列中的某个事件</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cb;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = cbs.length</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i--)&#123;</span><br><span class=\"line\">        cb = cbs[i]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cb === fun || cb.fun === fun) &#123;</span><br><span class=\"line\">            cbs.splice(i,<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解除事件方法的逻辑可能相比之下稍许多了些，比如只存在事件组key名的情况，或者删除某个事件队列中的某个事件句柄程序。</p>\n<p><strong>有了它之后对于前端的工作有哪些帮助？</strong></p>\n<p>我可以想象到，在做手机版的SAP应用时，基于router的生命周期，就需要自定义事件监听器的帮助。使用它，其实你也了解了一种编程模型：“订阅发布”模式或者“通知机制”。当然，还有一些其他的场景。事件，对于前端而言，是一个非常需要掌握的技能。不管是DOM标准事件，还是自定义的事件监听器。</p>\n"},{"title":"浅谈音悦台PC端（前端开发）的改造，告别刀耕火种","date":"2016-03-20T03:01:01.000Z","banner":"http://o80ub63i5.bkt.clouddn.com/image/texture-1362879_640.jpg","_content":"\n> 架构非一朝一夕，且要紧贴业务。\n\n选择一个行业确实挺难的，特别是对于我们程序员来说。试错的机会，在某些阶段比较容易，但人到了一定的年龄，谨慎会更可靠。加入音悦台，我要做的第一件事情，就是要改造之前PC端的架构。如何去紧贴业务，在改造的过程中又不至于让业务开发停滞，这对于我而言是一件非常大的考量。\n\n## 了解业务与开发方式\n\n**我们的业务**\n\n在开始设计架构之前，我决定先去充分的了解我们的业务特点，音悦台是一家以高清MV视频播放起家的公司，现在它的业务呈现于服务粉丝，包括（商城，V榜）等一系列的产品。就技术场景的特点而言，包括了有PC，Mobile，混合APP，专题页，活动页等等，它涵盖了几乎所有的技术场景，提供了一套服务粉丝的解决方案。\n\n**刀耕火种的年代**\n\n很不幸，在我来之前，我们公司的前端属于“刀耕火种”的年代，所有的代码使用`Spring MVC`来套模板，手机端项目属于WAP站点（也是`Spring MVC`）。如何最小程度的脱离（JSP）或者说最少套JSP模板的架构，是我应该最优先的考量，适量的面向接口，Ajax开发也许会有很大的改变，当然，我所面临的问题还不仅仅是这些。\n\n由于特殊原因，音悦台的前端代码是由各时期的前辈去完成的，几乎都是在赶的状态，hack了很多不一样的功能，每一个时期都风格迥异，可维护性差。对于后来者，就像一根鱼刺咔在喉咙一般，我怎么感觉到灾难，来的这么快呢。\n\n- 缺少统一的项目管理（第三方库随便乱放，光jQuery就有几个地方同时存在）\n- 部署困难，没有版本号，而且严重依赖Java环境，编写一个代码就需要重新编译Java重启服务器（配置过于复杂）\n- 缺少统一的编程规范\n- 很多函数，变量起名很随意，出现了这种`asdf`的变量名\n- 几乎没有模块化（除了WAP页使用了requirejs）\n- 组件化概念无从谈起，大量的重复代码在搭积木般的堆业务\n- 虽然我们使用git版本控制，但是却缺少工作流，大家几乎都往master分支内push代码\n\n## 建模设计与技术选型\n\n> 老板都觉得现在的前端很不科学，很痛苦（因为铁打的营盘，流水的兵。无任何文档沉淀，修改任何东西都非常困难）\n\n变革迫在眉睫，PC端的重新梳理对于我个人而言，成了我很好的练兵之所。于是，我决定将我们公司眼下PC端的需求分解出来。\n\n- 必须完美支持IE8（这个是没办法的事情）\n\t- 模块化机制的引入，解决如何维护文件\n\t- 组件化引入，与业务隔离，解决松耦合的复用\n\t- 不支持编译(js)中间语言（比如TypeScript,es2015）\n\t- 按需打包，以及自动构建\n\t\t- 引入less或者sass，解决CSS的复用\n\t\t- 引入PostCSS解决CSS代码的健壮性（比如添加前缀-ms -webkit）\n\t\t- 文档沉淀，解决（铁打的营盘，流水的兵）\n\t\t- 浏览器自动刷新，项目管理，版本控制\n\t\t- 统一编程规范与最佳实践\n- 视频行业有其特殊性，必须完美支持与Flash的交互，封装一个统一的SDK\n- 必须要支持SEO，（最少程度达标）\n- 重新定义发布部署流程\n\n<!--more-->\n\n## 技术选型\n\n根据需求分解的特征进行选型，所有的子项目都依赖于`完美支持IE8`，所以对于我的选择局限性就比较大了。\n\n**Vue.js**\n\n- [Vue.js unit tests](http://vuejs.org/unit/)\n- [Vue.js Sauce Labs](https://saucelabs.com/u/vuejs)\n\nunit tests在IE上跑不起来，我所认知的结果是：不支持IE8\n\n**React.js**\n\n虽然FB提供了运行在旧浏览器上的解决方案：[Working With the Browser](https://facebook.github.io/react/docs/working-with-the-browser.html)，但是，对于未来，博客上明确书写了将不在支持，可查看[Discontinuing IE 8 Support in React DOM](https://facebook.github.io/react/blog/2016/01/12/discontinuing-ie8-support.html)，后来我在Github上找到一个[react-ie8](https://github.com/xcatliu/react-ie8)项目，对于商业公司而言，这个解决方案还是有很大的风险，于是：放弃。\n\n**Angular1.x**\n\n对于即将到来的Angular2.x以及Angular1.x庞大而臃肿的身躯（总不能我的专题页，活动页也用上Angular1.x吧），这是我最快放弃考察的一个项目。\n\n## 那么问题来了，我该怎么办？\n\n对于基础库而言，我选择了老三项，对于一个既需要复杂业务模型（复杂交互类型的页面），又有适当简单的特点业务（活动页面），MVC分层将有助于我们分解业务编程。而且，这些也有足够的中文资料，以及文档让团队中（没有接触过MVC）的同学去学习和适应。\n\n- [jQuery 1.x]()\n- [underscore]()\n- [backbone]()\n\n当然到这里我们的设计还远远不够，我们还缺少模块化，组件化，以及对backbone适当的改造。首先，我必须对开发方式进行隔离，分为了dev和build两个环境（当然，它是我既定的目标），以及引入一些表现良好的工具来辅助开发（比如browser-sync自动刷新页面）。为了更好的管理项目以及优化代码，我选择了npm系统来管理我的第三方依赖，npm脚本钩子来帮助我执行start，dev，build，test等环境，以及webpack来完成系统内的模块化构建。老实说，首先我们用它解决了js模块化的问题，至少commonjs的风格看起来可以保持一致（但是我还需要去协助大家避免循环引用），然后处理按需打包的问题（至少很长一段时间里我们的PC端还将是传统的页面而不是webapp）。\n\n关于webpack的应用以及多资源打包，推荐大家阅读我的另一篇文章：[webpack在PC项目中的应用](https://github.com/icepy/_posts/issues/25)\n\n### 目录结构设计\n\n对于传统的项目（`Spring MVC`），我们进行了一些适当的改变。当然，我们总体的目标，是在向面向接口开发来靠近。\n\n\tProject_dev  根目录\n\t\tdist 经过编译之后可发布的目录\n\t\tflash 内部swf文件放置的目录\n\t\tlink 内部自己开发或者未兼容Commonjs的库（未建立私人NPM服务仓库）\n\t\tstatic 切图的静态页面放置的目录\n\t\tweb 入口页面（用户访问的地址）\n\t\ttest 单元测试\n\t\timg 图片资源\n\t\tmock 本地模拟数据\n\t\tcross-url 跨域url（兼容老Spring MVC）\n\t\tjs //经过webpack打包之后的文件\n\t\tsrc //js源文件\n\t\t\tview 视图目录\n\t\t\t\tindex  业务模块\n\t\t\t\t\ttopbar.view.js\n\t\t\tmodel 模型目录\n\t\t\t\tindex\n\t\t\t\t\ttopbar.model.js\n\t\t\ttemplate 模板\n\t\t\t\tindex\n\t\t\t\t\ttopbar.html\n\t\t\tconfig.js\t//项目配置文件\n\t\t\tindex.main.js  //入口文件\n\t\tstyle\n\t\t\tcss //less编译之后的文件\n\t\t\tless //less源代码文件\n\t\t\treset.css  //公共文件\n\t\t.eslintrc\n\t\t.gitignore\n\t\tREADME.md\n\t\tgulpfile.js\n\t\tpackage.json\n\t\tmap.json\n\t\ttools.js //提供的工具，快速生成view，model文件\n\t\twebpack.dev.config.js\n\n最后可发布的目录结构：\n\n\tProject_build\n\n\t\tjs //处理过后的js文件\n\t\tstyle //处理过后的css文件\n\t\tweb //用户访问的真实页面\n\t\tlink //处理过后的第三方库或内部自己开发的库\n\t\tflash //swf文件\n\t\tcross-url //兼容（Spring MVC）的跨域\n\n对于我们的git则启用了一个基础的git flow工作流，避免大家push到master分支，每一次的发布都必须有足够的备份。\n\n### 第三方库整合\n\n针对第三方库的整合是规避了一些基础控件（除非有自己研发的需求），列表如下：\n\n- Swipe（轮播图）\n- 腾讯云 SDK\n- artTemplate\n- amazeui（参考较多）\n\n### backbone改造\n\n原始的`backbone`并不能很好适应我们的业务产品，它虽然有backbone.Router，但是却缺少基于路由的生命周期，它的Model也不是很健壮（可配置性以及数据的本地缓存），当然它的View是我们经常要使用的，但是却缺少相应的钩子方法，于是对于它们适当的改造，有助于公司产品的业务开发（便捷）以及稳定性。\n\n- baseView\n- baseModel\n- baseRouter\n\n`baseView`实现了相应的钩子方法，比如`rawLoader`，`beforeMount`，`afterMount`，`ready`等，对于参数传递也有了一些规范性的定义，比如：\n\n```JavaScript\n\n{\n\t\"props\":{},  \n\t\"methods\":{},\n\t\"state\":{}\n}\n\n\n```\n\nUI渲染依赖的数据通过`props`传递，外部可能用到的方法通过`methods`传递，内部需要维护的状态可以通过`state`传递，规范参数的目标是对一些写法进行约束，在排错时可以更容易定位到错误。\n\n`baseModel`除了实现了一个beforeEmit钩子外，基本上扩展和包装了一些便捷的存取方法，比如`$get`，`$set`，`$filter`，`$sort`，以及发送请求的便捷方式。\n\n`baseRouter`主要是实现了基于路由的生命周期（为了webapp准备的，可能未来会有要求兼容IE8的Webapp）。\n\n### 编写组件\n\n组件化从开发的角度来看，由于每个组件的相对独立性，开发者在开发期间不会产生依赖冲突，只需专注于自身的模块开发，提高开发效率；从维护的角度来看，于模块相关的资源均组织在一起，十分便于维护和整理。对于组件，我们进行了一些额外的处理，一个组件最少需要包含template.html以及index.js两个文件，比如：\n\n\tloginBox //目录\n\t\ttemplate //目录\n\t\t\tclose.html\n\t\t\tlogin.html\n\t\tindex.js\n\n\n我们的css文件放置在style目录下，它是一个less文件，当业务编程需要时，自己在自己的业务less文件中`@import url('common/footer.less');`即可，毕竟我们最终需要一个link css文件，而不是内嵌在html中，webpack帮助我们在dev环境中，既对这些东西进行了处理。\n\n在index.js文件中，只需要根据我们指定好的一些规则书写即可：\n\n规则一，继承baseView的组件\n\n```JavaScript\n\nvar BaseView = require('BaseView');\nvar closeTemp = require('./template/close.html');\nvar loginTemp = require('./template/login.html');\nvar LoginBox = BaseView.extend({\n\tevents:{\n\n\t},\n\tbeforeMount:function(){\n\n\t},\n\tafterMount:function(){\n\n\t},\n\tready:function(options){\n\t\tvar props = options.props;\n\t\tvar state = options.state;\n\t\tvar methods = options.methods;\n\t}\n});\nvar shared = null;\nLoginBox.sharedInstanceLoginBox = function(options){\n\tif(!shared){\n\t\tshared = new LoginBox(options);\n\t};\n\treturn shared;\n};\nmodule.exports = LoginBox;\n\n```\n\n规则二，不继承baseView的组件\n\n```JavaScript\n\nvar closeTemp = require('./template/close.html');\nvar loginTemp = require('./template/login.html');\nvar LoginBox = function(options){\n\tvar props = options.props;\n\tvar state = options.state;\n\tvar methods = options.methods;\n};\nvar shared = null;\nLoginBox.sharedInstanceLoginBox = function(options){\n\tif(!shared){\n\t\tshared = new LoginBox(options);\n\t};\n\treturn shared;\n};\nmodule.exports = LoginBox;\n\n```\n\n个人非常建议给每一个类配置一个单例选项，这非常有用。\n\n### Flash SDK\n\n如何统一的与Flash交互，也是我们需要考虑的方向。第一版的简化，在很短的时间内做了出来。主要用来区分IE和非IE的情况，IE下只识别object标签，而非IE只识别embed标签。每一个Flash注入的方法，为了方便业务开发，都进行了封装，目标是：调用简单。\n\n### 进入愉快的业务编程阶段\n\n在前期的准备工作完成之后，我们针对某一项业务进行了Test编程。\n\n一个PC站点的界面基本上是由header,content,footer构成的，在header中可能还有一些其他的业务，这些我们不管，针对具体的业务，我们需要进一步的分析界面的构成，在进入编程阶段之前，良好的分析会对进度有良好的帮助。\n\n是的，分析应该是你要做的第一件事情。\n\n我提供了一个tools.js脚本用于快速的生成view，model文件，大量重复性的代码，将由工具来辅助生成，业务编程将更专注于业务。\n\n其实最后一步，愉快的进行编程即可，运用你熟悉的jQuery API配合一些base API，轻轻松松完成了业务编程。\n\n（PS：当然也提供了mocha chia sinon的demo，来对业务进行自动化测试，毕竟测试用例还是需要业务来编写和维护，所以考虑了上述情况之后决定：业务可选，核心包未来必须补上。）\n\n### 构建可部署文件的脚本\n\n虽然我们的dev环境使用webpack来进行处理，但是它还不是我们最终想要发布的资源（首先，我希望发布目录是一个非常干净的dir，其二一些配置文件不应该出现在发布目录中，以及对.html进行hash处理）。webpack在这方面还是有些欠缺，所以最后的可部署文件，我们使用gulp来进行最后的处理：\n\n\n```JavaScript\n\n// 清理dist目录\ngulp.task('clean', function () {\n  // content\n  return gulp.src(['./dist'], {read: false}).pipe(clean());\n});\n\ngulp.task('build:rename',['build:clean'],function(){\n    return gulp.src('./dist/temp/*.html')\n        .pipe(gulp.dest('./dist/web'));\n});\n\ngulp.task('build:clean',['build:retemp'],function(){\n    return gulp.src('./dist/web/*.html',{read:false})\n        .pipe(clean());\n})\n\ngulp.task('build:retemp', ['build'], function () {\n  return gulp.src('./dist/web/*-*.html')\n    .pipe(rename(function(path){\n        var basename = path.basename.split('-');\n        if (basename.length > 1) {\n            basename.pop();\n            path.dirname = '/temp'\n            path.basename = basename.join('-');\n            path.extname = '.html';\n        }\n    }))\n    .pipe(gulp.dest('./dist'))\n});\n\n//进入build\ngulp.task('build', ['build:move'], function () {\n  var cssFilter = filter('./dist/style/*.css', {\n    restore: true\n  });\n  var jsFilter = filter('./dist/js/*.js', {\n    restore: true\n  });\n  var date = new Date();\n  var times = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate() + '   ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();\n  var banner = [\n    '/**',\n    ' * @project <%= pkg.name %>',\n    ' * @description <%=pkg.description%>',\n    ' * @version v<%= pkg.version %>',\n    ' * @time ' + times,\n    ' * @author <%= pkg.author %>',\n    ' * @copy <%= pkg.homepage %>',\n    ' */',\n    ''\n  ].join('\\n');\n\n\n    function htmlMaped (filename) {\n      return filename.replace(/[-][\\w]{10}.html/g, '.html');\n    }\n\n  return gulp.src('./dist/web/*.html')\n    .pipe(useref({\n        noAssets:false\n    }))\n    .pipe(cssFilter)\n    .pipe(cssFilter.restore)\n    .pipe(jsFilter)\n    .pipe(jsFilter.restore)\n    .pipe(rev())\n    .pipe(revReplace({\n        modifyReved: htmlMaped,\n        modifyUnreved: htmlMaped\n    }))\n    .pipe(useref())\n    .pipe(gulpif('*.js', header(banner, {pkg: pkg})))\n    .pipe(gulp.dest('./dist/web/'))\n});\n\ngulp.task('build:move', ['clean'], function () {\n  // content\n  var dontMovePath = '!./';\n  var movePath = './';\n  return gulp.src([\n      movePath + 'link/base.library.js',\n      movePath + 'link/webim.js',\n      movePath + 'link/json2.js',\n      movePath + 'img/**/*.*',\n      movePath + 'web/*.*',\n      movePath + 'flash/*.*',\n      movePath + 'style/**/*.css',\n      movePath + 'js/*.js'\n    ], {base: '.'})\n    .pipe(gulpif('*.js',uglify({\n        compress:{\n            pure_funcs:['console.log','warn']\n        }\n    })))\n    .pipe(gulpif('*.css', autoprefixer({\n      browsers: ['last 2 versions', 'Android >= 4.0'],\n      cascade: true, //是否美化属性值 默认：true 像这样：\n      //-webkit-transform: rotate(45deg);\n      //        transform: rotate(45deg);\n      remove: true //是否去掉不必要的前缀 默认：true\n    })))\n    .pipe(gulpif('*.css', minifycss()))\n    .pipe(gulp.dest('./dist/'));\n});\n```\n## 收尾工作\n\n编写文档（打算在API文档上利用JSDoc自动生成），也许还是要手工编写？主要我是想支持md格式的文件，这样将来好在我们的git系统中，可以很好的阅读。\n\n另外我们启用了eslint来进行语法检查，以及对于编程规范，考察了[airbnb/javascript](https://github.com/airbnb/javascript/tree/master/es5)和[airbnb/css](https://github.com/airbnb/css)，请原谅我偷懒，我是真觉得airbnb的规范非常赞～。\n\n## 未来，我们仍然在路上\n\n对于前端发展的探索，我们依然在路上。技术的变革，对于用户（可能感知不到），对于开发者而言，更健壮的程序，将让用户更明显的感受到体验的好坏。前端这些年的变化，还是需要每一个人自我驱动的去学习与适应。PC端的架构改造，即将告一段落。未来，将有更极致的挑战（移动和混合应用的架构设计，FE的探索{React React Native}，以及Node.js在公司产品中的落地，也许会是我们前端的CI系统，CSS动画研究，Video视频和画布方面的研究。）\n\n我们需要优秀的开发者加入，一起来完善这些，有兴趣的朋友，可以将简历发送到xiangwenwe@foxmail.com，期待～。\n\n# 更新部分 （2016-05-09）\n\n应用在PC端上的项目结构整理出来，可访问：[https://github.com/sapling-team/generator-sapling-pc](https://github.com/sapling-team/generator-sapling-pc)\n\n*注明：我们需要兼容IE8，所以使用的还是backbone。如果你追求的是更新的技术栈，我觉得你可以参考一下其他的特性，不包括backbone部分的东西。*\n\n------------------- 分割线---------------\n\n**团队编码风格检查**\n\n对于开源社区的编码规范，我考察了一系列的，比如Google，微软，Facebook，不过最后我们还是采用了`airbnb`的编码规范，我也真心的建议大家可以认真的阅读阅读。[https://github.com/airbnb/javascript/tree/master/es5](https://github.com/airbnb/javascript/tree/master/es5)，另外为了达到在`commit`期间进行一次检查，我们使用了git hook来做eslint检查，通过才允许提交。\n\n如果你写不了`shell`脚本，那你可以使用[https://github.com/typicode/husky](https://github.com/typicode/husky)这个项目。\n\n**快速生成的view，Model文件的工具**\n\n考虑到很大一部分初始化的代码，需要重复编写，比如：\n\n```JavaScript\n'use strict';\n\nvar base = require('base-extend-backbone');\nvar BaseView = base.View;\n\nvar View = BaseView.extend({\n  el: '',\n  rawLoader: function () {\n    return '';\n  },\n  context: function (args) {\n    console.log(args);\n  },\n  beforeMount: function () {\n    //  初始化一些自定义属性\n  },\n  afterMount: function () {\n    //  获取findDOMNode DOM Node\n  },\n  ready: function () {\n    //  初始化\n  },\n  beforeDestroy: function () {\n    //  进入销毁之前,将引用关系设置为null\n  },\n  destroyed: function () {\n    //  销毁之后\n  }\n});\n\nmodule.exports = View;\n```\n\n所以，我们专门写了一个小脚本来辅助创建`view`，`model`文件，以提高工作效率。\n\n**第三方管理**\n\n我们使用`bower`+`npm`来管理所有的第三方资源，`bower`用在管理`jQuery`以及其自身的插件生态中，`npm`则是用来管理其他的库和自己维护的库文件。\\\n\n**include**\n\n`include`的特性在做不是单页Web应用时很有用，如果100个页面都要同时复制100百次相同的头部和尾部的话，那我也会疯的。所以，我们启用了`jade`来代替了`HTML`，并且和`html-webpack-plugin`插件配合使用。\n\n**compile.config**\n\n这个`config`配置文件主要用于在jade中编写的逻辑脚本，可以在某些情况下替换一下地址（比如CDN）,另外在一些动态化的场景中，也可以读取这个配置文件来知晓资源依赖。\n\n**目录结构**\n\n我们的目录结构是一个典型的`web app`结构：\n\n```HTML\napp/\n images/\n link/\n stylesheets/\n src\n web/\n```\n\n`images`主要用于放置图片，`link`用于管理第三方资源（ bower下载的资源放置在这里），`stylesheets`放置`sass`源文件，`src`则是放置js源文件，`web`放置jade文件。src中我们又分为了`views`，`models`，`module`三个目录，顾名思义这些是放置视图，模型，模块的目录，我们的入口文件与它们平行同级。\n\n为了`getEntry`函数可以正确的提取入口依赖名，我们采用了一致命名的原则。比如我们有一个`index`页面。\n\n- 在web中放置`index.jade`\n- 在src中放置`index.js`入口文件\n- 在src的views和models中分别创建`index`目录\n- 在src的views和models的`index`目录中创建`index`页面所需要的视图和模型\n- 在stylesheets中创建`index`目录和`index.sass`入口文件\n- 在src的`index.js`入口文件中`require('../stylesheets/index.sass')`文件\n\n启动`npm run dev` webpack即可\n","source":"_posts/issues-7.md","raw":"title: 浅谈音悦台PC端（前端开发）的改造，告别刀耕火种\ndate: 2016-03-20 11:01:01\ntags: 前端漫谈\nbanner: http://o80ub63i5.bkt.clouddn.com/image/texture-1362879_640.jpg\n---\n\n> 架构非一朝一夕，且要紧贴业务。\n\n选择一个行业确实挺难的，特别是对于我们程序员来说。试错的机会，在某些阶段比较容易，但人到了一定的年龄，谨慎会更可靠。加入音悦台，我要做的第一件事情，就是要改造之前PC端的架构。如何去紧贴业务，在改造的过程中又不至于让业务开发停滞，这对于我而言是一件非常大的考量。\n\n## 了解业务与开发方式\n\n**我们的业务**\n\n在开始设计架构之前，我决定先去充分的了解我们的业务特点，音悦台是一家以高清MV视频播放起家的公司，现在它的业务呈现于服务粉丝，包括（商城，V榜）等一系列的产品。就技术场景的特点而言，包括了有PC，Mobile，混合APP，专题页，活动页等等，它涵盖了几乎所有的技术场景，提供了一套服务粉丝的解决方案。\n\n**刀耕火种的年代**\n\n很不幸，在我来之前，我们公司的前端属于“刀耕火种”的年代，所有的代码使用`Spring MVC`来套模板，手机端项目属于WAP站点（也是`Spring MVC`）。如何最小程度的脱离（JSP）或者说最少套JSP模板的架构，是我应该最优先的考量，适量的面向接口，Ajax开发也许会有很大的改变，当然，我所面临的问题还不仅仅是这些。\n\n由于特殊原因，音悦台的前端代码是由各时期的前辈去完成的，几乎都是在赶的状态，hack了很多不一样的功能，每一个时期都风格迥异，可维护性差。对于后来者，就像一根鱼刺咔在喉咙一般，我怎么感觉到灾难，来的这么快呢。\n\n- 缺少统一的项目管理（第三方库随便乱放，光jQuery就有几个地方同时存在）\n- 部署困难，没有版本号，而且严重依赖Java环境，编写一个代码就需要重新编译Java重启服务器（配置过于复杂）\n- 缺少统一的编程规范\n- 很多函数，变量起名很随意，出现了这种`asdf`的变量名\n- 几乎没有模块化（除了WAP页使用了requirejs）\n- 组件化概念无从谈起，大量的重复代码在搭积木般的堆业务\n- 虽然我们使用git版本控制，但是却缺少工作流，大家几乎都往master分支内push代码\n\n## 建模设计与技术选型\n\n> 老板都觉得现在的前端很不科学，很痛苦（因为铁打的营盘，流水的兵。无任何文档沉淀，修改任何东西都非常困难）\n\n变革迫在眉睫，PC端的重新梳理对于我个人而言，成了我很好的练兵之所。于是，我决定将我们公司眼下PC端的需求分解出来。\n\n- 必须完美支持IE8（这个是没办法的事情）\n\t- 模块化机制的引入，解决如何维护文件\n\t- 组件化引入，与业务隔离，解决松耦合的复用\n\t- 不支持编译(js)中间语言（比如TypeScript,es2015）\n\t- 按需打包，以及自动构建\n\t\t- 引入less或者sass，解决CSS的复用\n\t\t- 引入PostCSS解决CSS代码的健壮性（比如添加前缀-ms -webkit）\n\t\t- 文档沉淀，解决（铁打的营盘，流水的兵）\n\t\t- 浏览器自动刷新，项目管理，版本控制\n\t\t- 统一编程规范与最佳实践\n- 视频行业有其特殊性，必须完美支持与Flash的交互，封装一个统一的SDK\n- 必须要支持SEO，（最少程度达标）\n- 重新定义发布部署流程\n\n<!--more-->\n\n## 技术选型\n\n根据需求分解的特征进行选型，所有的子项目都依赖于`完美支持IE8`，所以对于我的选择局限性就比较大了。\n\n**Vue.js**\n\n- [Vue.js unit tests](http://vuejs.org/unit/)\n- [Vue.js Sauce Labs](https://saucelabs.com/u/vuejs)\n\nunit tests在IE上跑不起来，我所认知的结果是：不支持IE8\n\n**React.js**\n\n虽然FB提供了运行在旧浏览器上的解决方案：[Working With the Browser](https://facebook.github.io/react/docs/working-with-the-browser.html)，但是，对于未来，博客上明确书写了将不在支持，可查看[Discontinuing IE 8 Support in React DOM](https://facebook.github.io/react/blog/2016/01/12/discontinuing-ie8-support.html)，后来我在Github上找到一个[react-ie8](https://github.com/xcatliu/react-ie8)项目，对于商业公司而言，这个解决方案还是有很大的风险，于是：放弃。\n\n**Angular1.x**\n\n对于即将到来的Angular2.x以及Angular1.x庞大而臃肿的身躯（总不能我的专题页，活动页也用上Angular1.x吧），这是我最快放弃考察的一个项目。\n\n## 那么问题来了，我该怎么办？\n\n对于基础库而言，我选择了老三项，对于一个既需要复杂业务模型（复杂交互类型的页面），又有适当简单的特点业务（活动页面），MVC分层将有助于我们分解业务编程。而且，这些也有足够的中文资料，以及文档让团队中（没有接触过MVC）的同学去学习和适应。\n\n- [jQuery 1.x]()\n- [underscore]()\n- [backbone]()\n\n当然到这里我们的设计还远远不够，我们还缺少模块化，组件化，以及对backbone适当的改造。首先，我必须对开发方式进行隔离，分为了dev和build两个环境（当然，它是我既定的目标），以及引入一些表现良好的工具来辅助开发（比如browser-sync自动刷新页面）。为了更好的管理项目以及优化代码，我选择了npm系统来管理我的第三方依赖，npm脚本钩子来帮助我执行start，dev，build，test等环境，以及webpack来完成系统内的模块化构建。老实说，首先我们用它解决了js模块化的问题，至少commonjs的风格看起来可以保持一致（但是我还需要去协助大家避免循环引用），然后处理按需打包的问题（至少很长一段时间里我们的PC端还将是传统的页面而不是webapp）。\n\n关于webpack的应用以及多资源打包，推荐大家阅读我的另一篇文章：[webpack在PC项目中的应用](https://github.com/icepy/_posts/issues/25)\n\n### 目录结构设计\n\n对于传统的项目（`Spring MVC`），我们进行了一些适当的改变。当然，我们总体的目标，是在向面向接口开发来靠近。\n\n\tProject_dev  根目录\n\t\tdist 经过编译之后可发布的目录\n\t\tflash 内部swf文件放置的目录\n\t\tlink 内部自己开发或者未兼容Commonjs的库（未建立私人NPM服务仓库）\n\t\tstatic 切图的静态页面放置的目录\n\t\tweb 入口页面（用户访问的地址）\n\t\ttest 单元测试\n\t\timg 图片资源\n\t\tmock 本地模拟数据\n\t\tcross-url 跨域url（兼容老Spring MVC）\n\t\tjs //经过webpack打包之后的文件\n\t\tsrc //js源文件\n\t\t\tview 视图目录\n\t\t\t\tindex  业务模块\n\t\t\t\t\ttopbar.view.js\n\t\t\tmodel 模型目录\n\t\t\t\tindex\n\t\t\t\t\ttopbar.model.js\n\t\t\ttemplate 模板\n\t\t\t\tindex\n\t\t\t\t\ttopbar.html\n\t\t\tconfig.js\t//项目配置文件\n\t\t\tindex.main.js  //入口文件\n\t\tstyle\n\t\t\tcss //less编译之后的文件\n\t\t\tless //less源代码文件\n\t\t\treset.css  //公共文件\n\t\t.eslintrc\n\t\t.gitignore\n\t\tREADME.md\n\t\tgulpfile.js\n\t\tpackage.json\n\t\tmap.json\n\t\ttools.js //提供的工具，快速生成view，model文件\n\t\twebpack.dev.config.js\n\n最后可发布的目录结构：\n\n\tProject_build\n\n\t\tjs //处理过后的js文件\n\t\tstyle //处理过后的css文件\n\t\tweb //用户访问的真实页面\n\t\tlink //处理过后的第三方库或内部自己开发的库\n\t\tflash //swf文件\n\t\tcross-url //兼容（Spring MVC）的跨域\n\n对于我们的git则启用了一个基础的git flow工作流，避免大家push到master分支，每一次的发布都必须有足够的备份。\n\n### 第三方库整合\n\n针对第三方库的整合是规避了一些基础控件（除非有自己研发的需求），列表如下：\n\n- Swipe（轮播图）\n- 腾讯云 SDK\n- artTemplate\n- amazeui（参考较多）\n\n### backbone改造\n\n原始的`backbone`并不能很好适应我们的业务产品，它虽然有backbone.Router，但是却缺少基于路由的生命周期，它的Model也不是很健壮（可配置性以及数据的本地缓存），当然它的View是我们经常要使用的，但是却缺少相应的钩子方法，于是对于它们适当的改造，有助于公司产品的业务开发（便捷）以及稳定性。\n\n- baseView\n- baseModel\n- baseRouter\n\n`baseView`实现了相应的钩子方法，比如`rawLoader`，`beforeMount`，`afterMount`，`ready`等，对于参数传递也有了一些规范性的定义，比如：\n\n```JavaScript\n\n{\n\t\"props\":{},  \n\t\"methods\":{},\n\t\"state\":{}\n}\n\n\n```\n\nUI渲染依赖的数据通过`props`传递，外部可能用到的方法通过`methods`传递，内部需要维护的状态可以通过`state`传递，规范参数的目标是对一些写法进行约束，在排错时可以更容易定位到错误。\n\n`baseModel`除了实现了一个beforeEmit钩子外，基本上扩展和包装了一些便捷的存取方法，比如`$get`，`$set`，`$filter`，`$sort`，以及发送请求的便捷方式。\n\n`baseRouter`主要是实现了基于路由的生命周期（为了webapp准备的，可能未来会有要求兼容IE8的Webapp）。\n\n### 编写组件\n\n组件化从开发的角度来看，由于每个组件的相对独立性，开发者在开发期间不会产生依赖冲突，只需专注于自身的模块开发，提高开发效率；从维护的角度来看，于模块相关的资源均组织在一起，十分便于维护和整理。对于组件，我们进行了一些额外的处理，一个组件最少需要包含template.html以及index.js两个文件，比如：\n\n\tloginBox //目录\n\t\ttemplate //目录\n\t\t\tclose.html\n\t\t\tlogin.html\n\t\tindex.js\n\n\n我们的css文件放置在style目录下，它是一个less文件，当业务编程需要时，自己在自己的业务less文件中`@import url('common/footer.less');`即可，毕竟我们最终需要一个link css文件，而不是内嵌在html中，webpack帮助我们在dev环境中，既对这些东西进行了处理。\n\n在index.js文件中，只需要根据我们指定好的一些规则书写即可：\n\n规则一，继承baseView的组件\n\n```JavaScript\n\nvar BaseView = require('BaseView');\nvar closeTemp = require('./template/close.html');\nvar loginTemp = require('./template/login.html');\nvar LoginBox = BaseView.extend({\n\tevents:{\n\n\t},\n\tbeforeMount:function(){\n\n\t},\n\tafterMount:function(){\n\n\t},\n\tready:function(options){\n\t\tvar props = options.props;\n\t\tvar state = options.state;\n\t\tvar methods = options.methods;\n\t}\n});\nvar shared = null;\nLoginBox.sharedInstanceLoginBox = function(options){\n\tif(!shared){\n\t\tshared = new LoginBox(options);\n\t};\n\treturn shared;\n};\nmodule.exports = LoginBox;\n\n```\n\n规则二，不继承baseView的组件\n\n```JavaScript\n\nvar closeTemp = require('./template/close.html');\nvar loginTemp = require('./template/login.html');\nvar LoginBox = function(options){\n\tvar props = options.props;\n\tvar state = options.state;\n\tvar methods = options.methods;\n};\nvar shared = null;\nLoginBox.sharedInstanceLoginBox = function(options){\n\tif(!shared){\n\t\tshared = new LoginBox(options);\n\t};\n\treturn shared;\n};\nmodule.exports = LoginBox;\n\n```\n\n个人非常建议给每一个类配置一个单例选项，这非常有用。\n\n### Flash SDK\n\n如何统一的与Flash交互，也是我们需要考虑的方向。第一版的简化，在很短的时间内做了出来。主要用来区分IE和非IE的情况，IE下只识别object标签，而非IE只识别embed标签。每一个Flash注入的方法，为了方便业务开发，都进行了封装，目标是：调用简单。\n\n### 进入愉快的业务编程阶段\n\n在前期的准备工作完成之后，我们针对某一项业务进行了Test编程。\n\n一个PC站点的界面基本上是由header,content,footer构成的，在header中可能还有一些其他的业务，这些我们不管，针对具体的业务，我们需要进一步的分析界面的构成，在进入编程阶段之前，良好的分析会对进度有良好的帮助。\n\n是的，分析应该是你要做的第一件事情。\n\n我提供了一个tools.js脚本用于快速的生成view，model文件，大量重复性的代码，将由工具来辅助生成，业务编程将更专注于业务。\n\n其实最后一步，愉快的进行编程即可，运用你熟悉的jQuery API配合一些base API，轻轻松松完成了业务编程。\n\n（PS：当然也提供了mocha chia sinon的demo，来对业务进行自动化测试，毕竟测试用例还是需要业务来编写和维护，所以考虑了上述情况之后决定：业务可选，核心包未来必须补上。）\n\n### 构建可部署文件的脚本\n\n虽然我们的dev环境使用webpack来进行处理，但是它还不是我们最终想要发布的资源（首先，我希望发布目录是一个非常干净的dir，其二一些配置文件不应该出现在发布目录中，以及对.html进行hash处理）。webpack在这方面还是有些欠缺，所以最后的可部署文件，我们使用gulp来进行最后的处理：\n\n\n```JavaScript\n\n// 清理dist目录\ngulp.task('clean', function () {\n  // content\n  return gulp.src(['./dist'], {read: false}).pipe(clean());\n});\n\ngulp.task('build:rename',['build:clean'],function(){\n    return gulp.src('./dist/temp/*.html')\n        .pipe(gulp.dest('./dist/web'));\n});\n\ngulp.task('build:clean',['build:retemp'],function(){\n    return gulp.src('./dist/web/*.html',{read:false})\n        .pipe(clean());\n})\n\ngulp.task('build:retemp', ['build'], function () {\n  return gulp.src('./dist/web/*-*.html')\n    .pipe(rename(function(path){\n        var basename = path.basename.split('-');\n        if (basename.length > 1) {\n            basename.pop();\n            path.dirname = '/temp'\n            path.basename = basename.join('-');\n            path.extname = '.html';\n        }\n    }))\n    .pipe(gulp.dest('./dist'))\n});\n\n//进入build\ngulp.task('build', ['build:move'], function () {\n  var cssFilter = filter('./dist/style/*.css', {\n    restore: true\n  });\n  var jsFilter = filter('./dist/js/*.js', {\n    restore: true\n  });\n  var date = new Date();\n  var times = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate() + '   ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();\n  var banner = [\n    '/**',\n    ' * @project <%= pkg.name %>',\n    ' * @description <%=pkg.description%>',\n    ' * @version v<%= pkg.version %>',\n    ' * @time ' + times,\n    ' * @author <%= pkg.author %>',\n    ' * @copy <%= pkg.homepage %>',\n    ' */',\n    ''\n  ].join('\\n');\n\n\n    function htmlMaped (filename) {\n      return filename.replace(/[-][\\w]{10}.html/g, '.html');\n    }\n\n  return gulp.src('./dist/web/*.html')\n    .pipe(useref({\n        noAssets:false\n    }))\n    .pipe(cssFilter)\n    .pipe(cssFilter.restore)\n    .pipe(jsFilter)\n    .pipe(jsFilter.restore)\n    .pipe(rev())\n    .pipe(revReplace({\n        modifyReved: htmlMaped,\n        modifyUnreved: htmlMaped\n    }))\n    .pipe(useref())\n    .pipe(gulpif('*.js', header(banner, {pkg: pkg})))\n    .pipe(gulp.dest('./dist/web/'))\n});\n\ngulp.task('build:move', ['clean'], function () {\n  // content\n  var dontMovePath = '!./';\n  var movePath = './';\n  return gulp.src([\n      movePath + 'link/base.library.js',\n      movePath + 'link/webim.js',\n      movePath + 'link/json2.js',\n      movePath + 'img/**/*.*',\n      movePath + 'web/*.*',\n      movePath + 'flash/*.*',\n      movePath + 'style/**/*.css',\n      movePath + 'js/*.js'\n    ], {base: '.'})\n    .pipe(gulpif('*.js',uglify({\n        compress:{\n            pure_funcs:['console.log','warn']\n        }\n    })))\n    .pipe(gulpif('*.css', autoprefixer({\n      browsers: ['last 2 versions', 'Android >= 4.0'],\n      cascade: true, //是否美化属性值 默认：true 像这样：\n      //-webkit-transform: rotate(45deg);\n      //        transform: rotate(45deg);\n      remove: true //是否去掉不必要的前缀 默认：true\n    })))\n    .pipe(gulpif('*.css', minifycss()))\n    .pipe(gulp.dest('./dist/'));\n});\n```\n## 收尾工作\n\n编写文档（打算在API文档上利用JSDoc自动生成），也许还是要手工编写？主要我是想支持md格式的文件，这样将来好在我们的git系统中，可以很好的阅读。\n\n另外我们启用了eslint来进行语法检查，以及对于编程规范，考察了[airbnb/javascript](https://github.com/airbnb/javascript/tree/master/es5)和[airbnb/css](https://github.com/airbnb/css)，请原谅我偷懒，我是真觉得airbnb的规范非常赞～。\n\n## 未来，我们仍然在路上\n\n对于前端发展的探索，我们依然在路上。技术的变革，对于用户（可能感知不到），对于开发者而言，更健壮的程序，将让用户更明显的感受到体验的好坏。前端这些年的变化，还是需要每一个人自我驱动的去学习与适应。PC端的架构改造，即将告一段落。未来，将有更极致的挑战（移动和混合应用的架构设计，FE的探索{React React Native}，以及Node.js在公司产品中的落地，也许会是我们前端的CI系统，CSS动画研究，Video视频和画布方面的研究。）\n\n我们需要优秀的开发者加入，一起来完善这些，有兴趣的朋友，可以将简历发送到xiangwenwe@foxmail.com，期待～。\n\n# 更新部分 （2016-05-09）\n\n应用在PC端上的项目结构整理出来，可访问：[https://github.com/sapling-team/generator-sapling-pc](https://github.com/sapling-team/generator-sapling-pc)\n\n*注明：我们需要兼容IE8，所以使用的还是backbone。如果你追求的是更新的技术栈，我觉得你可以参考一下其他的特性，不包括backbone部分的东西。*\n\n------------------- 分割线---------------\n\n**团队编码风格检查**\n\n对于开源社区的编码规范，我考察了一系列的，比如Google，微软，Facebook，不过最后我们还是采用了`airbnb`的编码规范，我也真心的建议大家可以认真的阅读阅读。[https://github.com/airbnb/javascript/tree/master/es5](https://github.com/airbnb/javascript/tree/master/es5)，另外为了达到在`commit`期间进行一次检查，我们使用了git hook来做eslint检查，通过才允许提交。\n\n如果你写不了`shell`脚本，那你可以使用[https://github.com/typicode/husky](https://github.com/typicode/husky)这个项目。\n\n**快速生成的view，Model文件的工具**\n\n考虑到很大一部分初始化的代码，需要重复编写，比如：\n\n```JavaScript\n'use strict';\n\nvar base = require('base-extend-backbone');\nvar BaseView = base.View;\n\nvar View = BaseView.extend({\n  el: '',\n  rawLoader: function () {\n    return '';\n  },\n  context: function (args) {\n    console.log(args);\n  },\n  beforeMount: function () {\n    //  初始化一些自定义属性\n  },\n  afterMount: function () {\n    //  获取findDOMNode DOM Node\n  },\n  ready: function () {\n    //  初始化\n  },\n  beforeDestroy: function () {\n    //  进入销毁之前,将引用关系设置为null\n  },\n  destroyed: function () {\n    //  销毁之后\n  }\n});\n\nmodule.exports = View;\n```\n\n所以，我们专门写了一个小脚本来辅助创建`view`，`model`文件，以提高工作效率。\n\n**第三方管理**\n\n我们使用`bower`+`npm`来管理所有的第三方资源，`bower`用在管理`jQuery`以及其自身的插件生态中，`npm`则是用来管理其他的库和自己维护的库文件。\\\n\n**include**\n\n`include`的特性在做不是单页Web应用时很有用，如果100个页面都要同时复制100百次相同的头部和尾部的话，那我也会疯的。所以，我们启用了`jade`来代替了`HTML`，并且和`html-webpack-plugin`插件配合使用。\n\n**compile.config**\n\n这个`config`配置文件主要用于在jade中编写的逻辑脚本，可以在某些情况下替换一下地址（比如CDN）,另外在一些动态化的场景中，也可以读取这个配置文件来知晓资源依赖。\n\n**目录结构**\n\n我们的目录结构是一个典型的`web app`结构：\n\n```HTML\napp/\n images/\n link/\n stylesheets/\n src\n web/\n```\n\n`images`主要用于放置图片，`link`用于管理第三方资源（ bower下载的资源放置在这里），`stylesheets`放置`sass`源文件，`src`则是放置js源文件，`web`放置jade文件。src中我们又分为了`views`，`models`，`module`三个目录，顾名思义这些是放置视图，模型，模块的目录，我们的入口文件与它们平行同级。\n\n为了`getEntry`函数可以正确的提取入口依赖名，我们采用了一致命名的原则。比如我们有一个`index`页面。\n\n- 在web中放置`index.jade`\n- 在src中放置`index.js`入口文件\n- 在src的views和models中分别创建`index`目录\n- 在src的views和models的`index`目录中创建`index`页面所需要的视图和模型\n- 在stylesheets中创建`index`目录和`index.sass`入口文件\n- 在src的`index.js`入口文件中`require('../stylesheets/index.sass')`文件\n\n启动`npm run dev` webpack即可\n","slug":"issues-7","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk0n000quejri1njya4k","content":"<blockquote>\n<p>架构非一朝一夕，且要紧贴业务。</p>\n</blockquote>\n<p>选择一个行业确实挺难的，特别是对于我们程序员来说。试错的机会，在某些阶段比较容易，但人到了一定的年龄，谨慎会更可靠。加入音悦台，我要做的第一件事情，就是要改造之前PC端的架构。如何去紧贴业务，在改造的过程中又不至于让业务开发停滞，这对于我而言是一件非常大的考量。</p>\n<h2 id=\"了解业务与开发方式\"><a href=\"#了解业务与开发方式\" class=\"headerlink\" title=\"了解业务与开发方式\"></a>了解业务与开发方式</h2><p><strong>我们的业务</strong></p>\n<p>在开始设计架构之前，我决定先去充分的了解我们的业务特点，音悦台是一家以高清MV视频播放起家的公司，现在它的业务呈现于服务粉丝，包括（商城，V榜）等一系列的产品。就技术场景的特点而言，包括了有PC，Mobile，混合APP，专题页，活动页等等，它涵盖了几乎所有的技术场景，提供了一套服务粉丝的解决方案。</p>\n<p><strong>刀耕火种的年代</strong></p>\n<p>很不幸，在我来之前，我们公司的前端属于“刀耕火种”的年代，所有的代码使用<code>Spring MVC</code>来套模板，手机端项目属于WAP站点（也是<code>Spring MVC</code>）。如何最小程度的脱离（JSP）或者说最少套JSP模板的架构，是我应该最优先的考量，适量的面向接口，Ajax开发也许会有很大的改变，当然，我所面临的问题还不仅仅是这些。</p>\n<p>由于特殊原因，音悦台的前端代码是由各时期的前辈去完成的，几乎都是在赶的状态，hack了很多不一样的功能，每一个时期都风格迥异，可维护性差。对于后来者，就像一根鱼刺咔在喉咙一般，我怎么感觉到灾难，来的这么快呢。</p>\n<ul>\n<li>缺少统一的项目管理（第三方库随便乱放，光jQuery就有几个地方同时存在）</li>\n<li>部署困难，没有版本号，而且严重依赖Java环境，编写一个代码就需要重新编译Java重启服务器（配置过于复杂）</li>\n<li>缺少统一的编程规范</li>\n<li>很多函数，变量起名很随意，出现了这种<code>asdf</code>的变量名</li>\n<li>几乎没有模块化（除了WAP页使用了requirejs）</li>\n<li>组件化概念无从谈起，大量的重复代码在搭积木般的堆业务</li>\n<li>虽然我们使用git版本控制，但是却缺少工作流，大家几乎都往master分支内push代码</li>\n</ul>\n<h2 id=\"建模设计与技术选型\"><a href=\"#建模设计与技术选型\" class=\"headerlink\" title=\"建模设计与技术选型\"></a>建模设计与技术选型</h2><blockquote>\n<p>老板都觉得现在的前端很不科学，很痛苦（因为铁打的营盘，流水的兵。无任何文档沉淀，修改任何东西都非常困难）</p>\n</blockquote>\n<p>变革迫在眉睫，PC端的重新梳理对于我个人而言，成了我很好的练兵之所。于是，我决定将我们公司眼下PC端的需求分解出来。</p>\n<ul>\n<li>必须完美支持IE8（这个是没办法的事情）<ul>\n<li>模块化机制的引入，解决如何维护文件</li>\n<li>组件化引入，与业务隔离，解决松耦合的复用</li>\n<li>不支持编译(js)中间语言（比如TypeScript,es2015）</li>\n<li>按需打包，以及自动构建<ul>\n<li>引入less或者sass，解决CSS的复用</li>\n<li>引入PostCSS解决CSS代码的健壮性（比如添加前缀-ms -webkit）</li>\n<li>文档沉淀，解决（铁打的营盘，流水的兵）</li>\n<li>浏览器自动刷新，项目管理，版本控制</li>\n<li>统一编程规范与最佳实践</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>视频行业有其特殊性，必须完美支持与Flash的交互，封装一个统一的SDK</li>\n<li>必须要支持SEO，（最少程度达标）</li>\n<li>重新定义发布部署流程</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h2><p>根据需求分解的特征进行选型，所有的子项目都依赖于<code>完美支持IE8</code>，所以对于我的选择局限性就比较大了。</p>\n<p><strong>Vue.js</strong></p>\n<ul>\n<li><a href=\"http://vuejs.org/unit/\" target=\"_blank\" rel=\"external\">Vue.js unit tests</a></li>\n<li><a href=\"https://saucelabs.com/u/vuejs\" target=\"_blank\" rel=\"external\">Vue.js Sauce Labs</a></li>\n</ul>\n<p>unit tests在IE上跑不起来，我所认知的结果是：不支持IE8</p>\n<p><strong>React.js</strong></p>\n<p>虽然FB提供了运行在旧浏览器上的解决方案：<a href=\"https://facebook.github.io/react/docs/working-with-the-browser.html\" target=\"_blank\" rel=\"external\">Working With the Browser</a>，但是，对于未来，博客上明确书写了将不在支持，可查看<a href=\"https://facebook.github.io/react/blog/2016/01/12/discontinuing-ie8-support.html\" target=\"_blank\" rel=\"external\">Discontinuing IE 8 Support in React DOM</a>，后来我在Github上找到一个<a href=\"https://github.com/xcatliu/react-ie8\" target=\"_blank\" rel=\"external\">react-ie8</a>项目，对于商业公司而言，这个解决方案还是有很大的风险，于是：放弃。</p>\n<p><strong>Angular1.x</strong></p>\n<p>对于即将到来的Angular2.x以及Angular1.x庞大而臃肿的身躯（总不能我的专题页，活动页也用上Angular1.x吧），这是我最快放弃考察的一个项目。</p>\n<h2 id=\"那么问题来了，我该怎么办？\"><a href=\"#那么问题来了，我该怎么办？\" class=\"headerlink\" title=\"那么问题来了，我该怎么办？\"></a>那么问题来了，我该怎么办？</h2><p>对于基础库而言，我选择了老三项，对于一个既需要复杂业务模型（复杂交互类型的页面），又有适当简单的特点业务（活动页面），MVC分层将有助于我们分解业务编程。而且，这些也有足够的中文资料，以及文档让团队中（没有接触过MVC）的同学去学习和适应。</p>\n<ul>\n<li><a href=\"\">jQuery 1.x</a></li>\n<li><a href=\"\">underscore</a></li>\n<li><a href=\"\">backbone</a></li>\n</ul>\n<p>当然到这里我们的设计还远远不够，我们还缺少模块化，组件化，以及对backbone适当的改造。首先，我必须对开发方式进行隔离，分为了dev和build两个环境（当然，它是我既定的目标），以及引入一些表现良好的工具来辅助开发（比如browser-sync自动刷新页面）。为了更好的管理项目以及优化代码，我选择了npm系统来管理我的第三方依赖，npm脚本钩子来帮助我执行start，dev，build，test等环境，以及webpack来完成系统内的模块化构建。老实说，首先我们用它解决了js模块化的问题，至少commonjs的风格看起来可以保持一致（但是我还需要去协助大家避免循环引用），然后处理按需打包的问题（至少很长一段时间里我们的PC端还将是传统的页面而不是webapp）。</p>\n<p>关于webpack的应用以及多资源打包，推荐大家阅读我的另一篇文章：<a href=\"https://github.com/icepy/_posts/issues/25\" target=\"_blank\" rel=\"external\">webpack在PC项目中的应用</a></p>\n<h3 id=\"目录结构设计\"><a href=\"#目录结构设计\" class=\"headerlink\" title=\"目录结构设计\"></a>目录结构设计</h3><p>对于传统的项目（<code>Spring MVC</code>），我们进行了一些适当的改变。当然，我们总体的目标，是在向面向接口开发来靠近。</p>\n<pre><code>Project_dev  根目录\n    dist 经过编译之后可发布的目录\n    flash 内部swf文件放置的目录\n    link 内部自己开发或者未兼容Commonjs的库（未建立私人NPM服务仓库）\n    static 切图的静态页面放置的目录\n    web 入口页面（用户访问的地址）\n    test 单元测试\n    img 图片资源\n    mock 本地模拟数据\n    cross-url 跨域url（兼容老Spring MVC）\n    js //经过webpack打包之后的文件\n    src //js源文件\n        view 视图目录\n            index  业务模块\n                topbar.view.js\n        model 模型目录\n            index\n                topbar.model.js\n        template 模板\n            index\n                topbar.html\n        config.js    //项目配置文件\n        index.main.js  //入口文件\n    style\n        css //less编译之后的文件\n        less //less源代码文件\n        reset.css  //公共文件\n    .eslintrc\n    .gitignore\n    README.md\n    gulpfile.js\n    package.json\n    map.json\n    tools.js //提供的工具，快速生成view，model文件\n    webpack.dev.config.js\n</code></pre><p>最后可发布的目录结构：</p>\n<pre><code>Project_build\n\n    js //处理过后的js文件\n    style //处理过后的css文件\n    web //用户访问的真实页面\n    link //处理过后的第三方库或内部自己开发的库\n    flash //swf文件\n    cross-url //兼容（Spring MVC）的跨域\n</code></pre><p>对于我们的git则启用了一个基础的git flow工作流，避免大家push到master分支，每一次的发布都必须有足够的备份。</p>\n<h3 id=\"第三方库整合\"><a href=\"#第三方库整合\" class=\"headerlink\" title=\"第三方库整合\"></a>第三方库整合</h3><p>针对第三方库的整合是规避了一些基础控件（除非有自己研发的需求），列表如下：</p>\n<ul>\n<li>Swipe（轮播图）</li>\n<li>腾讯云 SDK</li>\n<li>artTemplate</li>\n<li>amazeui（参考较多）</li>\n</ul>\n<h3 id=\"backbone改造\"><a href=\"#backbone改造\" class=\"headerlink\" title=\"backbone改造\"></a>backbone改造</h3><p>原始的<code>backbone</code>并不能很好适应我们的业务产品，它虽然有backbone.Router，但是却缺少基于路由的生命周期，它的Model也不是很健壮（可配置性以及数据的本地缓存），当然它的View是我们经常要使用的，但是却缺少相应的钩子方法，于是对于它们适当的改造，有助于公司产品的业务开发（便捷）以及稳定性。</p>\n<ul>\n<li>baseView</li>\n<li>baseModel</li>\n<li>baseRouter</li>\n</ul>\n<p><code>baseView</code>实现了相应的钩子方法，比如<code>rawLoader</code>，<code>beforeMount</code>，<code>afterMount</code>，<code>ready</code>等，对于参数传递也有了一些规范性的定义，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"props\"</span>:&#123;&#125;,  </span><br><span class=\"line\">\t<span class=\"string\">\"methods\"</span>:&#123;&#125;,</span><br><span class=\"line\">\t<span class=\"string\">\"state\"</span>:&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>UI渲染依赖的数据通过<code>props</code>传递，外部可能用到的方法通过<code>methods</code>传递，内部需要维护的状态可以通过<code>state</code>传递，规范参数的目标是对一些写法进行约束，在排错时可以更容易定位到错误。</p>\n<p><code>baseModel</code>除了实现了一个beforeEmit钩子外，基本上扩展和包装了一些便捷的存取方法，比如<code>$get</code>，<code>$set</code>，<code>$filter</code>，<code>$sort</code>，以及发送请求的便捷方式。</p>\n<p><code>baseRouter</code>主要是实现了基于路由的生命周期（为了webapp准备的，可能未来会有要求兼容IE8的Webapp）。</p>\n<h3 id=\"编写组件\"><a href=\"#编写组件\" class=\"headerlink\" title=\"编写组件\"></a>编写组件</h3><p>组件化从开发的角度来看，由于每个组件的相对独立性，开发者在开发期间不会产生依赖冲突，只需专注于自身的模块开发，提高开发效率；从维护的角度来看，于模块相关的资源均组织在一起，十分便于维护和整理。对于组件，我们进行了一些额外的处理，一个组件最少需要包含template.html以及index.js两个文件，比如：</p>\n<pre><code>loginBox //目录\n    template //目录\n        close.html\n        login.html\n    index.js\n</code></pre><p>我们的css文件放置在style目录下，它是一个less文件，当业务编程需要时，自己在自己的业务less文件中<code>@import url(&#39;common/footer.less&#39;);</code>即可，毕竟我们最终需要一个link css文件，而不是内嵌在html中，webpack帮助我们在dev环境中，既对这些东西进行了处理。</p>\n<p>在index.js文件中，只需要根据我们指定好的一些规则书写即可：</p>\n<p>规则一，继承baseView的组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> BaseView = <span class=\"built_in\">require</span>(<span class=\"string\">'BaseView'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> closeTemp = <span class=\"built_in\">require</span>(<span class=\"string\">'./template/close.html'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> loginTemp = <span class=\"built_in\">require</span>(<span class=\"string\">'./template/login.html'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> LoginBox = BaseView.extend(&#123;</span><br><span class=\"line\">\tevents:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tbeforeMount:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tafterMount:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tready:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> props = options.props;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> state = options.state;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> methods = options.methods;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> shared = <span class=\"literal\">null</span>;</span><br><span class=\"line\">LoginBox.sharedInstanceLoginBox = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!shared)&#123;</span><br><span class=\"line\">\t\tshared = <span class=\"keyword\">new</span> LoginBox(options);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> shared;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = LoginBox;</span><br></pre></td></tr></table></figure>\n<p>规则二，不继承baseView的组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> closeTemp = <span class=\"built_in\">require</span>(<span class=\"string\">'./template/close.html'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> loginTemp = <span class=\"built_in\">require</span>(<span class=\"string\">'./template/login.html'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> LoginBox = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> props = options.props;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> state = options.state;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> methods = options.methods;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> shared = <span class=\"literal\">null</span>;</span><br><span class=\"line\">LoginBox.sharedInstanceLoginBox = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!shared)&#123;</span><br><span class=\"line\">\t\tshared = <span class=\"keyword\">new</span> LoginBox(options);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> shared;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = LoginBox;</span><br></pre></td></tr></table></figure>\n<p>个人非常建议给每一个类配置一个单例选项，这非常有用。</p>\n<h3 id=\"Flash-SDK\"><a href=\"#Flash-SDK\" class=\"headerlink\" title=\"Flash SDK\"></a>Flash SDK</h3><p>如何统一的与Flash交互，也是我们需要考虑的方向。第一版的简化，在很短的时间内做了出来。主要用来区分IE和非IE的情况，IE下只识别object标签，而非IE只识别embed标签。每一个Flash注入的方法，为了方便业务开发，都进行了封装，目标是：调用简单。</p>\n<h3 id=\"进入愉快的业务编程阶段\"><a href=\"#进入愉快的业务编程阶段\" class=\"headerlink\" title=\"进入愉快的业务编程阶段\"></a>进入愉快的业务编程阶段</h3><p>在前期的准备工作完成之后，我们针对某一项业务进行了Test编程。</p>\n<p>一个PC站点的界面基本上是由header,content,footer构成的，在header中可能还有一些其他的业务，这些我们不管，针对具体的业务，我们需要进一步的分析界面的构成，在进入编程阶段之前，良好的分析会对进度有良好的帮助。</p>\n<p>是的，分析应该是你要做的第一件事情。</p>\n<p>我提供了一个tools.js脚本用于快速的生成view，model文件，大量重复性的代码，将由工具来辅助生成，业务编程将更专注于业务。</p>\n<p>其实最后一步，愉快的进行编程即可，运用你熟悉的jQuery API配合一些base API，轻轻松松完成了业务编程。</p>\n<p>（PS：当然也提供了mocha chia sinon的demo，来对业务进行自动化测试，毕竟测试用例还是需要业务来编写和维护，所以考虑了上述情况之后决定：业务可选，核心包未来必须补上。）</p>\n<h3 id=\"构建可部署文件的脚本\"><a href=\"#构建可部署文件的脚本\" class=\"headerlink\" title=\"构建可部署文件的脚本\"></a>构建可部署文件的脚本</h3><p>虽然我们的dev环境使用webpack来进行处理，但是它还不是我们最终想要发布的资源（首先，我希望发布目录是一个非常干净的dir，其二一些配置文件不应该出现在发布目录中，以及对.html进行hash处理）。webpack在这方面还是有些欠缺，所以最后的可部署文件，我们使用gulp来进行最后的处理：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清理dist目录</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'clean'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// content</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'./dist'</span>], &#123;read: <span class=\"literal\">false</span>&#125;).pipe(clean());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'build:rename'</span>,[<span class=\"string\">'build:clean'</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./dist/temp/*.html'</span>)</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./dist/web'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'build:clean'</span>,[<span class=\"string\">'build:retemp'</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./dist/web/*.html'</span>,&#123;read:<span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\">        .pipe(clean());</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'build:retemp'</span>, [<span class=\"string\">'build'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./dist/web/*-*.html'</span>)</span><br><span class=\"line\">    .pipe(rename(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">path</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> basename = path.basename.split(<span class=\"string\">'-'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (basename.length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            basename.pop();</span><br><span class=\"line\">            path.dirname = <span class=\"string\">'/temp'</span></span><br><span class=\"line\">            path.basename = basename.join(<span class=\"string\">'-'</span>);</span><br><span class=\"line\">            path.extname = <span class=\"string\">'.html'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./dist'</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//进入build</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'build'</span>, [<span class=\"string\">'build:move'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cssFilter = filter(<span class=\"string\">'./dist/style/*.css'</span>, &#123;</span><br><span class=\"line\">    restore: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> jsFilter = filter(<span class=\"string\">'./dist/js/*.js'</span>, &#123;</span><br><span class=\"line\">    restore: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> times = date.getFullYear() + <span class=\"string\">'-'</span> + (date.getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">'-'</span> + date.getDate() + <span class=\"string\">'   '</span> + date.getHours() + <span class=\"string\">':'</span> + date.getMinutes() + <span class=\"string\">':'</span> + date.getSeconds();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> banner = [</span><br><span class=\"line\">    <span class=\"string\">'/**'</span>,</span><br><span class=\"line\">    <span class=\"string\">' * @project &lt;%= pkg.name %&gt;'</span>,</span><br><span class=\"line\">    <span class=\"string\">' * @description &lt;%=pkg.description%&gt;'</span>,</span><br><span class=\"line\">    <span class=\"string\">' * @version v&lt;%= pkg.version %&gt;'</span>,</span><br><span class=\"line\">    <span class=\"string\">' * @time '</span> + times,</span><br><span class=\"line\">    <span class=\"string\">' * @author &lt;%= pkg.author %&gt;'</span>,</span><br><span class=\"line\">    <span class=\"string\">' * @copy &lt;%= pkg.homepage %&gt;'</span>,</span><br><span class=\"line\">    <span class=\"string\">' */'</span>,</span><br><span class=\"line\">    <span class=\"string\">''</span></span><br><span class=\"line\">  ].join(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">htmlMaped</span> (<span class=\"params\">filename</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> filename.replace(<span class=\"regexp\">/[-][\\w]&#123;10&#125;.html/g</span>, <span class=\"string\">'.html'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./dist/web/*.html'</span>)</span><br><span class=\"line\">    .pipe(useref(&#123;</span><br><span class=\"line\">        noAssets:<span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .pipe(cssFilter)</span><br><span class=\"line\">    .pipe(cssFilter.restore)</span><br><span class=\"line\">    .pipe(jsFilter)</span><br><span class=\"line\">    .pipe(jsFilter.restore)</span><br><span class=\"line\">    .pipe(rev())</span><br><span class=\"line\">    .pipe(revReplace(&#123;</span><br><span class=\"line\">        modifyReved: htmlMaped,</span><br><span class=\"line\">        modifyUnreved: htmlMaped</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .pipe(useref())</span><br><span class=\"line\">    .pipe(gulpif(<span class=\"string\">'*.js'</span>, header(banner, &#123;pkg: pkg&#125;)))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./dist/web/'</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'build:move'</span>, [<span class=\"string\">'clean'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// content</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> dontMovePath = <span class=\"string\">'!./'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> movePath = <span class=\"string\">'./'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src([</span><br><span class=\"line\">      movePath + <span class=\"string\">'link/base.library.js'</span>,</span><br><span class=\"line\">      movePath + <span class=\"string\">'link/webim.js'</span>,</span><br><span class=\"line\">      movePath + <span class=\"string\">'link/json2.js'</span>,</span><br><span class=\"line\">      movePath + <span class=\"string\">'img/**/*.*'</span>,</span><br><span class=\"line\">      movePath + <span class=\"string\">'web/*.*'</span>,</span><br><span class=\"line\">      movePath + <span class=\"string\">'flash/*.*'</span>,</span><br><span class=\"line\">      movePath + <span class=\"string\">'style/**/*.css'</span>,</span><br><span class=\"line\">      movePath + <span class=\"string\">'js/*.js'</span></span><br><span class=\"line\">    ], &#123;base: <span class=\"string\">'.'</span>&#125;)</span><br><span class=\"line\">    .pipe(gulpif(<span class=\"string\">'*.js'</span>,uglify(&#123;</span><br><span class=\"line\">        compress:&#123;</span><br><span class=\"line\">            pure_funcs:[<span class=\"string\">'console.log'</span>,<span class=\"string\">'warn'</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)))</span><br><span class=\"line\">    .pipe(gulpif(<span class=\"string\">'*.css'</span>, autoprefixer(&#123;</span><br><span class=\"line\">      browsers: [<span class=\"string\">'last 2 versions'</span>, <span class=\"string\">'Android &gt;= 4.0'</span>],</span><br><span class=\"line\">      cascade: <span class=\"literal\">true</span>, <span class=\"comment\">//是否美化属性值 默认：true 像这样：</span></span><br><span class=\"line\">      <span class=\"comment\">//-webkit-transform: rotate(45deg);</span></span><br><span class=\"line\">      <span class=\"comment\">//        transform: rotate(45deg);</span></span><br><span class=\"line\">      remove: <span class=\"literal\">true</span> <span class=\"comment\">//是否去掉不必要的前缀 默认：true</span></span><br><span class=\"line\">    &#125;)))</span><br><span class=\"line\">    .pipe(gulpif(<span class=\"string\">'*.css'</span>, minifycss()))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./dist/'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"收尾工作\"><a href=\"#收尾工作\" class=\"headerlink\" title=\"收尾工作\"></a>收尾工作</h2><p>编写文档（打算在API文档上利用JSDoc自动生成），也许还是要手工编写？主要我是想支持md格式的文件，这样将来好在我们的git系统中，可以很好的阅读。</p>\n<p>另外我们启用了eslint来进行语法检查，以及对于编程规范，考察了<a href=\"https://github.com/airbnb/javascript/tree/master/es5\" target=\"_blank\" rel=\"external\">airbnb/javascript</a>和<a href=\"https://github.com/airbnb/css\" target=\"_blank\" rel=\"external\">airbnb/css</a>，请原谅我偷懒，我是真觉得airbnb的规范非常赞～。</p>\n<h2 id=\"未来，我们仍然在路上\"><a href=\"#未来，我们仍然在路上\" class=\"headerlink\" title=\"未来，我们仍然在路上\"></a>未来，我们仍然在路上</h2><p>对于前端发展的探索，我们依然在路上。技术的变革，对于用户（可能感知不到），对于开发者而言，更健壮的程序，将让用户更明显的感受到体验的好坏。前端这些年的变化，还是需要每一个人自我驱动的去学习与适应。PC端的架构改造，即将告一段落。未来，将有更极致的挑战（移动和混合应用的架构设计，FE的探索{React React Native}，以及Node.js在公司产品中的落地，也许会是我们前端的CI系统，CSS动画研究，Video视频和画布方面的研究。）</p>\n<p>我们需要优秀的开发者加入，一起来完善这些，有兴趣的朋友，可以将简历发送到xiangwenwe@foxmail.com，期待～。</p>\n<h1 id=\"更新部分-（2016-05-09）\"><a href=\"#更新部分-（2016-05-09）\" class=\"headerlink\" title=\"更新部分 （2016-05-09）\"></a>更新部分 （2016-05-09）</h1><p>应用在PC端上的项目结构整理出来，可访问：<a href=\"https://github.com/sapling-team/generator-sapling-pc\" target=\"_blank\" rel=\"external\">https://github.com/sapling-team/generator-sapling-pc</a></p>\n<p><em>注明：我们需要兼容IE8，所以使用的还是backbone。如果你追求的是更新的技术栈，我觉得你可以参考一下其他的特性，不包括backbone部分的东西。</em></p>\n<p>——————- 分割线—————</p>\n<p><strong>团队编码风格检查</strong></p>\n<p>对于开源社区的编码规范，我考察了一系列的，比如Google，微软，Facebook，不过最后我们还是采用了<code>airbnb</code>的编码规范，我也真心的建议大家可以认真的阅读阅读。<a href=\"https://github.com/airbnb/javascript/tree/master/es5\" target=\"_blank\" rel=\"external\">https://github.com/airbnb/javascript/tree/master/es5</a>，另外为了达到在<code>commit</code>期间进行一次检查，我们使用了git hook来做eslint检查，通过才允许提交。</p>\n<p>如果你写不了<code>shell</code>脚本，那你可以使用<a href=\"https://github.com/typicode/husky\" target=\"_blank\" rel=\"external\">https://github.com/typicode/husky</a>这个项目。</p>\n<p><strong>快速生成的view，Model文件的工具</strong></p>\n<p>考虑到很大一部分初始化的代码，需要重复编写，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> base = <span class=\"built_in\">require</span>(<span class=\"string\">'base-extend-backbone'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> BaseView = base.View;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> View = BaseView.extend(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">''</span>,</span><br><span class=\"line\">  rawLoader: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  context: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(args);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeMount: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//  初始化一些自定义属性</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  afterMount: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//  获取findDOMNode DOM Node</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ready: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//  初始化</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeDestroy: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//  进入销毁之前,将引用关系设置为null</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  destroyed: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//  销毁之后</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = View;</span><br></pre></td></tr></table></figure>\n<p>所以，我们专门写了一个小脚本来辅助创建<code>view</code>，<code>model</code>文件，以提高工作效率。</p>\n<p><strong>第三方管理</strong></p>\n<p>我们使用<code>bower</code>+<code>npm</code>来管理所有的第三方资源，<code>bower</code>用在管理<code>jQuery</code>以及其自身的插件生态中，<code>npm</code>则是用来管理其他的库和自己维护的库文件。\\</p>\n<p><strong>include</strong></p>\n<p><code>include</code>的特性在做不是单页Web应用时很有用，如果100个页面都要同时复制100百次相同的头部和尾部的话，那我也会疯的。所以，我们启用了<code>jade</code>来代替了<code>HTML</code>，并且和<code>html-webpack-plugin</code>插件配合使用。</p>\n<p><strong>compile.config</strong></p>\n<p>这个<code>config</code>配置文件主要用于在jade中编写的逻辑脚本，可以在某些情况下替换一下地址（比如CDN）,另外在一些动态化的场景中，也可以读取这个配置文件来知晓资源依赖。</p>\n<p><strong>目录结构</strong></p>\n<p>我们的目录结构是一个典型的<code>web app</code>结构：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app/</span><br><span class=\"line\"> images/</span><br><span class=\"line\"> link/</span><br><span class=\"line\"> stylesheets/</span><br><span class=\"line\"> src</span><br><span class=\"line\"> web/</span><br></pre></td></tr></table></figure>\n<p><code>images</code>主要用于放置图片，<code>link</code>用于管理第三方资源（ bower下载的资源放置在这里），<code>stylesheets</code>放置<code>sass</code>源文件，<code>src</code>则是放置js源文件，<code>web</code>放置jade文件。src中我们又分为了<code>views</code>，<code>models</code>，<code>module</code>三个目录，顾名思义这些是放置视图，模型，模块的目录，我们的入口文件与它们平行同级。</p>\n<p>为了<code>getEntry</code>函数可以正确的提取入口依赖名，我们采用了一致命名的原则。比如我们有一个<code>index</code>页面。</p>\n<ul>\n<li>在web中放置<code>index.jade</code></li>\n<li>在src中放置<code>index.js</code>入口文件</li>\n<li>在src的views和models中分别创建<code>index</code>目录</li>\n<li>在src的views和models的<code>index</code>目录中创建<code>index</code>页面所需要的视图和模型</li>\n<li>在stylesheets中创建<code>index</code>目录和<code>index.sass</code>入口文件</li>\n<li>在src的<code>index.js</code>入口文件中<code>require(&#39;../stylesheets/index.sass&#39;)</code>文件</li>\n</ul>\n<p>启动<code>npm run dev</code> webpack即可</p>\n","excerpt":"<blockquote>\n<p>架构非一朝一夕，且要紧贴业务。</p>\n</blockquote>\n<p>选择一个行业确实挺难的，特别是对于我们程序员来说。试错的机会，在某些阶段比较容易，但人到了一定的年龄，谨慎会更可靠。加入音悦台，我要做的第一件事情，就是要改造之前PC端的架构。如何去紧贴业务，在改造的过程中又不至于让业务开发停滞，这对于我而言是一件非常大的考量。</p>\n<h2 id=\"了解业务与开发方式\"><a href=\"#了解业务与开发方式\" class=\"headerlink\" title=\"了解业务与开发方式\"></a>了解业务与开发方式</h2><p><strong>我们的业务</strong></p>\n<p>在开始设计架构之前，我决定先去充分的了解我们的业务特点，音悦台是一家以高清MV视频播放起家的公司，现在它的业务呈现于服务粉丝，包括（商城，V榜）等一系列的产品。就技术场景的特点而言，包括了有PC，Mobile，混合APP，专题页，活动页等等，它涵盖了几乎所有的技术场景，提供了一套服务粉丝的解决方案。</p>\n<p><strong>刀耕火种的年代</strong></p>\n<p>很不幸，在我来之前，我们公司的前端属于“刀耕火种”的年代，所有的代码使用<code>Spring MVC</code>来套模板，手机端项目属于WAP站点（也是<code>Spring MVC</code>）。如何最小程度的脱离（JSP）或者说最少套JSP模板的架构，是我应该最优先的考量，适量的面向接口，Ajax开发也许会有很大的改变，当然，我所面临的问题还不仅仅是这些。</p>\n<p>由于特殊原因，音悦台的前端代码是由各时期的前辈去完成的，几乎都是在赶的状态，hack了很多不一样的功能，每一个时期都风格迥异，可维护性差。对于后来者，就像一根鱼刺咔在喉咙一般，我怎么感觉到灾难，来的这么快呢。</p>\n<ul>\n<li>缺少统一的项目管理（第三方库随便乱放，光jQuery就有几个地方同时存在）</li>\n<li>部署困难，没有版本号，而且严重依赖Java环境，编写一个代码就需要重新编译Java重启服务器（配置过于复杂）</li>\n<li>缺少统一的编程规范</li>\n<li>很多函数，变量起名很随意，出现了这种<code>asdf</code>的变量名</li>\n<li>几乎没有模块化（除了WAP页使用了requirejs）</li>\n<li>组件化概念无从谈起，大量的重复代码在搭积木般的堆业务</li>\n<li>虽然我们使用git版本控制，但是却缺少工作流，大家几乎都往master分支内push代码</li>\n</ul>\n<h2 id=\"建模设计与技术选型\"><a href=\"#建模设计与技术选型\" class=\"headerlink\" title=\"建模设计与技术选型\"></a>建模设计与技术选型</h2><blockquote>\n<p>老板都觉得现在的前端很不科学，很痛苦（因为铁打的营盘，流水的兵。无任何文档沉淀，修改任何东西都非常困难）</p>\n</blockquote>\n<p>变革迫在眉睫，PC端的重新梳理对于我个人而言，成了我很好的练兵之所。于是，我决定将我们公司眼下PC端的需求分解出来。</p>\n<ul>\n<li>必须完美支持IE8（这个是没办法的事情）<ul>\n<li>模块化机制的引入，解决如何维护文件</li>\n<li>组件化引入，与业务隔离，解决松耦合的复用</li>\n<li>不支持编译(js)中间语言（比如TypeScript,es2015）</li>\n<li>按需打包，以及自动构建<ul>\n<li>引入less或者sass，解决CSS的复用</li>\n<li>引入PostCSS解决CSS代码的健壮性（比如添加前缀-ms -webkit）</li>\n<li>文档沉淀，解决（铁打的营盘，流水的兵）</li>\n<li>浏览器自动刷新，项目管理，版本控制</li>\n<li>统一编程规范与最佳实践</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>视频行业有其特殊性，必须完美支持与Flash的交互，封装一个统一的SDK</li>\n<li>必须要支持SEO，（最少程度达标）</li>\n<li>重新定义发布部署流程</li>\n</ul>","more":"<h2 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h2><p>根据需求分解的特征进行选型，所有的子项目都依赖于<code>完美支持IE8</code>，所以对于我的选择局限性就比较大了。</p>\n<p><strong>Vue.js</strong></p>\n<ul>\n<li><a href=\"http://vuejs.org/unit/\">Vue.js unit tests</a></li>\n<li><a href=\"https://saucelabs.com/u/vuejs\">Vue.js Sauce Labs</a></li>\n</ul>\n<p>unit tests在IE上跑不起来，我所认知的结果是：不支持IE8</p>\n<p><strong>React.js</strong></p>\n<p>虽然FB提供了运行在旧浏览器上的解决方案：<a href=\"https://facebook.github.io/react/docs/working-with-the-browser.html\">Working With the Browser</a>，但是，对于未来，博客上明确书写了将不在支持，可查看<a href=\"https://facebook.github.io/react/blog/2016/01/12/discontinuing-ie8-support.html\">Discontinuing IE 8 Support in React DOM</a>，后来我在Github上找到一个<a href=\"https://github.com/xcatliu/react-ie8\">react-ie8</a>项目，对于商业公司而言，这个解决方案还是有很大的风险，于是：放弃。</p>\n<p><strong>Angular1.x</strong></p>\n<p>对于即将到来的Angular2.x以及Angular1.x庞大而臃肿的身躯（总不能我的专题页，活动页也用上Angular1.x吧），这是我最快放弃考察的一个项目。</p>\n<h2 id=\"那么问题来了，我该怎么办？\"><a href=\"#那么问题来了，我该怎么办？\" class=\"headerlink\" title=\"那么问题来了，我该怎么办？\"></a>那么问题来了，我该怎么办？</h2><p>对于基础库而言，我选择了老三项，对于一个既需要复杂业务模型（复杂交互类型的页面），又有适当简单的特点业务（活动页面），MVC分层将有助于我们分解业务编程。而且，这些也有足够的中文资料，以及文档让团队中（没有接触过MVC）的同学去学习和适应。</p>\n<ul>\n<li><a href=\"\">jQuery 1.x</a></li>\n<li><a href=\"\">underscore</a></li>\n<li><a href=\"\">backbone</a></li>\n</ul>\n<p>当然到这里我们的设计还远远不够，我们还缺少模块化，组件化，以及对backbone适当的改造。首先，我必须对开发方式进行隔离，分为了dev和build两个环境（当然，它是我既定的目标），以及引入一些表现良好的工具来辅助开发（比如browser-sync自动刷新页面）。为了更好的管理项目以及优化代码，我选择了npm系统来管理我的第三方依赖，npm脚本钩子来帮助我执行start，dev，build，test等环境，以及webpack来完成系统内的模块化构建。老实说，首先我们用它解决了js模块化的问题，至少commonjs的风格看起来可以保持一致（但是我还需要去协助大家避免循环引用），然后处理按需打包的问题（至少很长一段时间里我们的PC端还将是传统的页面而不是webapp）。</p>\n<p>关于webpack的应用以及多资源打包，推荐大家阅读我的另一篇文章：<a href=\"https://github.com/icepy/_posts/issues/25\">webpack在PC项目中的应用</a></p>\n<h3 id=\"目录结构设计\"><a href=\"#目录结构设计\" class=\"headerlink\" title=\"目录结构设计\"></a>目录结构设计</h3><p>对于传统的项目（<code>Spring MVC</code>），我们进行了一些适当的改变。当然，我们总体的目标，是在向面向接口开发来靠近。</p>\n<pre><code>Project_dev  根目录\n    dist 经过编译之后可发布的目录\n    flash 内部swf文件放置的目录\n    link 内部自己开发或者未兼容Commonjs的库（未建立私人NPM服务仓库）\n    static 切图的静态页面放置的目录\n    web 入口页面（用户访问的地址）\n    test 单元测试\n    img 图片资源\n    mock 本地模拟数据\n    cross-url 跨域url（兼容老Spring MVC）\n    js //经过webpack打包之后的文件\n    src //js源文件\n        view 视图目录\n            index  业务模块\n                topbar.view.js\n        model 模型目录\n            index\n                topbar.model.js\n        template 模板\n            index\n                topbar.html\n        config.js    //项目配置文件\n        index.main.js  //入口文件\n    style\n        css //less编译之后的文件\n        less //less源代码文件\n        reset.css  //公共文件\n    .eslintrc\n    .gitignore\n    README.md\n    gulpfile.js\n    package.json\n    map.json\n    tools.js //提供的工具，快速生成view，model文件\n    webpack.dev.config.js\n</code></pre><p>最后可发布的目录结构：</p>\n<pre><code>Project_build\n\n    js //处理过后的js文件\n    style //处理过后的css文件\n    web //用户访问的真实页面\n    link //处理过后的第三方库或内部自己开发的库\n    flash //swf文件\n    cross-url //兼容（Spring MVC）的跨域\n</code></pre><p>对于我们的git则启用了一个基础的git flow工作流，避免大家push到master分支，每一次的发布都必须有足够的备份。</p>\n<h3 id=\"第三方库整合\"><a href=\"#第三方库整合\" class=\"headerlink\" title=\"第三方库整合\"></a>第三方库整合</h3><p>针对第三方库的整合是规避了一些基础控件（除非有自己研发的需求），列表如下：</p>\n<ul>\n<li>Swipe（轮播图）</li>\n<li>腾讯云 SDK</li>\n<li>artTemplate</li>\n<li>amazeui（参考较多）</li>\n</ul>\n<h3 id=\"backbone改造\"><a href=\"#backbone改造\" class=\"headerlink\" title=\"backbone改造\"></a>backbone改造</h3><p>原始的<code>backbone</code>并不能很好适应我们的业务产品，它虽然有backbone.Router，但是却缺少基于路由的生命周期，它的Model也不是很健壮（可配置性以及数据的本地缓存），当然它的View是我们经常要使用的，但是却缺少相应的钩子方法，于是对于它们适当的改造，有助于公司产品的业务开发（便捷）以及稳定性。</p>\n<ul>\n<li>baseView</li>\n<li>baseModel</li>\n<li>baseRouter</li>\n</ul>\n<p><code>baseView</code>实现了相应的钩子方法，比如<code>rawLoader</code>，<code>beforeMount</code>，<code>afterMount</code>，<code>ready</code>等，对于参数传递也有了一些规范性的定义，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"props\"</span>:&#123;&#125;,  </span><br><span class=\"line\">\t<span class=\"string\">\"methods\"</span>:&#123;&#125;,</span><br><span class=\"line\">\t<span class=\"string\">\"state\"</span>:&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>UI渲染依赖的数据通过<code>props</code>传递，外部可能用到的方法通过<code>methods</code>传递，内部需要维护的状态可以通过<code>state</code>传递，规范参数的目标是对一些写法进行约束，在排错时可以更容易定位到错误。</p>\n<p><code>baseModel</code>除了实现了一个beforeEmit钩子外，基本上扩展和包装了一些便捷的存取方法，比如<code>$get</code>，<code>$set</code>，<code>$filter</code>，<code>$sort</code>，以及发送请求的便捷方式。</p>\n<p><code>baseRouter</code>主要是实现了基于路由的生命周期（为了webapp准备的，可能未来会有要求兼容IE8的Webapp）。</p>\n<h3 id=\"编写组件\"><a href=\"#编写组件\" class=\"headerlink\" title=\"编写组件\"></a>编写组件</h3><p>组件化从开发的角度来看，由于每个组件的相对独立性，开发者在开发期间不会产生依赖冲突，只需专注于自身的模块开发，提高开发效率；从维护的角度来看，于模块相关的资源均组织在一起，十分便于维护和整理。对于组件，我们进行了一些额外的处理，一个组件最少需要包含template.html以及index.js两个文件，比如：</p>\n<pre><code>loginBox //目录\n    template //目录\n        close.html\n        login.html\n    index.js\n</code></pre><p>我们的css文件放置在style目录下，它是一个less文件，当业务编程需要时，自己在自己的业务less文件中<code>@import url(&#39;common/footer.less&#39;);</code>即可，毕竟我们最终需要一个link css文件，而不是内嵌在html中，webpack帮助我们在dev环境中，既对这些东西进行了处理。</p>\n<p>在index.js文件中，只需要根据我们指定好的一些规则书写即可：</p>\n<p>规则一，继承baseView的组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> BaseView = <span class=\"built_in\">require</span>(<span class=\"string\">'BaseView'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> closeTemp = <span class=\"built_in\">require</span>(<span class=\"string\">'./template/close.html'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> loginTemp = <span class=\"built_in\">require</span>(<span class=\"string\">'./template/login.html'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> LoginBox = BaseView.extend(&#123;</span><br><span class=\"line\">\tevents:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tbeforeMount:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tafterMount:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tready:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> props = options.props;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> state = options.state;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> methods = options.methods;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> shared = <span class=\"literal\">null</span>;</span><br><span class=\"line\">LoginBox.sharedInstanceLoginBox = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!shared)&#123;</span><br><span class=\"line\">\t\tshared = <span class=\"keyword\">new</span> LoginBox(options);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> shared;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = LoginBox;</span><br></pre></td></tr></table></figure>\n<p>规则二，不继承baseView的组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> closeTemp = <span class=\"built_in\">require</span>(<span class=\"string\">'./template/close.html'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> loginTemp = <span class=\"built_in\">require</span>(<span class=\"string\">'./template/login.html'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> LoginBox = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> props = options.props;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> state = options.state;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> methods = options.methods;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> shared = <span class=\"literal\">null</span>;</span><br><span class=\"line\">LoginBox.sharedInstanceLoginBox = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!shared)&#123;</span><br><span class=\"line\">\t\tshared = <span class=\"keyword\">new</span> LoginBox(options);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> shared;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = LoginBox;</span><br></pre></td></tr></table></figure>\n<p>个人非常建议给每一个类配置一个单例选项，这非常有用。</p>\n<h3 id=\"Flash-SDK\"><a href=\"#Flash-SDK\" class=\"headerlink\" title=\"Flash SDK\"></a>Flash SDK</h3><p>如何统一的与Flash交互，也是我们需要考虑的方向。第一版的简化，在很短的时间内做了出来。主要用来区分IE和非IE的情况，IE下只识别object标签，而非IE只识别embed标签。每一个Flash注入的方法，为了方便业务开发，都进行了封装，目标是：调用简单。</p>\n<h3 id=\"进入愉快的业务编程阶段\"><a href=\"#进入愉快的业务编程阶段\" class=\"headerlink\" title=\"进入愉快的业务编程阶段\"></a>进入愉快的业务编程阶段</h3><p>在前期的准备工作完成之后，我们针对某一项业务进行了Test编程。</p>\n<p>一个PC站点的界面基本上是由header,content,footer构成的，在header中可能还有一些其他的业务，这些我们不管，针对具体的业务，我们需要进一步的分析界面的构成，在进入编程阶段之前，良好的分析会对进度有良好的帮助。</p>\n<p>是的，分析应该是你要做的第一件事情。</p>\n<p>我提供了一个tools.js脚本用于快速的生成view，model文件，大量重复性的代码，将由工具来辅助生成，业务编程将更专注于业务。</p>\n<p>其实最后一步，愉快的进行编程即可，运用你熟悉的jQuery API配合一些base API，轻轻松松完成了业务编程。</p>\n<p>（PS：当然也提供了mocha chia sinon的demo，来对业务进行自动化测试，毕竟测试用例还是需要业务来编写和维护，所以考虑了上述情况之后决定：业务可选，核心包未来必须补上。）</p>\n<h3 id=\"构建可部署文件的脚本\"><a href=\"#构建可部署文件的脚本\" class=\"headerlink\" title=\"构建可部署文件的脚本\"></a>构建可部署文件的脚本</h3><p>虽然我们的dev环境使用webpack来进行处理，但是它还不是我们最终想要发布的资源（首先，我希望发布目录是一个非常干净的dir，其二一些配置文件不应该出现在发布目录中，以及对.html进行hash处理）。webpack在这方面还是有些欠缺，所以最后的可部署文件，我们使用gulp来进行最后的处理：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清理dist目录</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'clean'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// content</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'./dist'</span>], &#123;read: <span class=\"literal\">false</span>&#125;).pipe(clean());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'build:rename'</span>,[<span class=\"string\">'build:clean'</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./dist/temp/*.html'</span>)</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./dist/web'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'build:clean'</span>,[<span class=\"string\">'build:retemp'</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./dist/web/*.html'</span>,&#123;read:<span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\">        .pipe(clean());</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'build:retemp'</span>, [<span class=\"string\">'build'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./dist/web/*-*.html'</span>)</span><br><span class=\"line\">    .pipe(rename(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">path</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> basename = path.basename.split(<span class=\"string\">'-'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (basename.length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            basename.pop();</span><br><span class=\"line\">            path.dirname = <span class=\"string\">'/temp'</span></span><br><span class=\"line\">            path.basename = basename.join(<span class=\"string\">'-'</span>);</span><br><span class=\"line\">            path.extname = <span class=\"string\">'.html'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./dist'</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//进入build</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'build'</span>, [<span class=\"string\">'build:move'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cssFilter = filter(<span class=\"string\">'./dist/style/*.css'</span>, &#123;</span><br><span class=\"line\">    restore: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> jsFilter = filter(<span class=\"string\">'./dist/js/*.js'</span>, &#123;</span><br><span class=\"line\">    restore: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> times = date.getFullYear() + <span class=\"string\">'-'</span> + (date.getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">'-'</span> + date.getDate() + <span class=\"string\">'   '</span> + date.getHours() + <span class=\"string\">':'</span> + date.getMinutes() + <span class=\"string\">':'</span> + date.getSeconds();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> banner = [</span><br><span class=\"line\">    <span class=\"string\">'/**'</span>,</span><br><span class=\"line\">    <span class=\"string\">' * @project &lt;%= pkg.name %&gt;'</span>,</span><br><span class=\"line\">    <span class=\"string\">' * @description &lt;%=pkg.description%&gt;'</span>,</span><br><span class=\"line\">    <span class=\"string\">' * @version v&lt;%= pkg.version %&gt;'</span>,</span><br><span class=\"line\">    <span class=\"string\">' * @time '</span> + times,</span><br><span class=\"line\">    <span class=\"string\">' * @author &lt;%= pkg.author %&gt;'</span>,</span><br><span class=\"line\">    <span class=\"string\">' * @copy &lt;%= pkg.homepage %&gt;'</span>,</span><br><span class=\"line\">    <span class=\"string\">' */'</span>,</span><br><span class=\"line\">    <span class=\"string\">''</span></span><br><span class=\"line\">  ].join(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">htmlMaped</span> (<span class=\"params\">filename</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> filename.replace(<span class=\"regexp\">/[-][\\w]&#123;10&#125;.html/g</span>, <span class=\"string\">'.html'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./dist/web/*.html'</span>)</span><br><span class=\"line\">    .pipe(useref(&#123;</span><br><span class=\"line\">        noAssets:<span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .pipe(cssFilter)</span><br><span class=\"line\">    .pipe(cssFilter.restore)</span><br><span class=\"line\">    .pipe(jsFilter)</span><br><span class=\"line\">    .pipe(jsFilter.restore)</span><br><span class=\"line\">    .pipe(rev())</span><br><span class=\"line\">    .pipe(revReplace(&#123;</span><br><span class=\"line\">        modifyReved: htmlMaped,</span><br><span class=\"line\">        modifyUnreved: htmlMaped</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .pipe(useref())</span><br><span class=\"line\">    .pipe(gulpif(<span class=\"string\">'*.js'</span>, header(banner, &#123;pkg: pkg&#125;)))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./dist/web/'</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'build:move'</span>, [<span class=\"string\">'clean'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// content</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> dontMovePath = <span class=\"string\">'!./'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> movePath = <span class=\"string\">'./'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src([</span><br><span class=\"line\">      movePath + <span class=\"string\">'link/base.library.js'</span>,</span><br><span class=\"line\">      movePath + <span class=\"string\">'link/webim.js'</span>,</span><br><span class=\"line\">      movePath + <span class=\"string\">'link/json2.js'</span>,</span><br><span class=\"line\">      movePath + <span class=\"string\">'img/**/*.*'</span>,</span><br><span class=\"line\">      movePath + <span class=\"string\">'web/*.*'</span>,</span><br><span class=\"line\">      movePath + <span class=\"string\">'flash/*.*'</span>,</span><br><span class=\"line\">      movePath + <span class=\"string\">'style/**/*.css'</span>,</span><br><span class=\"line\">      movePath + <span class=\"string\">'js/*.js'</span></span><br><span class=\"line\">    ], &#123;base: <span class=\"string\">'.'</span>&#125;)</span><br><span class=\"line\">    .pipe(gulpif(<span class=\"string\">'*.js'</span>,uglify(&#123;</span><br><span class=\"line\">        compress:&#123;</span><br><span class=\"line\">            pure_funcs:[<span class=\"string\">'console.log'</span>,<span class=\"string\">'warn'</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)))</span><br><span class=\"line\">    .pipe(gulpif(<span class=\"string\">'*.css'</span>, autoprefixer(&#123;</span><br><span class=\"line\">      browsers: [<span class=\"string\">'last 2 versions'</span>, <span class=\"string\">'Android &gt;= 4.0'</span>],</span><br><span class=\"line\">      cascade: <span class=\"literal\">true</span>, <span class=\"comment\">//是否美化属性值 默认：true 像这样：</span></span><br><span class=\"line\">      <span class=\"comment\">//-webkit-transform: rotate(45deg);</span></span><br><span class=\"line\">      <span class=\"comment\">//        transform: rotate(45deg);</span></span><br><span class=\"line\">      remove: <span class=\"literal\">true</span> <span class=\"comment\">//是否去掉不必要的前缀 默认：true</span></span><br><span class=\"line\">    &#125;)))</span><br><span class=\"line\">    .pipe(gulpif(<span class=\"string\">'*.css'</span>, minifycss()))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./dist/'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"收尾工作\"><a href=\"#收尾工作\" class=\"headerlink\" title=\"收尾工作\"></a>收尾工作</h2><p>编写文档（打算在API文档上利用JSDoc自动生成），也许还是要手工编写？主要我是想支持md格式的文件，这样将来好在我们的git系统中，可以很好的阅读。</p>\n<p>另外我们启用了eslint来进行语法检查，以及对于编程规范，考察了<a href=\"https://github.com/airbnb/javascript/tree/master/es5\">airbnb/javascript</a>和<a href=\"https://github.com/airbnb/css\">airbnb/css</a>，请原谅我偷懒，我是真觉得airbnb的规范非常赞～。</p>\n<h2 id=\"未来，我们仍然在路上\"><a href=\"#未来，我们仍然在路上\" class=\"headerlink\" title=\"未来，我们仍然在路上\"></a>未来，我们仍然在路上</h2><p>对于前端发展的探索，我们依然在路上。技术的变革，对于用户（可能感知不到），对于开发者而言，更健壮的程序，将让用户更明显的感受到体验的好坏。前端这些年的变化，还是需要每一个人自我驱动的去学习与适应。PC端的架构改造，即将告一段落。未来，将有更极致的挑战（移动和混合应用的架构设计，FE的探索{React React Native}，以及Node.js在公司产品中的落地，也许会是我们前端的CI系统，CSS动画研究，Video视频和画布方面的研究。）</p>\n<p>我们需要优秀的开发者加入，一起来完善这些，有兴趣的朋友，可以将简历发送到xiangwenwe@foxmail.com，期待～。</p>\n<h1 id=\"更新部分-（2016-05-09）\"><a href=\"#更新部分-（2016-05-09）\" class=\"headerlink\" title=\"更新部分 （2016-05-09）\"></a>更新部分 （2016-05-09）</h1><p>应用在PC端上的项目结构整理出来，可访问：<a href=\"https://github.com/sapling-team/generator-sapling-pc\">https://github.com/sapling-team/generator-sapling-pc</a></p>\n<p><em>注明：我们需要兼容IE8，所以使用的还是backbone。如果你追求的是更新的技术栈，我觉得你可以参考一下其他的特性，不包括backbone部分的东西。</em></p>\n<p>——————- 分割线—————</p>\n<p><strong>团队编码风格检查</strong></p>\n<p>对于开源社区的编码规范，我考察了一系列的，比如Google，微软，Facebook，不过最后我们还是采用了<code>airbnb</code>的编码规范，我也真心的建议大家可以认真的阅读阅读。<a href=\"https://github.com/airbnb/javascript/tree/master/es5\">https://github.com/airbnb/javascript/tree/master/es5</a>，另外为了达到在<code>commit</code>期间进行一次检查，我们使用了git hook来做eslint检查，通过才允许提交。</p>\n<p>如果你写不了<code>shell</code>脚本，那你可以使用<a href=\"https://github.com/typicode/husky\">https://github.com/typicode/husky</a>这个项目。</p>\n<p><strong>快速生成的view，Model文件的工具</strong></p>\n<p>考虑到很大一部分初始化的代码，需要重复编写，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> base = <span class=\"built_in\">require</span>(<span class=\"string\">'base-extend-backbone'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> BaseView = base.View;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> View = BaseView.extend(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">''</span>,</span><br><span class=\"line\">  rawLoader: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  context: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(args);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeMount: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//  初始化一些自定义属性</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  afterMount: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//  获取findDOMNode DOM Node</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ready: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//  初始化</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeDestroy: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//  进入销毁之前,将引用关系设置为null</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  destroyed: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//  销毁之后</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = View;</span><br></pre></td></tr></table></figure>\n<p>所以，我们专门写了一个小脚本来辅助创建<code>view</code>，<code>model</code>文件，以提高工作效率。</p>\n<p><strong>第三方管理</strong></p>\n<p>我们使用<code>bower</code>+<code>npm</code>来管理所有的第三方资源，<code>bower</code>用在管理<code>jQuery</code>以及其自身的插件生态中，<code>npm</code>则是用来管理其他的库和自己维护的库文件。\\</p>\n<p><strong>include</strong></p>\n<p><code>include</code>的特性在做不是单页Web应用时很有用，如果100个页面都要同时复制100百次相同的头部和尾部的话，那我也会疯的。所以，我们启用了<code>jade</code>来代替了<code>HTML</code>，并且和<code>html-webpack-plugin</code>插件配合使用。</p>\n<p><strong>compile.config</strong></p>\n<p>这个<code>config</code>配置文件主要用于在jade中编写的逻辑脚本，可以在某些情况下替换一下地址（比如CDN）,另外在一些动态化的场景中，也可以读取这个配置文件来知晓资源依赖。</p>\n<p><strong>目录结构</strong></p>\n<p>我们的目录结构是一个典型的<code>web app</code>结构：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app/</span><br><span class=\"line\"> images/</span><br><span class=\"line\"> link/</span><br><span class=\"line\"> stylesheets/</span><br><span class=\"line\"> src</span><br><span class=\"line\"> web/</span><br></pre></td></tr></table></figure>\n<p><code>images</code>主要用于放置图片，<code>link</code>用于管理第三方资源（ bower下载的资源放置在这里），<code>stylesheets</code>放置<code>sass</code>源文件，<code>src</code>则是放置js源文件，<code>web</code>放置jade文件。src中我们又分为了<code>views</code>，<code>models</code>，<code>module</code>三个目录，顾名思义这些是放置视图，模型，模块的目录，我们的入口文件与它们平行同级。</p>\n<p>为了<code>getEntry</code>函数可以正确的提取入口依赖名，我们采用了一致命名的原则。比如我们有一个<code>index</code>页面。</p>\n<ul>\n<li>在web中放置<code>index.jade</code></li>\n<li>在src中放置<code>index.js</code>入口文件</li>\n<li>在src的views和models中分别创建<code>index</code>目录</li>\n<li>在src的views和models的<code>index</code>目录中创建<code>index</code>页面所需要的视图和模型</li>\n<li>在stylesheets中创建<code>index</code>目录和<code>index.sass</code>入口文件</li>\n<li>在src的<code>index.js</code>入口文件中<code>require(&#39;../stylesheets/index.sass&#39;)</code>文件</li>\n</ul>\n<p>启动<code>npm run dev</code> webpack即可</p>"},{"title":"前端开发基础－JavaScript","date":"2015-12-16T04:11:15.000Z","_content":"\n这是很久很久之前想写的东西，拖了五六个月，没有动笔，现今补齐，内容有些多，对初学者有用，错误之处，望指出。\n\n## 理解作用域\n\n理解作用域链是Js编程中一个**必须**要具备的，作用域决定了变量和函数有权力访问哪些数据。在Web浏览器中，全局执行环境是window对象，这也意味着所有的全局变量或者方法都是window对象的属性或方法。当一个函数在被调用的时候都会创建自己的执行环境，而这个函数中所写的代码就开始进入这个函数的执行环境，于是由变量对象构建起了一个作用域链。\n\n```JavaScript\nvar wow = '魔兽世界';\nvar message = function(){\n\tvar _wow = '123';\n}\n```\n\n在这个例子中全局环境中包含了两个对象（全局环境的变量对象不算），window.wow和window.message，而这个message函数中又包含了两个对象，它自己的变量对象（其中定义了arguments对象）和全局环境的变量对象。当这个函数开始执行时，message自己的变量对象中定义了_wow，而它的全局环境的变量对象有wow，假设在message中alert一下wow，实际上是message中包含的全局环境的变量对象.wow，于是可以访问。\n\n```JavaScript\nvar wow = '123';\nvar message = function(){\n\tvar wow = '456';\n}\n```\n\n如果执行message函数alert一下wow，它的作用域是这样开始搜索的，先搜索message自己的变量对象中是否存在wow，如果有就访问并且立马停止搜索，如果没有则继续往上访问它，有wow，则访问并且立马停止搜索，以此类推一直搜索到全局环境上的变量对象，如果这里都没，恭喜你，这里要抛错了。\n\n```JavaScript\nvar c = '123';\nvar message = function(){\n\tvar g = '123';\n\tvar a = function(){\n\t\tvar d = '123';\n\t}\n}\n```\n\n在这个例子中包含有三个执行环境，全局环境，message的环境，a的环境。从这里可以看出message自身包含两个对象，自己的变量对象和全局环境中的变量对象，而函数a则包含了三个，自身的变量对象，message的变量对象和全局变量对象。\n\n当开始执行这个函数时，在函数a中可以访问到变量g，那是因为函数a包含了message的变量对象，于是在自身没有开始搜索上一级的变量对象时发现了，于是可以访问。那么访问c的原理也是如此，当自身和上一级的message的变量对象都没有，但是全局变量对象中存在，于是访问成功。\n\n了解这个作用域，对于Js编程是至关重要的，不然可能会出现，明明想要的预期结果是123，但是变成了456，为什么？那就是因为一级一级的搜索，可能会存在覆盖，或者搜索到别的地方就立即停止搜索了。\n\n## 理解引用类型\n\n引用类型虽然看起来和类很相似，但是它们却是不同的概念，引用类型的值，也就是对象是引用类型的一个实例。在Js中引用类型主要有Object，Array，Date，正则，Function等。\n\nObject和Function在后面详细复述。\n\n**Array**\n\n在Js中数组可以存储任意的数据，而且它的大小是可以动态调整的类似于OC中的NSMutableArray。创建数组可以使用构造函数的方式也可以使用字面量的形式，另外可以使用concat从一个数组中复制一个副本出来。数组本身提供了很多方法让开发者使用来操作数组。\n\n* length 数组的长度\n* toString  可以返回一个以，拼接的字符串，相当于是调用了下join(',')\n* join 可以用一个分割符来拼接成一个字符串\n* push 添加一个数据到数组的末端\n* pop 删除数组中的最后一项，有返回值\n* shift 删除数组的第一项，有返回值\n* unshift 添加一个数据到数组的首端\n* reverse 倒序\n* sort 可以传入一个排序的函数\n* slice 可以基于当前数组返回一个新的数组，接收两个参数，返回项的起始位置和结束位置\n* splice 可以传入N个参数，第一个参数表示要删除，插入或则替换的位置，第二个参数表示要删除的项数，第三个到第N个表示要插入或则替换的数据\n\n**Date**\n\n时间对象也是使用非常多的玩意，它是使用GMT时间来描述，而且时间对象是可以直接比对大小的。\n\n```JavaScript\nvar date1 = new Date(2015,1,2);\nvar date2 = new Date(2015,1,10);\ndate1 < date2  \n```\n\n常用的方法\n\n* getTime 获取时间对象的毫秒数\n* setTime 设置时间对象的毫秒数，会改变日期\n* getFullYear 获取时间对象的年（2015）\n* getMonth 获取时间对象的月（需要加1）\n* getDay 获取日期的星期几（0-6）星期天到星期六\n* getDate 获取日期的天数\n* getHours 获取当前日期的小时\n* getMinutes 获取当前日期的分钟数\n* getSeconds 获取当然日期的秒数\n\n上面看起来都是获取，当然也有设置，只是相应的get置换成set即可。\n\n**正则表达式**\n\n在Js里正则表达式是用RegExp类型来支持的，关于正则可以看看之前写的一篇文章，用python来描述的如何读懂正则。\n\nJs也支持三种模式，gim，表示全局，不区分大小写，多行。\n\n一般来说很少有人这么使用var xxx = new RegExp()，而是用字面量的方式，比如var xx = /[bc]/gi;像用的比较多的方法有exec用于捕获包含第一个匹配项的数组，没有则返回null。test，用于判断，如果匹配返回true，不匹配返回false。\n\n**处理字符串**\n\n在Js中还有一种叫做包装类型的玩意，正因为此所以处理一些基本数据类型，比如字符串时，有很多方法可以使用。\n\n* concat 可以将一个或者多个字符串拼接起来，返回一个新的字符串\n* slice 接收两个参数，起始位置和结束位置，返回一个新的字符串\n* substr和substring和slice一样，唯一的不同是substr第二个参数是返回字符串的个数\n* indexOf 从头开始查询字符串，存在会返回它所在的位置，没有返回－1\n* lastIndexOf 从最后开始查询字符串\n* toUpperCase 转大写\n* toLowerCase 转小写\n* match 正则表达式使用跟exec一样\n* search 正则表达式使用，查询到返回一个位置，没有返回－1\n* replace 替换，第一个参数可以是正则表达式也可以是字符串，第二个参数是要替换的字符串\n* localeCompare比较字符串，如果字符串相等返回0，如果字符串的字母排在参数字符串之前，返回负数，如果是之后，返回正数。\n\n## 函数\n\n- [Function](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions)\n\n说起来Js的核心是什么？那就是函数了。对于函数主要是理解它的几个概念。\n\n- 它可以当值来传递，没有重栽。\n- 声明的时候，比如function a(){} var a = function(){} 执行时会有区别\n- 函数内部的参数arguments包含了传入的所有参数\n- this，表示在这个函数内的作用域，以及prototype\n\n## 理解匿名函数和闭包\n\n匿名函数又叫拉姆达函数，主要是在把函数当值传递的时候用，或者是把函数当返回值，比如：\n\n```JavaScript\nfunction d(callback){\n\tcallback();\n}\nd(function(){\n\talert('123')\n});\n\n//或者\n\nfunction b(){\n\treturn function(){\n\t\talert('123');\n\t}\n}\nvar g = b();\ng();\n```\n\n其实第二种方式跟闭包的意义一样了，所谓的闭包书面的解释是可以访问另一个函数作用域内变量的函数，稍微改写一下可能会更明显。\n\n```JavaScript\nfunction b(){\n\tvar name = '123';\n\treturn function(){\n\t\talert(name);\n\t}\n}\nvar g = b();\ng();\n```\n\n从这里可以看出来return的函数可以访问到name，而外部却不行，这个返回值的函数就可以理解为闭包。理解闭包还可以看一个经典的求值的例子。\n\n```JavaScript\nfunction save_i(){\n\tvar a = [];\n\tfor(var i = 0;i<10;i++){\n\t\ta[i] = function(){\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn a;\n}\n\nvar c = save_i();\nfor(var i = 0;i<10;i++){\n\talert(c[i]());\n}\n```\n\n从这个例子上来看，我们想得到的结果是10次循环a[i]保存着一个闭包，然后alert出从0到10，但是结果很出人意料，全部是10，为什么？哪里理解的不对呢？a[i]明明是内部函数，然后让它访问另外一个函数作用域内的变量i。\n\n个人觉得可以这样去分析问题，在客户端执行Js时有一个全局执行环境，指向的是window对象。而所谓的对象也就是引用类型，实际上在后台执行环境中，它就是一个指针。\n\n回到Js当代码在执行的时候，会创建变量对象并且构建一个作用域链，而这个对象保存着当前函数可以访问的对象。\n\n\twindow\n\t\t->save_i\n\t\t\t->this|argument\n\t\t\t->a\n\t\t\t->i\n\t\t\t->看不见的a[0]-a[10]\n\t\t\t->a[0]function(){}\n\t\t\t\t->i\n\t    ->c\n\n上述的i和a[0]里的i是同一个i，那么结果就是10。\n\n进一步处理\n\n```JavaScript\nfunction save_i(){\n\tvar a = [];\n\tfor(var i = 0;i<10;i++){\n\t\ta[i] = function(k){\n\t\t\treturn function(){\n\t\t\t\treturn k;\n\t\t\t};\n\t\t}(i)\n\t}\n\treturn a;\n}\n\nvar c = save_i();\nfor(var i = 0;i<10;i++){\n\tconsole.log(c[i]());\n}\n```\n\n接着按上面的节奏来分析\n\n\twindow\n\t\t->save_i\n\t\t\t->this|argument\n\t\t\t->a\n\t\t\t->i\n\t\t\t->看不见的a[0]-a[10]\n\t\t\t->a[0]function(){}\n\t\t\t\t->k\n\t\t\t\t->function(){}\n\t\t\t\t\t->k\n\n\t    ->c\n\n什么是传参？按值传递，相当于是在那个立即执行的函数中创建了一个新的地址和空间，虽然值是一样的，但是每一个k又是不同的，所以得到的结果正好满足了我们的预期。\n\n本来正常情况下save_i执行完毕后就要销毁，但是内部的闭包被包含在这个作用域内了，所以save_i没法销毁，从这里可以看的出来闭包会带来内存的问题，因为用完之后没法销毁，如果不注意的话。\n\n那么用完之后只能设置为null来解除引用，等着自动销毁把内存回收。\n\n## Object\n\nJavaScript的所有对象都衍生于Object对象，所有对象都继承了Object.prototype上的方法和属性，虽然它们可能会被覆盖，熟悉它对于编程能起到很大的作用，也能比较深刻的了解JavaScript这门语言。\n\n[Object](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object)\n\n创建一个对象可以使用new，也可以使用快速创建的方式：\n\n```JavaScript\nvar _object = {};\n```\n\n_object对象中就可以使用Object.prototype中所有的方法和属性，虽然看起来它是空的。说到这里在编程中常常有一个非常有用的需求，如何判断一个对象是空对象。\n\n这是zepto中的判断一个对象是否是空对象，常常使用：\n\n```JavaScript\n$.isEmptyObject = function(obj) {\n    \tvar name\n    \tfor (name in obj) return false\n    \treturn true\n}\n```\n\n也顺便看了下jQuery原理是一模一样的：\n\n```JavaScript\nisEmptyObject: function( obj ) {\n\tvar name;\n\tfor ( name in obj ) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n```\n使用in操作符来实现，它不会遍历到父原型链。\n\nconstructor返回一个指向创建了该对象的函数引用，这个东西主要是可以用来识别（类）到底是指向哪里的。\n\ndefineProperty直接在一个对象上定义一个新属性，非常适合用于动态构建，传入三个参数［动态添加对象的目标对象，需要定义或被修改的属性名，需要定义的对象］，在第三个参数中可以有些属性来表示是否继承（__proto__），要不要定义get，set方法，enumerable是否可枚举。\n\ndefineProperties跟上述defineProperty一样，但是它可以添加多个。\n\ngetOwnPropertyNames返回一个由指定对象的所有属性组成的数组\n\nkeys返回一个数组包括对象所有的属性（可枚举）\n\n> keys是经常会用到的一个属性，它只能包可枚举的，如果想获取一个对象的所有属性包括不枚举的，那么使用getOwnPropertyNames。\n\nhasOwnProperty用于判断某个对象是否包含有自身的属性，这个方法常常用于检测对象中的属性是否存在，它只检测自身，对于继承过来的都是false，这一点是非常重要的理解。\n\nisPrototypeOf 用于检测一个对象是否在另一个对象的原型链上，比如有两个对象是互相交互的，常常会使用它来进行检测。\n\npropertyIsEnumerable这个方法也比较重要，返回一个布尔值，检测一个对象的自身属性是否可以枚举\n\n> 可枚举的理解，也就是对象的属性可枚举，它的属性值不可以修改，但是在Js中它有自己的定义，引擎内部看不见的该属性的[[Enumerable]]特性为true，那么就是可枚举的。基本上把一个普通对象可以看做是一个枚举类型，比如var color = {'red':1}，red是可以修改的，但是red是可枚举的，但是如果是继承过来的属性，propertyIsEnumerable是返回false的，它还有一个特点，就是自身。\n\n如果要定义不可枚举的属性，那就要使用defineProperty方法了，目前不能用对象直接量或者构造函数定义出来。\n\n```JavaScript\nvar obj = {name: 'jack', age:23}\nObject.defineProperty(obj, 'id', {value : '123', enumerable : false });\n```\n\n## 深拷贝与浅拷贝\n\n关于拷贝的问题，主要分为深拷贝和浅拷贝，但是如果从空间分配上来说JavaScript的拷贝不应该算是深拷贝，比如：\n\n```JavaScript\nvar d = {};\nfor(k in a){\n\td[k] = a[k];\n}\nreturn d;\n```\n\n今天突然想到了这么一个问题，在C语言中，所谓的拷贝，就是分两种情况，一种是把指针地址拷贝给另外一个变量，虽然也开辟的了一个内存空间，在栈上也存在着一个地址，我对这个变量进行修改，同一个指针是会改变其值的，这种拷贝叫浅拷贝。另外一种情况，直接开辟一个新空间，把需要复制的值都复制在这个新的空间中，这种拷贝叫中深拷贝。\n\n如果看到上述的一段Js代码，很多人说它是浅拷贝，假设传入一个a对象，拷贝完成之后返回一个d，当我修改返回对象的值时并不能同时修改a对象，于是，在这里我有一个很大的疑问，在Js中到底什么是浅拷贝，什么是深拷贝的问题？\n\n这一点上感觉Js真的很奇葩，如果在开发iOS中，不可变对象copy一下，依然是不可变，所以是浅拷贝，拷贝了指针变量中存储的地址值。如果是可变对象copy一下，到不可变，空间变化了，包括不可变mutableCopy到不可变，空间依然变化了，所以是深拷贝。但是JavaScript中对于这一点要考虑一种情况，值类型，和引用类型，这个基础知识，我相信大家都非常清楚。数字，字符串等都是值类型，object，array等都是引用类型。\n\n```JavaScript\nvar a = [1,2,3];\nvar b = a;\n\nb.push(4);\nconsole.log(a); //[1,2,3,4]\n\nvar numb = 123;\nvar _numb = numb;\n_numb = 567;\n\nconsole.log(numb); //123\n```\n\n从这个例子中可以看的出来，它们使用的都是＝符号，而数组a发生了变化，numb数字却没有发生变化。那么从这里，可以有一个总结，所谓了深拷贝，浅拷贝的问题，应该针对的是有多个嵌套发生的情况。不然假设是这样的情况，还能叫浅拷贝么？\n\n```JavaScript\nvar object = {\"de\":123};\nvar o = copy(object);\no.de = 456;\nconsole.log(object) //{\"de\":123}\n```\n\n明显对象o中的de属性修改并没有影响到原始对象，一个对象中的属性是一个字符串，如果从内存空间的角度上来说，这里明显是开辟了新的空间，还能说是浅拷贝么？那么针对另外一种情况。\n\n```JavaScript\nvar object = {\n\t\"de\":{\n\t\t\"d\":123\n\t}\n}\nvar o = deepCopy(object);\no.de.d = \"asd\";\n```\n\n如果一个对象中的第一层属性，不是值类型，只单层循环，这样来看的话确实是一个浅拷贝，因为在Js中引用类型用＝赋值，实际上是引用，这样说的通。所以，深拷贝，还需要做一些处理，把object，array等引用类型识别出来，深层递归到最后一层，一个一个的拷贝。\n\n```JavaScript\nvar deepCopy = function(o){\n\tvar target = {};\n\tif(typeof o !== 'object' && !Array.isArray(o)){\n\t\treturn o;\n\t}\n\tfor(var k in o){\n\t\ttarget[k] = deepCopy(o[k]);\n\t}\n\treturn target;\n}\n```\n\n思路是如此，这个例子只考虑了两种情况，对象和数组，为了验证这样的思路，最后的结果与预期是一样的。\n\n```JavaScript\nvar _copy = {\n\t'object':{\n\t\t'name':'wen'\n\t},\n\t'array':[1,2]\n}\nvar h = deepCopy(_copy);\nh.object.name = 'lcepy';\nh.array[1] = 8;\nconsole.log(h);\nconsole.log(_copy);\n```\n\n## 面向对象\n\n面向对象的语言有一个非常明显的标志：类，通过类来创建任意多个具有相同属性和方法的对象，可惜的是Js里没有这样的概念。\n\n但是Js有一个特性：一切皆是对象。\n\n聪明的开发者通过这些特性进行摸索，于是迂回发明了一些程序设计，以便更好的组织代码结构。\n\n### 工厂模式\n\n主要是用来解决有多个相同属性和方法的对象的问题，可以用函数来封装特定的接口来实现\n\n```JavaScript\nvar computer = function(name,version){\n\treturn {\n\t\t'name':name,\n\t\t'version':version,\n\t\t'showMessage':function(){\n\t\t\talert(this.name);\n\t\t}\n\t}\n}\nvar test = computer('apple','11.1');\ntest.showMessage();\n```\n\n### 构造函数模式\n\n我们知道像原生的构造函数，比如Object，Array等，它们是在运行时自动出现在执行环境中的。因此，为了模仿它，这里也可以通过一个普通的函数，并且new出一个对象，这样就成为了自定义的构造函数，也可以为他们添加自定义的属性和方法。\n\n但是这样的构造函数有一个缺陷，就是每个方法都会在每个实例上创建一次，因为每次创建都需要分配内存空间，但是有时候这样的特性还是有用的，主要是要控制它们，在不使用的时候释放内存。\n\n```JavaScript\nvar Computer = function(name,version){\n\tthis.name = name;\n\tthis.version = version;\n\tthis.showMessage = function(){\n\t\talert(this.name);\n\t}\n}\nvar apple = new Computer('apple',2014);\nvar dell = new Computer('dell',2010);\napple.showMessage();\ndell.showMessage();\n```\n\n像apple，dell是通过Computer实例化出来的不同的对象，但是它们的constructor都是指向Computer的。这里也可以使用instanceof来对（对象）进行检测。\n\n在书写上构造函数跟其他函数是没有什么区别的，主要的区别还是在使用上，构造函数需要使用new操作符。\n\n其实这样的书写，已经跟类没有什么区别了，表面上来看，而构造函数我个人更倾向于一个类的某个静态方法。\n\n### 原型模式\n\n说到原型模式就不得不提一提关于指针的问题，因为每一个函数都有一个prototype属性，而这个属性是一个指针，指向一个对象。\n\n**C语言描述指针，这个在iOS开发中非常重要**\n\n比如我先定义一个int类型的指针变量和一个普通的int类型数据，然后给指针变量赋值。\n\n```C\n\tint *p;\n\tint pp = 123;\n\tp = &pp;\n\t*p = 999;\n\tprintf('%d',pp);\n```\n\n*是一个特殊符号用于标明它是一个指针变量。\n\n&是地址符\n\n分析这个就要说到栈内存和堆内存了，比如*p在栈内存中分配了一个地址假设是ff22x0，它还没有空间。而pp存在一个地址ff23x0，并且分配了一个空间存储着123，这个地址是指向这个空间的。\n\np = &pp 这样的赋值操作，也就是把ff23x0取出来，并且给p分配一个空间把ff23x0存储进去，并且ff22x0指向这个空间。\n\n*p = 999 从这里就可以看出来p操作的是地址，而这个地址不就是ff23x0么，于是pp成了999。\n\n所谓的指针也就是存储着地址的变量。\n\n回到原型上，如果每一个函数中的 prototype属性都是一个指针，实际上它只是一个地址引用着一个空间，而这个空间正是我们写的xxx.prototype.xxx = function(){}这样的代码在运行时分配的空间。那么可见，使用原型的好处是空间只分配一次，大家都是共享的，因为它是指针。\n\n先看一个例子\n\n```JavaScript\nvar Computer = function(name){\n\tthis.name = name;\n}\nComputer.prototype.showMessage = function(name){\n\talert(name);\n}\n\nvar apple = new Computer('apple');\nvar dell = new Computer('dell');\nComputer.prototype.isPrototypeOf(apple);\n```\n\n在解释这个原型链之前，还要明白Js的一个特性，就是如果自身不存在，它会沿着原型往上查找。它的原理稍微有些绕，Computer自身的prototype是指向它自身的原型对象的，而每一个函数又有一个constructor指向它自身，prototype.constructor又指向它自身。于是Computer的两个实例apple，dell内部有一个__proto__属性是指向Computer.prototype的，最后的结果是它们可以使用showMessage方法。\n\n当然它们还有一个搜索原则，比如在调用showMessage的时候，引擎先问apple自身有showMessage吗？“没有”，继续搜索，apple的原型有吗，“有”，调用。所以从这里可以看出，this.showMessage是会覆盖prototype.showMessage的。\n\n另外还可以使用isPrototypeOf来检测一个对象是否在另一个对象的原型链上，上述的代码返回的是true。\n\n```JavaScript\napple.hasOwnProperty('name')\napple.hasOwnProperty('showMessage')\n```\n\n使用hasOwnProperty来检测到底是对象属性还是原型属性，使用this创建的属性是一个对象属性。\n\n从上面可以看出来原型链的好处，但是它也不是万能的，正因为指针的存在，对于某些引用类型来说这个就非常不好了，我需要保持原对象属性值是每一个对象特有的，而不是共享的，于是把之前的构造函数与原型组合起来，也就解决了这样的问题。\n\n```JavaScript\nvar Computer = function(name){\n\tthis.name = name;\n}\nComputer.prototype.showMessage = function(){\n\talert(this.name);\n}\nvar apple = new Computer('apple');\napple.showMessage();\n```\n\n这样的结果是在对象中都会创建一份属于自己的属性，而方法则是共享的。\n\n**动态原型模式**\n\n有时候遇到某些问题需要动态添加原型，但是实例中是不能添加的，所以绕来一下，在初始化构造函数中添加。\n\n```JavaScript\nvar Computer = function(){\n\tif(typeof this.showMessage !== 'function'){\n\t\tComputer.prototype.showMessage = function(){\n\n\t\t}\n\t}\n}\n```\n\n只要初始化了一次，以后就不用修改了。\n\n### 寄生构造函数模式\n\n这种模式的原理就是在一个函数中封装需要创建对象的代码，然后返回它。\n\n```JavaScript\nvar test = function(name){\n\treturn {\n\t\t'name':name\n\t}\n}\nvar g = new test('apple');\nvar f = de('dell');\n```\n\n看起来它跟工厂模式还是很像的，\n\n### 稳妥模式\n\n这种模式主要是在解决需要安全的环境中使用，一般来说一个类如果不提供getter，setter方法，是不允许直接访问和修改的。\n\n```JavaScript\nvar computer = function(name){\n\tvar _name = name;\n\treturn {\n\t\t'getter':function(){\n\t\t\treturn _name;\n\t\t},\n\t\t'setter':function(name){\n\t\t\t_name = name;\n\t\t}\n\t}\n}\n```\n\n这样的方式可以保证属性或者说是数据的安全性，不允许直接随便修改，如果不提供setter方法的话，压根就不允许。\n\n### 继承\n\n谈到面向对象，那么就不能不谈谈继承的问题了，而在Js中主要是将原型作为实现继承的主要思路。\n\n```JavaScript\nvar Computer = function(name){\n\t//this.name = name;\n}\nComputer.prototype.show = function(){\n\talert('computer')\n}\n\nvar Apple = function(){\n\n}\nApple.prototype = new Computer();\nApple.prototype.hide = function(){}\nApple.prototype.show = function(){\n\talert('apple')\n}\nvar apple = new Apple();\napple.show();\nalert(apple instanceof Computer);\n```\n\n使用这样的方式，实际上是从Computer的实例中先借它的prototype中所有的方法，但是这里会存在几个问题。\n\n* 如果Computer中需要传入参数，比如name，借的时候我根本不知道要传入什么参数。\n* 在Apple中如果要继续给原型添加方法，那么就不能使用字面量的形式了，它会覆盖掉\n* 如果要重写父类中的方法必须要在借prototype之后\n* 那么如何确定原型和实例的关系？貌似用instanceof和isPrototypeOf都会返回true\n\n**解决问题一如何传入参数**\n\n我们知道Js中有两个方法可以改变函数的上下文，apply和call，实际上类就是函数，这里既借属性也借prototype，不就可以解决这样的问题了么。\n\n```JavaScript\nvar Computer = function(name){\n\t//this.name = name;\n}\nComputer.prototype.show = function(){\n\talert('computer')\n}\nvar Apple = function(name){\n\tComputer.call(this,name);\n}\nApple.prototype = new Computer();\nvar apple = new Apple('apple');\nalert(apple instanceof Apple);\nalert(apple instanceof Computer);\n```\n\n在运行时先借prototype，然后再借子类的this，但是这个也有个问题，那就是会调用两次父类。\n\n**继承的技巧**\n\n还有一种继承是生成一个临时对象，然后临时对象借需要继承的父类的prototype。\n\n```JavaScript\nvar extend = function(o){\n\tvar F = function(){}\n\tF.prototype = o;\n\treturn new F();\n}\nvar parent = {\n\t'name':['lcepy']\n}\nvar game = extend(parent);\ngame.name.push('wow');\nvar _game = extend(parent);\n_game.name.push('view');\n```\n\n使用这样的方式有个很大的缺陷，那就是不要借属性之类的数据，因为它们是共享的，这是一个浅拷贝，还是因为指针的原因。不过要是继承方法，这种方式很方便。\n\n还有一种方式跟上述类似，主要是封装了一层函数，用来返回对象。\n\n### 寄生组合继承\n\n这样的方式主要解决的问题是调用两次父类的问题，避免额外的借来的属性或方法。想想看第一次Computer.call(this)，借来了this上的属性或方法，第二次Apple.prototype = new Computer()，又借来了this上的属性或方法，这里的初衷是想借原型，没办法这个是实例，所以该借的不该借的都借来了。那么要避免这样的问题，就要解决继承属性的继承属性，继承原型的继承原型，也不乱借。\n\n```JavaScript\nvar extendPrototype = function(sub,supers){\n\tvar F = function(){}\n\tF.prototype = supers.prototype;\n\tvar _f = new F();\n\t_f.constructor = sub;\n\tsub.prototype = _f;\n}\nvar Computer = function(name){\n\tthis.name = name;\n}\nComputer.prototype.show = function(){\n\talert(this.name);\n}\t\t\nvar Apple = function(name){\n\tComputer.call(this,name);\n}\nextendPrototype(Apple,Computer);\t\t\t\nvar apple = new Apple('apple');\napple.show();\n```\n\n第一步把supers的原型赋值给F，第二步创建F的实例，第三步把_f实例的constructor属性修改成子类，第四步把_f实例赋值给子类的prototype。\n\n这样的话就是不该借的也不会继承了\n\n## 理解内存管理\n\n一般来说内存管理主要有这么几种方式，引用计数和标记，而JavaScript采用的就是标记管理的方式。Js的内存管理是自动的，但是并不是说执行完后立马销毁，而是有时间周期性，相隔一段时间执行一下垃圾回收，把没有引用的内存全部销毁。\n\nOC中采用的是引用计数来手动管理内存，这样的方式比较好，可以让开发者自己来管理。当然也有不好的地方，如果遗忘了释放，很可能引起应用的崩溃。\n\n总体来看在IE中因为COM组件的原因，可能会发生循环引用的问题，这个问题在引用计数的内存管理都会遇见。所谓的循环引用是指在对象A中包含了一个指向B的指针，然后再对象B中包含一个指向A的指针，于是悲剧了。\n\n```JavaScript\nvar element = document.getElementById('doc');\nvar my = {};\nmy.element = element;\nelement.my = my;\n```\n\n大家都引用，于是，可想而知。要避免这种问题，一定要在不使用的时候my.element = null，把它断开。\n\n那么，其他浏览器呢？还是标记清理的机制，比如一个函数的变量，在进入环境时标记上“进入环境”，执行完之后标记上“离开环境”，然后等待系统来释放。\n\nIE有一个手动释放的方法，window.CollectGarbage，调用它就立马释放已经标记离开环境的变量，不过很多文章都不建议这样做。\n\n那么一般都这样做，引用类型的释放\n\n\tvar my = {};\n\t//使用完毕之后\n\tmy = null;\n\n让my脱离执行环境，标记上已经离开环境，然后等待系统执行垃圾回收，释放内存。\n\n## XMLHttpRequest\n\n- [ JavaScript 的同源策略](https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy)\n\n>注明： IE8已上，支持现代XMLHttpRequest\n\n客户端Js与服务器进行网络交互必备的一个玩意，它不支持跨域，若要跨域还需要进行一些额外的处理。\n\n\tvar xhr = new XMLHttpRequest();\n\n在使用xhr对象时，要调用的第一个方法是open()，它接受三个参数［发送请求的类型，请求的URL，描述是否同步还是异步的布尔值］false同步，true异步。\n\n关于Ajax同步异步的个人理解：\n\n* 同步，是用数据块的方式来传输的，在Js执行的表现上，当执行到这个Ajax请求时会等待它与服务器交互成功之后才能执行下面一行的代码，也就是阻塞。\n* 异步，是用字节来传输的，它不等待是否成功，会执行之后的代码\n\n结束时需要调用xhr.send()，如果没有发送数据的主体，必须要null，做为发送参数。另外在接收到响应之前还可以调用abort()来取消异步请求（不建议调用它）\n\n### HTTP状态验证\n\n当收到响应后会自动填充xhr对象，它有几个比较重要的状态，我们必须要了解清楚与处理。\n\n* responseText:作为响应主体返回的文本\n* responseXML:如果响应内容的类型是\"text/xml\"或者\"application/xml\"，这个属性中保存的就是XML的DOM文档\n* status：响应的HTTP状态\n* statusText：HTTP状态的说明\n* readyState：用于描述请求发送到完成的过程\n\n正常情况下需要检测status === 200 readyState === 4 这就表示responseText或者responseXML中已经填充了全部的数据可以提供给客户端使用了。\n\n\t1 开头的用于描述请求已经发送，需要请求者继续操作才能继续的状态\n\t2 开头的用于描述请求已经成功\n\t3 开头的用于描述成功，但是还需要继续操作\n\t4 开头的用于描述客户端发送了什么数据导致服务器错误\n\t5 开头的用于描述服务器错误（常见的如，服务端代码抛错了）\n\nreadyState状态\n\n\t0 未初始化，还没有调用open方法\n\t1 已经调用open方法，还没有调用send方法\n\t2 已经调用send方法，但是还没有接收到响应\n\t3 已经接收了部分数据\n\t4 已经接收了全部的数据\n\n### xhr对象其他方法或事件\n\n每一个请求和响应都会带有相应的HTTP头信息，其中对开发者是很有用的，而xhr对象提供了一个setRequestHeader方法来设置头信息，它必须在调用open方法之后并且在send方法之前。\n\n既然有设置，那么必须得有获取，xhr对象也提供了两个方法分别来获取，getResponseHeader传入一个头部字段名来获取，getAllResponseHeaders来获取全部的头信息。\n\n而接收数据则需要处理onreadystatechange事件，每次刷新状态时，系统都会重新调用此事件。\n\n## 跨域\n\n- [HTTP访问控制(CORS)](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS)\n\n客户端Js出于安全的考虑，不允许跨域调用其他页面的对象，正是因为这样才给Ajax带来了很多不方便的地方。跨域最简单的理解就是因为Js同源策略的存在，比如a.com域名下的Js不能访问b.com下的Js对象。\n\n* 协议端口没法跨，客户端\n* 在跨域上，域仅仅是通过首部来识别，window.location.protocol +window.location.host\n\n### 利用document.domain和iframe来设置\n\n对于主域相同而子域名不同的情况，可以通过document.domain来处理，比如www.163.com/index.html和wow.163.com/wower.html，在这两个文件中分别加入document.domain = \"163.com\"，然后在index.html页面中创建一个iframe引入wower.html，获取iframe的contentDocument，这样这两个js就可以交互了。\n\nindex.html\n\n```JavaScript\ndocument.domain = '163.com';\nvar iframe = document.createElement('iframe');\niframe.src = 'http://wow.163.com/wower.html';\niframe.style.display = 'none';\ndocument.body.appendChild(iframe);\niframe.onload = function(){\n\tvar doc = iframe.contentDocument || iframe.contentWindow.document;\n\t//现在可以通过doc来操作wower.html中的js对象了\n}\n```\n\nwower.html\n\n\tdocument.domain = '163.com';\n\n使用这样的方式来实现的跨域是有限制的\n\n* 主域名必须是同一个\n* 安全性引发的问题，比如第一个页面出现了安全问题，在后面的页面也会出现\n* iframe引用过多的话，每一个iframe都必须设置document.domain，比较琐碎\n\n> 偶尔可以使用一下\n\n### 利用window.name\n\n稍微有些绕，但是数据量比较大，也比较安全\n\n* wow.163.com/app.html 应用所在的页面\n* wow.163.com/empty.html 中间代理页面，搞个空的即可，但是必须在主域名下\n* www.qq.com/data.html 需要交互的数据页面\n\n在data.html页面中\n\n\twindow.name = 123;\n\napp.html页面中创建一个隐藏的iframe，它的scr指向data.html，在onload事件中，把当前iframe的contentWindow.loaction修改成empty.html，当再次onload时就可以通过contentWindow.name来获取到123了。\n\n> 偶尔使用\n\n### 利用iframe和location.hash\n\n利用这种方式，说实话（不建议），比较绕，而且数据量小，直接暴露在URL上。它的原理主要是这样的，假设wow.163.com/index.html页面，wow.163.com/empty.html（空的，什么内容都没有），需要交换数据的页面在www.qq.com/a.html上。\n\n在wow.163.com/index.html#（＃号就是我们要传递的数据），创建一个隐藏的iframe，hash值可以当参数传递给www.qq.com/a.html#()，在www.qq.com/a.html中可以获取到hash值，根据它进行处理，然后在www.qq.com/a.html页面中创建一个隐藏iframe，把处理的结果当hash值进行传递，给wow.163.com/empty.html#()这样，在同一个域名下，wow.163.com/empty.html中的js可以通过parent.parent.location.hash = self.location.hash来改变hash值，这样就达到了跨域的目的。\n\n> 不建议使用，坑爹的思路\n\n### JSONP\n\n这种方式是目前开发时最常用的一种方式，利用动态创建script标签来实现跨域的目的，虽然浏览器有显示Js对象的访问，但是它没有限制Js文件的加载，任何域名下的Js文件都可以加载。\n\n对客户端而言，文件的加载其实就是发送一次GET请求，在服务端实现时，也就是处理这次的GET请求，并且响应，参数可以通过?来带走，俗称一波流。\n\n在客户端上对于script文件加载是否已经完毕的判断，IE是判断script标签的readystatechange属性，而其他浏览器是onload事件。\n\n> 突然感觉做移动端不考虑IE的兼容，果然是杠杠的，建议使用\n\n### HTML5 postMessage\n\n主要是利用window.postMessage来发送消息，监听window.message来获取消息，判断origin可以判断消息来源，data获取消息内容，soucre来引用发送方的window对象引用。\n\nwww.b.com/b.html发送消息给www.a.com/a.html\n\n\twindow.postMessage('hello','www.a.com/a.html')\n\nwww.a.com/a.html获取消息\n\n\twindow.addEventLister('message',function(event){\n\t\tif(event.origin === 'http://b.com'){\n\t\t    //处理\n\t\t}\n\t})\n\niframe的发送方式\n\n\tcontentWindow.postMessage('data','b.com')\n\n> 话不多说，移动端这种跨域方式也很常用（建议推荐使用）\n\n\n### HTML5 跨域头 XMLHttpRequest2\n\n如果是自己产品，又是做移动端可以使用，比上述任何方式都要方便，需要服务端支持响应时也要设置跨域头。\n\n如果服务器响应此头，浏览器会检查此头，它的值表示请求内容所允许的域名，也就是如果是*号，表示所有域都可以访问，如果这里是a.com，表示除了同源外，只允许来自a.com域的访问。\n\n\tAccess-Control-Allow-Origin：＊\n\n如果需要读取cookie则需要设置它\n\n\tAccess-Control-Allow-Credentials:true\n\n设置允许跨域的请求类型\n\n\tAccess-Control-Allow-Methods:POST\n\n> 兼容性问题，某些版本的浏览器需要在open之后，设置xhr.withCredentials ＝ true;话不多说，建议推荐使用\n\n## 浏览器对象模型\n\nBOM提供了很多对象，它的核心是window，表示它是浏览器的一个实例，在ECMAScript中又是Global对象。它提供了很多访问浏览器的功能，这些功能与网页无关，所以缺少事实标准的BOM既有意思又有些坑。复习它，主要是复习几个比较有用的对象，其他可以了解一二。\n\n### location\n\n> 算起来它是我用的最多的一个对象\n\n它提供了当前窗口加载的页面有关的信息，也对URL进行了片段分解，既是window的属性，也是document的属性。\n\n* hash 返回URL的散列（#号后面跟着的零个或多个值）\n* host 返回服务器名称和端口号\n* hostname 返回不带端口号的服务器名称\n* href 返回当前加载页面的完整URL\n* pathname 返回URL中的目录或文件名\n* port 返回URL中指定的端口号\n* protocol 返回页面使用的协议\n* search 返回URL中的查询字符串，它以问好（?）开头\n\n上述的属性基本上都可以直接使用，search除外，它返回的是一个完整的查询字符串，没有办法访问其中的每个查询字符串参数，还需要额外的进行处理。\n\n一般来说根据它的特点，?开头&拼接，key=value的形式来展现，最好是key和value都要decodeURIComponent一下。\n\n在location中除了上述的属性外，还有一些比较有用的方法和技巧，主要是用来控制页面跳转的问题。\n\n* assign方法接收一个参数，表示立即打开一个新的页面并在历史纪录中生成一条记录，它的效果等同于window.location.href = ''或者location.href = ''\n* 修改location对象的属性比如href，hash，search等也可以来改变URL\n* replace方法接收一个参数，既跳转到新的URL上，并且不会在历史纪录中增加一条新的纪录\n* reload表示重新加载当前页面\n\n### 处理框架，设置时间，open，窗口位置，窗口大小\n\n> open现在估计没人会用了\n\n如果页面中包含框架，则每个框架都有自己的window对象，可以使用frames来获取，比如frames[0]或者frames['name']。这里还要了解的是top，parent，对于这些只要理解的层级关系，每一个指向都是会非常清楚的。\n\n在做某些动画效果的时候，主要是针对PC端，可能会使用到窗口位置，窗口大小的属性来进行计算，比如innerWidth，innerHeight，outerWidth，outerHeight，获取到这些尺寸，一般会与当前div的高宽进行减法来获取精准的位置。\n\nsetTimeout和setInterval是进行时间调度的函数，我们知道Js是单线程的，但是可以使用这个在特定的时间范围内执行代码，前面一个setTimeout是在指定的时间内执行（只执行一次），后面的setInterval则是以指定的时间重复执行（N次）\n\n### navigator\n\n用这个一般是在统计用户浏览器版本，操作系统等场景下才用的上，偶尔有几个会比较实用。\n\n* cookieEnabled 判断cookie是否开启\n* userAgent 浏览器用户代理字符串\n* plugins数组 主要是用来检测浏览器安装的插件\n\n###screen\n\n在Js中有几个对象在编程里真用不上，这个就是其中之一。它主要是用来表明客户端的能力，比如显示器的信息，像素，高，宽等。\n\n### history\n\nhistory对象保存着用户上网的历史纪录，但是这个也是非常不常用。主要是用go方法，back方法，forward方法。\n\n> 说实话，后面三个navigator,screen,history基本上很废材，HTML5中的history对象pushState非常有用外。\n\n## 文档对象模型\n\n- [文档对象模型 (DOM)](https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model)\n\nDOM是针对HTML和XML文档的一个API，主要是使用JavaScript来进行编程操作HTML和XML文档。其他语言如果实现了DOM标准，理论上也是可以使用这个API的，这里仅仅讨论JavaScript的应用。\n\n**理解层级结构与关系**\n\n在浏览器中比如HTML页面是由很多有层次结构的标签组成的，而为这些标签提供查询，添加，删除等等方法主要就是DOM在提供支持。\n\n（页面又称为文档）文档中所有的节点之间都存在这样或那样的关系，比如下面一个经典的HTML：\n\n\t<html>\n\t\t<head></head>\n\t\t<body></body>\n\t</html>\n\n一个标签又可以称为一个元素，head和body那就是兄弟关系，它们都来自一个父系html，又可以说html的子元素是head和body，可能这样描述还不太明显，这样就用原生Js操作DOM来的方式来看看层级结构。\n\n\tvar html = document.getElementsByTagName('html')[0];\n\n先通过getElementsByTagName获取html根元素的节点，每一个元素都有一个childNodes集合和一个parentNode分别代表子节点集合和父节点，**如果不存在，则都是null，如果是集合不存在，则是一个[]**。\n\n> html的childNodes //[head,body] html的parentNode // document\n\n每一个元素也都有一个firstChild和lastChild来分别代表第一个子元素和最后一个子元素\n\n每一个元素也都有一个nextSibling和previousSibling分别代表前面一个元素和后面一个元素，以当前自己为参照物。\n\n从这样可以看出来，它就像族谱一样对元素的关系进行了定义，通过理解这些层级关系，利用DOM提供的API可以很顺利的进行操作。\n\n### 操作DOM\n\n**常见的获取方式**\n\n* document.getElementById （通过ID来获取到节点）\n* document.getElementsByTagName （通过节点标签来获取）\n* document.querySelector  \n* document.querySelectorAll\n\n后面两个属于HTML5提供的新API，在移动端会用的比较多，前者是获取单个，后者获取集合。\n\n**常见添加，删除**\n\n* appendChild\n* insterBefore\n* replaceChild\n* removeChild\n\nappendChild主要是向childNodes集合的末尾添加一条元素，insterBefore可以用来插入特定位置，两个参数，要插入的节点和作为参照的节点，更新成功后插入的节点会在参照节点之前，也就是参照节点的previousSibling。replaceChild和insterBefore有些类似，两个参数，要插入的节点和参照节点，更新成功后，要插入的节点会替换参照节点，removeChild就比较好理解了，删除一个节点，这四个方法都有返回值。\n\n**常见元素属性**\n\n一般来说，如果var doc = document.getElementById('doc');doc.id = 'xx';这样的方式也是可以更新或者获取到元素的属性的，不过不推荐这么使用，要获取元素的属性，DOM API也提供了三个方法来使用。\n\n* getAttribute\n* setAttribute\n* removeAttribute\n\ngetAttribute可以获取元素的属性，setAttribute可以对元素的属性进行设置，如果属性名不存在，则创建该属性。removeAttribute则是完全删除此属性。\n\n还有一个属性attributes，主要是获取元素属性集合，这个不是很常用，主要是在遍历元素属性时会使用到，它是一个集合。\n\n**常见创建元素或文本**\n\n一般情况下创建元素都会使用字符串的形式，innerHTML进去。不过，某些情况下，会用到createElement来创建一个元素，如果用到它，那么创建的文本也必须使用createTextNode了。\n\n对于文本节点，注释节点等开发真的很少用，可以当一个子类大概了解即可。\n\n> 关于模式的讨论，主要可以用document.compatMode来判断，如果是CSS1Compat就是标准模式，移动端不会出现这样的情况，IE上可能有别的模式，模式主要是影响到CSS布局上，Js影响非常少。\n\n> 在移动端上滚动是一个比较要处理的问题，一般来说会使用scrollIntoView，scrollIntoViewIfNeeded，scrollByLines，scrollByPages，这四个方法safari chrome都有实现，意味着在iOS和安卓平台都是良好的。\n\n* scrollByPages 将元素的内容滚动到指定的页面高度，具体的高度是由元素的高度来决定的。\n* scrollByLines 将元素的内容滚动到知道的行数高度，参数可正可负。\n* scrollIntoViewIfNeeded，当元素在视窗（viewport）不可见，会滚动容器元素或者浏览器窗口让其可见。如果是可见的，这个方法不起任何作用。如果参数为true，可能是垂直居中的可见。\n* scrollIntoView 滚动容器元素或者浏览器窗口，让元素可见。\n\n**一些小技巧**\n\n每一个元素都存在一个contains方法，用来检测传入的节点是不是当前节点的子节点，火狐对于的方法名叫compareDocumentPosition。\n\n如果要获取一个文本节点可以使用innerText（纯文本）来获取字符串，如果要获取所有的包括标签的字符串可以使用innerHTML。它们还有一种outer系列对应的方法，主要的区别是前者（outerText）会替换节点，后者(outerHTML)会修改调用它的元素，一般基本没人使用。它们可以获取，也可以通过赋值来设置新的节点。\n\n### DOM2和DOM3\n\n对于这两级在DOM中基本上IE没啥支持，或者说支持的非常少，像style对象，CSS的一些对象外。\n\n这里最大的变化是增加了对XML命名空间的支持，元素样式的访问，节点的遍历以及range。当然目前来看，节点的遍历，range，XML命名空间在开发中使用的非常少，可以当资料来阅读，了解有这么回事，用到的时候再查询。而元素样式的访问，这个在开发中普遍使用的较多，因为在没法使用css3动画的浏览器中，可以通过改变样式来到达动画的目的。\n\n\tvar doc = document.getElementById('doc');\n\tdoc.style.width = '100px';\n\n对于iframe的访问这里增加了一个contentDocument对象来进行引用，还有节点的比较，isSameNode和isEqualNode，这两个的区别在于，前者是否引用的同一个节点对象，后者是指两个节点是否是相同的类型。不过，它们使用的也不多，了解就好。\n\n**元素的大小**\n\n这个部分需要理解，因为关乎到元素在浏览器上的位置显示，跟动画有关系，四个属性。\n\n* offsetWidth 元素在水平方向占用的空间大小\n* offsetHeight 元素在垂直方向占用的空间大小\n* offsetLeft 元素的左外边框到内边框的距离\n* offsetTop 元素的上外边框到内边框的距离\n\n**滚动大小**\n\n这个在视察滚动或者处理滚动条的时候用的上，也是四个属性\n\n* scrollHeight 在没有滚动的情况下，元素的总高度\n* scrollWidth 在没有滚动的情况下，元素的总宽度\n* scrollLeft 被隐藏在内容区域左侧的像素度\n* scrollTop 被隐藏在内容区域上侧的像素度\n\n> 下面这些IE全部不支持，range支持一种叫做文本范围的东西\n\n\n**元素遍历**\n\n关于遍历其实有两个方法可用createNodeIterator和createTreeWalker，不过这些在开发中几乎不会使用到，谁没事去遍历节点完呢。\n\n**关于range**\n\n这个也是非常少会使用到，除非是做那种编辑器应用或者在线编辑器等等，不过使用它可以更精准的控制的DOM，主要是使用createRange方法。\n\n## 事件\n\n- [事件类型一览表](https://developer.mozilla.org/zh-CN/docs/Web/Events)\n\n> IE浏览器的事件不是重点\n\n事件是JavaScript与HTML进行交互的一个纽带，理解事件可以更好的处理Web应用程序，现在的浏览器中主要支持两种事件流：\n\n* 事件冒泡\n* 事件捕获\n* DOM事件流\n\n事件冒泡则是指事件开始时由具体的元素接收，然后逐级向上传播。比如：\n\n\t<html>\n\t\t<head></head>\n\t\t<body>\n\t\t\t<div>\n\t\t\t\t<p></p>\n\t\t\t</div>\n\t\t</body>\n\t</html>\n\n给p标签监听一个事件，它的流向是p,div,body,html,document，其实细心看来这种流的走向会存在一个问题，给div也监听一个事件，当用户点击P的时候是会触发两次的，好在event对象中有可以阻止事件冒泡的方法。\n\n事件捕获则是指事件由最上级接收，逐级向下传播到具体的元素上，了解了冒泡之后这个就非常好理解了，正是一个相反的步骤。\n\n而DOM事件流又正好是冒泡与捕获的结合体，它分为三个阶段：事件捕获，目标事件，事件冒泡，如果在纸上画出来，它的走向就是一个圆形。\n\n> 对于事件处理程序，写在HTML标签中的，另外一种是直接写一个function的，比如doc.onclick = function(){}，一般来说这些浏览器支持，但是基本上不会使用了。因为前者是跟HTML耦合的，不利代码维护，而且虽然HTML加载了但是Js文件还未加载，用户点击后，是直接报错的。后者虽然也可以删除，比如doc.onclick = null，对于对代码有强迫症的同学，基本上不会使用到它。\n\n那么，我们该怎么给一个元素添加上事件处理程序呢？\n\n### DOM2级事件处理程序\n\n* addEventLister\n* removeEventLister\n\n所有的DOM节点都具备这两个方法，它接收三个参数：\n\n* 要处理的事件名称，比如click（这里跟上述两个以及IE注册事件都不同，不需要on）\n* 需要事件进行处理的函数\n* 一个布尔值，表示（true，在捕获阶段调用事件处理函数）（false，在冒泡阶段调用事件处理函数）\n\n>一般情况下第三个参数都填false\n\nIE浏览器对应的两个方法，attachEvent，detachEvent，它们只有冒泡，事件名要加上on。\n\n### 事件对象\n\n在注册完事件处理程序后，事件的一个比较重要的对象必须要理解，**event事件对象**。\n\n一般来说，这个对象中包含着所有与当前元素所监听的事件有关的信息，比如元素监听的事件类型，元素本身等等。\n\n**比较重要的属性和方法（只读）**\n\n* currentTarget 真正监听事件的那个元素\n* target 事件的目标元素\n* type 事件的类型\n* perventDefault()  取消事件的默认行为\n* stopPropagation()  取消事件的捕获或者冒泡\n* bubbles 事件是否冒泡\n* eventPhase 事件处理程序的三个阶段，1捕获2处于目标3冒泡\n\n**比较重要的属性和方法（读写）**\n\n* clientX 鼠标在窗口中的水平位置\n* clientY 鼠标在窗口中的垂直位置\n\n### 事件类型\n\n> PC端主要是针对鼠标，移动端则是触摸，手势相关的处理\n\n如果在PC端上发生一次click事件，实际上它是发生了三次事件，mousedown当鼠标按下的时候，mouseup当用户放开的时候，click两个加起来就发生了一次click事件。相对于移动，PC上的鼠标事件非常的丰富，例如mouseover当鼠标首次移入一个元素边界时触发，mouseout当鼠标移出元素时触发，这个移出，到子元素上也会触发这个事件，mousemove当鼠标在元素内移动时重复触发。\n\n总体来说对于文档加载，表单控件，窗口大小改变等事件，比如获取焦点，在失去或者获取焦点是值改变等移动上都是一样的，focus（获得焦点）blur（失去焦点）。\n\n在做一些视差滚动的效果时scroll事件是非常好用，移动上在css中提供了一个类似的属性。\n\n唯一的区别是移动端上没有键盘事件。\n\n### 移动事件\n\n* touchstart 当手指触摸到屏幕时触发\n* touchmove 当手指在屏幕上连续滑动时触发\n* touchend 当手指从屏幕上移开时触发\n* touchcancel 当系统停止跟踪触摸时触发（这个事件没有确定的触发时间）\n\n它们都是冒泡的，也可以取消\n\n**三个跟踪触摸事件的属性**\n\n* touches 当前跟踪触摸操作的touch数组，在touchend事件中为空\n* targetTouchs 特定事件目标的touch数组\n* ChangedTouches 上次触摸时发生了什么改变的touch数组\n\n**移动event事件对象**\n\nPC上存在的，在移动上也存在，描述上有差异，比如\n\n* target 触摸的DOM节点目标\n* pageX 触摸目标在页面中的X坐标\n* pageY 触摸目标在页面中的Y坐标\n\n**一些手势**\n\n* gesturestart 当一个手指按在屏幕上另外一个手指又触摸屏幕时触发\n* gesturechange 依赖前者当其中的一个手指发生改变时触发\n* gestureend 当任何一个手指离开时触发\n\n**移动手势干货三部曲**\n\n- [对于Touch的处理](http://www.cnblogs.com/pifoo/archive/2011/05/23/webkit-touch-event-1.html)\n- [处理简单手势](http://www.cnblogs.com/pifoo/archive/2011/05/22/webkit-touch-event-2.html)\n- [处理复杂手势](http://www.cnblogs.com/pifoo/archive/2011/05/22/webkit-touch-event-3.html)\n\n## 结语\n\n现在的前端开发了解JS还是仅仅不够的，你需要多方面扩展。\n\n访问[Front-End-Develop-Guide](https://github.com/mulgore/Front-End-Develop-Guide)项目，资料已准备齐全。\n","source":"_posts/javascript-learn.md","raw":"title: 前端开发基础－JavaScript\ndate: 2015-12-16 12:11:15\ntags: JavaScript\n---\n\n这是很久很久之前想写的东西，拖了五六个月，没有动笔，现今补齐，内容有些多，对初学者有用，错误之处，望指出。\n\n## 理解作用域\n\n理解作用域链是Js编程中一个**必须**要具备的，作用域决定了变量和函数有权力访问哪些数据。在Web浏览器中，全局执行环境是window对象，这也意味着所有的全局变量或者方法都是window对象的属性或方法。当一个函数在被调用的时候都会创建自己的执行环境，而这个函数中所写的代码就开始进入这个函数的执行环境，于是由变量对象构建起了一个作用域链。\n\n```JavaScript\nvar wow = '魔兽世界';\nvar message = function(){\n\tvar _wow = '123';\n}\n```\n\n在这个例子中全局环境中包含了两个对象（全局环境的变量对象不算），window.wow和window.message，而这个message函数中又包含了两个对象，它自己的变量对象（其中定义了arguments对象）和全局环境的变量对象。当这个函数开始执行时，message自己的变量对象中定义了_wow，而它的全局环境的变量对象有wow，假设在message中alert一下wow，实际上是message中包含的全局环境的变量对象.wow，于是可以访问。\n\n```JavaScript\nvar wow = '123';\nvar message = function(){\n\tvar wow = '456';\n}\n```\n\n如果执行message函数alert一下wow，它的作用域是这样开始搜索的，先搜索message自己的变量对象中是否存在wow，如果有就访问并且立马停止搜索，如果没有则继续往上访问它，有wow，则访问并且立马停止搜索，以此类推一直搜索到全局环境上的变量对象，如果这里都没，恭喜你，这里要抛错了。\n\n```JavaScript\nvar c = '123';\nvar message = function(){\n\tvar g = '123';\n\tvar a = function(){\n\t\tvar d = '123';\n\t}\n}\n```\n\n在这个例子中包含有三个执行环境，全局环境，message的环境，a的环境。从这里可以看出message自身包含两个对象，自己的变量对象和全局环境中的变量对象，而函数a则包含了三个，自身的变量对象，message的变量对象和全局变量对象。\n\n当开始执行这个函数时，在函数a中可以访问到变量g，那是因为函数a包含了message的变量对象，于是在自身没有开始搜索上一级的变量对象时发现了，于是可以访问。那么访问c的原理也是如此，当自身和上一级的message的变量对象都没有，但是全局变量对象中存在，于是访问成功。\n\n了解这个作用域，对于Js编程是至关重要的，不然可能会出现，明明想要的预期结果是123，但是变成了456，为什么？那就是因为一级一级的搜索，可能会存在覆盖，或者搜索到别的地方就立即停止搜索了。\n\n## 理解引用类型\n\n引用类型虽然看起来和类很相似，但是它们却是不同的概念，引用类型的值，也就是对象是引用类型的一个实例。在Js中引用类型主要有Object，Array，Date，正则，Function等。\n\nObject和Function在后面详细复述。\n\n**Array**\n\n在Js中数组可以存储任意的数据，而且它的大小是可以动态调整的类似于OC中的NSMutableArray。创建数组可以使用构造函数的方式也可以使用字面量的形式，另外可以使用concat从一个数组中复制一个副本出来。数组本身提供了很多方法让开发者使用来操作数组。\n\n* length 数组的长度\n* toString  可以返回一个以，拼接的字符串，相当于是调用了下join(',')\n* join 可以用一个分割符来拼接成一个字符串\n* push 添加一个数据到数组的末端\n* pop 删除数组中的最后一项，有返回值\n* shift 删除数组的第一项，有返回值\n* unshift 添加一个数据到数组的首端\n* reverse 倒序\n* sort 可以传入一个排序的函数\n* slice 可以基于当前数组返回一个新的数组，接收两个参数，返回项的起始位置和结束位置\n* splice 可以传入N个参数，第一个参数表示要删除，插入或则替换的位置，第二个参数表示要删除的项数，第三个到第N个表示要插入或则替换的数据\n\n**Date**\n\n时间对象也是使用非常多的玩意，它是使用GMT时间来描述，而且时间对象是可以直接比对大小的。\n\n```JavaScript\nvar date1 = new Date(2015,1,2);\nvar date2 = new Date(2015,1,10);\ndate1 < date2  \n```\n\n常用的方法\n\n* getTime 获取时间对象的毫秒数\n* setTime 设置时间对象的毫秒数，会改变日期\n* getFullYear 获取时间对象的年（2015）\n* getMonth 获取时间对象的月（需要加1）\n* getDay 获取日期的星期几（0-6）星期天到星期六\n* getDate 获取日期的天数\n* getHours 获取当前日期的小时\n* getMinutes 获取当前日期的分钟数\n* getSeconds 获取当然日期的秒数\n\n上面看起来都是获取，当然也有设置，只是相应的get置换成set即可。\n\n**正则表达式**\n\n在Js里正则表达式是用RegExp类型来支持的，关于正则可以看看之前写的一篇文章，用python来描述的如何读懂正则。\n\nJs也支持三种模式，gim，表示全局，不区分大小写，多行。\n\n一般来说很少有人这么使用var xxx = new RegExp()，而是用字面量的方式，比如var xx = /[bc]/gi;像用的比较多的方法有exec用于捕获包含第一个匹配项的数组，没有则返回null。test，用于判断，如果匹配返回true，不匹配返回false。\n\n**处理字符串**\n\n在Js中还有一种叫做包装类型的玩意，正因为此所以处理一些基本数据类型，比如字符串时，有很多方法可以使用。\n\n* concat 可以将一个或者多个字符串拼接起来，返回一个新的字符串\n* slice 接收两个参数，起始位置和结束位置，返回一个新的字符串\n* substr和substring和slice一样，唯一的不同是substr第二个参数是返回字符串的个数\n* indexOf 从头开始查询字符串，存在会返回它所在的位置，没有返回－1\n* lastIndexOf 从最后开始查询字符串\n* toUpperCase 转大写\n* toLowerCase 转小写\n* match 正则表达式使用跟exec一样\n* search 正则表达式使用，查询到返回一个位置，没有返回－1\n* replace 替换，第一个参数可以是正则表达式也可以是字符串，第二个参数是要替换的字符串\n* localeCompare比较字符串，如果字符串相等返回0，如果字符串的字母排在参数字符串之前，返回负数，如果是之后，返回正数。\n\n## 函数\n\n- [Function](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions)\n\n说起来Js的核心是什么？那就是函数了。对于函数主要是理解它的几个概念。\n\n- 它可以当值来传递，没有重栽。\n- 声明的时候，比如function a(){} var a = function(){} 执行时会有区别\n- 函数内部的参数arguments包含了传入的所有参数\n- this，表示在这个函数内的作用域，以及prototype\n\n## 理解匿名函数和闭包\n\n匿名函数又叫拉姆达函数，主要是在把函数当值传递的时候用，或者是把函数当返回值，比如：\n\n```JavaScript\nfunction d(callback){\n\tcallback();\n}\nd(function(){\n\talert('123')\n});\n\n//或者\n\nfunction b(){\n\treturn function(){\n\t\talert('123');\n\t}\n}\nvar g = b();\ng();\n```\n\n其实第二种方式跟闭包的意义一样了，所谓的闭包书面的解释是可以访问另一个函数作用域内变量的函数，稍微改写一下可能会更明显。\n\n```JavaScript\nfunction b(){\n\tvar name = '123';\n\treturn function(){\n\t\talert(name);\n\t}\n}\nvar g = b();\ng();\n```\n\n从这里可以看出来return的函数可以访问到name，而外部却不行，这个返回值的函数就可以理解为闭包。理解闭包还可以看一个经典的求值的例子。\n\n```JavaScript\nfunction save_i(){\n\tvar a = [];\n\tfor(var i = 0;i<10;i++){\n\t\ta[i] = function(){\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn a;\n}\n\nvar c = save_i();\nfor(var i = 0;i<10;i++){\n\talert(c[i]());\n}\n```\n\n从这个例子上来看，我们想得到的结果是10次循环a[i]保存着一个闭包，然后alert出从0到10，但是结果很出人意料，全部是10，为什么？哪里理解的不对呢？a[i]明明是内部函数，然后让它访问另外一个函数作用域内的变量i。\n\n个人觉得可以这样去分析问题，在客户端执行Js时有一个全局执行环境，指向的是window对象。而所谓的对象也就是引用类型，实际上在后台执行环境中，它就是一个指针。\n\n回到Js当代码在执行的时候，会创建变量对象并且构建一个作用域链，而这个对象保存着当前函数可以访问的对象。\n\n\twindow\n\t\t->save_i\n\t\t\t->this|argument\n\t\t\t->a\n\t\t\t->i\n\t\t\t->看不见的a[0]-a[10]\n\t\t\t->a[0]function(){}\n\t\t\t\t->i\n\t    ->c\n\n上述的i和a[0]里的i是同一个i，那么结果就是10。\n\n进一步处理\n\n```JavaScript\nfunction save_i(){\n\tvar a = [];\n\tfor(var i = 0;i<10;i++){\n\t\ta[i] = function(k){\n\t\t\treturn function(){\n\t\t\t\treturn k;\n\t\t\t};\n\t\t}(i)\n\t}\n\treturn a;\n}\n\nvar c = save_i();\nfor(var i = 0;i<10;i++){\n\tconsole.log(c[i]());\n}\n```\n\n接着按上面的节奏来分析\n\n\twindow\n\t\t->save_i\n\t\t\t->this|argument\n\t\t\t->a\n\t\t\t->i\n\t\t\t->看不见的a[0]-a[10]\n\t\t\t->a[0]function(){}\n\t\t\t\t->k\n\t\t\t\t->function(){}\n\t\t\t\t\t->k\n\n\t    ->c\n\n什么是传参？按值传递，相当于是在那个立即执行的函数中创建了一个新的地址和空间，虽然值是一样的，但是每一个k又是不同的，所以得到的结果正好满足了我们的预期。\n\n本来正常情况下save_i执行完毕后就要销毁，但是内部的闭包被包含在这个作用域内了，所以save_i没法销毁，从这里可以看的出来闭包会带来内存的问题，因为用完之后没法销毁，如果不注意的话。\n\n那么用完之后只能设置为null来解除引用，等着自动销毁把内存回收。\n\n## Object\n\nJavaScript的所有对象都衍生于Object对象，所有对象都继承了Object.prototype上的方法和属性，虽然它们可能会被覆盖，熟悉它对于编程能起到很大的作用，也能比较深刻的了解JavaScript这门语言。\n\n[Object](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object)\n\n创建一个对象可以使用new，也可以使用快速创建的方式：\n\n```JavaScript\nvar _object = {};\n```\n\n_object对象中就可以使用Object.prototype中所有的方法和属性，虽然看起来它是空的。说到这里在编程中常常有一个非常有用的需求，如何判断一个对象是空对象。\n\n这是zepto中的判断一个对象是否是空对象，常常使用：\n\n```JavaScript\n$.isEmptyObject = function(obj) {\n    \tvar name\n    \tfor (name in obj) return false\n    \treturn true\n}\n```\n\n也顺便看了下jQuery原理是一模一样的：\n\n```JavaScript\nisEmptyObject: function( obj ) {\n\tvar name;\n\tfor ( name in obj ) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n```\n使用in操作符来实现，它不会遍历到父原型链。\n\nconstructor返回一个指向创建了该对象的函数引用，这个东西主要是可以用来识别（类）到底是指向哪里的。\n\ndefineProperty直接在一个对象上定义一个新属性，非常适合用于动态构建，传入三个参数［动态添加对象的目标对象，需要定义或被修改的属性名，需要定义的对象］，在第三个参数中可以有些属性来表示是否继承（__proto__），要不要定义get，set方法，enumerable是否可枚举。\n\ndefineProperties跟上述defineProperty一样，但是它可以添加多个。\n\ngetOwnPropertyNames返回一个由指定对象的所有属性组成的数组\n\nkeys返回一个数组包括对象所有的属性（可枚举）\n\n> keys是经常会用到的一个属性，它只能包可枚举的，如果想获取一个对象的所有属性包括不枚举的，那么使用getOwnPropertyNames。\n\nhasOwnProperty用于判断某个对象是否包含有自身的属性，这个方法常常用于检测对象中的属性是否存在，它只检测自身，对于继承过来的都是false，这一点是非常重要的理解。\n\nisPrototypeOf 用于检测一个对象是否在另一个对象的原型链上，比如有两个对象是互相交互的，常常会使用它来进行检测。\n\npropertyIsEnumerable这个方法也比较重要，返回一个布尔值，检测一个对象的自身属性是否可以枚举\n\n> 可枚举的理解，也就是对象的属性可枚举，它的属性值不可以修改，但是在Js中它有自己的定义，引擎内部看不见的该属性的[[Enumerable]]特性为true，那么就是可枚举的。基本上把一个普通对象可以看做是一个枚举类型，比如var color = {'red':1}，red是可以修改的，但是red是可枚举的，但是如果是继承过来的属性，propertyIsEnumerable是返回false的，它还有一个特点，就是自身。\n\n如果要定义不可枚举的属性，那就要使用defineProperty方法了，目前不能用对象直接量或者构造函数定义出来。\n\n```JavaScript\nvar obj = {name: 'jack', age:23}\nObject.defineProperty(obj, 'id', {value : '123', enumerable : false });\n```\n\n## 深拷贝与浅拷贝\n\n关于拷贝的问题，主要分为深拷贝和浅拷贝，但是如果从空间分配上来说JavaScript的拷贝不应该算是深拷贝，比如：\n\n```JavaScript\nvar d = {};\nfor(k in a){\n\td[k] = a[k];\n}\nreturn d;\n```\n\n今天突然想到了这么一个问题，在C语言中，所谓的拷贝，就是分两种情况，一种是把指针地址拷贝给另外一个变量，虽然也开辟的了一个内存空间，在栈上也存在着一个地址，我对这个变量进行修改，同一个指针是会改变其值的，这种拷贝叫浅拷贝。另外一种情况，直接开辟一个新空间，把需要复制的值都复制在这个新的空间中，这种拷贝叫中深拷贝。\n\n如果看到上述的一段Js代码，很多人说它是浅拷贝，假设传入一个a对象，拷贝完成之后返回一个d，当我修改返回对象的值时并不能同时修改a对象，于是，在这里我有一个很大的疑问，在Js中到底什么是浅拷贝，什么是深拷贝的问题？\n\n这一点上感觉Js真的很奇葩，如果在开发iOS中，不可变对象copy一下，依然是不可变，所以是浅拷贝，拷贝了指针变量中存储的地址值。如果是可变对象copy一下，到不可变，空间变化了，包括不可变mutableCopy到不可变，空间依然变化了，所以是深拷贝。但是JavaScript中对于这一点要考虑一种情况，值类型，和引用类型，这个基础知识，我相信大家都非常清楚。数字，字符串等都是值类型，object，array等都是引用类型。\n\n```JavaScript\nvar a = [1,2,3];\nvar b = a;\n\nb.push(4);\nconsole.log(a); //[1,2,3,4]\n\nvar numb = 123;\nvar _numb = numb;\n_numb = 567;\n\nconsole.log(numb); //123\n```\n\n从这个例子中可以看的出来，它们使用的都是＝符号，而数组a发生了变化，numb数字却没有发生变化。那么从这里，可以有一个总结，所谓了深拷贝，浅拷贝的问题，应该针对的是有多个嵌套发生的情况。不然假设是这样的情况，还能叫浅拷贝么？\n\n```JavaScript\nvar object = {\"de\":123};\nvar o = copy(object);\no.de = 456;\nconsole.log(object) //{\"de\":123}\n```\n\n明显对象o中的de属性修改并没有影响到原始对象，一个对象中的属性是一个字符串，如果从内存空间的角度上来说，这里明显是开辟了新的空间，还能说是浅拷贝么？那么针对另外一种情况。\n\n```JavaScript\nvar object = {\n\t\"de\":{\n\t\t\"d\":123\n\t}\n}\nvar o = deepCopy(object);\no.de.d = \"asd\";\n```\n\n如果一个对象中的第一层属性，不是值类型，只单层循环，这样来看的话确实是一个浅拷贝，因为在Js中引用类型用＝赋值，实际上是引用，这样说的通。所以，深拷贝，还需要做一些处理，把object，array等引用类型识别出来，深层递归到最后一层，一个一个的拷贝。\n\n```JavaScript\nvar deepCopy = function(o){\n\tvar target = {};\n\tif(typeof o !== 'object' && !Array.isArray(o)){\n\t\treturn o;\n\t}\n\tfor(var k in o){\n\t\ttarget[k] = deepCopy(o[k]);\n\t}\n\treturn target;\n}\n```\n\n思路是如此，这个例子只考虑了两种情况，对象和数组，为了验证这样的思路，最后的结果与预期是一样的。\n\n```JavaScript\nvar _copy = {\n\t'object':{\n\t\t'name':'wen'\n\t},\n\t'array':[1,2]\n}\nvar h = deepCopy(_copy);\nh.object.name = 'lcepy';\nh.array[1] = 8;\nconsole.log(h);\nconsole.log(_copy);\n```\n\n## 面向对象\n\n面向对象的语言有一个非常明显的标志：类，通过类来创建任意多个具有相同属性和方法的对象，可惜的是Js里没有这样的概念。\n\n但是Js有一个特性：一切皆是对象。\n\n聪明的开发者通过这些特性进行摸索，于是迂回发明了一些程序设计，以便更好的组织代码结构。\n\n### 工厂模式\n\n主要是用来解决有多个相同属性和方法的对象的问题，可以用函数来封装特定的接口来实现\n\n```JavaScript\nvar computer = function(name,version){\n\treturn {\n\t\t'name':name,\n\t\t'version':version,\n\t\t'showMessage':function(){\n\t\t\talert(this.name);\n\t\t}\n\t}\n}\nvar test = computer('apple','11.1');\ntest.showMessage();\n```\n\n### 构造函数模式\n\n我们知道像原生的构造函数，比如Object，Array等，它们是在运行时自动出现在执行环境中的。因此，为了模仿它，这里也可以通过一个普通的函数，并且new出一个对象，这样就成为了自定义的构造函数，也可以为他们添加自定义的属性和方法。\n\n但是这样的构造函数有一个缺陷，就是每个方法都会在每个实例上创建一次，因为每次创建都需要分配内存空间，但是有时候这样的特性还是有用的，主要是要控制它们，在不使用的时候释放内存。\n\n```JavaScript\nvar Computer = function(name,version){\n\tthis.name = name;\n\tthis.version = version;\n\tthis.showMessage = function(){\n\t\talert(this.name);\n\t}\n}\nvar apple = new Computer('apple',2014);\nvar dell = new Computer('dell',2010);\napple.showMessage();\ndell.showMessage();\n```\n\n像apple，dell是通过Computer实例化出来的不同的对象，但是它们的constructor都是指向Computer的。这里也可以使用instanceof来对（对象）进行检测。\n\n在书写上构造函数跟其他函数是没有什么区别的，主要的区别还是在使用上，构造函数需要使用new操作符。\n\n其实这样的书写，已经跟类没有什么区别了，表面上来看，而构造函数我个人更倾向于一个类的某个静态方法。\n\n### 原型模式\n\n说到原型模式就不得不提一提关于指针的问题，因为每一个函数都有一个prototype属性，而这个属性是一个指针，指向一个对象。\n\n**C语言描述指针，这个在iOS开发中非常重要**\n\n比如我先定义一个int类型的指针变量和一个普通的int类型数据，然后给指针变量赋值。\n\n```C\n\tint *p;\n\tint pp = 123;\n\tp = &pp;\n\t*p = 999;\n\tprintf('%d',pp);\n```\n\n*是一个特殊符号用于标明它是一个指针变量。\n\n&是地址符\n\n分析这个就要说到栈内存和堆内存了，比如*p在栈内存中分配了一个地址假设是ff22x0，它还没有空间。而pp存在一个地址ff23x0，并且分配了一个空间存储着123，这个地址是指向这个空间的。\n\np = &pp 这样的赋值操作，也就是把ff23x0取出来，并且给p分配一个空间把ff23x0存储进去，并且ff22x0指向这个空间。\n\n*p = 999 从这里就可以看出来p操作的是地址，而这个地址不就是ff23x0么，于是pp成了999。\n\n所谓的指针也就是存储着地址的变量。\n\n回到原型上，如果每一个函数中的 prototype属性都是一个指针，实际上它只是一个地址引用着一个空间，而这个空间正是我们写的xxx.prototype.xxx = function(){}这样的代码在运行时分配的空间。那么可见，使用原型的好处是空间只分配一次，大家都是共享的，因为它是指针。\n\n先看一个例子\n\n```JavaScript\nvar Computer = function(name){\n\tthis.name = name;\n}\nComputer.prototype.showMessage = function(name){\n\talert(name);\n}\n\nvar apple = new Computer('apple');\nvar dell = new Computer('dell');\nComputer.prototype.isPrototypeOf(apple);\n```\n\n在解释这个原型链之前，还要明白Js的一个特性，就是如果自身不存在，它会沿着原型往上查找。它的原理稍微有些绕，Computer自身的prototype是指向它自身的原型对象的，而每一个函数又有一个constructor指向它自身，prototype.constructor又指向它自身。于是Computer的两个实例apple，dell内部有一个__proto__属性是指向Computer.prototype的，最后的结果是它们可以使用showMessage方法。\n\n当然它们还有一个搜索原则，比如在调用showMessage的时候，引擎先问apple自身有showMessage吗？“没有”，继续搜索，apple的原型有吗，“有”，调用。所以从这里可以看出，this.showMessage是会覆盖prototype.showMessage的。\n\n另外还可以使用isPrototypeOf来检测一个对象是否在另一个对象的原型链上，上述的代码返回的是true。\n\n```JavaScript\napple.hasOwnProperty('name')\napple.hasOwnProperty('showMessage')\n```\n\n使用hasOwnProperty来检测到底是对象属性还是原型属性，使用this创建的属性是一个对象属性。\n\n从上面可以看出来原型链的好处，但是它也不是万能的，正因为指针的存在，对于某些引用类型来说这个就非常不好了，我需要保持原对象属性值是每一个对象特有的，而不是共享的，于是把之前的构造函数与原型组合起来，也就解决了这样的问题。\n\n```JavaScript\nvar Computer = function(name){\n\tthis.name = name;\n}\nComputer.prototype.showMessage = function(){\n\talert(this.name);\n}\nvar apple = new Computer('apple');\napple.showMessage();\n```\n\n这样的结果是在对象中都会创建一份属于自己的属性，而方法则是共享的。\n\n**动态原型模式**\n\n有时候遇到某些问题需要动态添加原型，但是实例中是不能添加的，所以绕来一下，在初始化构造函数中添加。\n\n```JavaScript\nvar Computer = function(){\n\tif(typeof this.showMessage !== 'function'){\n\t\tComputer.prototype.showMessage = function(){\n\n\t\t}\n\t}\n}\n```\n\n只要初始化了一次，以后就不用修改了。\n\n### 寄生构造函数模式\n\n这种模式的原理就是在一个函数中封装需要创建对象的代码，然后返回它。\n\n```JavaScript\nvar test = function(name){\n\treturn {\n\t\t'name':name\n\t}\n}\nvar g = new test('apple');\nvar f = de('dell');\n```\n\n看起来它跟工厂模式还是很像的，\n\n### 稳妥模式\n\n这种模式主要是在解决需要安全的环境中使用，一般来说一个类如果不提供getter，setter方法，是不允许直接访问和修改的。\n\n```JavaScript\nvar computer = function(name){\n\tvar _name = name;\n\treturn {\n\t\t'getter':function(){\n\t\t\treturn _name;\n\t\t},\n\t\t'setter':function(name){\n\t\t\t_name = name;\n\t\t}\n\t}\n}\n```\n\n这样的方式可以保证属性或者说是数据的安全性，不允许直接随便修改，如果不提供setter方法的话，压根就不允许。\n\n### 继承\n\n谈到面向对象，那么就不能不谈谈继承的问题了，而在Js中主要是将原型作为实现继承的主要思路。\n\n```JavaScript\nvar Computer = function(name){\n\t//this.name = name;\n}\nComputer.prototype.show = function(){\n\talert('computer')\n}\n\nvar Apple = function(){\n\n}\nApple.prototype = new Computer();\nApple.prototype.hide = function(){}\nApple.prototype.show = function(){\n\talert('apple')\n}\nvar apple = new Apple();\napple.show();\nalert(apple instanceof Computer);\n```\n\n使用这样的方式，实际上是从Computer的实例中先借它的prototype中所有的方法，但是这里会存在几个问题。\n\n* 如果Computer中需要传入参数，比如name，借的时候我根本不知道要传入什么参数。\n* 在Apple中如果要继续给原型添加方法，那么就不能使用字面量的形式了，它会覆盖掉\n* 如果要重写父类中的方法必须要在借prototype之后\n* 那么如何确定原型和实例的关系？貌似用instanceof和isPrototypeOf都会返回true\n\n**解决问题一如何传入参数**\n\n我们知道Js中有两个方法可以改变函数的上下文，apply和call，实际上类就是函数，这里既借属性也借prototype，不就可以解决这样的问题了么。\n\n```JavaScript\nvar Computer = function(name){\n\t//this.name = name;\n}\nComputer.prototype.show = function(){\n\talert('computer')\n}\nvar Apple = function(name){\n\tComputer.call(this,name);\n}\nApple.prototype = new Computer();\nvar apple = new Apple('apple');\nalert(apple instanceof Apple);\nalert(apple instanceof Computer);\n```\n\n在运行时先借prototype，然后再借子类的this，但是这个也有个问题，那就是会调用两次父类。\n\n**继承的技巧**\n\n还有一种继承是生成一个临时对象，然后临时对象借需要继承的父类的prototype。\n\n```JavaScript\nvar extend = function(o){\n\tvar F = function(){}\n\tF.prototype = o;\n\treturn new F();\n}\nvar parent = {\n\t'name':['lcepy']\n}\nvar game = extend(parent);\ngame.name.push('wow');\nvar _game = extend(parent);\n_game.name.push('view');\n```\n\n使用这样的方式有个很大的缺陷，那就是不要借属性之类的数据，因为它们是共享的，这是一个浅拷贝，还是因为指针的原因。不过要是继承方法，这种方式很方便。\n\n还有一种方式跟上述类似，主要是封装了一层函数，用来返回对象。\n\n### 寄生组合继承\n\n这样的方式主要解决的问题是调用两次父类的问题，避免额外的借来的属性或方法。想想看第一次Computer.call(this)，借来了this上的属性或方法，第二次Apple.prototype = new Computer()，又借来了this上的属性或方法，这里的初衷是想借原型，没办法这个是实例，所以该借的不该借的都借来了。那么要避免这样的问题，就要解决继承属性的继承属性，继承原型的继承原型，也不乱借。\n\n```JavaScript\nvar extendPrototype = function(sub,supers){\n\tvar F = function(){}\n\tF.prototype = supers.prototype;\n\tvar _f = new F();\n\t_f.constructor = sub;\n\tsub.prototype = _f;\n}\nvar Computer = function(name){\n\tthis.name = name;\n}\nComputer.prototype.show = function(){\n\talert(this.name);\n}\t\t\nvar Apple = function(name){\n\tComputer.call(this,name);\n}\nextendPrototype(Apple,Computer);\t\t\t\nvar apple = new Apple('apple');\napple.show();\n```\n\n第一步把supers的原型赋值给F，第二步创建F的实例，第三步把_f实例的constructor属性修改成子类，第四步把_f实例赋值给子类的prototype。\n\n这样的话就是不该借的也不会继承了\n\n## 理解内存管理\n\n一般来说内存管理主要有这么几种方式，引用计数和标记，而JavaScript采用的就是标记管理的方式。Js的内存管理是自动的，但是并不是说执行完后立马销毁，而是有时间周期性，相隔一段时间执行一下垃圾回收，把没有引用的内存全部销毁。\n\nOC中采用的是引用计数来手动管理内存，这样的方式比较好，可以让开发者自己来管理。当然也有不好的地方，如果遗忘了释放，很可能引起应用的崩溃。\n\n总体来看在IE中因为COM组件的原因，可能会发生循环引用的问题，这个问题在引用计数的内存管理都会遇见。所谓的循环引用是指在对象A中包含了一个指向B的指针，然后再对象B中包含一个指向A的指针，于是悲剧了。\n\n```JavaScript\nvar element = document.getElementById('doc');\nvar my = {};\nmy.element = element;\nelement.my = my;\n```\n\n大家都引用，于是，可想而知。要避免这种问题，一定要在不使用的时候my.element = null，把它断开。\n\n那么，其他浏览器呢？还是标记清理的机制，比如一个函数的变量，在进入环境时标记上“进入环境”，执行完之后标记上“离开环境”，然后等待系统来释放。\n\nIE有一个手动释放的方法，window.CollectGarbage，调用它就立马释放已经标记离开环境的变量，不过很多文章都不建议这样做。\n\n那么一般都这样做，引用类型的释放\n\n\tvar my = {};\n\t//使用完毕之后\n\tmy = null;\n\n让my脱离执行环境，标记上已经离开环境，然后等待系统执行垃圾回收，释放内存。\n\n## XMLHttpRequest\n\n- [ JavaScript 的同源策略](https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy)\n\n>注明： IE8已上，支持现代XMLHttpRequest\n\n客户端Js与服务器进行网络交互必备的一个玩意，它不支持跨域，若要跨域还需要进行一些额外的处理。\n\n\tvar xhr = new XMLHttpRequest();\n\n在使用xhr对象时，要调用的第一个方法是open()，它接受三个参数［发送请求的类型，请求的URL，描述是否同步还是异步的布尔值］false同步，true异步。\n\n关于Ajax同步异步的个人理解：\n\n* 同步，是用数据块的方式来传输的，在Js执行的表现上，当执行到这个Ajax请求时会等待它与服务器交互成功之后才能执行下面一行的代码，也就是阻塞。\n* 异步，是用字节来传输的，它不等待是否成功，会执行之后的代码\n\n结束时需要调用xhr.send()，如果没有发送数据的主体，必须要null，做为发送参数。另外在接收到响应之前还可以调用abort()来取消异步请求（不建议调用它）\n\n### HTTP状态验证\n\n当收到响应后会自动填充xhr对象，它有几个比较重要的状态，我们必须要了解清楚与处理。\n\n* responseText:作为响应主体返回的文本\n* responseXML:如果响应内容的类型是\"text/xml\"或者\"application/xml\"，这个属性中保存的就是XML的DOM文档\n* status：响应的HTTP状态\n* statusText：HTTP状态的说明\n* readyState：用于描述请求发送到完成的过程\n\n正常情况下需要检测status === 200 readyState === 4 这就表示responseText或者responseXML中已经填充了全部的数据可以提供给客户端使用了。\n\n\t1 开头的用于描述请求已经发送，需要请求者继续操作才能继续的状态\n\t2 开头的用于描述请求已经成功\n\t3 开头的用于描述成功，但是还需要继续操作\n\t4 开头的用于描述客户端发送了什么数据导致服务器错误\n\t5 开头的用于描述服务器错误（常见的如，服务端代码抛错了）\n\nreadyState状态\n\n\t0 未初始化，还没有调用open方法\n\t1 已经调用open方法，还没有调用send方法\n\t2 已经调用send方法，但是还没有接收到响应\n\t3 已经接收了部分数据\n\t4 已经接收了全部的数据\n\n### xhr对象其他方法或事件\n\n每一个请求和响应都会带有相应的HTTP头信息，其中对开发者是很有用的，而xhr对象提供了一个setRequestHeader方法来设置头信息，它必须在调用open方法之后并且在send方法之前。\n\n既然有设置，那么必须得有获取，xhr对象也提供了两个方法分别来获取，getResponseHeader传入一个头部字段名来获取，getAllResponseHeaders来获取全部的头信息。\n\n而接收数据则需要处理onreadystatechange事件，每次刷新状态时，系统都会重新调用此事件。\n\n## 跨域\n\n- [HTTP访问控制(CORS)](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS)\n\n客户端Js出于安全的考虑，不允许跨域调用其他页面的对象，正是因为这样才给Ajax带来了很多不方便的地方。跨域最简单的理解就是因为Js同源策略的存在，比如a.com域名下的Js不能访问b.com下的Js对象。\n\n* 协议端口没法跨，客户端\n* 在跨域上，域仅仅是通过首部来识别，window.location.protocol +window.location.host\n\n### 利用document.domain和iframe来设置\n\n对于主域相同而子域名不同的情况，可以通过document.domain来处理，比如www.163.com/index.html和wow.163.com/wower.html，在这两个文件中分别加入document.domain = \"163.com\"，然后在index.html页面中创建一个iframe引入wower.html，获取iframe的contentDocument，这样这两个js就可以交互了。\n\nindex.html\n\n```JavaScript\ndocument.domain = '163.com';\nvar iframe = document.createElement('iframe');\niframe.src = 'http://wow.163.com/wower.html';\niframe.style.display = 'none';\ndocument.body.appendChild(iframe);\niframe.onload = function(){\n\tvar doc = iframe.contentDocument || iframe.contentWindow.document;\n\t//现在可以通过doc来操作wower.html中的js对象了\n}\n```\n\nwower.html\n\n\tdocument.domain = '163.com';\n\n使用这样的方式来实现的跨域是有限制的\n\n* 主域名必须是同一个\n* 安全性引发的问题，比如第一个页面出现了安全问题，在后面的页面也会出现\n* iframe引用过多的话，每一个iframe都必须设置document.domain，比较琐碎\n\n> 偶尔可以使用一下\n\n### 利用window.name\n\n稍微有些绕，但是数据量比较大，也比较安全\n\n* wow.163.com/app.html 应用所在的页面\n* wow.163.com/empty.html 中间代理页面，搞个空的即可，但是必须在主域名下\n* www.qq.com/data.html 需要交互的数据页面\n\n在data.html页面中\n\n\twindow.name = 123;\n\napp.html页面中创建一个隐藏的iframe，它的scr指向data.html，在onload事件中，把当前iframe的contentWindow.loaction修改成empty.html，当再次onload时就可以通过contentWindow.name来获取到123了。\n\n> 偶尔使用\n\n### 利用iframe和location.hash\n\n利用这种方式，说实话（不建议），比较绕，而且数据量小，直接暴露在URL上。它的原理主要是这样的，假设wow.163.com/index.html页面，wow.163.com/empty.html（空的，什么内容都没有），需要交换数据的页面在www.qq.com/a.html上。\n\n在wow.163.com/index.html#（＃号就是我们要传递的数据），创建一个隐藏的iframe，hash值可以当参数传递给www.qq.com/a.html#()，在www.qq.com/a.html中可以获取到hash值，根据它进行处理，然后在www.qq.com/a.html页面中创建一个隐藏iframe，把处理的结果当hash值进行传递，给wow.163.com/empty.html#()这样，在同一个域名下，wow.163.com/empty.html中的js可以通过parent.parent.location.hash = self.location.hash来改变hash值，这样就达到了跨域的目的。\n\n> 不建议使用，坑爹的思路\n\n### JSONP\n\n这种方式是目前开发时最常用的一种方式，利用动态创建script标签来实现跨域的目的，虽然浏览器有显示Js对象的访问，但是它没有限制Js文件的加载，任何域名下的Js文件都可以加载。\n\n对客户端而言，文件的加载其实就是发送一次GET请求，在服务端实现时，也就是处理这次的GET请求，并且响应，参数可以通过?来带走，俗称一波流。\n\n在客户端上对于script文件加载是否已经完毕的判断，IE是判断script标签的readystatechange属性，而其他浏览器是onload事件。\n\n> 突然感觉做移动端不考虑IE的兼容，果然是杠杠的，建议使用\n\n### HTML5 postMessage\n\n主要是利用window.postMessage来发送消息，监听window.message来获取消息，判断origin可以判断消息来源，data获取消息内容，soucre来引用发送方的window对象引用。\n\nwww.b.com/b.html发送消息给www.a.com/a.html\n\n\twindow.postMessage('hello','www.a.com/a.html')\n\nwww.a.com/a.html获取消息\n\n\twindow.addEventLister('message',function(event){\n\t\tif(event.origin === 'http://b.com'){\n\t\t    //处理\n\t\t}\n\t})\n\niframe的发送方式\n\n\tcontentWindow.postMessage('data','b.com')\n\n> 话不多说，移动端这种跨域方式也很常用（建议推荐使用）\n\n\n### HTML5 跨域头 XMLHttpRequest2\n\n如果是自己产品，又是做移动端可以使用，比上述任何方式都要方便，需要服务端支持响应时也要设置跨域头。\n\n如果服务器响应此头，浏览器会检查此头，它的值表示请求内容所允许的域名，也就是如果是*号，表示所有域都可以访问，如果这里是a.com，表示除了同源外，只允许来自a.com域的访问。\n\n\tAccess-Control-Allow-Origin：＊\n\n如果需要读取cookie则需要设置它\n\n\tAccess-Control-Allow-Credentials:true\n\n设置允许跨域的请求类型\n\n\tAccess-Control-Allow-Methods:POST\n\n> 兼容性问题，某些版本的浏览器需要在open之后，设置xhr.withCredentials ＝ true;话不多说，建议推荐使用\n\n## 浏览器对象模型\n\nBOM提供了很多对象，它的核心是window，表示它是浏览器的一个实例，在ECMAScript中又是Global对象。它提供了很多访问浏览器的功能，这些功能与网页无关，所以缺少事实标准的BOM既有意思又有些坑。复习它，主要是复习几个比较有用的对象，其他可以了解一二。\n\n### location\n\n> 算起来它是我用的最多的一个对象\n\n它提供了当前窗口加载的页面有关的信息，也对URL进行了片段分解，既是window的属性，也是document的属性。\n\n* hash 返回URL的散列（#号后面跟着的零个或多个值）\n* host 返回服务器名称和端口号\n* hostname 返回不带端口号的服务器名称\n* href 返回当前加载页面的完整URL\n* pathname 返回URL中的目录或文件名\n* port 返回URL中指定的端口号\n* protocol 返回页面使用的协议\n* search 返回URL中的查询字符串，它以问好（?）开头\n\n上述的属性基本上都可以直接使用，search除外，它返回的是一个完整的查询字符串，没有办法访问其中的每个查询字符串参数，还需要额外的进行处理。\n\n一般来说根据它的特点，?开头&拼接，key=value的形式来展现，最好是key和value都要decodeURIComponent一下。\n\n在location中除了上述的属性外，还有一些比较有用的方法和技巧，主要是用来控制页面跳转的问题。\n\n* assign方法接收一个参数，表示立即打开一个新的页面并在历史纪录中生成一条记录，它的效果等同于window.location.href = ''或者location.href = ''\n* 修改location对象的属性比如href，hash，search等也可以来改变URL\n* replace方法接收一个参数，既跳转到新的URL上，并且不会在历史纪录中增加一条新的纪录\n* reload表示重新加载当前页面\n\n### 处理框架，设置时间，open，窗口位置，窗口大小\n\n> open现在估计没人会用了\n\n如果页面中包含框架，则每个框架都有自己的window对象，可以使用frames来获取，比如frames[0]或者frames['name']。这里还要了解的是top，parent，对于这些只要理解的层级关系，每一个指向都是会非常清楚的。\n\n在做某些动画效果的时候，主要是针对PC端，可能会使用到窗口位置，窗口大小的属性来进行计算，比如innerWidth，innerHeight，outerWidth，outerHeight，获取到这些尺寸，一般会与当前div的高宽进行减法来获取精准的位置。\n\nsetTimeout和setInterval是进行时间调度的函数，我们知道Js是单线程的，但是可以使用这个在特定的时间范围内执行代码，前面一个setTimeout是在指定的时间内执行（只执行一次），后面的setInterval则是以指定的时间重复执行（N次）\n\n### navigator\n\n用这个一般是在统计用户浏览器版本，操作系统等场景下才用的上，偶尔有几个会比较实用。\n\n* cookieEnabled 判断cookie是否开启\n* userAgent 浏览器用户代理字符串\n* plugins数组 主要是用来检测浏览器安装的插件\n\n###screen\n\n在Js中有几个对象在编程里真用不上，这个就是其中之一。它主要是用来表明客户端的能力，比如显示器的信息，像素，高，宽等。\n\n### history\n\nhistory对象保存着用户上网的历史纪录，但是这个也是非常不常用。主要是用go方法，back方法，forward方法。\n\n> 说实话，后面三个navigator,screen,history基本上很废材，HTML5中的history对象pushState非常有用外。\n\n## 文档对象模型\n\n- [文档对象模型 (DOM)](https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model)\n\nDOM是针对HTML和XML文档的一个API，主要是使用JavaScript来进行编程操作HTML和XML文档。其他语言如果实现了DOM标准，理论上也是可以使用这个API的，这里仅仅讨论JavaScript的应用。\n\n**理解层级结构与关系**\n\n在浏览器中比如HTML页面是由很多有层次结构的标签组成的，而为这些标签提供查询，添加，删除等等方法主要就是DOM在提供支持。\n\n（页面又称为文档）文档中所有的节点之间都存在这样或那样的关系，比如下面一个经典的HTML：\n\n\t<html>\n\t\t<head></head>\n\t\t<body></body>\n\t</html>\n\n一个标签又可以称为一个元素，head和body那就是兄弟关系，它们都来自一个父系html，又可以说html的子元素是head和body，可能这样描述还不太明显，这样就用原生Js操作DOM来的方式来看看层级结构。\n\n\tvar html = document.getElementsByTagName('html')[0];\n\n先通过getElementsByTagName获取html根元素的节点，每一个元素都有一个childNodes集合和一个parentNode分别代表子节点集合和父节点，**如果不存在，则都是null，如果是集合不存在，则是一个[]**。\n\n> html的childNodes //[head,body] html的parentNode // document\n\n每一个元素也都有一个firstChild和lastChild来分别代表第一个子元素和最后一个子元素\n\n每一个元素也都有一个nextSibling和previousSibling分别代表前面一个元素和后面一个元素，以当前自己为参照物。\n\n从这样可以看出来，它就像族谱一样对元素的关系进行了定义，通过理解这些层级关系，利用DOM提供的API可以很顺利的进行操作。\n\n### 操作DOM\n\n**常见的获取方式**\n\n* document.getElementById （通过ID来获取到节点）\n* document.getElementsByTagName （通过节点标签来获取）\n* document.querySelector  \n* document.querySelectorAll\n\n后面两个属于HTML5提供的新API，在移动端会用的比较多，前者是获取单个，后者获取集合。\n\n**常见添加，删除**\n\n* appendChild\n* insterBefore\n* replaceChild\n* removeChild\n\nappendChild主要是向childNodes集合的末尾添加一条元素，insterBefore可以用来插入特定位置，两个参数，要插入的节点和作为参照的节点，更新成功后插入的节点会在参照节点之前，也就是参照节点的previousSibling。replaceChild和insterBefore有些类似，两个参数，要插入的节点和参照节点，更新成功后，要插入的节点会替换参照节点，removeChild就比较好理解了，删除一个节点，这四个方法都有返回值。\n\n**常见元素属性**\n\n一般来说，如果var doc = document.getElementById('doc');doc.id = 'xx';这样的方式也是可以更新或者获取到元素的属性的，不过不推荐这么使用，要获取元素的属性，DOM API也提供了三个方法来使用。\n\n* getAttribute\n* setAttribute\n* removeAttribute\n\ngetAttribute可以获取元素的属性，setAttribute可以对元素的属性进行设置，如果属性名不存在，则创建该属性。removeAttribute则是完全删除此属性。\n\n还有一个属性attributes，主要是获取元素属性集合，这个不是很常用，主要是在遍历元素属性时会使用到，它是一个集合。\n\n**常见创建元素或文本**\n\n一般情况下创建元素都会使用字符串的形式，innerHTML进去。不过，某些情况下，会用到createElement来创建一个元素，如果用到它，那么创建的文本也必须使用createTextNode了。\n\n对于文本节点，注释节点等开发真的很少用，可以当一个子类大概了解即可。\n\n> 关于模式的讨论，主要可以用document.compatMode来判断，如果是CSS1Compat就是标准模式，移动端不会出现这样的情况，IE上可能有别的模式，模式主要是影响到CSS布局上，Js影响非常少。\n\n> 在移动端上滚动是一个比较要处理的问题，一般来说会使用scrollIntoView，scrollIntoViewIfNeeded，scrollByLines，scrollByPages，这四个方法safari chrome都有实现，意味着在iOS和安卓平台都是良好的。\n\n* scrollByPages 将元素的内容滚动到指定的页面高度，具体的高度是由元素的高度来决定的。\n* scrollByLines 将元素的内容滚动到知道的行数高度，参数可正可负。\n* scrollIntoViewIfNeeded，当元素在视窗（viewport）不可见，会滚动容器元素或者浏览器窗口让其可见。如果是可见的，这个方法不起任何作用。如果参数为true，可能是垂直居中的可见。\n* scrollIntoView 滚动容器元素或者浏览器窗口，让元素可见。\n\n**一些小技巧**\n\n每一个元素都存在一个contains方法，用来检测传入的节点是不是当前节点的子节点，火狐对于的方法名叫compareDocumentPosition。\n\n如果要获取一个文本节点可以使用innerText（纯文本）来获取字符串，如果要获取所有的包括标签的字符串可以使用innerHTML。它们还有一种outer系列对应的方法，主要的区别是前者（outerText）会替换节点，后者(outerHTML)会修改调用它的元素，一般基本没人使用。它们可以获取，也可以通过赋值来设置新的节点。\n\n### DOM2和DOM3\n\n对于这两级在DOM中基本上IE没啥支持，或者说支持的非常少，像style对象，CSS的一些对象外。\n\n这里最大的变化是增加了对XML命名空间的支持，元素样式的访问，节点的遍历以及range。当然目前来看，节点的遍历，range，XML命名空间在开发中使用的非常少，可以当资料来阅读，了解有这么回事，用到的时候再查询。而元素样式的访问，这个在开发中普遍使用的较多，因为在没法使用css3动画的浏览器中，可以通过改变样式来到达动画的目的。\n\n\tvar doc = document.getElementById('doc');\n\tdoc.style.width = '100px';\n\n对于iframe的访问这里增加了一个contentDocument对象来进行引用，还有节点的比较，isSameNode和isEqualNode，这两个的区别在于，前者是否引用的同一个节点对象，后者是指两个节点是否是相同的类型。不过，它们使用的也不多，了解就好。\n\n**元素的大小**\n\n这个部分需要理解，因为关乎到元素在浏览器上的位置显示，跟动画有关系，四个属性。\n\n* offsetWidth 元素在水平方向占用的空间大小\n* offsetHeight 元素在垂直方向占用的空间大小\n* offsetLeft 元素的左外边框到内边框的距离\n* offsetTop 元素的上外边框到内边框的距离\n\n**滚动大小**\n\n这个在视察滚动或者处理滚动条的时候用的上，也是四个属性\n\n* scrollHeight 在没有滚动的情况下，元素的总高度\n* scrollWidth 在没有滚动的情况下，元素的总宽度\n* scrollLeft 被隐藏在内容区域左侧的像素度\n* scrollTop 被隐藏在内容区域上侧的像素度\n\n> 下面这些IE全部不支持，range支持一种叫做文本范围的东西\n\n\n**元素遍历**\n\n关于遍历其实有两个方法可用createNodeIterator和createTreeWalker，不过这些在开发中几乎不会使用到，谁没事去遍历节点完呢。\n\n**关于range**\n\n这个也是非常少会使用到，除非是做那种编辑器应用或者在线编辑器等等，不过使用它可以更精准的控制的DOM，主要是使用createRange方法。\n\n## 事件\n\n- [事件类型一览表](https://developer.mozilla.org/zh-CN/docs/Web/Events)\n\n> IE浏览器的事件不是重点\n\n事件是JavaScript与HTML进行交互的一个纽带，理解事件可以更好的处理Web应用程序，现在的浏览器中主要支持两种事件流：\n\n* 事件冒泡\n* 事件捕获\n* DOM事件流\n\n事件冒泡则是指事件开始时由具体的元素接收，然后逐级向上传播。比如：\n\n\t<html>\n\t\t<head></head>\n\t\t<body>\n\t\t\t<div>\n\t\t\t\t<p></p>\n\t\t\t</div>\n\t\t</body>\n\t</html>\n\n给p标签监听一个事件，它的流向是p,div,body,html,document，其实细心看来这种流的走向会存在一个问题，给div也监听一个事件，当用户点击P的时候是会触发两次的，好在event对象中有可以阻止事件冒泡的方法。\n\n事件捕获则是指事件由最上级接收，逐级向下传播到具体的元素上，了解了冒泡之后这个就非常好理解了，正是一个相反的步骤。\n\n而DOM事件流又正好是冒泡与捕获的结合体，它分为三个阶段：事件捕获，目标事件，事件冒泡，如果在纸上画出来，它的走向就是一个圆形。\n\n> 对于事件处理程序，写在HTML标签中的，另外一种是直接写一个function的，比如doc.onclick = function(){}，一般来说这些浏览器支持，但是基本上不会使用了。因为前者是跟HTML耦合的，不利代码维护，而且虽然HTML加载了但是Js文件还未加载，用户点击后，是直接报错的。后者虽然也可以删除，比如doc.onclick = null，对于对代码有强迫症的同学，基本上不会使用到它。\n\n那么，我们该怎么给一个元素添加上事件处理程序呢？\n\n### DOM2级事件处理程序\n\n* addEventLister\n* removeEventLister\n\n所有的DOM节点都具备这两个方法，它接收三个参数：\n\n* 要处理的事件名称，比如click（这里跟上述两个以及IE注册事件都不同，不需要on）\n* 需要事件进行处理的函数\n* 一个布尔值，表示（true，在捕获阶段调用事件处理函数）（false，在冒泡阶段调用事件处理函数）\n\n>一般情况下第三个参数都填false\n\nIE浏览器对应的两个方法，attachEvent，detachEvent，它们只有冒泡，事件名要加上on。\n\n### 事件对象\n\n在注册完事件处理程序后，事件的一个比较重要的对象必须要理解，**event事件对象**。\n\n一般来说，这个对象中包含着所有与当前元素所监听的事件有关的信息，比如元素监听的事件类型，元素本身等等。\n\n**比较重要的属性和方法（只读）**\n\n* currentTarget 真正监听事件的那个元素\n* target 事件的目标元素\n* type 事件的类型\n* perventDefault()  取消事件的默认行为\n* stopPropagation()  取消事件的捕获或者冒泡\n* bubbles 事件是否冒泡\n* eventPhase 事件处理程序的三个阶段，1捕获2处于目标3冒泡\n\n**比较重要的属性和方法（读写）**\n\n* clientX 鼠标在窗口中的水平位置\n* clientY 鼠标在窗口中的垂直位置\n\n### 事件类型\n\n> PC端主要是针对鼠标，移动端则是触摸，手势相关的处理\n\n如果在PC端上发生一次click事件，实际上它是发生了三次事件，mousedown当鼠标按下的时候，mouseup当用户放开的时候，click两个加起来就发生了一次click事件。相对于移动，PC上的鼠标事件非常的丰富，例如mouseover当鼠标首次移入一个元素边界时触发，mouseout当鼠标移出元素时触发，这个移出，到子元素上也会触发这个事件，mousemove当鼠标在元素内移动时重复触发。\n\n总体来说对于文档加载，表单控件，窗口大小改变等事件，比如获取焦点，在失去或者获取焦点是值改变等移动上都是一样的，focus（获得焦点）blur（失去焦点）。\n\n在做一些视差滚动的效果时scroll事件是非常好用，移动上在css中提供了一个类似的属性。\n\n唯一的区别是移动端上没有键盘事件。\n\n### 移动事件\n\n* touchstart 当手指触摸到屏幕时触发\n* touchmove 当手指在屏幕上连续滑动时触发\n* touchend 当手指从屏幕上移开时触发\n* touchcancel 当系统停止跟踪触摸时触发（这个事件没有确定的触发时间）\n\n它们都是冒泡的，也可以取消\n\n**三个跟踪触摸事件的属性**\n\n* touches 当前跟踪触摸操作的touch数组，在touchend事件中为空\n* targetTouchs 特定事件目标的touch数组\n* ChangedTouches 上次触摸时发生了什么改变的touch数组\n\n**移动event事件对象**\n\nPC上存在的，在移动上也存在，描述上有差异，比如\n\n* target 触摸的DOM节点目标\n* pageX 触摸目标在页面中的X坐标\n* pageY 触摸目标在页面中的Y坐标\n\n**一些手势**\n\n* gesturestart 当一个手指按在屏幕上另外一个手指又触摸屏幕时触发\n* gesturechange 依赖前者当其中的一个手指发生改变时触发\n* gestureend 当任何一个手指离开时触发\n\n**移动手势干货三部曲**\n\n- [对于Touch的处理](http://www.cnblogs.com/pifoo/archive/2011/05/23/webkit-touch-event-1.html)\n- [处理简单手势](http://www.cnblogs.com/pifoo/archive/2011/05/22/webkit-touch-event-2.html)\n- [处理复杂手势](http://www.cnblogs.com/pifoo/archive/2011/05/22/webkit-touch-event-3.html)\n\n## 结语\n\n现在的前端开发了解JS还是仅仅不够的，你需要多方面扩展。\n\n访问[Front-End-Develop-Guide](https://github.com/mulgore/Front-End-Develop-Guide)项目，资料已准备齐全。\n","slug":"javascript-learn","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk0q000suejraqvjbyl9","content":"<p>这是很久很久之前想写的东西，拖了五六个月，没有动笔，现今补齐，内容有些多，对初学者有用，错误之处，望指出。</p>\n<h2 id=\"理解作用域\"><a href=\"#理解作用域\" class=\"headerlink\" title=\"理解作用域\"></a>理解作用域</h2><p>理解作用域链是Js编程中一个<strong>必须</strong>要具备的，作用域决定了变量和函数有权力访问哪些数据。在Web浏览器中，全局执行环境是window对象，这也意味着所有的全局变量或者方法都是window对象的属性或方法。当一个函数在被调用的时候都会创建自己的执行环境，而这个函数中所写的代码就开始进入这个函数的执行环境，于是由变量对象构建起了一个作用域链。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> wow = <span class=\"string\">'魔兽世界'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> _wow = <span class=\"string\">'123'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个例子中全局环境中包含了两个对象（全局环境的变量对象不算），window.wow和window.message，而这个message函数中又包含了两个对象，它自己的变量对象（其中定义了arguments对象）和全局环境的变量对象。当这个函数开始执行时，message自己的变量对象中定义了_wow，而它的全局环境的变量对象有wow，假设在message中alert一下wow，实际上是message中包含的全局环境的变量对象.wow，于是可以访问。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> wow = <span class=\"string\">'123'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wow = <span class=\"string\">'456'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果执行message函数alert一下wow，它的作用域是这样开始搜索的，先搜索message自己的变量对象中是否存在wow，如果有就访问并且立马停止搜索，如果没有则继续往上访问它，有wow，则访问并且立马停止搜索，以此类推一直搜索到全局环境上的变量对象，如果这里都没，恭喜你，这里要抛错了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"string\">'123'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> g = <span class=\"string\">'123'</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> d = <span class=\"string\">'123'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个例子中包含有三个执行环境，全局环境，message的环境，a的环境。从这里可以看出message自身包含两个对象，自己的变量对象和全局环境中的变量对象，而函数a则包含了三个，自身的变量对象，message的变量对象和全局变量对象。</p>\n<p>当开始执行这个函数时，在函数a中可以访问到变量g，那是因为函数a包含了message的变量对象，于是在自身没有开始搜索上一级的变量对象时发现了，于是可以访问。那么访问c的原理也是如此，当自身和上一级的message的变量对象都没有，但是全局变量对象中存在，于是访问成功。</p>\n<p>了解这个作用域，对于Js编程是至关重要的，不然可能会出现，明明想要的预期结果是123，但是变成了456，为什么？那就是因为一级一级的搜索，可能会存在覆盖，或者搜索到别的地方就立即停止搜索了。</p>\n<h2 id=\"理解引用类型\"><a href=\"#理解引用类型\" class=\"headerlink\" title=\"理解引用类型\"></a>理解引用类型</h2><p>引用类型虽然看起来和类很相似，但是它们却是不同的概念，引用类型的值，也就是对象是引用类型的一个实例。在Js中引用类型主要有Object，Array，Date，正则，Function等。</p>\n<p>Object和Function在后面详细复述。</p>\n<p><strong>Array</strong></p>\n<p>在Js中数组可以存储任意的数据，而且它的大小是可以动态调整的类似于OC中的NSMutableArray。创建数组可以使用构造函数的方式也可以使用字面量的形式，另外可以使用concat从一个数组中复制一个副本出来。数组本身提供了很多方法让开发者使用来操作数组。</p>\n<ul>\n<li>length 数组的长度</li>\n<li>toString  可以返回一个以，拼接的字符串，相当于是调用了下join(‘,’)</li>\n<li>join 可以用一个分割符来拼接成一个字符串</li>\n<li>push 添加一个数据到数组的末端</li>\n<li>pop 删除数组中的最后一项，有返回值</li>\n<li>shift 删除数组的第一项，有返回值</li>\n<li>unshift 添加一个数据到数组的首端</li>\n<li>reverse 倒序</li>\n<li>sort 可以传入一个排序的函数</li>\n<li>slice 可以基于当前数组返回一个新的数组，接收两个参数，返回项的起始位置和结束位置</li>\n<li>splice 可以传入N个参数，第一个参数表示要删除，插入或则替换的位置，第二个参数表示要删除的项数，第三个到第N个表示要插入或则替换的数据</li>\n</ul>\n<p><strong>Date</strong></p>\n<p>时间对象也是使用非常多的玩意，它是使用GMT时间来描述，而且时间对象是可以直接比对大小的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> date1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2015</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> date2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2015</span>,<span class=\"number\">1</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">date1 &lt; date2</span><br></pre></td></tr></table></figure>\n<p>常用的方法</p>\n<ul>\n<li>getTime 获取时间对象的毫秒数</li>\n<li>setTime 设置时间对象的毫秒数，会改变日期</li>\n<li>getFullYear 获取时间对象的年（2015）</li>\n<li>getMonth 获取时间对象的月（需要加1）</li>\n<li>getDay 获取日期的星期几（0-6）星期天到星期六</li>\n<li>getDate 获取日期的天数</li>\n<li>getHours 获取当前日期的小时</li>\n<li>getMinutes 获取当前日期的分钟数</li>\n<li>getSeconds 获取当然日期的秒数</li>\n</ul>\n<p>上面看起来都是获取，当然也有设置，只是相应的get置换成set即可。</p>\n<p><strong>正则表达式</strong></p>\n<p>在Js里正则表达式是用RegExp类型来支持的，关于正则可以看看之前写的一篇文章，用python来描述的如何读懂正则。</p>\n<p>Js也支持三种模式，gim，表示全局，不区分大小写，多行。</p>\n<p>一般来说很少有人这么使用var xxx = new RegExp()，而是用字面量的方式，比如var xx = /[bc]/gi;像用的比较多的方法有exec用于捕获包含第一个匹配项的数组，没有则返回null。test，用于判断，如果匹配返回true，不匹配返回false。</p>\n<p><strong>处理字符串</strong></p>\n<p>在Js中还有一种叫做包装类型的玩意，正因为此所以处理一些基本数据类型，比如字符串时，有很多方法可以使用。</p>\n<ul>\n<li>concat 可以将一个或者多个字符串拼接起来，返回一个新的字符串</li>\n<li>slice 接收两个参数，起始位置和结束位置，返回一个新的字符串</li>\n<li>substr和substring和slice一样，唯一的不同是substr第二个参数是返回字符串的个数</li>\n<li>indexOf 从头开始查询字符串，存在会返回它所在的位置，没有返回－1</li>\n<li>lastIndexOf 从最后开始查询字符串</li>\n<li>toUpperCase 转大写</li>\n<li>toLowerCase 转小写</li>\n<li>match 正则表达式使用跟exec一样</li>\n<li>search 正则表达式使用，查询到返回一个位置，没有返回－1</li>\n<li>replace 替换，第一个参数可以是正则表达式也可以是字符串，第二个参数是要替换的字符串</li>\n<li>localeCompare比较字符串，如果字符串相等返回0，如果字符串的字母排在参数字符串之前，返回负数，如果是之后，返回正数。</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions\" target=\"_blank\" rel=\"external\">Function</a></li>\n</ul>\n<p>说起来Js的核心是什么？那就是函数了。对于函数主要是理解它的几个概念。</p>\n<ul>\n<li>它可以当值来传递，没有重栽。</li>\n<li>声明的时候，比如function a(){} var a = function(){} 执行时会有区别</li>\n<li>函数内部的参数arguments包含了传入的所有参数</li>\n<li>this，表示在这个函数内的作用域，以及prototype</li>\n</ul>\n<h2 id=\"理解匿名函数和闭包\"><a href=\"#理解匿名函数和闭包\" class=\"headerlink\" title=\"理解匿名函数和闭包\"></a>理解匿名函数和闭包</h2><p>匿名函数又叫拉姆达函数，主要是在把函数当值传递的时候用，或者是把函数当返回值，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">\tcallback();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">d(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">'123'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\talert(<span class=\"string\">'123'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> g = b();</span><br><span class=\"line\">g();</span><br></pre></td></tr></table></figure>\n<p>其实第二种方式跟闭包的意义一样了，所谓的闭包书面的解释是可以访问另一个函数作用域内变量的函数，稍微改写一下可能会更明显。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> name = <span class=\"string\">'123'</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\talert(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> g = b();</span><br><span class=\"line\">g();</span><br></pre></td></tr></table></figure>\n<p>从这里可以看出来return的函数可以访问到name，而外部却不行，这个返回值的函数就可以理解为闭包。理解闭包还可以看一个经典的求值的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">save_i</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">\t\ta[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = save_i();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">\talert(c[i]());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从这个例子上来看，我们想得到的结果是10次循环a[i]保存着一个闭包，然后alert出从0到10，但是结果很出人意料，全部是10，为什么？哪里理解的不对呢？a[i]明明是内部函数，然后让它访问另外一个函数作用域内的变量i。</p>\n<p>个人觉得可以这样去分析问题，在客户端执行Js时有一个全局执行环境，指向的是window对象。而所谓的对象也就是引用类型，实际上在后台执行环境中，它就是一个指针。</p>\n<p>回到Js当代码在执行的时候，会创建变量对象并且构建一个作用域链，而这个对象保存着当前函数可以访问的对象。</p>\n<pre><code>window\n    -&gt;save_i\n        -&gt;this|argument\n        -&gt;a\n        -&gt;i\n        -&gt;看不见的a[0]-a[10]\n        -&gt;a[0]function(){}\n            -&gt;i\n    -&gt;c\n</code></pre><p>上述的i和a[0]里的i是同一个i，那么结果就是10。</p>\n<p>进一步处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">save_i</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">\t\ta[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">k</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> k;</span><br><span class=\"line\">\t\t\t&#125;;</span><br><span class=\"line\">\t\t&#125;(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = save_i();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(c[i]());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着按上面的节奏来分析</p>\n<pre><code>window\n    -&gt;save_i\n        -&gt;this|argument\n        -&gt;a\n        -&gt;i\n        -&gt;看不见的a[0]-a[10]\n        -&gt;a[0]function(){}\n            -&gt;k\n            -&gt;function(){}\n                -&gt;k\n\n    -&gt;c\n</code></pre><p>什么是传参？按值传递，相当于是在那个立即执行的函数中创建了一个新的地址和空间，虽然值是一样的，但是每一个k又是不同的，所以得到的结果正好满足了我们的预期。</p>\n<p>本来正常情况下save_i执行完毕后就要销毁，但是内部的闭包被包含在这个作用域内了，所以save_i没法销毁，从这里可以看的出来闭包会带来内存的问题，因为用完之后没法销毁，如果不注意的话。</p>\n<p>那么用完之后只能设置为null来解除引用，等着自动销毁把内存回收。</p>\n<h2 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h2><p>JavaScript的所有对象都衍生于Object对象，所有对象都继承了Object.prototype上的方法和属性，虽然它们可能会被覆盖，熟悉它对于编程能起到很大的作用，也能比较深刻的了解JavaScript这门语言。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\" target=\"_blank\" rel=\"external\">Object</a></p>\n<p>创建一个对象可以使用new，也可以使用快速创建的方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _object = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n<p>_object对象中就可以使用Object.prototype中所有的方法和属性，虽然看起来它是空的。说到这里在编程中常常有一个非常有用的需求，如何判断一个对象是空对象。</p>\n<p>这是zepto中的判断一个对象是否是空对象，常常使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.isEmptyObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">var</span> name</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span> (name <span class=\"keyword\">in</span> obj) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也顺便看了下jQuery原理是一模一样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isEmptyObject: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> obj </span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> name;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ( name <span class=\"keyword\">in</span> obj ) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用in操作符来实现，它不会遍历到父原型链。</p>\n<p>constructor返回一个指向创建了该对象的函数引用，这个东西主要是可以用来识别（类）到底是指向哪里的。</p>\n<p>defineProperty直接在一个对象上定义一个新属性，非常适合用于动态构建，传入三个参数［动态添加对象的目标对象，需要定义或被修改的属性名，需要定义的对象］，在第三个参数中可以有些属性来表示是否继承（<strong>proto</strong>），要不要定义get，set方法，enumerable是否可枚举。</p>\n<p>defineProperties跟上述defineProperty一样，但是它可以添加多个。</p>\n<p>getOwnPropertyNames返回一个由指定对象的所有属性组成的数组</p>\n<p>keys返回一个数组包括对象所有的属性（可枚举）</p>\n<blockquote>\n<p>keys是经常会用到的一个属性，它只能包可枚举的，如果想获取一个对象的所有属性包括不枚举的，那么使用getOwnPropertyNames。</p>\n</blockquote>\n<p>hasOwnProperty用于判断某个对象是否包含有自身的属性，这个方法常常用于检测对象中的属性是否存在，它只检测自身，对于继承过来的都是false，这一点是非常重要的理解。</p>\n<p>isPrototypeOf 用于检测一个对象是否在另一个对象的原型链上，比如有两个对象是互相交互的，常常会使用它来进行检测。</p>\n<p>propertyIsEnumerable这个方法也比较重要，返回一个布尔值，检测一个对象的自身属性是否可以枚举</p>\n<blockquote>\n<p>可枚举的理解，也就是对象的属性可枚举，它的属性值不可以修改，但是在Js中它有自己的定义，引擎内部看不见的该属性的[[Enumerable]]特性为true，那么就是可枚举的。基本上把一个普通对象可以看做是一个枚举类型，比如var color = {‘red’:1}，red是可以修改的，但是red是可枚举的，但是如果是继承过来的属性，propertyIsEnumerable是返回false的，它还有一个特点，就是自身。</p>\n</blockquote>\n<p>如果要定义不可枚举的属性，那就要使用defineProperty方法了，目前不能用对象直接量或者构造函数定义出来。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;name: <span class=\"string\">'jack'</span>, age:<span class=\"number\">23</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'id'</span>, &#123;value : <span class=\"string\">'123'</span>, enumerable : <span class=\"literal\">false</span> &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"深拷贝与浅拷贝\"><a href=\"#深拷贝与浅拷贝\" class=\"headerlink\" title=\"深拷贝与浅拷贝\"></a>深拷贝与浅拷贝</h2><p>关于拷贝的问题，主要分为深拷贝和浅拷贝，但是如果从空间分配上来说JavaScript的拷贝不应该算是深拷贝，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> d = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(k <span class=\"keyword\">in</span> a)&#123;</span><br><span class=\"line\">\td[k] = a[k];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> d;</span><br></pre></td></tr></table></figure>\n<p>今天突然想到了这么一个问题，在C语言中，所谓的拷贝，就是分两种情况，一种是把指针地址拷贝给另外一个变量，虽然也开辟的了一个内存空间，在栈上也存在着一个地址，我对这个变量进行修改，同一个指针是会改变其值的，这种拷贝叫浅拷贝。另外一种情况，直接开辟一个新空间，把需要复制的值都复制在这个新的空间中，这种拷贝叫中深拷贝。</p>\n<p>如果看到上述的一段Js代码，很多人说它是浅拷贝，假设传入一个a对象，拷贝完成之后返回一个d，当我修改返回对象的值时并不能同时修改a对象，于是，在这里我有一个很大的疑问，在Js中到底什么是浅拷贝，什么是深拷贝的问题？</p>\n<p>这一点上感觉Js真的很奇葩，如果在开发iOS中，不可变对象copy一下，依然是不可变，所以是浅拷贝，拷贝了指针变量中存储的地址值。如果是可变对象copy一下，到不可变，空间变化了，包括不可变mutableCopy到不可变，空间依然变化了，所以是深拷贝。但是JavaScript中对于这一点要考虑一种情况，值类型，和引用类型，这个基础知识，我相信大家都非常清楚。数字，字符串等都是值类型，object，array等都是引用类型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\"></span><br><span class=\"line\">b.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">//[1,2,3,4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> numb = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> _numb = numb;</span><br><span class=\"line\">_numb = <span class=\"number\">567</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numb); <span class=\"comment\">//123</span></span><br></pre></td></tr></table></figure>\n<p>从这个例子中可以看的出来，它们使用的都是＝符号，而数组a发生了变化，numb数字却没有发生变化。那么从这里，可以有一个总结，所谓了深拷贝，浅拷贝的问题，应该针对的是有多个嵌套发生的情况。不然假设是这样的情况，还能叫浅拷贝么？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;<span class=\"string\">\"de\"</span>:<span class=\"number\">123</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = copy(object);</span><br><span class=\"line\">o.de = <span class=\"number\">456</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(object) <span class=\"comment\">//&#123;\"de\":123&#125;</span></span><br></pre></td></tr></table></figure>\n<p>明显对象o中的de属性修改并没有影响到原始对象，一个对象中的属性是一个字符串，如果从内存空间的角度上来说，这里明显是开辟了新的空间，还能说是浅拷贝么？那么针对另外一种情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"de\"</span>:&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"d\"</span>:<span class=\"number\">123</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = deepCopy(object);</span><br><span class=\"line\">o.de.d = <span class=\"string\">\"asd\"</span>;</span><br></pre></td></tr></table></figure>\n<p>如果一个对象中的第一层属性，不是值类型，只单层循环，这样来看的话确实是一个浅拷贝，因为在Js中引用类型用＝赋值，实际上是引用，这样说的通。所以，深拷贝，还需要做一些处理，把object，array等引用类型识别出来，深层递归到最后一层，一个一个的拷贝。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> deepCopy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">o</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> target = &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> o !== <span class=\"string\">'object'</span> &amp;&amp; !<span class=\"built_in\">Array</span>.isArray(o))&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> o;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> o)&#123;</span><br><span class=\"line\">\t\ttarget[k] = deepCopy(o[k]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>思路是如此，这个例子只考虑了两种情况，对象和数组，为了验证这样的思路，最后的结果与预期是一样的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _copy = &#123;</span><br><span class=\"line\">\t<span class=\"string\">'object'</span>:&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">'name'</span>:<span class=\"string\">'wen'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">'array'</span>:[<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> h = deepCopy(_copy);</span><br><span class=\"line\">h.object.name = <span class=\"string\">'lcepy'</span>;</span><br><span class=\"line\">h.array[<span class=\"number\">1</span>] = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(h);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_copy);</span><br></pre></td></tr></table></figure>\n<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><p>面向对象的语言有一个非常明显的标志：类，通过类来创建任意多个具有相同属性和方法的对象，可惜的是Js里没有这样的概念。</p>\n<p>但是Js有一个特性：一切皆是对象。</p>\n<p>聪明的开发者通过这些特性进行摸索，于是迂回发明了一些程序设计，以便更好的组织代码结构。</p>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>主要是用来解决有多个相同属性和方法的对象的问题，可以用函数来封装特定的接口来实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> computer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,version</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">'name'</span>:name,</span><br><span class=\"line\">\t\t<span class=\"string\">'version'</span>:version,</span><br><span class=\"line\">\t\t<span class=\"string\">'showMessage'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\talert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> test = computer(<span class=\"string\">'apple'</span>,<span class=\"string\">'11.1'</span>);</span><br><span class=\"line\">test.showMessage();</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h3><p>我们知道像原生的构造函数，比如Object，Array等，它们是在运行时自动出现在执行环境中的。因此，为了模仿它，这里也可以通过一个普通的函数，并且new出一个对象，这样就成为了自定义的构造函数，也可以为他们添加自定义的属性和方法。</p>\n<p>但是这样的构造函数有一个缺陷，就是每个方法都会在每个实例上创建一次，因为每次创建都需要分配内存空间，但是有时候这样的特性还是有用的，主要是要控制它们，在不使用的时候释放内存。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Computer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,version</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.version = version;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.showMessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\talert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"keyword\">new</span> Computer(<span class=\"string\">'apple'</span>,<span class=\"number\">2014</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> dell = <span class=\"keyword\">new</span> Computer(<span class=\"string\">'dell'</span>,<span class=\"number\">2010</span>);</span><br><span class=\"line\">apple.showMessage();</span><br><span class=\"line\">dell.showMessage();</span><br></pre></td></tr></table></figure>\n<p>像apple，dell是通过Computer实例化出来的不同的对象，但是它们的constructor都是指向Computer的。这里也可以使用instanceof来对（对象）进行检测。</p>\n<p>在书写上构造函数跟其他函数是没有什么区别的，主要的区别还是在使用上，构造函数需要使用new操作符。</p>\n<p>其实这样的书写，已经跟类没有什么区别了，表面上来看，而构造函数我个人更倾向于一个类的某个静态方法。</p>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><p>说到原型模式就不得不提一提关于指针的问题，因为每一个函数都有一个prototype属性，而这个属性是一个指针，指向一个对象。</p>\n<p><strong>C语言描述指针，这个在iOS开发中非常重要</strong></p>\n<p>比如我先定义一个int类型的指针变量和一个普通的int类型数据，然后给指针变量赋值。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int *p;</span><br><span class=\"line\">int pp = 123;</span><br><span class=\"line\">p = &amp;pp;</span><br><span class=\"line\">*p = 999;</span><br><span class=\"line\">printf('%d',pp);</span><br></pre></td></tr></table></figure>\n<p>*是一个特殊符号用于标明它是一个指针变量。</p>\n<p>&amp;是地址符</p>\n<p>分析这个就要说到栈内存和堆内存了，比如*p在栈内存中分配了一个地址假设是ff22x0，它还没有空间。而pp存在一个地址ff23x0，并且分配了一个空间存储着123，这个地址是指向这个空间的。</p>\n<p>p = &amp;pp 这样的赋值操作，也就是把ff23x0取出来，并且给p分配一个空间把ff23x0存储进去，并且ff22x0指向这个空间。</p>\n<p>*p = 999 从这里就可以看出来p操作的是地址，而这个地址不就是ff23x0么，于是pp成了999。</p>\n<p>所谓的指针也就是存储着地址的变量。</p>\n<p>回到原型上，如果每一个函数中的 prototype属性都是一个指针，实际上它只是一个地址引用着一个空间，而这个空间正是我们写的xxx.prototype.xxx = function(){}这样的代码在运行时分配的空间。那么可见，使用原型的好处是空间只分配一次，大家都是共享的，因为它是指针。</p>\n<p>先看一个例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Computer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Computer.prototype.showMessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\talert(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"keyword\">new</span> Computer(<span class=\"string\">'apple'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> dell = <span class=\"keyword\">new</span> Computer(<span class=\"string\">'dell'</span>);</span><br><span class=\"line\">Computer.prototype.isPrototypeOf(apple);</span><br></pre></td></tr></table></figure>\n<p>在解释这个原型链之前，还要明白Js的一个特性，就是如果自身不存在，它会沿着原型往上查找。它的原理稍微有些绕，Computer自身的prototype是指向它自身的原型对象的，而每一个函数又有一个constructor指向它自身，prototype.constructor又指向它自身。于是Computer的两个实例apple，dell内部有一个<strong>proto</strong>属性是指向Computer.prototype的，最后的结果是它们可以使用showMessage方法。</p>\n<p>当然它们还有一个搜索原则，比如在调用showMessage的时候，引擎先问apple自身有showMessage吗？“没有”，继续搜索，apple的原型有吗，“有”，调用。所以从这里可以看出，this.showMessage是会覆盖prototype.showMessage的。</p>\n<p>另外还可以使用isPrototypeOf来检测一个对象是否在另一个对象的原型链上，上述的代码返回的是true。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apple.hasOwnProperty(<span class=\"string\">'name'</span>)</span><br><span class=\"line\">apple.hasOwnProperty(<span class=\"string\">'showMessage'</span>)</span><br></pre></td></tr></table></figure>\n<p>使用hasOwnProperty来检测到底是对象属性还是原型属性，使用this创建的属性是一个对象属性。</p>\n<p>从上面可以看出来原型链的好处，但是它也不是万能的，正因为指针的存在，对于某些引用类型来说这个就非常不好了，我需要保持原对象属性值是每一个对象特有的，而不是共享的，于是把之前的构造函数与原型组合起来，也就解决了这样的问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Computer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Computer.prototype.showMessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"keyword\">new</span> Computer(<span class=\"string\">'apple'</span>);</span><br><span class=\"line\">apple.showMessage();</span><br></pre></td></tr></table></figure>\n<p>这样的结果是在对象中都会创建一份属于自己的属性，而方法则是共享的。</p>\n<p><strong>动态原型模式</strong></p>\n<p>有时候遇到某些问题需要动态添加原型，但是实例中是不能添加的，所以绕来一下，在初始化构造函数中添加。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Computer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>.showMessage !== <span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">\t\tComputer.prototype.showMessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只要初始化了一次，以后就不用修改了。</p>\n<h3 id=\"寄生构造函数模式\"><a href=\"#寄生构造函数模式\" class=\"headerlink\" title=\"寄生构造函数模式\"></a>寄生构造函数模式</h3><p>这种模式的原理就是在一个函数中封装需要创建对象的代码，然后返回它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">'name'</span>:name</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"keyword\">new</span> test(<span class=\"string\">'apple'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = de(<span class=\"string\">'dell'</span>);</span><br></pre></td></tr></table></figure>\n<p>看起来它跟工厂模式还是很像的，</p>\n<h3 id=\"稳妥模式\"><a href=\"#稳妥模式\" class=\"headerlink\" title=\"稳妥模式\"></a>稳妥模式</h3><p>这种模式主要是在解决需要安全的环境中使用，一般来说一个类如果不提供getter，setter方法，是不允许直接访问和修改的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> computer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> _name = name;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">'getter'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> _name;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"string\">'setter'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t_name = name;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样的方式可以保证属性或者说是数据的安全性，不允许直接随便修改，如果不提供setter方法的话，压根就不允许。</p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>谈到面向对象，那么就不能不谈谈继承的问题了，而在Js中主要是将原型作为实现继承的主要思路。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Computer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//this.name = name;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Computer.prototype.show = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">'computer'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Apple = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Apple.prototype = <span class=\"keyword\">new</span> Computer();</span><br><span class=\"line\">Apple.prototype.hide = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">Apple.prototype.show = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">'apple'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">apple.show();</span><br><span class=\"line\">alert(apple <span class=\"keyword\">instanceof</span> Computer);</span><br></pre></td></tr></table></figure>\n<p>使用这样的方式，实际上是从Computer的实例中先借它的prototype中所有的方法，但是这里会存在几个问题。</p>\n<ul>\n<li>如果Computer中需要传入参数，比如name，借的时候我根本不知道要传入什么参数。</li>\n<li>在Apple中如果要继续给原型添加方法，那么就不能使用字面量的形式了，它会覆盖掉</li>\n<li>如果要重写父类中的方法必须要在借prototype之后</li>\n<li>那么如何确定原型和实例的关系？貌似用instanceof和isPrototypeOf都会返回true</li>\n</ul>\n<p><strong>解决问题一如何传入参数</strong></p>\n<p>我们知道Js中有两个方法可以改变函数的上下文，apply和call，实际上类就是函数，这里既借属性也借prototype，不就可以解决这样的问题了么。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Computer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//this.name = name;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Computer.prototype.show = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">'computer'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Apple = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\tComputer.call(<span class=\"keyword\">this</span>,name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Apple.prototype = <span class=\"keyword\">new</span> Computer();</span><br><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"keyword\">new</span> Apple(<span class=\"string\">'apple'</span>);</span><br><span class=\"line\">alert(apple <span class=\"keyword\">instanceof</span> Apple);</span><br><span class=\"line\">alert(apple <span class=\"keyword\">instanceof</span> Computer);</span><br></pre></td></tr></table></figure>\n<p>在运行时先借prototype，然后再借子类的this，但是这个也有个问题，那就是会调用两次父类。</p>\n<p><strong>继承的技巧</strong></p>\n<p>还有一种继承是生成一个临时对象，然后临时对象借需要继承的父类的prototype。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">o</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">\tF.prototype = o;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> parent = &#123;</span><br><span class=\"line\">\t<span class=\"string\">'name'</span>:[<span class=\"string\">'lcepy'</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> game = extend(parent);</span><br><span class=\"line\">game.name.push(<span class=\"string\">'wow'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> _game = extend(parent);</span><br><span class=\"line\">_game.name.push(<span class=\"string\">'view'</span>);</span><br></pre></td></tr></table></figure>\n<p>使用这样的方式有个很大的缺陷，那就是不要借属性之类的数据，因为它们是共享的，这是一个浅拷贝，还是因为指针的原因。不过要是继承方法，这种方式很方便。</p>\n<p>还有一种方式跟上述类似，主要是封装了一层函数，用来返回对象。</p>\n<h3 id=\"寄生组合继承\"><a href=\"#寄生组合继承\" class=\"headerlink\" title=\"寄生组合继承\"></a>寄生组合继承</h3><p>这样的方式主要解决的问题是调用两次父类的问题，避免额外的借来的属性或方法。想想看第一次Computer.call(this)，借来了this上的属性或方法，第二次Apple.prototype = new Computer()，又借来了this上的属性或方法，这里的初衷是想借原型，没办法这个是实例，所以该借的不该借的都借来了。那么要避免这样的问题，就要解决继承属性的继承属性，继承原型的继承原型，也不乱借。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> extendPrototype = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sub,supers</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">\tF.prototype = supers.prototype;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> _f = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">\t_f.constructor = sub;</span><br><span class=\"line\">\tsub.prototype = _f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Computer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Computer.prototype.show = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;\t\t</span><br><span class=\"line\"><span class=\"keyword\">var</span> Apple = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\tComputer.call(<span class=\"keyword\">this</span>,name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">extendPrototype(Apple,Computer);\t\t\t</span><br><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"keyword\">new</span> Apple(<span class=\"string\">'apple'</span>);</span><br><span class=\"line\">apple.show();</span><br></pre></td></tr></table></figure>\n<p>第一步把supers的原型赋值给F，第二步创建F的实例，第三步把_f实例的constructor属性修改成子类，第四步把_f实例赋值给子类的prototype。</p>\n<p>这样的话就是不该借的也不会继承了</p>\n<h2 id=\"理解内存管理\"><a href=\"#理解内存管理\" class=\"headerlink\" title=\"理解内存管理\"></a>理解内存管理</h2><p>一般来说内存管理主要有这么几种方式，引用计数和标记，而JavaScript采用的就是标记管理的方式。Js的内存管理是自动的，但是并不是说执行完后立马销毁，而是有时间周期性，相隔一段时间执行一下垃圾回收，把没有引用的内存全部销毁。</p>\n<p>OC中采用的是引用计数来手动管理内存，这样的方式比较好，可以让开发者自己来管理。当然也有不好的地方，如果遗忘了释放，很可能引起应用的崩溃。</p>\n<p>总体来看在IE中因为COM组件的原因，可能会发生循环引用的问题，这个问题在引用计数的内存管理都会遇见。所谓的循环引用是指在对象A中包含了一个指向B的指针，然后再对象B中包含一个指向A的指针，于是悲剧了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'doc'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> my = &#123;&#125;;</span><br><span class=\"line\">my.element = element;</span><br><span class=\"line\">element.my = my;</span><br></pre></td></tr></table></figure>\n<p>大家都引用，于是，可想而知。要避免这种问题，一定要在不使用的时候my.element = null，把它断开。</p>\n<p>那么，其他浏览器呢？还是标记清理的机制，比如一个函数的变量，在进入环境时标记上“进入环境”，执行完之后标记上“离开环境”，然后等待系统来释放。</p>\n<p>IE有一个手动释放的方法，window.CollectGarbage，调用它就立马释放已经标记离开环境的变量，不过很多文章都不建议这样做。</p>\n<p>那么一般都这样做，引用类型的释放</p>\n<pre><code>var my = {};\n//使用完毕之后\nmy = null;\n</code></pre><p>让my脱离执行环境，标记上已经离开环境，然后等待系统执行垃圾回收，释放内存。</p>\n<h2 id=\"XMLHttpRequest\"><a href=\"#XMLHttpRequest\" class=\"headerlink\" title=\"XMLHttpRequest\"></a>XMLHttpRequest</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\" target=\"_blank\" rel=\"external\"> JavaScript 的同源策略</a></li>\n</ul>\n<blockquote>\n<p>注明： IE8已上，支持现代XMLHttpRequest</p>\n</blockquote>\n<p>客户端Js与服务器进行网络交互必备的一个玩意，它不支持跨域，若要跨域还需要进行一些额外的处理。</p>\n<pre><code>var xhr = new XMLHttpRequest();\n</code></pre><p>在使用xhr对象时，要调用的第一个方法是open()，它接受三个参数［发送请求的类型，请求的URL，描述是否同步还是异步的布尔值］false同步，true异步。</p>\n<p>关于Ajax同步异步的个人理解：</p>\n<ul>\n<li>同步，是用数据块的方式来传输的，在Js执行的表现上，当执行到这个Ajax请求时会等待它与服务器交互成功之后才能执行下面一行的代码，也就是阻塞。</li>\n<li>异步，是用字节来传输的，它不等待是否成功，会执行之后的代码</li>\n</ul>\n<p>结束时需要调用xhr.send()，如果没有发送数据的主体，必须要null，做为发送参数。另外在接收到响应之前还可以调用abort()来取消异步请求（不建议调用它）</p>\n<h3 id=\"HTTP状态验证\"><a href=\"#HTTP状态验证\" class=\"headerlink\" title=\"HTTP状态验证\"></a>HTTP状态验证</h3><p>当收到响应后会自动填充xhr对象，它有几个比较重要的状态，我们必须要了解清楚与处理。</p>\n<ul>\n<li>responseText:作为响应主体返回的文本</li>\n<li>responseXML:如果响应内容的类型是”text/xml”或者”application/xml”，这个属性中保存的就是XML的DOM文档</li>\n<li>status：响应的HTTP状态</li>\n<li>statusText：HTTP状态的说明</li>\n<li>readyState：用于描述请求发送到完成的过程</li>\n</ul>\n<p>正常情况下需要检测status === 200 readyState === 4 这就表示responseText或者responseXML中已经填充了全部的数据可以提供给客户端使用了。</p>\n<pre><code>1 开头的用于描述请求已经发送，需要请求者继续操作才能继续的状态\n2 开头的用于描述请求已经成功\n3 开头的用于描述成功，但是还需要继续操作\n4 开头的用于描述客户端发送了什么数据导致服务器错误\n5 开头的用于描述服务器错误（常见的如，服务端代码抛错了）\n</code></pre><p>readyState状态</p>\n<pre><code>0 未初始化，还没有调用open方法\n1 已经调用open方法，还没有调用send方法\n2 已经调用send方法，但是还没有接收到响应\n3 已经接收了部分数据\n4 已经接收了全部的数据\n</code></pre><h3 id=\"xhr对象其他方法或事件\"><a href=\"#xhr对象其他方法或事件\" class=\"headerlink\" title=\"xhr对象其他方法或事件\"></a>xhr对象其他方法或事件</h3><p>每一个请求和响应都会带有相应的HTTP头信息，其中对开发者是很有用的，而xhr对象提供了一个setRequestHeader方法来设置头信息，它必须在调用open方法之后并且在send方法之前。</p>\n<p>既然有设置，那么必须得有获取，xhr对象也提供了两个方法分别来获取，getResponseHeader传入一个头部字段名来获取，getAllResponseHeaders来获取全部的头信息。</p>\n<p>而接收数据则需要处理onreadystatechange事件，每次刷新状态时，系统都会重新调用此事件。</p>\n<h2 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS\" target=\"_blank\" rel=\"external\">HTTP访问控制(CORS)</a></li>\n</ul>\n<p>客户端Js出于安全的考虑，不允许跨域调用其他页面的对象，正是因为这样才给Ajax带来了很多不方便的地方。跨域最简单的理解就是因为Js同源策略的存在，比如a.com域名下的Js不能访问b.com下的Js对象。</p>\n<ul>\n<li>协议端口没法跨，客户端</li>\n<li>在跨域上，域仅仅是通过首部来识别，window.location.protocol +window.location.host</li>\n</ul>\n<h3 id=\"利用document-domain和iframe来设置\"><a href=\"#利用document-domain和iframe来设置\" class=\"headerlink\" title=\"利用document.domain和iframe来设置\"></a>利用document.domain和iframe来设置</h3><p>对于主域相同而子域名不同的情况，可以通过document.domain来处理，比如www.163.com/index.html和wow.163.com/wower.html，在这两个文件中分别加入document.domain = “163.com”，然后在index.html页面中创建一个iframe引入wower.html，获取iframe的contentDocument，这样这两个js就可以交互了。</p>\n<p>index.html</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.domain = <span class=\"string\">'163.com'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'iframe'</span>);</span><br><span class=\"line\">iframe.src = <span class=\"string\">'http://wow.163.com/wower.html'</span>;</span><br><span class=\"line\">iframe.style.display = <span class=\"string\">'none'</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> doc = iframe.contentDocument || iframe.contentWindow.document;</span><br><span class=\"line\">\t<span class=\"comment\">//现在可以通过doc来操作wower.html中的js对象了</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>wower.html</p>\n<pre><code>document.domain = &apos;163.com&apos;;\n</code></pre><p>使用这样的方式来实现的跨域是有限制的</p>\n<ul>\n<li>主域名必须是同一个</li>\n<li>安全性引发的问题，比如第一个页面出现了安全问题，在后面的页面也会出现</li>\n<li>iframe引用过多的话，每一个iframe都必须设置document.domain，比较琐碎</li>\n</ul>\n<blockquote>\n<p>偶尔可以使用一下</p>\n</blockquote>\n<h3 id=\"利用window-name\"><a href=\"#利用window-name\" class=\"headerlink\" title=\"利用window.name\"></a>利用window.name</h3><p>稍微有些绕，但是数据量比较大，也比较安全</p>\n<ul>\n<li>wow.163.com/app.html 应用所在的页面</li>\n<li>wow.163.com/empty.html 中间代理页面，搞个空的即可，但是必须在主域名下</li>\n<li>www.qq.com/data.html 需要交互的数据页面</li>\n</ul>\n<p>在data.html页面中</p>\n<pre><code>window.name = 123;\n</code></pre><p>app.html页面中创建一个隐藏的iframe，它的scr指向data.html，在onload事件中，把当前iframe的contentWindow.loaction修改成empty.html，当再次onload时就可以通过contentWindow.name来获取到123了。</p>\n<blockquote>\n<p>偶尔使用</p>\n</blockquote>\n<h3 id=\"利用iframe和location-hash\"><a href=\"#利用iframe和location-hash\" class=\"headerlink\" title=\"利用iframe和location.hash\"></a>利用iframe和location.hash</h3><p>利用这种方式，说实话（不建议），比较绕，而且数据量小，直接暴露在URL上。它的原理主要是这样的，假设wow.163.com/index.html页面，wow.163.com/empty.html（空的，什么内容都没有），需要交换数据的页面在www.qq.com/a.html上。</p>\n<p>在wow.163.com/index.html#（＃号就是我们要传递的数据），创建一个隐藏的iframe，hash值可以当参数传递给www.qq.com/a.html#()，在www.qq.com/a.html中可以获取到hash值，根据它进行处理，然后在www.qq.com/a.html页面中创建一个隐藏iframe，把处理的结果当hash值进行传递，给wow.163.com/empty.html#()这样，在同一个域名下，wow.163.com/empty.html中的js可以通过parent.parent.location.hash = self.location.hash来改变hash值，这样就达到了跨域的目的。</p>\n<blockquote>\n<p>不建议使用，坑爹的思路</p>\n</blockquote>\n<h3 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h3><p>这种方式是目前开发时最常用的一种方式，利用动态创建script标签来实现跨域的目的，虽然浏览器有显示Js对象的访问，但是它没有限制Js文件的加载，任何域名下的Js文件都可以加载。</p>\n<p>对客户端而言，文件的加载其实就是发送一次GET请求，在服务端实现时，也就是处理这次的GET请求，并且响应，参数可以通过?来带走，俗称一波流。</p>\n<p>在客户端上对于script文件加载是否已经完毕的判断，IE是判断script标签的readystatechange属性，而其他浏览器是onload事件。</p>\n<blockquote>\n<p>突然感觉做移动端不考虑IE的兼容，果然是杠杠的，建议使用</p>\n</blockquote>\n<h3 id=\"HTML5-postMessage\"><a href=\"#HTML5-postMessage\" class=\"headerlink\" title=\"HTML5 postMessage\"></a>HTML5 postMessage</h3><p>主要是利用window.postMessage来发送消息，监听window.message来获取消息，判断origin可以判断消息来源，data获取消息内容，soucre来引用发送方的window对象引用。</p>\n<p>www.b.com/b.html发送消息给www.a.com/a.html</p>\n<pre><code>window.postMessage(&apos;hello&apos;,&apos;www.a.com/a.html&apos;)\n</code></pre><p>www.a.com/a.html获取消息</p>\n<pre><code>window.addEventLister(&apos;message&apos;,function(event){\n    if(event.origin === &apos;http://b.com&apos;){\n        //处理\n    }\n})\n</code></pre><p>iframe的发送方式</p>\n<pre><code>contentWindow.postMessage(&apos;data&apos;,&apos;b.com&apos;)\n</code></pre><blockquote>\n<p>话不多说，移动端这种跨域方式也很常用（建议推荐使用）</p>\n</blockquote>\n<h3 id=\"HTML5-跨域头-XMLHttpRequest2\"><a href=\"#HTML5-跨域头-XMLHttpRequest2\" class=\"headerlink\" title=\"HTML5 跨域头 XMLHttpRequest2\"></a>HTML5 跨域头 XMLHttpRequest2</h3><p>如果是自己产品，又是做移动端可以使用，比上述任何方式都要方便，需要服务端支持响应时也要设置跨域头。</p>\n<p>如果服务器响应此头，浏览器会检查此头，它的值表示请求内容所允许的域名，也就是如果是*号，表示所有域都可以访问，如果这里是a.com，表示除了同源外，只允许来自a.com域的访问。</p>\n<pre><code>Access-Control-Allow-Origin：＊\n</code></pre><p>如果需要读取cookie则需要设置它</p>\n<pre><code>Access-Control-Allow-Credentials:true\n</code></pre><p>设置允许跨域的请求类型</p>\n<pre><code>Access-Control-Allow-Methods:POST\n</code></pre><blockquote>\n<p>兼容性问题，某些版本的浏览器需要在open之后，设置xhr.withCredentials ＝ true;话不多说，建议推荐使用</p>\n</blockquote>\n<h2 id=\"浏览器对象模型\"><a href=\"#浏览器对象模型\" class=\"headerlink\" title=\"浏览器对象模型\"></a>浏览器对象模型</h2><p>BOM提供了很多对象，它的核心是window，表示它是浏览器的一个实例，在ECMAScript中又是Global对象。它提供了很多访问浏览器的功能，这些功能与网页无关，所以缺少事实标准的BOM既有意思又有些坑。复习它，主要是复习几个比较有用的对象，其他可以了解一二。</p>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h3><blockquote>\n<p>算起来它是我用的最多的一个对象</p>\n</blockquote>\n<p>它提供了当前窗口加载的页面有关的信息，也对URL进行了片段分解，既是window的属性，也是document的属性。</p>\n<ul>\n<li>hash 返回URL的散列（#号后面跟着的零个或多个值）</li>\n<li>host 返回服务器名称和端口号</li>\n<li>hostname 返回不带端口号的服务器名称</li>\n<li>href 返回当前加载页面的完整URL</li>\n<li>pathname 返回URL中的目录或文件名</li>\n<li>port 返回URL中指定的端口号</li>\n<li>protocol 返回页面使用的协议</li>\n<li>search 返回URL中的查询字符串，它以问好（?）开头</li>\n</ul>\n<p>上述的属性基本上都可以直接使用，search除外，它返回的是一个完整的查询字符串，没有办法访问其中的每个查询字符串参数，还需要额外的进行处理。</p>\n<p>一般来说根据它的特点，?开头&amp;拼接，key=value的形式来展现，最好是key和value都要decodeURIComponent一下。</p>\n<p>在location中除了上述的属性外，还有一些比较有用的方法和技巧，主要是用来控制页面跳转的问题。</p>\n<ul>\n<li>assign方法接收一个参数，表示立即打开一个新的页面并在历史纪录中生成一条记录，它的效果等同于window.location.href = ‘’或者location.href = ‘’</li>\n<li>修改location对象的属性比如href，hash，search等也可以来改变URL</li>\n<li>replace方法接收一个参数，既跳转到新的URL上，并且不会在历史纪录中增加一条新的纪录</li>\n<li>reload表示重新加载当前页面</li>\n</ul>\n<h3 id=\"处理框架，设置时间，open，窗口位置，窗口大小\"><a href=\"#处理框架，设置时间，open，窗口位置，窗口大小\" class=\"headerlink\" title=\"处理框架，设置时间，open，窗口位置，窗口大小\"></a>处理框架，设置时间，open，窗口位置，窗口大小</h3><blockquote>\n<p>open现在估计没人会用了</p>\n</blockquote>\n<p>如果页面中包含框架，则每个框架都有自己的window对象，可以使用frames来获取，比如frames[0]或者frames[‘name’]。这里还要了解的是top，parent，对于这些只要理解的层级关系，每一个指向都是会非常清楚的。</p>\n<p>在做某些动画效果的时候，主要是针对PC端，可能会使用到窗口位置，窗口大小的属性来进行计算，比如innerWidth，innerHeight，outerWidth，outerHeight，获取到这些尺寸，一般会与当前div的高宽进行减法来获取精准的位置。</p>\n<p>setTimeout和setInterval是进行时间调度的函数，我们知道Js是单线程的，但是可以使用这个在特定的时间范围内执行代码，前面一个setTimeout是在指定的时间内执行（只执行一次），后面的setInterval则是以指定的时间重复执行（N次）</p>\n<h3 id=\"navigator\"><a href=\"#navigator\" class=\"headerlink\" title=\"navigator\"></a>navigator</h3><p>用这个一般是在统计用户浏览器版本，操作系统等场景下才用的上，偶尔有几个会比较实用。</p>\n<ul>\n<li>cookieEnabled 判断cookie是否开启</li>\n<li>userAgent 浏览器用户代理字符串</li>\n<li>plugins数组 主要是用来检测浏览器安装的插件</li>\n</ul>\n<p>###screen</p>\n<p>在Js中有几个对象在编程里真用不上，这个就是其中之一。它主要是用来表明客户端的能力，比如显示器的信息，像素，高，宽等。</p>\n<h3 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h3><p>history对象保存着用户上网的历史纪录，但是这个也是非常不常用。主要是用go方法，back方法，forward方法。</p>\n<blockquote>\n<p>说实话，后面三个navigator,screen,history基本上很废材，HTML5中的history对象pushState非常有用外。</p>\n</blockquote>\n<h2 id=\"文档对象模型\"><a href=\"#文档对象模型\" class=\"headerlink\" title=\"文档对象模型\"></a>文档对象模型</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model\" target=\"_blank\" rel=\"external\">文档对象模型 (DOM)</a></li>\n</ul>\n<p>DOM是针对HTML和XML文档的一个API，主要是使用JavaScript来进行编程操作HTML和XML文档。其他语言如果实现了DOM标准，理论上也是可以使用这个API的，这里仅仅讨论JavaScript的应用。</p>\n<p><strong>理解层级结构与关系</strong></p>\n<p>在浏览器中比如HTML页面是由很多有层次结构的标签组成的，而为这些标签提供查询，添加，删除等等方法主要就是DOM在提供支持。</p>\n<p>（页面又称为文档）文档中所有的节点之间都存在这样或那样的关系，比如下面一个经典的HTML：</p>\n<pre><code>&lt;html&gt;\n    &lt;head&gt;&lt;/head&gt;\n    &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>一个标签又可以称为一个元素，head和body那就是兄弟关系，它们都来自一个父系html，又可以说html的子元素是head和body，可能这样描述还不太明显，这样就用原生Js操作DOM来的方式来看看层级结构。</p>\n<pre><code>var html = document.getElementsByTagName(&apos;html&apos;)[0];\n</code></pre><p>先通过getElementsByTagName获取html根元素的节点，每一个元素都有一个childNodes集合和一个parentNode分别代表子节点集合和父节点，<strong>如果不存在，则都是null，如果是集合不存在，则是一个[]</strong>。</p>\n<blockquote>\n<p>html的childNodes //[head,body] html的parentNode // document</p>\n</blockquote>\n<p>每一个元素也都有一个firstChild和lastChild来分别代表第一个子元素和最后一个子元素</p>\n<p>每一个元素也都有一个nextSibling和previousSibling分别代表前面一个元素和后面一个元素，以当前自己为参照物。</p>\n<p>从这样可以看出来，它就像族谱一样对元素的关系进行了定义，通过理解这些层级关系，利用DOM提供的API可以很顺利的进行操作。</p>\n<h3 id=\"操作DOM\"><a href=\"#操作DOM\" class=\"headerlink\" title=\"操作DOM\"></a>操作DOM</h3><p><strong>常见的获取方式</strong></p>\n<ul>\n<li>document.getElementById （通过ID来获取到节点）</li>\n<li>document.getElementsByTagName （通过节点标签来获取）</li>\n<li>document.querySelector  </li>\n<li>document.querySelectorAll</li>\n</ul>\n<p>后面两个属于HTML5提供的新API，在移动端会用的比较多，前者是获取单个，后者获取集合。</p>\n<p><strong>常见添加，删除</strong></p>\n<ul>\n<li>appendChild</li>\n<li>insterBefore</li>\n<li>replaceChild</li>\n<li>removeChild</li>\n</ul>\n<p>appendChild主要是向childNodes集合的末尾添加一条元素，insterBefore可以用来插入特定位置，两个参数，要插入的节点和作为参照的节点，更新成功后插入的节点会在参照节点之前，也就是参照节点的previousSibling。replaceChild和insterBefore有些类似，两个参数，要插入的节点和参照节点，更新成功后，要插入的节点会替换参照节点，removeChild就比较好理解了，删除一个节点，这四个方法都有返回值。</p>\n<p><strong>常见元素属性</strong></p>\n<p>一般来说，如果var doc = document.getElementById(‘doc’);doc.id = ‘xx’;这样的方式也是可以更新或者获取到元素的属性的，不过不推荐这么使用，要获取元素的属性，DOM API也提供了三个方法来使用。</p>\n<ul>\n<li>getAttribute</li>\n<li>setAttribute</li>\n<li>removeAttribute</li>\n</ul>\n<p>getAttribute可以获取元素的属性，setAttribute可以对元素的属性进行设置，如果属性名不存在，则创建该属性。removeAttribute则是完全删除此属性。</p>\n<p>还有一个属性attributes，主要是获取元素属性集合，这个不是很常用，主要是在遍历元素属性时会使用到，它是一个集合。</p>\n<p><strong>常见创建元素或文本</strong></p>\n<p>一般情况下创建元素都会使用字符串的形式，innerHTML进去。不过，某些情况下，会用到createElement来创建一个元素，如果用到它，那么创建的文本也必须使用createTextNode了。</p>\n<p>对于文本节点，注释节点等开发真的很少用，可以当一个子类大概了解即可。</p>\n<blockquote>\n<p>关于模式的讨论，主要可以用document.compatMode来判断，如果是CSS1Compat就是标准模式，移动端不会出现这样的情况，IE上可能有别的模式，模式主要是影响到CSS布局上，Js影响非常少。</p>\n<p>在移动端上滚动是一个比较要处理的问题，一般来说会使用scrollIntoView，scrollIntoViewIfNeeded，scrollByLines，scrollByPages，这四个方法safari chrome都有实现，意味着在iOS和安卓平台都是良好的。</p>\n</blockquote>\n<ul>\n<li>scrollByPages 将元素的内容滚动到指定的页面高度，具体的高度是由元素的高度来决定的。</li>\n<li>scrollByLines 将元素的内容滚动到知道的行数高度，参数可正可负。</li>\n<li>scrollIntoViewIfNeeded，当元素在视窗（viewport）不可见，会滚动容器元素或者浏览器窗口让其可见。如果是可见的，这个方法不起任何作用。如果参数为true，可能是垂直居中的可见。</li>\n<li>scrollIntoView 滚动容器元素或者浏览器窗口，让元素可见。</li>\n</ul>\n<p><strong>一些小技巧</strong></p>\n<p>每一个元素都存在一个contains方法，用来检测传入的节点是不是当前节点的子节点，火狐对于的方法名叫compareDocumentPosition。</p>\n<p>如果要获取一个文本节点可以使用innerText（纯文本）来获取字符串，如果要获取所有的包括标签的字符串可以使用innerHTML。它们还有一种outer系列对应的方法，主要的区别是前者（outerText）会替换节点，后者(outerHTML)会修改调用它的元素，一般基本没人使用。它们可以获取，也可以通过赋值来设置新的节点。</p>\n<h3 id=\"DOM2和DOM3\"><a href=\"#DOM2和DOM3\" class=\"headerlink\" title=\"DOM2和DOM3\"></a>DOM2和DOM3</h3><p>对于这两级在DOM中基本上IE没啥支持，或者说支持的非常少，像style对象，CSS的一些对象外。</p>\n<p>这里最大的变化是增加了对XML命名空间的支持，元素样式的访问，节点的遍历以及range。当然目前来看，节点的遍历，range，XML命名空间在开发中使用的非常少，可以当资料来阅读，了解有这么回事，用到的时候再查询。而元素样式的访问，这个在开发中普遍使用的较多，因为在没法使用css3动画的浏览器中，可以通过改变样式来到达动画的目的。</p>\n<pre><code>var doc = document.getElementById(&apos;doc&apos;);\ndoc.style.width = &apos;100px&apos;;\n</code></pre><p>对于iframe的访问这里增加了一个contentDocument对象来进行引用，还有节点的比较，isSameNode和isEqualNode，这两个的区别在于，前者是否引用的同一个节点对象，后者是指两个节点是否是相同的类型。不过，它们使用的也不多，了解就好。</p>\n<p><strong>元素的大小</strong></p>\n<p>这个部分需要理解，因为关乎到元素在浏览器上的位置显示，跟动画有关系，四个属性。</p>\n<ul>\n<li>offsetWidth 元素在水平方向占用的空间大小</li>\n<li>offsetHeight 元素在垂直方向占用的空间大小</li>\n<li>offsetLeft 元素的左外边框到内边框的距离</li>\n<li>offsetTop 元素的上外边框到内边框的距离</li>\n</ul>\n<p><strong>滚动大小</strong></p>\n<p>这个在视察滚动或者处理滚动条的时候用的上，也是四个属性</p>\n<ul>\n<li>scrollHeight 在没有滚动的情况下，元素的总高度</li>\n<li>scrollWidth 在没有滚动的情况下，元素的总宽度</li>\n<li>scrollLeft 被隐藏在内容区域左侧的像素度</li>\n<li>scrollTop 被隐藏在内容区域上侧的像素度</li>\n</ul>\n<blockquote>\n<p>下面这些IE全部不支持，range支持一种叫做文本范围的东西</p>\n</blockquote>\n<p><strong>元素遍历</strong></p>\n<p>关于遍历其实有两个方法可用createNodeIterator和createTreeWalker，不过这些在开发中几乎不会使用到，谁没事去遍历节点完呢。</p>\n<p><strong>关于range</strong></p>\n<p>这个也是非常少会使用到，除非是做那种编辑器应用或者在线编辑器等等，不过使用它可以更精准的控制的DOM，主要是使用createRange方法。</p>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events\" target=\"_blank\" rel=\"external\">事件类型一览表</a></li>\n</ul>\n<blockquote>\n<p>IE浏览器的事件不是重点</p>\n</blockquote>\n<p>事件是JavaScript与HTML进行交互的一个纽带，理解事件可以更好的处理Web应用程序，现在的浏览器中主要支持两种事件流：</p>\n<ul>\n<li>事件冒泡</li>\n<li>事件捕获</li>\n<li>DOM事件流</li>\n</ul>\n<p>事件冒泡则是指事件开始时由具体的元素接收，然后逐级向上传播。比如：</p>\n<pre><code>&lt;html&gt;\n    &lt;head&gt;&lt;/head&gt;\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;p&gt;&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>给p标签监听一个事件，它的流向是p,div,body,html,document，其实细心看来这种流的走向会存在一个问题，给div也监听一个事件，当用户点击P的时候是会触发两次的，好在event对象中有可以阻止事件冒泡的方法。</p>\n<p>事件捕获则是指事件由最上级接收，逐级向下传播到具体的元素上，了解了冒泡之后这个就非常好理解了，正是一个相反的步骤。</p>\n<p>而DOM事件流又正好是冒泡与捕获的结合体，它分为三个阶段：事件捕获，目标事件，事件冒泡，如果在纸上画出来，它的走向就是一个圆形。</p>\n<blockquote>\n<p>对于事件处理程序，写在HTML标签中的，另外一种是直接写一个function的，比如doc.onclick = function(){}，一般来说这些浏览器支持，但是基本上不会使用了。因为前者是跟HTML耦合的，不利代码维护，而且虽然HTML加载了但是Js文件还未加载，用户点击后，是直接报错的。后者虽然也可以删除，比如doc.onclick = null，对于对代码有强迫症的同学，基本上不会使用到它。</p>\n</blockquote>\n<p>那么，我们该怎么给一个元素添加上事件处理程序呢？</p>\n<h3 id=\"DOM2级事件处理程序\"><a href=\"#DOM2级事件处理程序\" class=\"headerlink\" title=\"DOM2级事件处理程序\"></a>DOM2级事件处理程序</h3><ul>\n<li>addEventLister</li>\n<li>removeEventLister</li>\n</ul>\n<p>所有的DOM节点都具备这两个方法，它接收三个参数：</p>\n<ul>\n<li>要处理的事件名称，比如click（这里跟上述两个以及IE注册事件都不同，不需要on）</li>\n<li>需要事件进行处理的函数</li>\n<li>一个布尔值，表示（true，在捕获阶段调用事件处理函数）（false，在冒泡阶段调用事件处理函数）</li>\n</ul>\n<blockquote>\n<p>一般情况下第三个参数都填false</p>\n</blockquote>\n<p>IE浏览器对应的两个方法，attachEvent，detachEvent，它们只有冒泡，事件名要加上on。</p>\n<h3 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h3><p>在注册完事件处理程序后，事件的一个比较重要的对象必须要理解，<strong>event事件对象</strong>。</p>\n<p>一般来说，这个对象中包含着所有与当前元素所监听的事件有关的信息，比如元素监听的事件类型，元素本身等等。</p>\n<p><strong>比较重要的属性和方法（只读）</strong></p>\n<ul>\n<li>currentTarget 真正监听事件的那个元素</li>\n<li>target 事件的目标元素</li>\n<li>type 事件的类型</li>\n<li>perventDefault()  取消事件的默认行为</li>\n<li>stopPropagation()  取消事件的捕获或者冒泡</li>\n<li>bubbles 事件是否冒泡</li>\n<li>eventPhase 事件处理程序的三个阶段，1捕获2处于目标3冒泡</li>\n</ul>\n<p><strong>比较重要的属性和方法（读写）</strong></p>\n<ul>\n<li>clientX 鼠标在窗口中的水平位置</li>\n<li>clientY 鼠标在窗口中的垂直位置</li>\n</ul>\n<h3 id=\"事件类型\"><a href=\"#事件类型\" class=\"headerlink\" title=\"事件类型\"></a>事件类型</h3><blockquote>\n<p>PC端主要是针对鼠标，移动端则是触摸，手势相关的处理</p>\n</blockquote>\n<p>如果在PC端上发生一次click事件，实际上它是发生了三次事件，mousedown当鼠标按下的时候，mouseup当用户放开的时候，click两个加起来就发生了一次click事件。相对于移动，PC上的鼠标事件非常的丰富，例如mouseover当鼠标首次移入一个元素边界时触发，mouseout当鼠标移出元素时触发，这个移出，到子元素上也会触发这个事件，mousemove当鼠标在元素内移动时重复触发。</p>\n<p>总体来说对于文档加载，表单控件，窗口大小改变等事件，比如获取焦点，在失去或者获取焦点是值改变等移动上都是一样的，focus（获得焦点）blur（失去焦点）。</p>\n<p>在做一些视差滚动的效果时scroll事件是非常好用，移动上在css中提供了一个类似的属性。</p>\n<p>唯一的区别是移动端上没有键盘事件。</p>\n<h3 id=\"移动事件\"><a href=\"#移动事件\" class=\"headerlink\" title=\"移动事件\"></a>移动事件</h3><ul>\n<li>touchstart 当手指触摸到屏幕时触发</li>\n<li>touchmove 当手指在屏幕上连续滑动时触发</li>\n<li>touchend 当手指从屏幕上移开时触发</li>\n<li>touchcancel 当系统停止跟踪触摸时触发（这个事件没有确定的触发时间）</li>\n</ul>\n<p>它们都是冒泡的，也可以取消</p>\n<p><strong>三个跟踪触摸事件的属性</strong></p>\n<ul>\n<li>touches 当前跟踪触摸操作的touch数组，在touchend事件中为空</li>\n<li>targetTouchs 特定事件目标的touch数组</li>\n<li>ChangedTouches 上次触摸时发生了什么改变的touch数组</li>\n</ul>\n<p><strong>移动event事件对象</strong></p>\n<p>PC上存在的，在移动上也存在，描述上有差异，比如</p>\n<ul>\n<li>target 触摸的DOM节点目标</li>\n<li>pageX 触摸目标在页面中的X坐标</li>\n<li>pageY 触摸目标在页面中的Y坐标</li>\n</ul>\n<p><strong>一些手势</strong></p>\n<ul>\n<li>gesturestart 当一个手指按在屏幕上另外一个手指又触摸屏幕时触发</li>\n<li>gesturechange 依赖前者当其中的一个手指发生改变时触发</li>\n<li>gestureend 当任何一个手指离开时触发</li>\n</ul>\n<p><strong>移动手势干货三部曲</strong></p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/pifoo/archive/2011/05/23/webkit-touch-event-1.html\" target=\"_blank\" rel=\"external\">对于Touch的处理</a></li>\n<li><a href=\"http://www.cnblogs.com/pifoo/archive/2011/05/22/webkit-touch-event-2.html\" target=\"_blank\" rel=\"external\">处理简单手势</a></li>\n<li><a href=\"http://www.cnblogs.com/pifoo/archive/2011/05/22/webkit-touch-event-3.html\" target=\"_blank\" rel=\"external\">处理复杂手势</a></li>\n</ul>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>现在的前端开发了解JS还是仅仅不够的，你需要多方面扩展。</p>\n<p>访问<a href=\"https://github.com/mulgore/Front-End-Develop-Guide\" target=\"_blank\" rel=\"external\">Front-End-Develop-Guide</a>项目，资料已准备齐全。</p>\n","excerpt":"","more":"<p>这是很久很久之前想写的东西，拖了五六个月，没有动笔，现今补齐，内容有些多，对初学者有用，错误之处，望指出。</p>\n<h2 id=\"理解作用域\"><a href=\"#理解作用域\" class=\"headerlink\" title=\"理解作用域\"></a>理解作用域</h2><p>理解作用域链是Js编程中一个<strong>必须</strong>要具备的，作用域决定了变量和函数有权力访问哪些数据。在Web浏览器中，全局执行环境是window对象，这也意味着所有的全局变量或者方法都是window对象的属性或方法。当一个函数在被调用的时候都会创建自己的执行环境，而这个函数中所写的代码就开始进入这个函数的执行环境，于是由变量对象构建起了一个作用域链。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> wow = <span class=\"string\">'魔兽世界'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> _wow = <span class=\"string\">'123'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个例子中全局环境中包含了两个对象（全局环境的变量对象不算），window.wow和window.message，而这个message函数中又包含了两个对象，它自己的变量对象（其中定义了arguments对象）和全局环境的变量对象。当这个函数开始执行时，message自己的变量对象中定义了_wow，而它的全局环境的变量对象有wow，假设在message中alert一下wow，实际上是message中包含的全局环境的变量对象.wow，于是可以访问。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> wow = <span class=\"string\">'123'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wow = <span class=\"string\">'456'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果执行message函数alert一下wow，它的作用域是这样开始搜索的，先搜索message自己的变量对象中是否存在wow，如果有就访问并且立马停止搜索，如果没有则继续往上访问它，有wow，则访问并且立马停止搜索，以此类推一直搜索到全局环境上的变量对象，如果这里都没，恭喜你，这里要抛错了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"string\">'123'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> g = <span class=\"string\">'123'</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> d = <span class=\"string\">'123'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个例子中包含有三个执行环境，全局环境，message的环境，a的环境。从这里可以看出message自身包含两个对象，自己的变量对象和全局环境中的变量对象，而函数a则包含了三个，自身的变量对象，message的变量对象和全局变量对象。</p>\n<p>当开始执行这个函数时，在函数a中可以访问到变量g，那是因为函数a包含了message的变量对象，于是在自身没有开始搜索上一级的变量对象时发现了，于是可以访问。那么访问c的原理也是如此，当自身和上一级的message的变量对象都没有，但是全局变量对象中存在，于是访问成功。</p>\n<p>了解这个作用域，对于Js编程是至关重要的，不然可能会出现，明明想要的预期结果是123，但是变成了456，为什么？那就是因为一级一级的搜索，可能会存在覆盖，或者搜索到别的地方就立即停止搜索了。</p>\n<h2 id=\"理解引用类型\"><a href=\"#理解引用类型\" class=\"headerlink\" title=\"理解引用类型\"></a>理解引用类型</h2><p>引用类型虽然看起来和类很相似，但是它们却是不同的概念，引用类型的值，也就是对象是引用类型的一个实例。在Js中引用类型主要有Object，Array，Date，正则，Function等。</p>\n<p>Object和Function在后面详细复述。</p>\n<p><strong>Array</strong></p>\n<p>在Js中数组可以存储任意的数据，而且它的大小是可以动态调整的类似于OC中的NSMutableArray。创建数组可以使用构造函数的方式也可以使用字面量的形式，另外可以使用concat从一个数组中复制一个副本出来。数组本身提供了很多方法让开发者使用来操作数组。</p>\n<ul>\n<li>length 数组的长度</li>\n<li>toString  可以返回一个以，拼接的字符串，相当于是调用了下join(‘,’)</li>\n<li>join 可以用一个分割符来拼接成一个字符串</li>\n<li>push 添加一个数据到数组的末端</li>\n<li>pop 删除数组中的最后一项，有返回值</li>\n<li>shift 删除数组的第一项，有返回值</li>\n<li>unshift 添加一个数据到数组的首端</li>\n<li>reverse 倒序</li>\n<li>sort 可以传入一个排序的函数</li>\n<li>slice 可以基于当前数组返回一个新的数组，接收两个参数，返回项的起始位置和结束位置</li>\n<li>splice 可以传入N个参数，第一个参数表示要删除，插入或则替换的位置，第二个参数表示要删除的项数，第三个到第N个表示要插入或则替换的数据</li>\n</ul>\n<p><strong>Date</strong></p>\n<p>时间对象也是使用非常多的玩意，它是使用GMT时间来描述，而且时间对象是可以直接比对大小的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> date1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2015</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> date2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2015</span>,<span class=\"number\">1</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">date1 &lt; date2</span><br></pre></td></tr></table></figure>\n<p>常用的方法</p>\n<ul>\n<li>getTime 获取时间对象的毫秒数</li>\n<li>setTime 设置时间对象的毫秒数，会改变日期</li>\n<li>getFullYear 获取时间对象的年（2015）</li>\n<li>getMonth 获取时间对象的月（需要加1）</li>\n<li>getDay 获取日期的星期几（0-6）星期天到星期六</li>\n<li>getDate 获取日期的天数</li>\n<li>getHours 获取当前日期的小时</li>\n<li>getMinutes 获取当前日期的分钟数</li>\n<li>getSeconds 获取当然日期的秒数</li>\n</ul>\n<p>上面看起来都是获取，当然也有设置，只是相应的get置换成set即可。</p>\n<p><strong>正则表达式</strong></p>\n<p>在Js里正则表达式是用RegExp类型来支持的，关于正则可以看看之前写的一篇文章，用python来描述的如何读懂正则。</p>\n<p>Js也支持三种模式，gim，表示全局，不区分大小写，多行。</p>\n<p>一般来说很少有人这么使用var xxx = new RegExp()，而是用字面量的方式，比如var xx = /[bc]/gi;像用的比较多的方法有exec用于捕获包含第一个匹配项的数组，没有则返回null。test，用于判断，如果匹配返回true，不匹配返回false。</p>\n<p><strong>处理字符串</strong></p>\n<p>在Js中还有一种叫做包装类型的玩意，正因为此所以处理一些基本数据类型，比如字符串时，有很多方法可以使用。</p>\n<ul>\n<li>concat 可以将一个或者多个字符串拼接起来，返回一个新的字符串</li>\n<li>slice 接收两个参数，起始位置和结束位置，返回一个新的字符串</li>\n<li>substr和substring和slice一样，唯一的不同是substr第二个参数是返回字符串的个数</li>\n<li>indexOf 从头开始查询字符串，存在会返回它所在的位置，没有返回－1</li>\n<li>lastIndexOf 从最后开始查询字符串</li>\n<li>toUpperCase 转大写</li>\n<li>toLowerCase 转小写</li>\n<li>match 正则表达式使用跟exec一样</li>\n<li>search 正则表达式使用，查询到返回一个位置，没有返回－1</li>\n<li>replace 替换，第一个参数可以是正则表达式也可以是字符串，第二个参数是要替换的字符串</li>\n<li>localeCompare比较字符串，如果字符串相等返回0，如果字符串的字母排在参数字符串之前，返回负数，如果是之后，返回正数。</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions\">Function</a></li>\n</ul>\n<p>说起来Js的核心是什么？那就是函数了。对于函数主要是理解它的几个概念。</p>\n<ul>\n<li>它可以当值来传递，没有重栽。</li>\n<li>声明的时候，比如function a(){} var a = function(){} 执行时会有区别</li>\n<li>函数内部的参数arguments包含了传入的所有参数</li>\n<li>this，表示在这个函数内的作用域，以及prototype</li>\n</ul>\n<h2 id=\"理解匿名函数和闭包\"><a href=\"#理解匿名函数和闭包\" class=\"headerlink\" title=\"理解匿名函数和闭包\"></a>理解匿名函数和闭包</h2><p>匿名函数又叫拉姆达函数，主要是在把函数当值传递的时候用，或者是把函数当返回值，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">\tcallback();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">d(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">'123'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\talert(<span class=\"string\">'123'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> g = b();</span><br><span class=\"line\">g();</span><br></pre></td></tr></table></figure>\n<p>其实第二种方式跟闭包的意义一样了，所谓的闭包书面的解释是可以访问另一个函数作用域内变量的函数，稍微改写一下可能会更明显。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> name = <span class=\"string\">'123'</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\talert(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> g = b();</span><br><span class=\"line\">g();</span><br></pre></td></tr></table></figure>\n<p>从这里可以看出来return的函数可以访问到name，而外部却不行，这个返回值的函数就可以理解为闭包。理解闭包还可以看一个经典的求值的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">save_i</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">\t\ta[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = save_i();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">\talert(c[i]());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从这个例子上来看，我们想得到的结果是10次循环a[i]保存着一个闭包，然后alert出从0到10，但是结果很出人意料，全部是10，为什么？哪里理解的不对呢？a[i]明明是内部函数，然后让它访问另外一个函数作用域内的变量i。</p>\n<p>个人觉得可以这样去分析问题，在客户端执行Js时有一个全局执行环境，指向的是window对象。而所谓的对象也就是引用类型，实际上在后台执行环境中，它就是一个指针。</p>\n<p>回到Js当代码在执行的时候，会创建变量对象并且构建一个作用域链，而这个对象保存着当前函数可以访问的对象。</p>\n<pre><code>window\n    -&gt;save_i\n        -&gt;this|argument\n        -&gt;a\n        -&gt;i\n        -&gt;看不见的a[0]-a[10]\n        -&gt;a[0]function(){}\n            -&gt;i\n    -&gt;c\n</code></pre><p>上述的i和a[0]里的i是同一个i，那么结果就是10。</p>\n<p>进一步处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">save_i</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">\t\ta[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">k</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> k;</span><br><span class=\"line\">\t\t\t&#125;;</span><br><span class=\"line\">\t\t&#125;(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = save_i();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(c[i]());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着按上面的节奏来分析</p>\n<pre><code>window\n    -&gt;save_i\n        -&gt;this|argument\n        -&gt;a\n        -&gt;i\n        -&gt;看不见的a[0]-a[10]\n        -&gt;a[0]function(){}\n            -&gt;k\n            -&gt;function(){}\n                -&gt;k\n\n    -&gt;c\n</code></pre><p>什么是传参？按值传递，相当于是在那个立即执行的函数中创建了一个新的地址和空间，虽然值是一样的，但是每一个k又是不同的，所以得到的结果正好满足了我们的预期。</p>\n<p>本来正常情况下save_i执行完毕后就要销毁，但是内部的闭包被包含在这个作用域内了，所以save_i没法销毁，从这里可以看的出来闭包会带来内存的问题，因为用完之后没法销毁，如果不注意的话。</p>\n<p>那么用完之后只能设置为null来解除引用，等着自动销毁把内存回收。</p>\n<h2 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h2><p>JavaScript的所有对象都衍生于Object对象，所有对象都继承了Object.prototype上的方法和属性，虽然它们可能会被覆盖，熟悉它对于编程能起到很大的作用，也能比较深刻的了解JavaScript这门语言。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></p>\n<p>创建一个对象可以使用new，也可以使用快速创建的方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _object = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n<p>_object对象中就可以使用Object.prototype中所有的方法和属性，虽然看起来它是空的。说到这里在编程中常常有一个非常有用的需求，如何判断一个对象是空对象。</p>\n<p>这是zepto中的判断一个对象是否是空对象，常常使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.isEmptyObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">var</span> name</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span> (name <span class=\"keyword\">in</span> obj) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也顺便看了下jQuery原理是一模一样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isEmptyObject: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> obj </span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> name;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ( name <span class=\"keyword\">in</span> obj ) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用in操作符来实现，它不会遍历到父原型链。</p>\n<p>constructor返回一个指向创建了该对象的函数引用，这个东西主要是可以用来识别（类）到底是指向哪里的。</p>\n<p>defineProperty直接在一个对象上定义一个新属性，非常适合用于动态构建，传入三个参数［动态添加对象的目标对象，需要定义或被修改的属性名，需要定义的对象］，在第三个参数中可以有些属性来表示是否继承（<strong>proto</strong>），要不要定义get，set方法，enumerable是否可枚举。</p>\n<p>defineProperties跟上述defineProperty一样，但是它可以添加多个。</p>\n<p>getOwnPropertyNames返回一个由指定对象的所有属性组成的数组</p>\n<p>keys返回一个数组包括对象所有的属性（可枚举）</p>\n<blockquote>\n<p>keys是经常会用到的一个属性，它只能包可枚举的，如果想获取一个对象的所有属性包括不枚举的，那么使用getOwnPropertyNames。</p>\n</blockquote>\n<p>hasOwnProperty用于判断某个对象是否包含有自身的属性，这个方法常常用于检测对象中的属性是否存在，它只检测自身，对于继承过来的都是false，这一点是非常重要的理解。</p>\n<p>isPrototypeOf 用于检测一个对象是否在另一个对象的原型链上，比如有两个对象是互相交互的，常常会使用它来进行检测。</p>\n<p>propertyIsEnumerable这个方法也比较重要，返回一个布尔值，检测一个对象的自身属性是否可以枚举</p>\n<blockquote>\n<p>可枚举的理解，也就是对象的属性可枚举，它的属性值不可以修改，但是在Js中它有自己的定义，引擎内部看不见的该属性的[[Enumerable]]特性为true，那么就是可枚举的。基本上把一个普通对象可以看做是一个枚举类型，比如var color = {‘red’:1}，red是可以修改的，但是red是可枚举的，但是如果是继承过来的属性，propertyIsEnumerable是返回false的，它还有一个特点，就是自身。</p>\n</blockquote>\n<p>如果要定义不可枚举的属性，那就要使用defineProperty方法了，目前不能用对象直接量或者构造函数定义出来。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;name: <span class=\"string\">'jack'</span>, age:<span class=\"number\">23</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'id'</span>, &#123;value : <span class=\"string\">'123'</span>, enumerable : <span class=\"literal\">false</span> &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"深拷贝与浅拷贝\"><a href=\"#深拷贝与浅拷贝\" class=\"headerlink\" title=\"深拷贝与浅拷贝\"></a>深拷贝与浅拷贝</h2><p>关于拷贝的问题，主要分为深拷贝和浅拷贝，但是如果从空间分配上来说JavaScript的拷贝不应该算是深拷贝，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> d = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(k <span class=\"keyword\">in</span> a)&#123;</span><br><span class=\"line\">\td[k] = a[k];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> d;</span><br></pre></td></tr></table></figure>\n<p>今天突然想到了这么一个问题，在C语言中，所谓的拷贝，就是分两种情况，一种是把指针地址拷贝给另外一个变量，虽然也开辟的了一个内存空间，在栈上也存在着一个地址，我对这个变量进行修改，同一个指针是会改变其值的，这种拷贝叫浅拷贝。另外一种情况，直接开辟一个新空间，把需要复制的值都复制在这个新的空间中，这种拷贝叫中深拷贝。</p>\n<p>如果看到上述的一段Js代码，很多人说它是浅拷贝，假设传入一个a对象，拷贝完成之后返回一个d，当我修改返回对象的值时并不能同时修改a对象，于是，在这里我有一个很大的疑问，在Js中到底什么是浅拷贝，什么是深拷贝的问题？</p>\n<p>这一点上感觉Js真的很奇葩，如果在开发iOS中，不可变对象copy一下，依然是不可变，所以是浅拷贝，拷贝了指针变量中存储的地址值。如果是可变对象copy一下，到不可变，空间变化了，包括不可变mutableCopy到不可变，空间依然变化了，所以是深拷贝。但是JavaScript中对于这一点要考虑一种情况，值类型，和引用类型，这个基础知识，我相信大家都非常清楚。数字，字符串等都是值类型，object，array等都是引用类型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\"></span><br><span class=\"line\">b.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">//[1,2,3,4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> numb = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> _numb = numb;</span><br><span class=\"line\">_numb = <span class=\"number\">567</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numb); <span class=\"comment\">//123</span></span><br></pre></td></tr></table></figure>\n<p>从这个例子中可以看的出来，它们使用的都是＝符号，而数组a发生了变化，numb数字却没有发生变化。那么从这里，可以有一个总结，所谓了深拷贝，浅拷贝的问题，应该针对的是有多个嵌套发生的情况。不然假设是这样的情况，还能叫浅拷贝么？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;<span class=\"string\">\"de\"</span>:<span class=\"number\">123</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = copy(object);</span><br><span class=\"line\">o.de = <span class=\"number\">456</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(object) <span class=\"comment\">//&#123;\"de\":123&#125;</span></span><br></pre></td></tr></table></figure>\n<p>明显对象o中的de属性修改并没有影响到原始对象，一个对象中的属性是一个字符串，如果从内存空间的角度上来说，这里明显是开辟了新的空间，还能说是浅拷贝么？那么针对另外一种情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"de\"</span>:&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"d\"</span>:<span class=\"number\">123</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = deepCopy(object);</span><br><span class=\"line\">o.de.d = <span class=\"string\">\"asd\"</span>;</span><br></pre></td></tr></table></figure>\n<p>如果一个对象中的第一层属性，不是值类型，只单层循环，这样来看的话确实是一个浅拷贝，因为在Js中引用类型用＝赋值，实际上是引用，这样说的通。所以，深拷贝，还需要做一些处理，把object，array等引用类型识别出来，深层递归到最后一层，一个一个的拷贝。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> deepCopy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">o</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> target = &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> o !== <span class=\"string\">'object'</span> &amp;&amp; !<span class=\"built_in\">Array</span>.isArray(o))&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> o;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> o)&#123;</span><br><span class=\"line\">\t\ttarget[k] = deepCopy(o[k]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>思路是如此，这个例子只考虑了两种情况，对象和数组，为了验证这样的思路，最后的结果与预期是一样的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _copy = &#123;</span><br><span class=\"line\">\t<span class=\"string\">'object'</span>:&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">'name'</span>:<span class=\"string\">'wen'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">'array'</span>:[<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> h = deepCopy(_copy);</span><br><span class=\"line\">h.object.name = <span class=\"string\">'lcepy'</span>;</span><br><span class=\"line\">h.array[<span class=\"number\">1</span>] = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(h);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_copy);</span><br></pre></td></tr></table></figure>\n<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><p>面向对象的语言有一个非常明显的标志：类，通过类来创建任意多个具有相同属性和方法的对象，可惜的是Js里没有这样的概念。</p>\n<p>但是Js有一个特性：一切皆是对象。</p>\n<p>聪明的开发者通过这些特性进行摸索，于是迂回发明了一些程序设计，以便更好的组织代码结构。</p>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>主要是用来解决有多个相同属性和方法的对象的问题，可以用函数来封装特定的接口来实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> computer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,version</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">'name'</span>:name,</span><br><span class=\"line\">\t\t<span class=\"string\">'version'</span>:version,</span><br><span class=\"line\">\t\t<span class=\"string\">'showMessage'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\talert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> test = computer(<span class=\"string\">'apple'</span>,<span class=\"string\">'11.1'</span>);</span><br><span class=\"line\">test.showMessage();</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h3><p>我们知道像原生的构造函数，比如Object，Array等，它们是在运行时自动出现在执行环境中的。因此，为了模仿它，这里也可以通过一个普通的函数，并且new出一个对象，这样就成为了自定义的构造函数，也可以为他们添加自定义的属性和方法。</p>\n<p>但是这样的构造函数有一个缺陷，就是每个方法都会在每个实例上创建一次，因为每次创建都需要分配内存空间，但是有时候这样的特性还是有用的，主要是要控制它们，在不使用的时候释放内存。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Computer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,version</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.version = version;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.showMessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\talert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"keyword\">new</span> Computer(<span class=\"string\">'apple'</span>,<span class=\"number\">2014</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> dell = <span class=\"keyword\">new</span> Computer(<span class=\"string\">'dell'</span>,<span class=\"number\">2010</span>);</span><br><span class=\"line\">apple.showMessage();</span><br><span class=\"line\">dell.showMessage();</span><br></pre></td></tr></table></figure>\n<p>像apple，dell是通过Computer实例化出来的不同的对象，但是它们的constructor都是指向Computer的。这里也可以使用instanceof来对（对象）进行检测。</p>\n<p>在书写上构造函数跟其他函数是没有什么区别的，主要的区别还是在使用上，构造函数需要使用new操作符。</p>\n<p>其实这样的书写，已经跟类没有什么区别了，表面上来看，而构造函数我个人更倾向于一个类的某个静态方法。</p>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><p>说到原型模式就不得不提一提关于指针的问题，因为每一个函数都有一个prototype属性，而这个属性是一个指针，指向一个对象。</p>\n<p><strong>C语言描述指针，这个在iOS开发中非常重要</strong></p>\n<p>比如我先定义一个int类型的指针变量和一个普通的int类型数据，然后给指针变量赋值。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int *p;</span><br><span class=\"line\">int pp = 123;</span><br><span class=\"line\">p = &amp;pp;</span><br><span class=\"line\">*p = 999;</span><br><span class=\"line\">printf('%d',pp);</span><br></pre></td></tr></table></figure>\n<p>*是一个特殊符号用于标明它是一个指针变量。</p>\n<p>&amp;是地址符</p>\n<p>分析这个就要说到栈内存和堆内存了，比如*p在栈内存中分配了一个地址假设是ff22x0，它还没有空间。而pp存在一个地址ff23x0，并且分配了一个空间存储着123，这个地址是指向这个空间的。</p>\n<p>p = &amp;pp 这样的赋值操作，也就是把ff23x0取出来，并且给p分配一个空间把ff23x0存储进去，并且ff22x0指向这个空间。</p>\n<p>*p = 999 从这里就可以看出来p操作的是地址，而这个地址不就是ff23x0么，于是pp成了999。</p>\n<p>所谓的指针也就是存储着地址的变量。</p>\n<p>回到原型上，如果每一个函数中的 prototype属性都是一个指针，实际上它只是一个地址引用着一个空间，而这个空间正是我们写的xxx.prototype.xxx = function(){}这样的代码在运行时分配的空间。那么可见，使用原型的好处是空间只分配一次，大家都是共享的，因为它是指针。</p>\n<p>先看一个例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Computer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Computer.prototype.showMessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\talert(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"keyword\">new</span> Computer(<span class=\"string\">'apple'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> dell = <span class=\"keyword\">new</span> Computer(<span class=\"string\">'dell'</span>);</span><br><span class=\"line\">Computer.prototype.isPrototypeOf(apple);</span><br></pre></td></tr></table></figure>\n<p>在解释这个原型链之前，还要明白Js的一个特性，就是如果自身不存在，它会沿着原型往上查找。它的原理稍微有些绕，Computer自身的prototype是指向它自身的原型对象的，而每一个函数又有一个constructor指向它自身，prototype.constructor又指向它自身。于是Computer的两个实例apple，dell内部有一个<strong>proto</strong>属性是指向Computer.prototype的，最后的结果是它们可以使用showMessage方法。</p>\n<p>当然它们还有一个搜索原则，比如在调用showMessage的时候，引擎先问apple自身有showMessage吗？“没有”，继续搜索，apple的原型有吗，“有”，调用。所以从这里可以看出，this.showMessage是会覆盖prototype.showMessage的。</p>\n<p>另外还可以使用isPrototypeOf来检测一个对象是否在另一个对象的原型链上，上述的代码返回的是true。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apple.hasOwnProperty(<span class=\"string\">'name'</span>)</span><br><span class=\"line\">apple.hasOwnProperty(<span class=\"string\">'showMessage'</span>)</span><br></pre></td></tr></table></figure>\n<p>使用hasOwnProperty来检测到底是对象属性还是原型属性，使用this创建的属性是一个对象属性。</p>\n<p>从上面可以看出来原型链的好处，但是它也不是万能的，正因为指针的存在，对于某些引用类型来说这个就非常不好了，我需要保持原对象属性值是每一个对象特有的，而不是共享的，于是把之前的构造函数与原型组合起来，也就解决了这样的问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Computer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Computer.prototype.showMessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"keyword\">new</span> Computer(<span class=\"string\">'apple'</span>);</span><br><span class=\"line\">apple.showMessage();</span><br></pre></td></tr></table></figure>\n<p>这样的结果是在对象中都会创建一份属于自己的属性，而方法则是共享的。</p>\n<p><strong>动态原型模式</strong></p>\n<p>有时候遇到某些问题需要动态添加原型，但是实例中是不能添加的，所以绕来一下，在初始化构造函数中添加。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Computer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>.showMessage !== <span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">\t\tComputer.prototype.showMessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只要初始化了一次，以后就不用修改了。</p>\n<h3 id=\"寄生构造函数模式\"><a href=\"#寄生构造函数模式\" class=\"headerlink\" title=\"寄生构造函数模式\"></a>寄生构造函数模式</h3><p>这种模式的原理就是在一个函数中封装需要创建对象的代码，然后返回它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">'name'</span>:name</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"keyword\">new</span> test(<span class=\"string\">'apple'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = de(<span class=\"string\">'dell'</span>);</span><br></pre></td></tr></table></figure>\n<p>看起来它跟工厂模式还是很像的，</p>\n<h3 id=\"稳妥模式\"><a href=\"#稳妥模式\" class=\"headerlink\" title=\"稳妥模式\"></a>稳妥模式</h3><p>这种模式主要是在解决需要安全的环境中使用，一般来说一个类如果不提供getter，setter方法，是不允许直接访问和修改的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> computer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> _name = name;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">'getter'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> _name;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"string\">'setter'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t_name = name;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样的方式可以保证属性或者说是数据的安全性，不允许直接随便修改，如果不提供setter方法的话，压根就不允许。</p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>谈到面向对象，那么就不能不谈谈继承的问题了，而在Js中主要是将原型作为实现继承的主要思路。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Computer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//this.name = name;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Computer.prototype.show = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">'computer'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Apple = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Apple.prototype = <span class=\"keyword\">new</span> Computer();</span><br><span class=\"line\">Apple.prototype.hide = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">Apple.prototype.show = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">'apple'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">apple.show();</span><br><span class=\"line\">alert(apple <span class=\"keyword\">instanceof</span> Computer);</span><br></pre></td></tr></table></figure>\n<p>使用这样的方式，实际上是从Computer的实例中先借它的prototype中所有的方法，但是这里会存在几个问题。</p>\n<ul>\n<li>如果Computer中需要传入参数，比如name，借的时候我根本不知道要传入什么参数。</li>\n<li>在Apple中如果要继续给原型添加方法，那么就不能使用字面量的形式了，它会覆盖掉</li>\n<li>如果要重写父类中的方法必须要在借prototype之后</li>\n<li>那么如何确定原型和实例的关系？貌似用instanceof和isPrototypeOf都会返回true</li>\n</ul>\n<p><strong>解决问题一如何传入参数</strong></p>\n<p>我们知道Js中有两个方法可以改变函数的上下文，apply和call，实际上类就是函数，这里既借属性也借prototype，不就可以解决这样的问题了么。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Computer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//this.name = name;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Computer.prototype.show = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">'computer'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Apple = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\tComputer.call(<span class=\"keyword\">this</span>,name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Apple.prototype = <span class=\"keyword\">new</span> Computer();</span><br><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"keyword\">new</span> Apple(<span class=\"string\">'apple'</span>);</span><br><span class=\"line\">alert(apple <span class=\"keyword\">instanceof</span> Apple);</span><br><span class=\"line\">alert(apple <span class=\"keyword\">instanceof</span> Computer);</span><br></pre></td></tr></table></figure>\n<p>在运行时先借prototype，然后再借子类的this，但是这个也有个问题，那就是会调用两次父类。</p>\n<p><strong>继承的技巧</strong></p>\n<p>还有一种继承是生成一个临时对象，然后临时对象借需要继承的父类的prototype。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">o</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">\tF.prototype = o;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> parent = &#123;</span><br><span class=\"line\">\t<span class=\"string\">'name'</span>:[<span class=\"string\">'lcepy'</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> game = extend(parent);</span><br><span class=\"line\">game.name.push(<span class=\"string\">'wow'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> _game = extend(parent);</span><br><span class=\"line\">_game.name.push(<span class=\"string\">'view'</span>);</span><br></pre></td></tr></table></figure>\n<p>使用这样的方式有个很大的缺陷，那就是不要借属性之类的数据，因为它们是共享的，这是一个浅拷贝，还是因为指针的原因。不过要是继承方法，这种方式很方便。</p>\n<p>还有一种方式跟上述类似，主要是封装了一层函数，用来返回对象。</p>\n<h3 id=\"寄生组合继承\"><a href=\"#寄生组合继承\" class=\"headerlink\" title=\"寄生组合继承\"></a>寄生组合继承</h3><p>这样的方式主要解决的问题是调用两次父类的问题，避免额外的借来的属性或方法。想想看第一次Computer.call(this)，借来了this上的属性或方法，第二次Apple.prototype = new Computer()，又借来了this上的属性或方法，这里的初衷是想借原型，没办法这个是实例，所以该借的不该借的都借来了。那么要避免这样的问题，就要解决继承属性的继承属性，继承原型的继承原型，也不乱借。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> extendPrototype = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sub,supers</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">\tF.prototype = supers.prototype;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> _f = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">\t_f.constructor = sub;</span><br><span class=\"line\">\tsub.prototype = _f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Computer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Computer.prototype.show = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\talert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;\t\t</span><br><span class=\"line\"><span class=\"keyword\">var</span> Apple = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\tComputer.call(<span class=\"keyword\">this</span>,name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">extendPrototype(Apple,Computer);\t\t\t</span><br><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"keyword\">new</span> Apple(<span class=\"string\">'apple'</span>);</span><br><span class=\"line\">apple.show();</span><br></pre></td></tr></table></figure>\n<p>第一步把supers的原型赋值给F，第二步创建F的实例，第三步把_f实例的constructor属性修改成子类，第四步把_f实例赋值给子类的prototype。</p>\n<p>这样的话就是不该借的也不会继承了</p>\n<h2 id=\"理解内存管理\"><a href=\"#理解内存管理\" class=\"headerlink\" title=\"理解内存管理\"></a>理解内存管理</h2><p>一般来说内存管理主要有这么几种方式，引用计数和标记，而JavaScript采用的就是标记管理的方式。Js的内存管理是自动的，但是并不是说执行完后立马销毁，而是有时间周期性，相隔一段时间执行一下垃圾回收，把没有引用的内存全部销毁。</p>\n<p>OC中采用的是引用计数来手动管理内存，这样的方式比较好，可以让开发者自己来管理。当然也有不好的地方，如果遗忘了释放，很可能引起应用的崩溃。</p>\n<p>总体来看在IE中因为COM组件的原因，可能会发生循环引用的问题，这个问题在引用计数的内存管理都会遇见。所谓的循环引用是指在对象A中包含了一个指向B的指针，然后再对象B中包含一个指向A的指针，于是悲剧了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'doc'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> my = &#123;&#125;;</span><br><span class=\"line\">my.element = element;</span><br><span class=\"line\">element.my = my;</span><br></pre></td></tr></table></figure>\n<p>大家都引用，于是，可想而知。要避免这种问题，一定要在不使用的时候my.element = null，把它断开。</p>\n<p>那么，其他浏览器呢？还是标记清理的机制，比如一个函数的变量，在进入环境时标记上“进入环境”，执行完之后标记上“离开环境”，然后等待系统来释放。</p>\n<p>IE有一个手动释放的方法，window.CollectGarbage，调用它就立马释放已经标记离开环境的变量，不过很多文章都不建议这样做。</p>\n<p>那么一般都这样做，引用类型的释放</p>\n<pre><code>var my = {};\n//使用完毕之后\nmy = null;\n</code></pre><p>让my脱离执行环境，标记上已经离开环境，然后等待系统执行垃圾回收，释放内存。</p>\n<h2 id=\"XMLHttpRequest\"><a href=\"#XMLHttpRequest\" class=\"headerlink\" title=\"XMLHttpRequest\"></a>XMLHttpRequest</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\"> JavaScript 的同源策略</a></li>\n</ul>\n<blockquote>\n<p>注明： IE8已上，支持现代XMLHttpRequest</p>\n</blockquote>\n<p>客户端Js与服务器进行网络交互必备的一个玩意，它不支持跨域，若要跨域还需要进行一些额外的处理。</p>\n<pre><code>var xhr = new XMLHttpRequest();\n</code></pre><p>在使用xhr对象时，要调用的第一个方法是open()，它接受三个参数［发送请求的类型，请求的URL，描述是否同步还是异步的布尔值］false同步，true异步。</p>\n<p>关于Ajax同步异步的个人理解：</p>\n<ul>\n<li>同步，是用数据块的方式来传输的，在Js执行的表现上，当执行到这个Ajax请求时会等待它与服务器交互成功之后才能执行下面一行的代码，也就是阻塞。</li>\n<li>异步，是用字节来传输的，它不等待是否成功，会执行之后的代码</li>\n</ul>\n<p>结束时需要调用xhr.send()，如果没有发送数据的主体，必须要null，做为发送参数。另外在接收到响应之前还可以调用abort()来取消异步请求（不建议调用它）</p>\n<h3 id=\"HTTP状态验证\"><a href=\"#HTTP状态验证\" class=\"headerlink\" title=\"HTTP状态验证\"></a>HTTP状态验证</h3><p>当收到响应后会自动填充xhr对象，它有几个比较重要的状态，我们必须要了解清楚与处理。</p>\n<ul>\n<li>responseText:作为响应主体返回的文本</li>\n<li>responseXML:如果响应内容的类型是”text/xml”或者”application/xml”，这个属性中保存的就是XML的DOM文档</li>\n<li>status：响应的HTTP状态</li>\n<li>statusText：HTTP状态的说明</li>\n<li>readyState：用于描述请求发送到完成的过程</li>\n</ul>\n<p>正常情况下需要检测status === 200 readyState === 4 这就表示responseText或者responseXML中已经填充了全部的数据可以提供给客户端使用了。</p>\n<pre><code>1 开头的用于描述请求已经发送，需要请求者继续操作才能继续的状态\n2 开头的用于描述请求已经成功\n3 开头的用于描述成功，但是还需要继续操作\n4 开头的用于描述客户端发送了什么数据导致服务器错误\n5 开头的用于描述服务器错误（常见的如，服务端代码抛错了）\n</code></pre><p>readyState状态</p>\n<pre><code>0 未初始化，还没有调用open方法\n1 已经调用open方法，还没有调用send方法\n2 已经调用send方法，但是还没有接收到响应\n3 已经接收了部分数据\n4 已经接收了全部的数据\n</code></pre><h3 id=\"xhr对象其他方法或事件\"><a href=\"#xhr对象其他方法或事件\" class=\"headerlink\" title=\"xhr对象其他方法或事件\"></a>xhr对象其他方法或事件</h3><p>每一个请求和响应都会带有相应的HTTP头信息，其中对开发者是很有用的，而xhr对象提供了一个setRequestHeader方法来设置头信息，它必须在调用open方法之后并且在send方法之前。</p>\n<p>既然有设置，那么必须得有获取，xhr对象也提供了两个方法分别来获取，getResponseHeader传入一个头部字段名来获取，getAllResponseHeaders来获取全部的头信息。</p>\n<p>而接收数据则需要处理onreadystatechange事件，每次刷新状态时，系统都会重新调用此事件。</p>\n<h2 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS\">HTTP访问控制(CORS)</a></li>\n</ul>\n<p>客户端Js出于安全的考虑，不允许跨域调用其他页面的对象，正是因为这样才给Ajax带来了很多不方便的地方。跨域最简单的理解就是因为Js同源策略的存在，比如a.com域名下的Js不能访问b.com下的Js对象。</p>\n<ul>\n<li>协议端口没法跨，客户端</li>\n<li>在跨域上，域仅仅是通过首部来识别，window.location.protocol +window.location.host</li>\n</ul>\n<h3 id=\"利用document-domain和iframe来设置\"><a href=\"#利用document-domain和iframe来设置\" class=\"headerlink\" title=\"利用document.domain和iframe来设置\"></a>利用document.domain和iframe来设置</h3><p>对于主域相同而子域名不同的情况，可以通过document.domain来处理，比如www.163.com/index.html和wow.163.com/wower.html，在这两个文件中分别加入document.domain = “163.com”，然后在index.html页面中创建一个iframe引入wower.html，获取iframe的contentDocument，这样这两个js就可以交互了。</p>\n<p>index.html</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.domain = <span class=\"string\">'163.com'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'iframe'</span>);</span><br><span class=\"line\">iframe.src = <span class=\"string\">'http://wow.163.com/wower.html'</span>;</span><br><span class=\"line\">iframe.style.display = <span class=\"string\">'none'</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> doc = iframe.contentDocument || iframe.contentWindow.document;</span><br><span class=\"line\">\t<span class=\"comment\">//现在可以通过doc来操作wower.html中的js对象了</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>wower.html</p>\n<pre><code>document.domain = &apos;163.com&apos;;\n</code></pre><p>使用这样的方式来实现的跨域是有限制的</p>\n<ul>\n<li>主域名必须是同一个</li>\n<li>安全性引发的问题，比如第一个页面出现了安全问题，在后面的页面也会出现</li>\n<li>iframe引用过多的话，每一个iframe都必须设置document.domain，比较琐碎</li>\n</ul>\n<blockquote>\n<p>偶尔可以使用一下</p>\n</blockquote>\n<h3 id=\"利用window-name\"><a href=\"#利用window-name\" class=\"headerlink\" title=\"利用window.name\"></a>利用window.name</h3><p>稍微有些绕，但是数据量比较大，也比较安全</p>\n<ul>\n<li>wow.163.com/app.html 应用所在的页面</li>\n<li>wow.163.com/empty.html 中间代理页面，搞个空的即可，但是必须在主域名下</li>\n<li>www.qq.com/data.html 需要交互的数据页面</li>\n</ul>\n<p>在data.html页面中</p>\n<pre><code>window.name = 123;\n</code></pre><p>app.html页面中创建一个隐藏的iframe，它的scr指向data.html，在onload事件中，把当前iframe的contentWindow.loaction修改成empty.html，当再次onload时就可以通过contentWindow.name来获取到123了。</p>\n<blockquote>\n<p>偶尔使用</p>\n</blockquote>\n<h3 id=\"利用iframe和location-hash\"><a href=\"#利用iframe和location-hash\" class=\"headerlink\" title=\"利用iframe和location.hash\"></a>利用iframe和location.hash</h3><p>利用这种方式，说实话（不建议），比较绕，而且数据量小，直接暴露在URL上。它的原理主要是这样的，假设wow.163.com/index.html页面，wow.163.com/empty.html（空的，什么内容都没有），需要交换数据的页面在www.qq.com/a.html上。</p>\n<p>在wow.163.com/index.html#（＃号就是我们要传递的数据），创建一个隐藏的iframe，hash值可以当参数传递给www.qq.com/a.html#()，在www.qq.com/a.html中可以获取到hash值，根据它进行处理，然后在www.qq.com/a.html页面中创建一个隐藏iframe，把处理的结果当hash值进行传递，给wow.163.com/empty.html#()这样，在同一个域名下，wow.163.com/empty.html中的js可以通过parent.parent.location.hash = self.location.hash来改变hash值，这样就达到了跨域的目的。</p>\n<blockquote>\n<p>不建议使用，坑爹的思路</p>\n</blockquote>\n<h3 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h3><p>这种方式是目前开发时最常用的一种方式，利用动态创建script标签来实现跨域的目的，虽然浏览器有显示Js对象的访问，但是它没有限制Js文件的加载，任何域名下的Js文件都可以加载。</p>\n<p>对客户端而言，文件的加载其实就是发送一次GET请求，在服务端实现时，也就是处理这次的GET请求，并且响应，参数可以通过?来带走，俗称一波流。</p>\n<p>在客户端上对于script文件加载是否已经完毕的判断，IE是判断script标签的readystatechange属性，而其他浏览器是onload事件。</p>\n<blockquote>\n<p>突然感觉做移动端不考虑IE的兼容，果然是杠杠的，建议使用</p>\n</blockquote>\n<h3 id=\"HTML5-postMessage\"><a href=\"#HTML5-postMessage\" class=\"headerlink\" title=\"HTML5 postMessage\"></a>HTML5 postMessage</h3><p>主要是利用window.postMessage来发送消息，监听window.message来获取消息，判断origin可以判断消息来源，data获取消息内容，soucre来引用发送方的window对象引用。</p>\n<p>www.b.com/b.html发送消息给www.a.com/a.html</p>\n<pre><code>window.postMessage(&apos;hello&apos;,&apos;www.a.com/a.html&apos;)\n</code></pre><p>www.a.com/a.html获取消息</p>\n<pre><code>window.addEventLister(&apos;message&apos;,function(event){\n    if(event.origin === &apos;http://b.com&apos;){\n        //处理\n    }\n})\n</code></pre><p>iframe的发送方式</p>\n<pre><code>contentWindow.postMessage(&apos;data&apos;,&apos;b.com&apos;)\n</code></pre><blockquote>\n<p>话不多说，移动端这种跨域方式也很常用（建议推荐使用）</p>\n</blockquote>\n<h3 id=\"HTML5-跨域头-XMLHttpRequest2\"><a href=\"#HTML5-跨域头-XMLHttpRequest2\" class=\"headerlink\" title=\"HTML5 跨域头 XMLHttpRequest2\"></a>HTML5 跨域头 XMLHttpRequest2</h3><p>如果是自己产品，又是做移动端可以使用，比上述任何方式都要方便，需要服务端支持响应时也要设置跨域头。</p>\n<p>如果服务器响应此头，浏览器会检查此头，它的值表示请求内容所允许的域名，也就是如果是*号，表示所有域都可以访问，如果这里是a.com，表示除了同源外，只允许来自a.com域的访问。</p>\n<pre><code>Access-Control-Allow-Origin：＊\n</code></pre><p>如果需要读取cookie则需要设置它</p>\n<pre><code>Access-Control-Allow-Credentials:true\n</code></pre><p>设置允许跨域的请求类型</p>\n<pre><code>Access-Control-Allow-Methods:POST\n</code></pre><blockquote>\n<p>兼容性问题，某些版本的浏览器需要在open之后，设置xhr.withCredentials ＝ true;话不多说，建议推荐使用</p>\n</blockquote>\n<h2 id=\"浏览器对象模型\"><a href=\"#浏览器对象模型\" class=\"headerlink\" title=\"浏览器对象模型\"></a>浏览器对象模型</h2><p>BOM提供了很多对象，它的核心是window，表示它是浏览器的一个实例，在ECMAScript中又是Global对象。它提供了很多访问浏览器的功能，这些功能与网页无关，所以缺少事实标准的BOM既有意思又有些坑。复习它，主要是复习几个比较有用的对象，其他可以了解一二。</p>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h3><blockquote>\n<p>算起来它是我用的最多的一个对象</p>\n</blockquote>\n<p>它提供了当前窗口加载的页面有关的信息，也对URL进行了片段分解，既是window的属性，也是document的属性。</p>\n<ul>\n<li>hash 返回URL的散列（#号后面跟着的零个或多个值）</li>\n<li>host 返回服务器名称和端口号</li>\n<li>hostname 返回不带端口号的服务器名称</li>\n<li>href 返回当前加载页面的完整URL</li>\n<li>pathname 返回URL中的目录或文件名</li>\n<li>port 返回URL中指定的端口号</li>\n<li>protocol 返回页面使用的协议</li>\n<li>search 返回URL中的查询字符串，它以问好（?）开头</li>\n</ul>\n<p>上述的属性基本上都可以直接使用，search除外，它返回的是一个完整的查询字符串，没有办法访问其中的每个查询字符串参数，还需要额外的进行处理。</p>\n<p>一般来说根据它的特点，?开头&amp;拼接，key=value的形式来展现，最好是key和value都要decodeURIComponent一下。</p>\n<p>在location中除了上述的属性外，还有一些比较有用的方法和技巧，主要是用来控制页面跳转的问题。</p>\n<ul>\n<li>assign方法接收一个参数，表示立即打开一个新的页面并在历史纪录中生成一条记录，它的效果等同于window.location.href = ‘’或者location.href = ‘’</li>\n<li>修改location对象的属性比如href，hash，search等也可以来改变URL</li>\n<li>replace方法接收一个参数，既跳转到新的URL上，并且不会在历史纪录中增加一条新的纪录</li>\n<li>reload表示重新加载当前页面</li>\n</ul>\n<h3 id=\"处理框架，设置时间，open，窗口位置，窗口大小\"><a href=\"#处理框架，设置时间，open，窗口位置，窗口大小\" class=\"headerlink\" title=\"处理框架，设置时间，open，窗口位置，窗口大小\"></a>处理框架，设置时间，open，窗口位置，窗口大小</h3><blockquote>\n<p>open现在估计没人会用了</p>\n</blockquote>\n<p>如果页面中包含框架，则每个框架都有自己的window对象，可以使用frames来获取，比如frames[0]或者frames[‘name’]。这里还要了解的是top，parent，对于这些只要理解的层级关系，每一个指向都是会非常清楚的。</p>\n<p>在做某些动画效果的时候，主要是针对PC端，可能会使用到窗口位置，窗口大小的属性来进行计算，比如innerWidth，innerHeight，outerWidth，outerHeight，获取到这些尺寸，一般会与当前div的高宽进行减法来获取精准的位置。</p>\n<p>setTimeout和setInterval是进行时间调度的函数，我们知道Js是单线程的，但是可以使用这个在特定的时间范围内执行代码，前面一个setTimeout是在指定的时间内执行（只执行一次），后面的setInterval则是以指定的时间重复执行（N次）</p>\n<h3 id=\"navigator\"><a href=\"#navigator\" class=\"headerlink\" title=\"navigator\"></a>navigator</h3><p>用这个一般是在统计用户浏览器版本，操作系统等场景下才用的上，偶尔有几个会比较实用。</p>\n<ul>\n<li>cookieEnabled 判断cookie是否开启</li>\n<li>userAgent 浏览器用户代理字符串</li>\n<li>plugins数组 主要是用来检测浏览器安装的插件</li>\n</ul>\n<p>###screen</p>\n<p>在Js中有几个对象在编程里真用不上，这个就是其中之一。它主要是用来表明客户端的能力，比如显示器的信息，像素，高，宽等。</p>\n<h3 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h3><p>history对象保存着用户上网的历史纪录，但是这个也是非常不常用。主要是用go方法，back方法，forward方法。</p>\n<blockquote>\n<p>说实话，后面三个navigator,screen,history基本上很废材，HTML5中的history对象pushState非常有用外。</p>\n</blockquote>\n<h2 id=\"文档对象模型\"><a href=\"#文档对象模型\" class=\"headerlink\" title=\"文档对象模型\"></a>文档对象模型</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model\">文档对象模型 (DOM)</a></li>\n</ul>\n<p>DOM是针对HTML和XML文档的一个API，主要是使用JavaScript来进行编程操作HTML和XML文档。其他语言如果实现了DOM标准，理论上也是可以使用这个API的，这里仅仅讨论JavaScript的应用。</p>\n<p><strong>理解层级结构与关系</strong></p>\n<p>在浏览器中比如HTML页面是由很多有层次结构的标签组成的，而为这些标签提供查询，添加，删除等等方法主要就是DOM在提供支持。</p>\n<p>（页面又称为文档）文档中所有的节点之间都存在这样或那样的关系，比如下面一个经典的HTML：</p>\n<pre><code>&lt;html&gt;\n    &lt;head&gt;&lt;/head&gt;\n    &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>一个标签又可以称为一个元素，head和body那就是兄弟关系，它们都来自一个父系html，又可以说html的子元素是head和body，可能这样描述还不太明显，这样就用原生Js操作DOM来的方式来看看层级结构。</p>\n<pre><code>var html = document.getElementsByTagName(&apos;html&apos;)[0];\n</code></pre><p>先通过getElementsByTagName获取html根元素的节点，每一个元素都有一个childNodes集合和一个parentNode分别代表子节点集合和父节点，<strong>如果不存在，则都是null，如果是集合不存在，则是一个[]</strong>。</p>\n<blockquote>\n<p>html的childNodes //[head,body] html的parentNode // document</p>\n</blockquote>\n<p>每一个元素也都有一个firstChild和lastChild来分别代表第一个子元素和最后一个子元素</p>\n<p>每一个元素也都有一个nextSibling和previousSibling分别代表前面一个元素和后面一个元素，以当前自己为参照物。</p>\n<p>从这样可以看出来，它就像族谱一样对元素的关系进行了定义，通过理解这些层级关系，利用DOM提供的API可以很顺利的进行操作。</p>\n<h3 id=\"操作DOM\"><a href=\"#操作DOM\" class=\"headerlink\" title=\"操作DOM\"></a>操作DOM</h3><p><strong>常见的获取方式</strong></p>\n<ul>\n<li>document.getElementById （通过ID来获取到节点）</li>\n<li>document.getElementsByTagName （通过节点标签来获取）</li>\n<li>document.querySelector  </li>\n<li>document.querySelectorAll</li>\n</ul>\n<p>后面两个属于HTML5提供的新API，在移动端会用的比较多，前者是获取单个，后者获取集合。</p>\n<p><strong>常见添加，删除</strong></p>\n<ul>\n<li>appendChild</li>\n<li>insterBefore</li>\n<li>replaceChild</li>\n<li>removeChild</li>\n</ul>\n<p>appendChild主要是向childNodes集合的末尾添加一条元素，insterBefore可以用来插入特定位置，两个参数，要插入的节点和作为参照的节点，更新成功后插入的节点会在参照节点之前，也就是参照节点的previousSibling。replaceChild和insterBefore有些类似，两个参数，要插入的节点和参照节点，更新成功后，要插入的节点会替换参照节点，removeChild就比较好理解了，删除一个节点，这四个方法都有返回值。</p>\n<p><strong>常见元素属性</strong></p>\n<p>一般来说，如果var doc = document.getElementById(‘doc’);doc.id = ‘xx’;这样的方式也是可以更新或者获取到元素的属性的，不过不推荐这么使用，要获取元素的属性，DOM API也提供了三个方法来使用。</p>\n<ul>\n<li>getAttribute</li>\n<li>setAttribute</li>\n<li>removeAttribute</li>\n</ul>\n<p>getAttribute可以获取元素的属性，setAttribute可以对元素的属性进行设置，如果属性名不存在，则创建该属性。removeAttribute则是完全删除此属性。</p>\n<p>还有一个属性attributes，主要是获取元素属性集合，这个不是很常用，主要是在遍历元素属性时会使用到，它是一个集合。</p>\n<p><strong>常见创建元素或文本</strong></p>\n<p>一般情况下创建元素都会使用字符串的形式，innerHTML进去。不过，某些情况下，会用到createElement来创建一个元素，如果用到它，那么创建的文本也必须使用createTextNode了。</p>\n<p>对于文本节点，注释节点等开发真的很少用，可以当一个子类大概了解即可。</p>\n<blockquote>\n<p>关于模式的讨论，主要可以用document.compatMode来判断，如果是CSS1Compat就是标准模式，移动端不会出现这样的情况，IE上可能有别的模式，模式主要是影响到CSS布局上，Js影响非常少。</p>\n<p>在移动端上滚动是一个比较要处理的问题，一般来说会使用scrollIntoView，scrollIntoViewIfNeeded，scrollByLines，scrollByPages，这四个方法safari chrome都有实现，意味着在iOS和安卓平台都是良好的。</p>\n</blockquote>\n<ul>\n<li>scrollByPages 将元素的内容滚动到指定的页面高度，具体的高度是由元素的高度来决定的。</li>\n<li>scrollByLines 将元素的内容滚动到知道的行数高度，参数可正可负。</li>\n<li>scrollIntoViewIfNeeded，当元素在视窗（viewport）不可见，会滚动容器元素或者浏览器窗口让其可见。如果是可见的，这个方法不起任何作用。如果参数为true，可能是垂直居中的可见。</li>\n<li>scrollIntoView 滚动容器元素或者浏览器窗口，让元素可见。</li>\n</ul>\n<p><strong>一些小技巧</strong></p>\n<p>每一个元素都存在一个contains方法，用来检测传入的节点是不是当前节点的子节点，火狐对于的方法名叫compareDocumentPosition。</p>\n<p>如果要获取一个文本节点可以使用innerText（纯文本）来获取字符串，如果要获取所有的包括标签的字符串可以使用innerHTML。它们还有一种outer系列对应的方法，主要的区别是前者（outerText）会替换节点，后者(outerHTML)会修改调用它的元素，一般基本没人使用。它们可以获取，也可以通过赋值来设置新的节点。</p>\n<h3 id=\"DOM2和DOM3\"><a href=\"#DOM2和DOM3\" class=\"headerlink\" title=\"DOM2和DOM3\"></a>DOM2和DOM3</h3><p>对于这两级在DOM中基本上IE没啥支持，或者说支持的非常少，像style对象，CSS的一些对象外。</p>\n<p>这里最大的变化是增加了对XML命名空间的支持，元素样式的访问，节点的遍历以及range。当然目前来看，节点的遍历，range，XML命名空间在开发中使用的非常少，可以当资料来阅读，了解有这么回事，用到的时候再查询。而元素样式的访问，这个在开发中普遍使用的较多，因为在没法使用css3动画的浏览器中，可以通过改变样式来到达动画的目的。</p>\n<pre><code>var doc = document.getElementById(&apos;doc&apos;);\ndoc.style.width = &apos;100px&apos;;\n</code></pre><p>对于iframe的访问这里增加了一个contentDocument对象来进行引用，还有节点的比较，isSameNode和isEqualNode，这两个的区别在于，前者是否引用的同一个节点对象，后者是指两个节点是否是相同的类型。不过，它们使用的也不多，了解就好。</p>\n<p><strong>元素的大小</strong></p>\n<p>这个部分需要理解，因为关乎到元素在浏览器上的位置显示，跟动画有关系，四个属性。</p>\n<ul>\n<li>offsetWidth 元素在水平方向占用的空间大小</li>\n<li>offsetHeight 元素在垂直方向占用的空间大小</li>\n<li>offsetLeft 元素的左外边框到内边框的距离</li>\n<li>offsetTop 元素的上外边框到内边框的距离</li>\n</ul>\n<p><strong>滚动大小</strong></p>\n<p>这个在视察滚动或者处理滚动条的时候用的上，也是四个属性</p>\n<ul>\n<li>scrollHeight 在没有滚动的情况下，元素的总高度</li>\n<li>scrollWidth 在没有滚动的情况下，元素的总宽度</li>\n<li>scrollLeft 被隐藏在内容区域左侧的像素度</li>\n<li>scrollTop 被隐藏在内容区域上侧的像素度</li>\n</ul>\n<blockquote>\n<p>下面这些IE全部不支持，range支持一种叫做文本范围的东西</p>\n</blockquote>\n<p><strong>元素遍历</strong></p>\n<p>关于遍历其实有两个方法可用createNodeIterator和createTreeWalker，不过这些在开发中几乎不会使用到，谁没事去遍历节点完呢。</p>\n<p><strong>关于range</strong></p>\n<p>这个也是非常少会使用到，除非是做那种编辑器应用或者在线编辑器等等，不过使用它可以更精准的控制的DOM，主要是使用createRange方法。</p>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events\">事件类型一览表</a></li>\n</ul>\n<blockquote>\n<p>IE浏览器的事件不是重点</p>\n</blockquote>\n<p>事件是JavaScript与HTML进行交互的一个纽带，理解事件可以更好的处理Web应用程序，现在的浏览器中主要支持两种事件流：</p>\n<ul>\n<li>事件冒泡</li>\n<li>事件捕获</li>\n<li>DOM事件流</li>\n</ul>\n<p>事件冒泡则是指事件开始时由具体的元素接收，然后逐级向上传播。比如：</p>\n<pre><code>&lt;html&gt;\n    &lt;head&gt;&lt;/head&gt;\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;p&gt;&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>给p标签监听一个事件，它的流向是p,div,body,html,document，其实细心看来这种流的走向会存在一个问题，给div也监听一个事件，当用户点击P的时候是会触发两次的，好在event对象中有可以阻止事件冒泡的方法。</p>\n<p>事件捕获则是指事件由最上级接收，逐级向下传播到具体的元素上，了解了冒泡之后这个就非常好理解了，正是一个相反的步骤。</p>\n<p>而DOM事件流又正好是冒泡与捕获的结合体，它分为三个阶段：事件捕获，目标事件，事件冒泡，如果在纸上画出来，它的走向就是一个圆形。</p>\n<blockquote>\n<p>对于事件处理程序，写在HTML标签中的，另外一种是直接写一个function的，比如doc.onclick = function(){}，一般来说这些浏览器支持，但是基本上不会使用了。因为前者是跟HTML耦合的，不利代码维护，而且虽然HTML加载了但是Js文件还未加载，用户点击后，是直接报错的。后者虽然也可以删除，比如doc.onclick = null，对于对代码有强迫症的同学，基本上不会使用到它。</p>\n</blockquote>\n<p>那么，我们该怎么给一个元素添加上事件处理程序呢？</p>\n<h3 id=\"DOM2级事件处理程序\"><a href=\"#DOM2级事件处理程序\" class=\"headerlink\" title=\"DOM2级事件处理程序\"></a>DOM2级事件处理程序</h3><ul>\n<li>addEventLister</li>\n<li>removeEventLister</li>\n</ul>\n<p>所有的DOM节点都具备这两个方法，它接收三个参数：</p>\n<ul>\n<li>要处理的事件名称，比如click（这里跟上述两个以及IE注册事件都不同，不需要on）</li>\n<li>需要事件进行处理的函数</li>\n<li>一个布尔值，表示（true，在捕获阶段调用事件处理函数）（false，在冒泡阶段调用事件处理函数）</li>\n</ul>\n<blockquote>\n<p>一般情况下第三个参数都填false</p>\n</blockquote>\n<p>IE浏览器对应的两个方法，attachEvent，detachEvent，它们只有冒泡，事件名要加上on。</p>\n<h3 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h3><p>在注册完事件处理程序后，事件的一个比较重要的对象必须要理解，<strong>event事件对象</strong>。</p>\n<p>一般来说，这个对象中包含着所有与当前元素所监听的事件有关的信息，比如元素监听的事件类型，元素本身等等。</p>\n<p><strong>比较重要的属性和方法（只读）</strong></p>\n<ul>\n<li>currentTarget 真正监听事件的那个元素</li>\n<li>target 事件的目标元素</li>\n<li>type 事件的类型</li>\n<li>perventDefault()  取消事件的默认行为</li>\n<li>stopPropagation()  取消事件的捕获或者冒泡</li>\n<li>bubbles 事件是否冒泡</li>\n<li>eventPhase 事件处理程序的三个阶段，1捕获2处于目标3冒泡</li>\n</ul>\n<p><strong>比较重要的属性和方法（读写）</strong></p>\n<ul>\n<li>clientX 鼠标在窗口中的水平位置</li>\n<li>clientY 鼠标在窗口中的垂直位置</li>\n</ul>\n<h3 id=\"事件类型\"><a href=\"#事件类型\" class=\"headerlink\" title=\"事件类型\"></a>事件类型</h3><blockquote>\n<p>PC端主要是针对鼠标，移动端则是触摸，手势相关的处理</p>\n</blockquote>\n<p>如果在PC端上发生一次click事件，实际上它是发生了三次事件，mousedown当鼠标按下的时候，mouseup当用户放开的时候，click两个加起来就发生了一次click事件。相对于移动，PC上的鼠标事件非常的丰富，例如mouseover当鼠标首次移入一个元素边界时触发，mouseout当鼠标移出元素时触发，这个移出，到子元素上也会触发这个事件，mousemove当鼠标在元素内移动时重复触发。</p>\n<p>总体来说对于文档加载，表单控件，窗口大小改变等事件，比如获取焦点，在失去或者获取焦点是值改变等移动上都是一样的，focus（获得焦点）blur（失去焦点）。</p>\n<p>在做一些视差滚动的效果时scroll事件是非常好用，移动上在css中提供了一个类似的属性。</p>\n<p>唯一的区别是移动端上没有键盘事件。</p>\n<h3 id=\"移动事件\"><a href=\"#移动事件\" class=\"headerlink\" title=\"移动事件\"></a>移动事件</h3><ul>\n<li>touchstart 当手指触摸到屏幕时触发</li>\n<li>touchmove 当手指在屏幕上连续滑动时触发</li>\n<li>touchend 当手指从屏幕上移开时触发</li>\n<li>touchcancel 当系统停止跟踪触摸时触发（这个事件没有确定的触发时间）</li>\n</ul>\n<p>它们都是冒泡的，也可以取消</p>\n<p><strong>三个跟踪触摸事件的属性</strong></p>\n<ul>\n<li>touches 当前跟踪触摸操作的touch数组，在touchend事件中为空</li>\n<li>targetTouchs 特定事件目标的touch数组</li>\n<li>ChangedTouches 上次触摸时发生了什么改变的touch数组</li>\n</ul>\n<p><strong>移动event事件对象</strong></p>\n<p>PC上存在的，在移动上也存在，描述上有差异，比如</p>\n<ul>\n<li>target 触摸的DOM节点目标</li>\n<li>pageX 触摸目标在页面中的X坐标</li>\n<li>pageY 触摸目标在页面中的Y坐标</li>\n</ul>\n<p><strong>一些手势</strong></p>\n<ul>\n<li>gesturestart 当一个手指按在屏幕上另外一个手指又触摸屏幕时触发</li>\n<li>gesturechange 依赖前者当其中的一个手指发生改变时触发</li>\n<li>gestureend 当任何一个手指离开时触发</li>\n</ul>\n<p><strong>移动手势干货三部曲</strong></p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/pifoo/archive/2011/05/23/webkit-touch-event-1.html\">对于Touch的处理</a></li>\n<li><a href=\"http://www.cnblogs.com/pifoo/archive/2011/05/22/webkit-touch-event-2.html\">处理简单手势</a></li>\n<li><a href=\"http://www.cnblogs.com/pifoo/archive/2011/05/22/webkit-touch-event-3.html\">处理复杂手势</a></li>\n</ul>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>现在的前端开发了解JS还是仅仅不够的，你需要多方面扩展。</p>\n<p>访问<a href=\"https://github.com/mulgore/Front-End-Develop-Guide\">Front-End-Develop-Guide</a>项目，资料已准备齐全。</p>\n"},{"title":"上传图片攻略全解","date":"2016-03-27T04:08:08.000Z","_content":"\n## 上传图片攻略全解\n\n讲解分题：\n\n- 传统的form表单上传\n- 隐藏iframe模拟Ajax（跨域）上传\n- HTML5特性实现Ajax上传\n- 检校图片信息\n\n### 传统的form表单上传\n\n传统的上传图片，需要追溯到很久之前的时期。假设我们用`python`实现了一个简单的WSGI网页，那么我们需要使用form表单发送POST请求来提交到服务器，并且刷新当前页面。最早的HTTP实际上是不支持图片上传的，普通的HTTP POST请求，它会在头信息里使用Content-Length注明内容长度。头信息每行一条，空行之后便是body，即“内容”（entity）。它的Content-Type是application/x-www-form-urlencoded，这意味着消息内容会经过url编码，就像GET请求时url里的queryString那样。\n\n```JavaScript\nid=1&setting=will\n\n```\n\n从[《RFC 1867 - Form-based File Upload in HTML》](http://www.faqs.org/rfcs/rfc1867.html)提出之后，HTTP开始支持了图片上传。\n\n```HTML\n<form action=\"http://api.com/upload\" method=\"POST\" enctype=\"multipart/form-data\">\n\t<input type=\"file\" name=\"img\">\n</form>\n```\n\n改变`enctype`属性为`multipart/form-data`即可。\n\n### 隐藏iframe模拟Ajax（跨域）上传\n\n当我们实现了第一步时，这还不是最优的选择，为什么？因为我们的页面需要刷新，才能真正完成提交图片到服务器的交互。最开始，很多人会尝试想实现一个Ajax无刷新的上传图片，那么问题来了，如何实现？\n\n这个时候利用iframe可以完成我们的需求，form的name对应iframe的target，可以将刷新目标转移到iframe，不过要注意，首先要设置iframe为隐藏。\n\n```JavaScript\nAjaxForm.prototype._addEvent = function(){\n\tvar self = this;\n\tthis._iframe.on('load',function(){\n\t\tif (self._iframeLoadState) {\n\t\t\tvar cw = this.contentWindow;\n\t\t\tvar loc = cw.location;\n\t\t\tif (loc.href === 'about:blank') {\n\t\t\t\tif (_.isFunction(self._failure)) {\n\t\t\t\t\tself._failure.call(this);\n\t\t\t\t};\n\t\t\t}else{\n\t\t\t\tif (_.isFunction(self._success)) {\n\t\t\t\t\ttry {//如果后台没有作跨域处理，则需手动触发onComplete\n\t\t\t\t\t\tvar body = this._iframe[0].contentWindow.document.body;\n\t\t\t\t\t\tinnerText = body.innerText;\n\t\t\t\t\t\tif (!innerText) {\n\t\t\t\t\t\t\tinnerText = body.innerHTML;\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (innerText) {\n\t\t\t\t\t\t\tself._success.call(this, $.parseJSON(innerText));\n\t\t\t\t\t\t};\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tself._success.call(this);\n\t\t\t\t\t}\n\n\t\t\t\t};\n\t\t\t};\n\t\t\tself._iframeLoadState = false;\n\t\t};\n\t});\n};\n\n```\n\n### HTML5特性实现Ajax上传\n\n新的HTML5特性对于上传，实现起来更容易了，FormData可以提交二进制数据。一般情况下，我们只需要将form对象装载到FormData中即可。\n\n```JavaScript\nvar form = document.getElementById('form');\nvar formData = new FormData(form);\n```\n\n不过，有意思的是可以利用`append`方法可以添加一些更多的信息。\n\n```JavaScript\nvar img = document.getElementById('img').files[0];\nvar formData = new FormData();\nformData.append('img',img);\n```\n\n最后利用`XMLHttpRequest`来最后提交\n\n```JavaScript\nvar xhr = new XMLHttpRequest();\nxhr.open('POST','http://api.com/upload');\nxhr.onreadystatechange = function(){};\nxhr.send(formData);\n```\n\n有意思的是XHR2提供了一个很棒的事件给我们来获取上传的进度，比如：\n\n```JavaScript\nxhr.upload.onprogress = function(evt){\n    console.log(evt)\n    var loaded = evt.loaded;//已经上传大小情况\n    var tot = evt.total;  //附件总大小\n    var per = Math.floor(100*loaded/tot);  //已经上传的百分比  \n}\n```\n\n### 检校图片信息\n\nHTML5标签提供了一些有趣的属性来检索图片信息后缀，比如：\n\n- accept：表示可以选择的文件MIME类型，多个MIME类型用英文逗号分开，常用的MIME类型见下表。\n- multiple：是否可以选择多个文件，多个文件时其value值为第一个文件的虚拟路径。\n\n相比之下，更有用的还是需要去获取file对象，例子：\n\n```HTML\n<input id=\"img\" type=\"file\" name=\"img\" onchange=\"chans()\"/>\n```\n\n```JavaScript\nvar img = document.getElementById('img')\nvar files = img.files\n```\n\nfiles对象是一个数组，这个数组可以关联到`实现多图片上传`的功能，当然，这里我们只针对一张图片的信息来说。\n\n```JavaScript\nvar file = files[0]\n```\n\nfile对象的信息：\n\n- name 图片名\n- size 图片大小\n- type 图片类型\n- lastModified 最后上传的时间毫秒\n\n利用这些属性可以对即将上传的图片做一些校验，最起码不会将一个.txt的文件上传上去，还可以在前端规避一些文件大小，比如：只允许上传5MB的图片。\n","source":"_posts/javascript-upload-image.md","raw":"title: 上传图片攻略全解\ndate: 2016-03-27 12:08:08\ntags: JavaScript\n---\n\n## 上传图片攻略全解\n\n讲解分题：\n\n- 传统的form表单上传\n- 隐藏iframe模拟Ajax（跨域）上传\n- HTML5特性实现Ajax上传\n- 检校图片信息\n\n### 传统的form表单上传\n\n传统的上传图片，需要追溯到很久之前的时期。假设我们用`python`实现了一个简单的WSGI网页，那么我们需要使用form表单发送POST请求来提交到服务器，并且刷新当前页面。最早的HTTP实际上是不支持图片上传的，普通的HTTP POST请求，它会在头信息里使用Content-Length注明内容长度。头信息每行一条，空行之后便是body，即“内容”（entity）。它的Content-Type是application/x-www-form-urlencoded，这意味着消息内容会经过url编码，就像GET请求时url里的queryString那样。\n\n```JavaScript\nid=1&setting=will\n\n```\n\n从[《RFC 1867 - Form-based File Upload in HTML》](http://www.faqs.org/rfcs/rfc1867.html)提出之后，HTTP开始支持了图片上传。\n\n```HTML\n<form action=\"http://api.com/upload\" method=\"POST\" enctype=\"multipart/form-data\">\n\t<input type=\"file\" name=\"img\">\n</form>\n```\n\n改变`enctype`属性为`multipart/form-data`即可。\n\n### 隐藏iframe模拟Ajax（跨域）上传\n\n当我们实现了第一步时，这还不是最优的选择，为什么？因为我们的页面需要刷新，才能真正完成提交图片到服务器的交互。最开始，很多人会尝试想实现一个Ajax无刷新的上传图片，那么问题来了，如何实现？\n\n这个时候利用iframe可以完成我们的需求，form的name对应iframe的target，可以将刷新目标转移到iframe，不过要注意，首先要设置iframe为隐藏。\n\n```JavaScript\nAjaxForm.prototype._addEvent = function(){\n\tvar self = this;\n\tthis._iframe.on('load',function(){\n\t\tif (self._iframeLoadState) {\n\t\t\tvar cw = this.contentWindow;\n\t\t\tvar loc = cw.location;\n\t\t\tif (loc.href === 'about:blank') {\n\t\t\t\tif (_.isFunction(self._failure)) {\n\t\t\t\t\tself._failure.call(this);\n\t\t\t\t};\n\t\t\t}else{\n\t\t\t\tif (_.isFunction(self._success)) {\n\t\t\t\t\ttry {//如果后台没有作跨域处理，则需手动触发onComplete\n\t\t\t\t\t\tvar body = this._iframe[0].contentWindow.document.body;\n\t\t\t\t\t\tinnerText = body.innerText;\n\t\t\t\t\t\tif (!innerText) {\n\t\t\t\t\t\t\tinnerText = body.innerHTML;\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (innerText) {\n\t\t\t\t\t\t\tself._success.call(this, $.parseJSON(innerText));\n\t\t\t\t\t\t};\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tself._success.call(this);\n\t\t\t\t\t}\n\n\t\t\t\t};\n\t\t\t};\n\t\t\tself._iframeLoadState = false;\n\t\t};\n\t});\n};\n\n```\n\n### HTML5特性实现Ajax上传\n\n新的HTML5特性对于上传，实现起来更容易了，FormData可以提交二进制数据。一般情况下，我们只需要将form对象装载到FormData中即可。\n\n```JavaScript\nvar form = document.getElementById('form');\nvar formData = new FormData(form);\n```\n\n不过，有意思的是可以利用`append`方法可以添加一些更多的信息。\n\n```JavaScript\nvar img = document.getElementById('img').files[0];\nvar formData = new FormData();\nformData.append('img',img);\n```\n\n最后利用`XMLHttpRequest`来最后提交\n\n```JavaScript\nvar xhr = new XMLHttpRequest();\nxhr.open('POST','http://api.com/upload');\nxhr.onreadystatechange = function(){};\nxhr.send(formData);\n```\n\n有意思的是XHR2提供了一个很棒的事件给我们来获取上传的进度，比如：\n\n```JavaScript\nxhr.upload.onprogress = function(evt){\n    console.log(evt)\n    var loaded = evt.loaded;//已经上传大小情况\n    var tot = evt.total;  //附件总大小\n    var per = Math.floor(100*loaded/tot);  //已经上传的百分比  \n}\n```\n\n### 检校图片信息\n\nHTML5标签提供了一些有趣的属性来检索图片信息后缀，比如：\n\n- accept：表示可以选择的文件MIME类型，多个MIME类型用英文逗号分开，常用的MIME类型见下表。\n- multiple：是否可以选择多个文件，多个文件时其value值为第一个文件的虚拟路径。\n\n相比之下，更有用的还是需要去获取file对象，例子：\n\n```HTML\n<input id=\"img\" type=\"file\" name=\"img\" onchange=\"chans()\"/>\n```\n\n```JavaScript\nvar img = document.getElementById('img')\nvar files = img.files\n```\n\nfiles对象是一个数组，这个数组可以关联到`实现多图片上传`的功能，当然，这里我们只针对一张图片的信息来说。\n\n```JavaScript\nvar file = files[0]\n```\n\nfile对象的信息：\n\n- name 图片名\n- size 图片大小\n- type 图片类型\n- lastModified 最后上传的时间毫秒\n\n利用这些属性可以对即将上传的图片做一些校验，最起码不会将一个.txt的文件上传上去，还可以在前端规避一些文件大小，比如：只允许上传5MB的图片。\n","slug":"javascript-upload-image","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk0t000uuejrk2cf6xwh","content":"<h2 id=\"上传图片攻略全解\"><a href=\"#上传图片攻略全解\" class=\"headerlink\" title=\"上传图片攻略全解\"></a>上传图片攻略全解</h2><p>讲解分题：</p>\n<ul>\n<li>传统的form表单上传</li>\n<li>隐藏iframe模拟Ajax（跨域）上传</li>\n<li>HTML5特性实现Ajax上传</li>\n<li>检校图片信息</li>\n</ul>\n<h3 id=\"传统的form表单上传\"><a href=\"#传统的form表单上传\" class=\"headerlink\" title=\"传统的form表单上传\"></a>传统的form表单上传</h3><p>传统的上传图片，需要追溯到很久之前的时期。假设我们用<code>python</code>实现了一个简单的WSGI网页，那么我们需要使用form表单发送POST请求来提交到服务器，并且刷新当前页面。最早的HTTP实际上是不支持图片上传的，普通的HTTP POST请求，它会在头信息里使用Content-Length注明内容长度。头信息每行一条，空行之后便是body，即“内容”（entity）。它的Content-Type是application/x-www-form-urlencoded，这意味着消息内容会经过url编码，就像GET请求时url里的queryString那样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=<span class=\"number\">1</span>&amp;setting=will</span><br></pre></td></tr></table></figure>\n<p>从<a href=\"http://www.faqs.org/rfcs/rfc1867.html\" target=\"_blank\" rel=\"external\">《RFC 1867 - Form-based File Upload in HTML》</a>提出之后，HTTP开始支持了图片上传。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"http://api.com/upload\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"img\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>改变<code>enctype</code>属性为<code>multipart/form-data</code>即可。</p>\n<h3 id=\"隐藏iframe模拟Ajax（跨域）上传\"><a href=\"#隐藏iframe模拟Ajax（跨域）上传\" class=\"headerlink\" title=\"隐藏iframe模拟Ajax（跨域）上传\"></a>隐藏iframe模拟Ajax（跨域）上传</h3><p>当我们实现了第一步时，这还不是最优的选择，为什么？因为我们的页面需要刷新，才能真正完成提交图片到服务器的交互。最开始，很多人会尝试想实现一个Ajax无刷新的上传图片，那么问题来了，如何实现？</p>\n<p>这个时候利用iframe可以完成我们的需求，form的name对应iframe的target，可以将刷新目标转移到iframe，不过要注意，首先要设置iframe为隐藏。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AjaxForm.prototype._addEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>._iframe.on(<span class=\"string\">'load'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (self._iframeLoadState) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> cw = <span class=\"keyword\">this</span>.contentWindow;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> loc = cw.location;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (loc.href === <span class=\"string\">'about:blank'</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (_.isFunction(self._failure)) &#123;</span><br><span class=\"line\">\t\t\t\t\tself._failure.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t\t\t&#125;;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (_.isFunction(self._success)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;<span class=\"comment\">//如果后台没有作跨域处理，则需手动触发onComplete</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">var</span> body = <span class=\"keyword\">this</span>._iframe[<span class=\"number\">0</span>].contentWindow.document.body;</span><br><span class=\"line\">\t\t\t\t\t\tinnerText = body.innerText;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (!innerText) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tinnerText = body.innerHTML;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (innerText) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tself._success.call(<span class=\"keyword\">this</span>, $.parseJSON(innerText));</span><br><span class=\"line\">\t\t\t\t\t\t&#125;;</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tself._success.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t&#125;;</span><br><span class=\"line\">\t\t\t&#125;;</span><br><span class=\"line\">\t\t\tself._iframeLoadState = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"HTML5特性实现Ajax上传\"><a href=\"#HTML5特性实现Ajax上传\" class=\"headerlink\" title=\"HTML5特性实现Ajax上传\"></a>HTML5特性实现Ajax上传</h3><p>新的HTML5特性对于上传，实现起来更容易了，FormData可以提交二进制数据。一般情况下，我们只需要将form对象装载到FormData中即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'form'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData(form);</span><br></pre></td></tr></table></figure>\n<p>不过，有意思的是可以利用<code>append</code>方法可以添加一些更多的信息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'img'</span>).files[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\">formData.append(<span class=\"string\">'img'</span>,img);</span><br></pre></td></tr></table></figure>\n<p>最后利用<code>XMLHttpRequest</code>来最后提交</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">xhr.open(<span class=\"string\">'POST'</span>,<span class=\"string\">'http://api.com/upload'</span>);</span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">xhr.send(formData);</span><br></pre></td></tr></table></figure>\n<p>有意思的是XHR2提供了一个很棒的事件给我们来获取上传的进度，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.upload.onprogress = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(evt)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> loaded = evt.loaded;<span class=\"comment\">//已经上传大小情况</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tot = evt.total;  <span class=\"comment\">//附件总大小</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> per = <span class=\"built_in\">Math</span>.floor(<span class=\"number\">100</span>*loaded/tot);  <span class=\"comment\">//已经上传的百分比  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"检校图片信息\"><a href=\"#检校图片信息\" class=\"headerlink\" title=\"检校图片信息\"></a>检校图片信息</h3><p>HTML5标签提供了一些有趣的属性来检索图片信息后缀，比如：</p>\n<ul>\n<li>accept：表示可以选择的文件MIME类型，多个MIME类型用英文逗号分开，常用的MIME类型见下表。</li>\n<li>multiple：是否可以选择多个文件，多个文件时其value值为第一个文件的虚拟路径。</li>\n</ul>\n<p>相比之下，更有用的还是需要去获取file对象，例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"chans()\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'img'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> files = img.files</span><br></pre></td></tr></table></figure>\n<p>files对象是一个数组，这个数组可以关联到<code>实现多图片上传</code>的功能，当然，这里我们只针对一张图片的信息来说。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> file = files[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<p>file对象的信息：</p>\n<ul>\n<li>name 图片名</li>\n<li>size 图片大小</li>\n<li>type 图片类型</li>\n<li>lastModified 最后上传的时间毫秒</li>\n</ul>\n<p>利用这些属性可以对即将上传的图片做一些校验，最起码不会将一个.txt的文件上传上去，还可以在前端规避一些文件大小，比如：只允许上传5MB的图片。</p>\n","excerpt":"","more":"<h2 id=\"上传图片攻略全解\"><a href=\"#上传图片攻略全解\" class=\"headerlink\" title=\"上传图片攻略全解\"></a>上传图片攻略全解</h2><p>讲解分题：</p>\n<ul>\n<li>传统的form表单上传</li>\n<li>隐藏iframe模拟Ajax（跨域）上传</li>\n<li>HTML5特性实现Ajax上传</li>\n<li>检校图片信息</li>\n</ul>\n<h3 id=\"传统的form表单上传\"><a href=\"#传统的form表单上传\" class=\"headerlink\" title=\"传统的form表单上传\"></a>传统的form表单上传</h3><p>传统的上传图片，需要追溯到很久之前的时期。假设我们用<code>python</code>实现了一个简单的WSGI网页，那么我们需要使用form表单发送POST请求来提交到服务器，并且刷新当前页面。最早的HTTP实际上是不支持图片上传的，普通的HTTP POST请求，它会在头信息里使用Content-Length注明内容长度。头信息每行一条，空行之后便是body，即“内容”（entity）。它的Content-Type是application/x-www-form-urlencoded，这意味着消息内容会经过url编码，就像GET请求时url里的queryString那样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=<span class=\"number\">1</span>&amp;setting=will</span><br></pre></td></tr></table></figure>\n<p>从<a href=\"http://www.faqs.org/rfcs/rfc1867.html\">《RFC 1867 - Form-based File Upload in HTML》</a>提出之后，HTTP开始支持了图片上传。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"http://api.com/upload\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"img\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>改变<code>enctype</code>属性为<code>multipart/form-data</code>即可。</p>\n<h3 id=\"隐藏iframe模拟Ajax（跨域）上传\"><a href=\"#隐藏iframe模拟Ajax（跨域）上传\" class=\"headerlink\" title=\"隐藏iframe模拟Ajax（跨域）上传\"></a>隐藏iframe模拟Ajax（跨域）上传</h3><p>当我们实现了第一步时，这还不是最优的选择，为什么？因为我们的页面需要刷新，才能真正完成提交图片到服务器的交互。最开始，很多人会尝试想实现一个Ajax无刷新的上传图片，那么问题来了，如何实现？</p>\n<p>这个时候利用iframe可以完成我们的需求，form的name对应iframe的target，可以将刷新目标转移到iframe，不过要注意，首先要设置iframe为隐藏。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AjaxForm.prototype._addEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>._iframe.on(<span class=\"string\">'load'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (self._iframeLoadState) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> cw = <span class=\"keyword\">this</span>.contentWindow;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> loc = cw.location;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (loc.href === <span class=\"string\">'about:blank'</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (_.isFunction(self._failure)) &#123;</span><br><span class=\"line\">\t\t\t\t\tself._failure.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t\t\t&#125;;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (_.isFunction(self._success)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;<span class=\"comment\">//如果后台没有作跨域处理，则需手动触发onComplete</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">var</span> body = <span class=\"keyword\">this</span>._iframe[<span class=\"number\">0</span>].contentWindow.document.body;</span><br><span class=\"line\">\t\t\t\t\t\tinnerText = body.innerText;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (!innerText) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tinnerText = body.innerHTML;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (innerText) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tself._success.call(<span class=\"keyword\">this</span>, $.parseJSON(innerText));</span><br><span class=\"line\">\t\t\t\t\t\t&#125;;</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tself._success.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t&#125;;</span><br><span class=\"line\">\t\t\t&#125;;</span><br><span class=\"line\">\t\t\tself._iframeLoadState = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"HTML5特性实现Ajax上传\"><a href=\"#HTML5特性实现Ajax上传\" class=\"headerlink\" title=\"HTML5特性实现Ajax上传\"></a>HTML5特性实现Ajax上传</h3><p>新的HTML5特性对于上传，实现起来更容易了，FormData可以提交二进制数据。一般情况下，我们只需要将form对象装载到FormData中即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'form'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData(form);</span><br></pre></td></tr></table></figure>\n<p>不过，有意思的是可以利用<code>append</code>方法可以添加一些更多的信息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'img'</span>).files[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\">formData.append(<span class=\"string\">'img'</span>,img);</span><br></pre></td></tr></table></figure>\n<p>最后利用<code>XMLHttpRequest</code>来最后提交</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">xhr.open(<span class=\"string\">'POST'</span>,<span class=\"string\">'http://api.com/upload'</span>);</span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">xhr.send(formData);</span><br></pre></td></tr></table></figure>\n<p>有意思的是XHR2提供了一个很棒的事件给我们来获取上传的进度，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.upload.onprogress = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(evt)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> loaded = evt.loaded;<span class=\"comment\">//已经上传大小情况</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tot = evt.total;  <span class=\"comment\">//附件总大小</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> per = <span class=\"built_in\">Math</span>.floor(<span class=\"number\">100</span>*loaded/tot);  <span class=\"comment\">//已经上传的百分比  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"检校图片信息\"><a href=\"#检校图片信息\" class=\"headerlink\" title=\"检校图片信息\"></a>检校图片信息</h3><p>HTML5标签提供了一些有趣的属性来检索图片信息后缀，比如：</p>\n<ul>\n<li>accept：表示可以选择的文件MIME类型，多个MIME类型用英文逗号分开，常用的MIME类型见下表。</li>\n<li>multiple：是否可以选择多个文件，多个文件时其value值为第一个文件的虚拟路径。</li>\n</ul>\n<p>相比之下，更有用的还是需要去获取file对象，例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"chans()\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'img'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> files = img.files</span><br></pre></td></tr></table></figure>\n<p>files对象是一个数组，这个数组可以关联到<code>实现多图片上传</code>的功能，当然，这里我们只针对一张图片的信息来说。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> file = files[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<p>file对象的信息：</p>\n<ul>\n<li>name 图片名</li>\n<li>size 图片大小</li>\n<li>type 图片类型</li>\n<li>lastModified 最后上传的时间毫秒</li>\n</ul>\n<p>利用这些属性可以对即将上传的图片做一些校验，最起码不会将一个.txt的文件上传上去，还可以在前端规避一些文件大小，比如：只允许上传5MB的图片。</p>\n"},{"title":"课多周刊第1期","date":"2016-06-02T02:02:25.000Z","_content":"\n## 课多推荐\n\n本期最佳推荐 **NodeJS Live Beijing 2016 视频资源**\n\n## HTML\n\n- [HEAD](https://github.com/joshbuchea/HEAD)\n\n*史上最全的关于HTML head标签中可以列出的所有属性清单。*\n\n## CSS\n\n- [《层叠样式表2级修订版1（CSS 2.1）规范（W3C推荐2011-06-07）》的简体中文翻译](http://www.ayqy.net/doc/css2-1/cover.html)\n\n*目前唯一的完整中文版 css2.1 规范，且被 W3C 收录。*\n\n## JavaScript\n\n- [寻找头绪：编写可维护的 JavaScript](http://www.zcfy.cc/article/312)\n\n*本文从清理一个项目开始，让你看见他是如何一步一步的处理这些项目，并分享他的经验。*\n\n- [【译】六个漂亮的 ES6 技巧](https://www.h5jun.com/post/six-nifty-es6-tricks.html)\n\n*本文演示了六种 ES6新特性使用的技巧，在实际的开发中且有用。*\n\n- [【译】用 JavaScript 实现单步调试](https://www.h5jun.com/post/implementing-a-stepping-debugger-in-javascript.html)\n\n*这篇文章解释如何使用js来实现单步调试工具*\n\n## React & React Native\n\n- [React移动web极致优化](https://github.com/lcxfs1991/blog/issues/8)\n\n*本文从实践的角度描述了大量经过检验的优化方式，对于react开发者来说有大量的借鉴意义。*\n\n- [React Native 技术实践](http://www.jianshu.com/p/bf3e222c102a)\n\n*旅行喵APP 关于React Native 技术的实践，非常适合入门的同学想知道React Native是做什么的问题。*\n\n- [实例讲解基于 react+redux 的前端开发流程](http://www.jianshu.com/p/e293f3aba15e)\n\n*本文用简单易懂的方式描述了如何使用react+redux的方式来开发一个小Demo应用*\n\n## Node.js\n\n*NodeJS Live Beijing 2016 视频资源，微软非常支持Node.js的发展，Node.js是开源生态系统的重要组成部分，将会进一步推动中国软件行业的繁荣发展。从生态到应用再到调优，不看绝对是你的损失。*\n\n- [微软爱开源_云浪生-微软](http://v.qq.com/page/w/6/0/w0302pjc560.html)\n- [使用Node.js开发桌面应用_张晨-白鹭时代](http://v.qq.com/page/p/8/c/p0302jshu8c.html)\n- [用Node.js打造安全可扩展的SSO Gateway_李晓东-Wiredcraft](http://v.qq.com/page/m/i/a/m0302chl9ia.html)\n- [覆盖移动端的Node.js全栈开发方案_邹达-APICloud](http://v.qq.com/page/z/4/0/z030208kr40.html)\n- [Node.js无处不在_Mikeal Rogers](http://v.qq.com/page/e/d/l/e0302870ddl.html)\n- [Node.js在API发布中的应用_罗诗亚-欧特克](http://v.qq.com/page/t/1/b/t0303316e1b.html)\n- [端到端的Node.js云上应用开发_Jose Miguel Parrella-微软](http://v.qq.com/page/f/9/f/f0302zsmp9f.html)\n- [解读V8垃圾回收日志_张秋怡-阿里云](http://v.qq.com/page/v/r/l/v0302djmbrl.html)\n- [Node.js全栈工程师之路_桑世龙-Aircos](http://v.qq.com/page/u/z/9/u0303iuluz9.html)\n\n## 其他\n\n- [我是这样学习前端的](http://127.0.0.1:4000/2016/05/16/issues-1/)\n\n*每个人的学习之路不一样，且看一看icepy是如何走过来的。*\n\n## 关注我们\n\n**扫二维码** 或搜索 **fed-talk** ，关注我们的微信公众号。\n\n<div align=\"center\">\n<img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/weixin.jpg\" alt=\"\"/><br>\n</div>\n","source":"_posts/keduo-weekly-1.md","raw":"title: 课多周刊第1期\ndate: 2016-06-02 10:02:25\ntags: 课多周刊\n---\n\n## 课多推荐\n\n本期最佳推荐 **NodeJS Live Beijing 2016 视频资源**\n\n## HTML\n\n- [HEAD](https://github.com/joshbuchea/HEAD)\n\n*史上最全的关于HTML head标签中可以列出的所有属性清单。*\n\n## CSS\n\n- [《层叠样式表2级修订版1（CSS 2.1）规范（W3C推荐2011-06-07）》的简体中文翻译](http://www.ayqy.net/doc/css2-1/cover.html)\n\n*目前唯一的完整中文版 css2.1 规范，且被 W3C 收录。*\n\n## JavaScript\n\n- [寻找头绪：编写可维护的 JavaScript](http://www.zcfy.cc/article/312)\n\n*本文从清理一个项目开始，让你看见他是如何一步一步的处理这些项目，并分享他的经验。*\n\n- [【译】六个漂亮的 ES6 技巧](https://www.h5jun.com/post/six-nifty-es6-tricks.html)\n\n*本文演示了六种 ES6新特性使用的技巧，在实际的开发中且有用。*\n\n- [【译】用 JavaScript 实现单步调试](https://www.h5jun.com/post/implementing-a-stepping-debugger-in-javascript.html)\n\n*这篇文章解释如何使用js来实现单步调试工具*\n\n## React & React Native\n\n- [React移动web极致优化](https://github.com/lcxfs1991/blog/issues/8)\n\n*本文从实践的角度描述了大量经过检验的优化方式，对于react开发者来说有大量的借鉴意义。*\n\n- [React Native 技术实践](http://www.jianshu.com/p/bf3e222c102a)\n\n*旅行喵APP 关于React Native 技术的实践，非常适合入门的同学想知道React Native是做什么的问题。*\n\n- [实例讲解基于 react+redux 的前端开发流程](http://www.jianshu.com/p/e293f3aba15e)\n\n*本文用简单易懂的方式描述了如何使用react+redux的方式来开发一个小Demo应用*\n\n## Node.js\n\n*NodeJS Live Beijing 2016 视频资源，微软非常支持Node.js的发展，Node.js是开源生态系统的重要组成部分，将会进一步推动中国软件行业的繁荣发展。从生态到应用再到调优，不看绝对是你的损失。*\n\n- [微软爱开源_云浪生-微软](http://v.qq.com/page/w/6/0/w0302pjc560.html)\n- [使用Node.js开发桌面应用_张晨-白鹭时代](http://v.qq.com/page/p/8/c/p0302jshu8c.html)\n- [用Node.js打造安全可扩展的SSO Gateway_李晓东-Wiredcraft](http://v.qq.com/page/m/i/a/m0302chl9ia.html)\n- [覆盖移动端的Node.js全栈开发方案_邹达-APICloud](http://v.qq.com/page/z/4/0/z030208kr40.html)\n- [Node.js无处不在_Mikeal Rogers](http://v.qq.com/page/e/d/l/e0302870ddl.html)\n- [Node.js在API发布中的应用_罗诗亚-欧特克](http://v.qq.com/page/t/1/b/t0303316e1b.html)\n- [端到端的Node.js云上应用开发_Jose Miguel Parrella-微软](http://v.qq.com/page/f/9/f/f0302zsmp9f.html)\n- [解读V8垃圾回收日志_张秋怡-阿里云](http://v.qq.com/page/v/r/l/v0302djmbrl.html)\n- [Node.js全栈工程师之路_桑世龙-Aircos](http://v.qq.com/page/u/z/9/u0303iuluz9.html)\n\n## 其他\n\n- [我是这样学习前端的](http://127.0.0.1:4000/2016/05/16/issues-1/)\n\n*每个人的学习之路不一样，且看一看icepy是如何走过来的。*\n\n## 关注我们\n\n**扫二维码** 或搜索 **fed-talk** ，关注我们的微信公众号。\n\n<div align=\"center\">\n<img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/weixin.jpg\" alt=\"\"/><br>\n</div>\n","slug":"keduo-weekly-1","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk0v000xuejr807ks2iy","content":"<h2 id=\"课多推荐\"><a href=\"#课多推荐\" class=\"headerlink\" title=\"课多推荐\"></a>课多推荐</h2><p>本期最佳推荐 <strong>NodeJS Live Beijing 2016 视频资源</strong></p>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><ul>\n<li><a href=\"https://github.com/joshbuchea/HEAD\" target=\"_blank\" rel=\"external\">HEAD</a></li>\n</ul>\n<p><em>史上最全的关于HTML head标签中可以列出的所有属性清单。</em></p>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><ul>\n<li><a href=\"http://www.ayqy.net/doc/css2-1/cover.html\" target=\"_blank\" rel=\"external\">《层叠样式表2级修订版1（CSS 2.1）规范（W3C推荐2011-06-07）》的简体中文翻译</a></li>\n</ul>\n<p><em>目前唯一的完整中文版 css2.1 规范，且被 W3C 收录。</em></p>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><ul>\n<li><a href=\"http://www.zcfy.cc/article/312\" target=\"_blank\" rel=\"external\">寻找头绪：编写可维护的 JavaScript</a></li>\n</ul>\n<p><em>本文从清理一个项目开始，让你看见他是如何一步一步的处理这些项目，并分享他的经验。</em></p>\n<ul>\n<li><a href=\"https://www.h5jun.com/post/six-nifty-es6-tricks.html\" target=\"_blank\" rel=\"external\">【译】六个漂亮的 ES6 技巧</a></li>\n</ul>\n<p><em>本文演示了六种 ES6新特性使用的技巧，在实际的开发中且有用。</em></p>\n<ul>\n<li><a href=\"https://www.h5jun.com/post/implementing-a-stepping-debugger-in-javascript.html\" target=\"_blank\" rel=\"external\">【译】用 JavaScript 实现单步调试</a></li>\n</ul>\n<p><em>这篇文章解释如何使用js来实现单步调试工具</em></p>\n<h2 id=\"React-amp-React-Native\"><a href=\"#React-amp-React-Native\" class=\"headerlink\" title=\"React &amp; React Native\"></a>React &amp; React Native</h2><ul>\n<li><a href=\"https://github.com/lcxfs1991/blog/issues/8\" target=\"_blank\" rel=\"external\">React移动web极致优化</a></li>\n</ul>\n<p><em>本文从实践的角度描述了大量经过检验的优化方式，对于react开发者来说有大量的借鉴意义。</em></p>\n<ul>\n<li><a href=\"http://www.jianshu.com/p/bf3e222c102a\" target=\"_blank\" rel=\"external\">React Native 技术实践</a></li>\n</ul>\n<p><em>旅行喵APP 关于React Native 技术的实践，非常适合入门的同学想知道React Native是做什么的问题。</em></p>\n<ul>\n<li><a href=\"http://www.jianshu.com/p/e293f3aba15e\" target=\"_blank\" rel=\"external\">实例讲解基于 react+redux 的前端开发流程</a></li>\n</ul>\n<p><em>本文用简单易懂的方式描述了如何使用react+redux的方式来开发一个小Demo应用</em></p>\n<h2 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h2><p><em>NodeJS Live Beijing 2016 视频资源，微软非常支持Node.js的发展，Node.js是开源生态系统的重要组成部分，将会进一步推动中国软件行业的繁荣发展。从生态到应用再到调优，不看绝对是你的损失。</em></p>\n<ul>\n<li><a href=\"http://v.qq.com/page/w/6/0/w0302pjc560.html\" target=\"_blank\" rel=\"external\">微软爱开源_云浪生-微软</a></li>\n<li><a href=\"http://v.qq.com/page/p/8/c/p0302jshu8c.html\" target=\"_blank\" rel=\"external\">使用Node.js开发桌面应用_张晨-白鹭时代</a></li>\n<li><a href=\"http://v.qq.com/page/m/i/a/m0302chl9ia.html\" target=\"_blank\" rel=\"external\">用Node.js打造安全可扩展的SSO Gateway_李晓东-Wiredcraft</a></li>\n<li><a href=\"http://v.qq.com/page/z/4/0/z030208kr40.html\" target=\"_blank\" rel=\"external\">覆盖移动端的Node.js全栈开发方案_邹达-APICloud</a></li>\n<li><a href=\"http://v.qq.com/page/e/d/l/e0302870ddl.html\" target=\"_blank\" rel=\"external\">Node.js无处不在_Mikeal Rogers</a></li>\n<li><a href=\"http://v.qq.com/page/t/1/b/t0303316e1b.html\" target=\"_blank\" rel=\"external\">Node.js在API发布中的应用_罗诗亚-欧特克</a></li>\n<li><a href=\"http://v.qq.com/page/f/9/f/f0302zsmp9f.html\" target=\"_blank\" rel=\"external\">端到端的Node.js云上应用开发_Jose Miguel Parrella-微软</a></li>\n<li><a href=\"http://v.qq.com/page/v/r/l/v0302djmbrl.html\" target=\"_blank\" rel=\"external\">解读V8垃圾回收日志_张秋怡-阿里云</a></li>\n<li><a href=\"http://v.qq.com/page/u/z/9/u0303iuluz9.html\" target=\"_blank\" rel=\"external\">Node.js全栈工程师之路_桑世龙-Aircos</a></li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li><a href=\"http://127.0.0.1:4000/2016/05/16/issues-1/\" target=\"_blank\" rel=\"external\">我是这样学习前端的</a></li>\n</ul>\n<p><em>每个人的学习之路不一样，且看一看icepy是如何走过来的。</em></p>\n<h2 id=\"关注我们\"><a href=\"#关注我们\" class=\"headerlink\" title=\"关注我们\"></a>关注我们</h2><p><strong>扫二维码</strong> 或搜索 <strong>fed-talk</strong> ，关注我们的微信公众号。</p>\n<div align=\"center\"><br><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/weixin.jpg\" alt=\"\"><br><br></div>\n","excerpt":"","more":"<h2 id=\"课多推荐\"><a href=\"#课多推荐\" class=\"headerlink\" title=\"课多推荐\"></a>课多推荐</h2><p>本期最佳推荐 <strong>NodeJS Live Beijing 2016 视频资源</strong></p>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><ul>\n<li><a href=\"https://github.com/joshbuchea/HEAD\">HEAD</a></li>\n</ul>\n<p><em>史上最全的关于HTML head标签中可以列出的所有属性清单。</em></p>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><ul>\n<li><a href=\"http://www.ayqy.net/doc/css2-1/cover.html\">《层叠样式表2级修订版1（CSS 2.1）规范（W3C推荐2011-06-07）》的简体中文翻译</a></li>\n</ul>\n<p><em>目前唯一的完整中文版 css2.1 规范，且被 W3C 收录。</em></p>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><ul>\n<li><a href=\"http://www.zcfy.cc/article/312\">寻找头绪：编写可维护的 JavaScript</a></li>\n</ul>\n<p><em>本文从清理一个项目开始，让你看见他是如何一步一步的处理这些项目，并分享他的经验。</em></p>\n<ul>\n<li><a href=\"https://www.h5jun.com/post/six-nifty-es6-tricks.html\">【译】六个漂亮的 ES6 技巧</a></li>\n</ul>\n<p><em>本文演示了六种 ES6新特性使用的技巧，在实际的开发中且有用。</em></p>\n<ul>\n<li><a href=\"https://www.h5jun.com/post/implementing-a-stepping-debugger-in-javascript.html\">【译】用 JavaScript 实现单步调试</a></li>\n</ul>\n<p><em>这篇文章解释如何使用js来实现单步调试工具</em></p>\n<h2 id=\"React-amp-React-Native\"><a href=\"#React-amp-React-Native\" class=\"headerlink\" title=\"React &amp; React Native\"></a>React &amp; React Native</h2><ul>\n<li><a href=\"https://github.com/lcxfs1991/blog/issues/8\">React移动web极致优化</a></li>\n</ul>\n<p><em>本文从实践的角度描述了大量经过检验的优化方式，对于react开发者来说有大量的借鉴意义。</em></p>\n<ul>\n<li><a href=\"http://www.jianshu.com/p/bf3e222c102a\">React Native 技术实践</a></li>\n</ul>\n<p><em>旅行喵APP 关于React Native 技术的实践，非常适合入门的同学想知道React Native是做什么的问题。</em></p>\n<ul>\n<li><a href=\"http://www.jianshu.com/p/e293f3aba15e\">实例讲解基于 react+redux 的前端开发流程</a></li>\n</ul>\n<p><em>本文用简单易懂的方式描述了如何使用react+redux的方式来开发一个小Demo应用</em></p>\n<h2 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h2><p><em>NodeJS Live Beijing 2016 视频资源，微软非常支持Node.js的发展，Node.js是开源生态系统的重要组成部分，将会进一步推动中国软件行业的繁荣发展。从生态到应用再到调优，不看绝对是你的损失。</em></p>\n<ul>\n<li><a href=\"http://v.qq.com/page/w/6/0/w0302pjc560.html\">微软爱开源_云浪生-微软</a></li>\n<li><a href=\"http://v.qq.com/page/p/8/c/p0302jshu8c.html\">使用Node.js开发桌面应用_张晨-白鹭时代</a></li>\n<li><a href=\"http://v.qq.com/page/m/i/a/m0302chl9ia.html\">用Node.js打造安全可扩展的SSO Gateway_李晓东-Wiredcraft</a></li>\n<li><a href=\"http://v.qq.com/page/z/4/0/z030208kr40.html\">覆盖移动端的Node.js全栈开发方案_邹达-APICloud</a></li>\n<li><a href=\"http://v.qq.com/page/e/d/l/e0302870ddl.html\">Node.js无处不在_Mikeal Rogers</a></li>\n<li><a href=\"http://v.qq.com/page/t/1/b/t0303316e1b.html\">Node.js在API发布中的应用_罗诗亚-欧特克</a></li>\n<li><a href=\"http://v.qq.com/page/f/9/f/f0302zsmp9f.html\">端到端的Node.js云上应用开发_Jose Miguel Parrella-微软</a></li>\n<li><a href=\"http://v.qq.com/page/v/r/l/v0302djmbrl.html\">解读V8垃圾回收日志_张秋怡-阿里云</a></li>\n<li><a href=\"http://v.qq.com/page/u/z/9/u0303iuluz9.html\">Node.js全栈工程师之路_桑世龙-Aircos</a></li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li><a href=\"http://127.0.0.1:4000/2016/05/16/issues-1/\">我是这样学习前端的</a></li>\n</ul>\n<p><em>每个人的学习之路不一样，且看一看icepy是如何走过来的。</em></p>\n<h2 id=\"关注我们\"><a href=\"#关注我们\" class=\"headerlink\" title=\"关注我们\"></a>关注我们</h2><p><strong>扫二维码</strong> 或搜索 <strong>fed-talk</strong> ，关注我们的微信公众号。</p>\n<div align=\"center\"><br><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/weixin.jpg\" alt=\"\"/><br><br></div>\n"},{"title":"课多周刊第2期","date":"2016-06-11T04:07:02.000Z","_content":"\n## 课多推荐\n\n本期推荐 [Sinon Tutorial: JavaScript Testing with Mocks, Spies & Stubs](https://www.sitepoint.com/sinon-tutorial-javascript-testing-mocks-spies-stubs/)\n\n**单元测试在业务开发中非常的重要，这篇文章属于单元测试入门必备。**\n\n## CSS\n\n- [CSS Modules 用法教程](http://www.ruanyifeng.com/blog/2016/06/css_modules.html)\n\n*入门级CSS Modules的使用教程*\n\n## JavaScript\n\n- [44道JavaScript题目](http://javascript-puzzlers.herokuapp.com/)\n\n*这个绝对是进阶的好去处*\n\n- [说说 Javascript 的 Date](https://github.com/lishengzxc/bblog/issues/5)\n\n*原来JS的Date对象还可以这样玩*\n\n- [基于JavaScript的一些函数式编程概念讲解](https://github.com/wxyyxc1992/just-coder-handbook/blob/master/ProgrammingParadigm/FunctionalProgramming/functional-programming-jargon-by-javascript.md)\n\n*本文的主要目的即是希望能够有一种通俗易懂的方式来阐述函数式编程中常见的理论术语概念*\n\n- [JavaScript函数式编程探索与思考](https://wenjs.me/p/javascript-functional-programming)\n\n*函数式编程是一种编程范式，它将电脑运算视为数学上的函数计算，并且避免使用程序状态以及可变数据，这篇文章对函数这样的编程方式做了一些思考与总结。*\n\n## Node.js\n\n- [Node源码解析 – buffer](http://zhenhua-lee.github.io/node/buffer.html)\n\n*Node出现以后，前端面对的技术场景发生了变化，可以深入到网络传输、文件操作、图片处理等领域，而这些操作都与二进制数据紧密相关。Node提供了buffer模块来操作二进制数据，它属于一个二进制数据容器，数据结构类似与数组。*\n\n- [node.js&pm2搭建node生产环境](http://www.jianshu.com/p/43525232b03b)\n\n*对于Node.js应用程序的部署，可以做一次了解*\n\n## HTTP 协议\n\n- [HTTP协议详解](https://www.zybuluo.com/yangfch3/note/167490)\n\n*顾名思义，这是讲解HTTP协议的文章，适合入门阅读。*\n\n## React && React Native\n\n- [从零开始一步一步写一个简单的Virtual DOM实现](https://segmentfault.com/a/1190000005659033)\n\n*如果要谈react必谈虚拟DOM，这篇文章可以让我们看一看虚拟DOM究竟是如何构思的。*\n\n## 性能优化\n\n- [Web性能优化之 “直出” 理论与实践总结](https://github.com/joeyguo/blog/issues/8)\n\n*本文将结合从在浏览器输入url，到展示最终页面的过程来对其进行一步步分析，并将在手Q web 中的实际应用实践进行总结。*\n\n- [冗余代码都走开——前端模块打包利器 Rollup.js 入门](http://www.cnblogs.com/vajoy/p/5518442.html)\n\n*本文向大家介绍一个当红炸子鸡——Rollup.js，通过它可以让你的 bundle 最小化，有效减少文件请求大小。*\n\n## 工具\n\n- [利用控制台API调试Web应用](http://www.zcfy.cc/article/391)\n\n*如何利用控制台API更方便的调试Web应用，值得一瞧。*\n\n- [postman 使用详解](http://luciastar.com/2016/05/21/postman%E7%AC%94%E8%AE%B0/)\n\n*如果你有调试请求的需求，推荐你看一看。*\n\n## 关注我们\n\n**扫二维码** 或搜索 **fed-talk** ，关注我们的微信公众号。\n\n<div align=\"center\">\n<img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/weixin.jpg\" alt=\"\"/><br>\n</div>\n","source":"_posts/keduo-weekly-2.md","raw":"title: 课多周刊第2期\ndate: 2016-06-11 12:07:02\ntags: 课多周刊\n---\n\n## 课多推荐\n\n本期推荐 [Sinon Tutorial: JavaScript Testing with Mocks, Spies & Stubs](https://www.sitepoint.com/sinon-tutorial-javascript-testing-mocks-spies-stubs/)\n\n**单元测试在业务开发中非常的重要，这篇文章属于单元测试入门必备。**\n\n## CSS\n\n- [CSS Modules 用法教程](http://www.ruanyifeng.com/blog/2016/06/css_modules.html)\n\n*入门级CSS Modules的使用教程*\n\n## JavaScript\n\n- [44道JavaScript题目](http://javascript-puzzlers.herokuapp.com/)\n\n*这个绝对是进阶的好去处*\n\n- [说说 Javascript 的 Date](https://github.com/lishengzxc/bblog/issues/5)\n\n*原来JS的Date对象还可以这样玩*\n\n- [基于JavaScript的一些函数式编程概念讲解](https://github.com/wxyyxc1992/just-coder-handbook/blob/master/ProgrammingParadigm/FunctionalProgramming/functional-programming-jargon-by-javascript.md)\n\n*本文的主要目的即是希望能够有一种通俗易懂的方式来阐述函数式编程中常见的理论术语概念*\n\n- [JavaScript函数式编程探索与思考](https://wenjs.me/p/javascript-functional-programming)\n\n*函数式编程是一种编程范式，它将电脑运算视为数学上的函数计算，并且避免使用程序状态以及可变数据，这篇文章对函数这样的编程方式做了一些思考与总结。*\n\n## Node.js\n\n- [Node源码解析 – buffer](http://zhenhua-lee.github.io/node/buffer.html)\n\n*Node出现以后，前端面对的技术场景发生了变化，可以深入到网络传输、文件操作、图片处理等领域，而这些操作都与二进制数据紧密相关。Node提供了buffer模块来操作二进制数据，它属于一个二进制数据容器，数据结构类似与数组。*\n\n- [node.js&pm2搭建node生产环境](http://www.jianshu.com/p/43525232b03b)\n\n*对于Node.js应用程序的部署，可以做一次了解*\n\n## HTTP 协议\n\n- [HTTP协议详解](https://www.zybuluo.com/yangfch3/note/167490)\n\n*顾名思义，这是讲解HTTP协议的文章，适合入门阅读。*\n\n## React && React Native\n\n- [从零开始一步一步写一个简单的Virtual DOM实现](https://segmentfault.com/a/1190000005659033)\n\n*如果要谈react必谈虚拟DOM，这篇文章可以让我们看一看虚拟DOM究竟是如何构思的。*\n\n## 性能优化\n\n- [Web性能优化之 “直出” 理论与实践总结](https://github.com/joeyguo/blog/issues/8)\n\n*本文将结合从在浏览器输入url，到展示最终页面的过程来对其进行一步步分析，并将在手Q web 中的实际应用实践进行总结。*\n\n- [冗余代码都走开——前端模块打包利器 Rollup.js 入门](http://www.cnblogs.com/vajoy/p/5518442.html)\n\n*本文向大家介绍一个当红炸子鸡——Rollup.js，通过它可以让你的 bundle 最小化，有效减少文件请求大小。*\n\n## 工具\n\n- [利用控制台API调试Web应用](http://www.zcfy.cc/article/391)\n\n*如何利用控制台API更方便的调试Web应用，值得一瞧。*\n\n- [postman 使用详解](http://luciastar.com/2016/05/21/postman%E7%AC%94%E8%AE%B0/)\n\n*如果你有调试请求的需求，推荐你看一看。*\n\n## 关注我们\n\n**扫二维码** 或搜索 **fed-talk** ，关注我们的微信公众号。\n\n<div align=\"center\">\n<img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/weixin.jpg\" alt=\"\"/><br>\n</div>\n","slug":"keduo-weekly-2","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk0x000zuejrzk5geqv2","content":"<h2 id=\"课多推荐\"><a href=\"#课多推荐\" class=\"headerlink\" title=\"课多推荐\"></a>课多推荐</h2><p>本期推荐 <a href=\"https://www.sitepoint.com/sinon-tutorial-javascript-testing-mocks-spies-stubs/\" target=\"_blank\" rel=\"external\">Sinon Tutorial: JavaScript Testing with Mocks, Spies &amp; Stubs</a></p>\n<p><strong>单元测试在业务开发中非常的重要，这篇文章属于单元测试入门必备。</strong></p>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/06/css_modules.html\" target=\"_blank\" rel=\"external\">CSS Modules 用法教程</a></li>\n</ul>\n<p><em>入门级CSS Modules的使用教程</em></p>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><ul>\n<li><a href=\"http://javascript-puzzlers.herokuapp.com/\" target=\"_blank\" rel=\"external\">44道JavaScript题目</a></li>\n</ul>\n<p><em>这个绝对是进阶的好去处</em></p>\n<ul>\n<li><a href=\"https://github.com/lishengzxc/bblog/issues/5\" target=\"_blank\" rel=\"external\">说说 Javascript 的 Date</a></li>\n</ul>\n<p><em>原来JS的Date对象还可以这样玩</em></p>\n<ul>\n<li><a href=\"https://github.com/wxyyxc1992/just-coder-handbook/blob/master/ProgrammingParadigm/FunctionalProgramming/functional-programming-jargon-by-javascript.md\" target=\"_blank\" rel=\"external\">基于JavaScript的一些函数式编程概念讲解</a></li>\n</ul>\n<p><em>本文的主要目的即是希望能够有一种通俗易懂的方式来阐述函数式编程中常见的理论术语概念</em></p>\n<ul>\n<li><a href=\"https://wenjs.me/p/javascript-functional-programming\" target=\"_blank\" rel=\"external\">JavaScript函数式编程探索与思考</a></li>\n</ul>\n<p><em>函数式编程是一种编程范式，它将电脑运算视为数学上的函数计算，并且避免使用程序状态以及可变数据，这篇文章对函数这样的编程方式做了一些思考与总结。</em></p>\n<h2 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h2><ul>\n<li><a href=\"http://zhenhua-lee.github.io/node/buffer.html\" target=\"_blank\" rel=\"external\">Node源码解析 – buffer</a></li>\n</ul>\n<p><em>Node出现以后，前端面对的技术场景发生了变化，可以深入到网络传输、文件操作、图片处理等领域，而这些操作都与二进制数据紧密相关。Node提供了buffer模块来操作二进制数据，它属于一个二进制数据容器，数据结构类似与数组。</em></p>\n<ul>\n<li><a href=\"http://www.jianshu.com/p/43525232b03b\" target=\"_blank\" rel=\"external\">node.js&amp;pm2搭建node生产环境</a></li>\n</ul>\n<p><em>对于Node.js应用程序的部署，可以做一次了解</em></p>\n<h2 id=\"HTTP-协议\"><a href=\"#HTTP-协议\" class=\"headerlink\" title=\"HTTP 协议\"></a>HTTP 协议</h2><ul>\n<li><a href=\"https://www.zybuluo.com/yangfch3/note/167490\" target=\"_blank\" rel=\"external\">HTTP协议详解</a></li>\n</ul>\n<p><em>顾名思义，这是讲解HTTP协议的文章，适合入门阅读。</em></p>\n<h2 id=\"React-amp-amp-React-Native\"><a href=\"#React-amp-amp-React-Native\" class=\"headerlink\" title=\"React &amp;&amp; React Native\"></a>React &amp;&amp; React Native</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000005659033\" target=\"_blank\" rel=\"external\">从零开始一步一步写一个简单的Virtual DOM实现</a></li>\n</ul>\n<p><em>如果要谈react必谈虚拟DOM，这篇文章可以让我们看一看虚拟DOM究竟是如何构思的。</em></p>\n<h2 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h2><ul>\n<li><a href=\"https://github.com/joeyguo/blog/issues/8\" target=\"_blank\" rel=\"external\">Web性能优化之 “直出” 理论与实践总结</a></li>\n</ul>\n<p><em>本文将结合从在浏览器输入url，到展示最终页面的过程来对其进行一步步分析，并将在手Q web 中的实际应用实践进行总结。</em></p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/vajoy/p/5518442.html\" target=\"_blank\" rel=\"external\">冗余代码都走开——前端模块打包利器 Rollup.js 入门</a></li>\n</ul>\n<p><em>本文向大家介绍一个当红炸子鸡——Rollup.js，通过它可以让你的 bundle 最小化，有效减少文件请求大小。</em></p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><ul>\n<li><a href=\"http://www.zcfy.cc/article/391\" target=\"_blank\" rel=\"external\">利用控制台API调试Web应用</a></li>\n</ul>\n<p><em>如何利用控制台API更方便的调试Web应用，值得一瞧。</em></p>\n<ul>\n<li><a href=\"http://luciastar.com/2016/05/21/postman%E7%AC%94%E8%AE%B0/\" target=\"_blank\" rel=\"external\">postman 使用详解</a></li>\n</ul>\n<p><em>如果你有调试请求的需求，推荐你看一看。</em></p>\n<h2 id=\"关注我们\"><a href=\"#关注我们\" class=\"headerlink\" title=\"关注我们\"></a>关注我们</h2><p><strong>扫二维码</strong> 或搜索 <strong>fed-talk</strong> ，关注我们的微信公众号。</p>\n<div align=\"center\"><br><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/weixin.jpg\" alt=\"\"><br><br></div>\n","excerpt":"","more":"<h2 id=\"课多推荐\"><a href=\"#课多推荐\" class=\"headerlink\" title=\"课多推荐\"></a>课多推荐</h2><p>本期推荐 <a href=\"https://www.sitepoint.com/sinon-tutorial-javascript-testing-mocks-spies-stubs/\">Sinon Tutorial: JavaScript Testing with Mocks, Spies &amp; Stubs</a></p>\n<p><strong>单元测试在业务开发中非常的重要，这篇文章属于单元测试入门必备。</strong></p>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/06/css_modules.html\">CSS Modules 用法教程</a></li>\n</ul>\n<p><em>入门级CSS Modules的使用教程</em></p>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><ul>\n<li><a href=\"http://javascript-puzzlers.herokuapp.com/\">44道JavaScript题目</a></li>\n</ul>\n<p><em>这个绝对是进阶的好去处</em></p>\n<ul>\n<li><a href=\"https://github.com/lishengzxc/bblog/issues/5\">说说 Javascript 的 Date</a></li>\n</ul>\n<p><em>原来JS的Date对象还可以这样玩</em></p>\n<ul>\n<li><a href=\"https://github.com/wxyyxc1992/just-coder-handbook/blob/master/ProgrammingParadigm/FunctionalProgramming/functional-programming-jargon-by-javascript.md\">基于JavaScript的一些函数式编程概念讲解</a></li>\n</ul>\n<p><em>本文的主要目的即是希望能够有一种通俗易懂的方式来阐述函数式编程中常见的理论术语概念</em></p>\n<ul>\n<li><a href=\"https://wenjs.me/p/javascript-functional-programming\">JavaScript函数式编程探索与思考</a></li>\n</ul>\n<p><em>函数式编程是一种编程范式，它将电脑运算视为数学上的函数计算，并且避免使用程序状态以及可变数据，这篇文章对函数这样的编程方式做了一些思考与总结。</em></p>\n<h2 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h2><ul>\n<li><a href=\"http://zhenhua-lee.github.io/node/buffer.html\">Node源码解析 – buffer</a></li>\n</ul>\n<p><em>Node出现以后，前端面对的技术场景发生了变化，可以深入到网络传输、文件操作、图片处理等领域，而这些操作都与二进制数据紧密相关。Node提供了buffer模块来操作二进制数据，它属于一个二进制数据容器，数据结构类似与数组。</em></p>\n<ul>\n<li><a href=\"http://www.jianshu.com/p/43525232b03b\">node.js&amp;pm2搭建node生产环境</a></li>\n</ul>\n<p><em>对于Node.js应用程序的部署，可以做一次了解</em></p>\n<h2 id=\"HTTP-协议\"><a href=\"#HTTP-协议\" class=\"headerlink\" title=\"HTTP 协议\"></a>HTTP 协议</h2><ul>\n<li><a href=\"https://www.zybuluo.com/yangfch3/note/167490\">HTTP协议详解</a></li>\n</ul>\n<p><em>顾名思义，这是讲解HTTP协议的文章，适合入门阅读。</em></p>\n<h2 id=\"React-amp-amp-React-Native\"><a href=\"#React-amp-amp-React-Native\" class=\"headerlink\" title=\"React &amp;&amp; React Native\"></a>React &amp;&amp; React Native</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000005659033\">从零开始一步一步写一个简单的Virtual DOM实现</a></li>\n</ul>\n<p><em>如果要谈react必谈虚拟DOM，这篇文章可以让我们看一看虚拟DOM究竟是如何构思的。</em></p>\n<h2 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h2><ul>\n<li><a href=\"https://github.com/joeyguo/blog/issues/8\">Web性能优化之 “直出” 理论与实践总结</a></li>\n</ul>\n<p><em>本文将结合从在浏览器输入url，到展示最终页面的过程来对其进行一步步分析，并将在手Q web 中的实际应用实践进行总结。</em></p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/vajoy/p/5518442.html\">冗余代码都走开——前端模块打包利器 Rollup.js 入门</a></li>\n</ul>\n<p><em>本文向大家介绍一个当红炸子鸡——Rollup.js，通过它可以让你的 bundle 最小化，有效减少文件请求大小。</em></p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><ul>\n<li><a href=\"http://www.zcfy.cc/article/391\">利用控制台API调试Web应用</a></li>\n</ul>\n<p><em>如何利用控制台API更方便的调试Web应用，值得一瞧。</em></p>\n<ul>\n<li><a href=\"http://luciastar.com/2016/05/21/postman%E7%AC%94%E8%AE%B0/\">postman 使用详解</a></li>\n</ul>\n<p><em>如果你有调试请求的需求，推荐你看一看。</em></p>\n<h2 id=\"关注我们\"><a href=\"#关注我们\" class=\"headerlink\" title=\"关注我们\"></a>关注我们</h2><p><strong>扫二维码</strong> 或搜索 <strong>fed-talk</strong> ，关注我们的微信公众号。</p>\n<div align=\"center\"><br><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/weixin.jpg\" alt=\"\"/><br><br></div>\n"},{"title":"Swift日期处理","date":"2015-12-05T03:39:20.000Z","_content":"\n在软件开发领域，使用频率比较高的我想日期正是其中之一。以前在Objectice-C中可以使用NSDate，NSDateFormatter类来处理日期，换到Swift中也是一样，`唯一需要注意的是iOS中没有毫秒，所有的日期类最小精度只能到秒`。\n\n**NSDate**\n\nNSDate类提供了创建date，比较date以及计算两个date之间间隔的功能，Date对象是不可改变的。\n\n```Swift\nlet now = NSDate()\nprint(\"现在的时间：\\(now)\")\n```\n\n如果你需要与当前日期不同的日期，也可以通过`timeIntervalSinceNow`和`dateByAddingTimeInterval`来创建。\n\n```Swift\nlet perDay:NSTimeInterval = 24*60*60\nlet tomorrow = NSDate(timeIntervalSinceNow: perDay)\nlet _tomorrow = now.dateByAddingTimeInterval(perDay)\nprint(\"明天的时间：\\(tomorrow)\")\nlet yesterday = NSDate(timeIntervalSinceNow: -perDay)\n//增加时间间隔\nlet _yesterday = now.dateByAddingTimeInterval(-perDay)\nprint(\"昨天的时间：\\(yesterday)\")\n```\n\n如果你需要比较两个日，最常用的是使用`timeIntervalSinceDate`方法。\n\n```Swift\n//比较时间，如果两个时间间隔小于一分钟，可认为在同一天\nif tomorrow.timeIntervalSinceDate(yesterday) < 60 {\n      //相等\n}else{\n     //不相等\n}\n```\n\n如果你想精度更高的进行比较，那么可以使用：\n- `tomorrow.isEqualToDate(<#T##otherDate: NSDate##NSDate#>)`\n- `tomorrow.compare(<#T##other: NSDate##NSDate#>)`\n- `tomorrow.laterDate(<#T##anotherDate: NSDate##NSDate#>)`\n- `tomorrow.earlierDate(<#T##anotherDate: NSDate##NSDate#>)`\n\n**NSDateFormatter**\n\nNSDate本身并不能输出或者格式化，需要借助NSDateFormatter来进行处理，NSDateFormatter的初始化是一个比较消耗的创建，所以一般都要懒加载来处理它。\n\n```Swift\nlazy var dateFormatter = {\n    return NSDateFormatter()\n}()\n```\n从程序的一般逻辑来看，formatter可以看做是（输入｜输出）的关系，所以NSDateFormatter中供给的方法大部分都是设置属性，获取NSDate对象。\n\n```Swift\nlet location = NSLocale(localeIdentifier: \"zh-CN\")\nlet timeString = \"20110826134106\"\nself.dateFormatter.locale = location\nself.dateFormatter.dateFormat = \"yyyyMMddHHmmss\"\nlet date:NSDate = self.dateFormatter.dateFromString(timeString)!\nprint(date)\n```\nNSLocale可以设置本地化时间，然后将格式化字符串设置给dateFormat，就可以使用了。\n\n**NSCalendar & NSDateComponents**\n\nNSCalendar定义了不同的日历，包括佛教历，格里高利历等（这些都与系统提供的本地化设置相关）而\nNSDateComponents则是定义了一个日期对象的组件，包括`年，月，日，小时，分钟，秒`等等，另外NSDateComponents也可以去获取时间（比如计算跟某某时间相差多少时间）\n\n初始化NSCalendar，需要注意的是iOS8.0之后，标识开始要使用NSCalendarIdentifier（xxxx）了\n\n```Swift\nlet calendar = NSCalendar(calendarIdentifier: NSCalendarIdentifierGregorian)\n```\n\n初始化NSDateComponents\n\n```Swift\nlet components = NSDateComponents()\ncomponents.year = 2105\ncomponents.month = 12\ncomponents.day = 5\n```\n获取某个时间的相差值，需要注意的是，iOS8.0开始要使用NSCalendarUnitYear了，原来的NSYearCalendarUnit将要废弃。\n\n```Swift\nlet calendar = NSCalendar(calendarIdentifier: NSCalendarIdentifierGregorian)\nlet unitF:NSCalendarUnit = [NSCalendarUnit.Year,NSCalendarUnit.Month,NSCalendarUnit.Day,NSCalendarUnit.Hour,NSCalendarUnit.Minute,NSCalendarUnit.Second]\nlet dateComponents:NSDateComponents? = calendar?.components(unitF, fromDate: now, toDate: yesterday, options: .MatchNextTimePreservingSmallerUnits)\nprint(\"年：\\(dateComponents?.year)\")\nprint(\"月：\\(dateComponents?.month)\")\nprint(\"日：\\(dateComponents?.day)\")\nprint(\"小时：\\(dateComponents?.hour)\")\nprint(\"分钟：\\(dateComponents?.minute)\")\nprint(\"秒：\\(dateComponents?.second)\")\n```\n","source":"_posts/swift-datetime.md","raw":"title: Swift日期处理\ndate: 2015-12-5 11:39:20\ntags: Swift\n---\n\n在软件开发领域，使用频率比较高的我想日期正是其中之一。以前在Objectice-C中可以使用NSDate，NSDateFormatter类来处理日期，换到Swift中也是一样，`唯一需要注意的是iOS中没有毫秒，所有的日期类最小精度只能到秒`。\n\n**NSDate**\n\nNSDate类提供了创建date，比较date以及计算两个date之间间隔的功能，Date对象是不可改变的。\n\n```Swift\nlet now = NSDate()\nprint(\"现在的时间：\\(now)\")\n```\n\n如果你需要与当前日期不同的日期，也可以通过`timeIntervalSinceNow`和`dateByAddingTimeInterval`来创建。\n\n```Swift\nlet perDay:NSTimeInterval = 24*60*60\nlet tomorrow = NSDate(timeIntervalSinceNow: perDay)\nlet _tomorrow = now.dateByAddingTimeInterval(perDay)\nprint(\"明天的时间：\\(tomorrow)\")\nlet yesterday = NSDate(timeIntervalSinceNow: -perDay)\n//增加时间间隔\nlet _yesterday = now.dateByAddingTimeInterval(-perDay)\nprint(\"昨天的时间：\\(yesterday)\")\n```\n\n如果你需要比较两个日，最常用的是使用`timeIntervalSinceDate`方法。\n\n```Swift\n//比较时间，如果两个时间间隔小于一分钟，可认为在同一天\nif tomorrow.timeIntervalSinceDate(yesterday) < 60 {\n      //相等\n}else{\n     //不相等\n}\n```\n\n如果你想精度更高的进行比较，那么可以使用：\n- `tomorrow.isEqualToDate(<#T##otherDate: NSDate##NSDate#>)`\n- `tomorrow.compare(<#T##other: NSDate##NSDate#>)`\n- `tomorrow.laterDate(<#T##anotherDate: NSDate##NSDate#>)`\n- `tomorrow.earlierDate(<#T##anotherDate: NSDate##NSDate#>)`\n\n**NSDateFormatter**\n\nNSDate本身并不能输出或者格式化，需要借助NSDateFormatter来进行处理，NSDateFormatter的初始化是一个比较消耗的创建，所以一般都要懒加载来处理它。\n\n```Swift\nlazy var dateFormatter = {\n    return NSDateFormatter()\n}()\n```\n从程序的一般逻辑来看，formatter可以看做是（输入｜输出）的关系，所以NSDateFormatter中供给的方法大部分都是设置属性，获取NSDate对象。\n\n```Swift\nlet location = NSLocale(localeIdentifier: \"zh-CN\")\nlet timeString = \"20110826134106\"\nself.dateFormatter.locale = location\nself.dateFormatter.dateFormat = \"yyyyMMddHHmmss\"\nlet date:NSDate = self.dateFormatter.dateFromString(timeString)!\nprint(date)\n```\nNSLocale可以设置本地化时间，然后将格式化字符串设置给dateFormat，就可以使用了。\n\n**NSCalendar & NSDateComponents**\n\nNSCalendar定义了不同的日历，包括佛教历，格里高利历等（这些都与系统提供的本地化设置相关）而\nNSDateComponents则是定义了一个日期对象的组件，包括`年，月，日，小时，分钟，秒`等等，另外NSDateComponents也可以去获取时间（比如计算跟某某时间相差多少时间）\n\n初始化NSCalendar，需要注意的是iOS8.0之后，标识开始要使用NSCalendarIdentifier（xxxx）了\n\n```Swift\nlet calendar = NSCalendar(calendarIdentifier: NSCalendarIdentifierGregorian)\n```\n\n初始化NSDateComponents\n\n```Swift\nlet components = NSDateComponents()\ncomponents.year = 2105\ncomponents.month = 12\ncomponents.day = 5\n```\n获取某个时间的相差值，需要注意的是，iOS8.0开始要使用NSCalendarUnitYear了，原来的NSYearCalendarUnit将要废弃。\n\n```Swift\nlet calendar = NSCalendar(calendarIdentifier: NSCalendarIdentifierGregorian)\nlet unitF:NSCalendarUnit = [NSCalendarUnit.Year,NSCalendarUnit.Month,NSCalendarUnit.Day,NSCalendarUnit.Hour,NSCalendarUnit.Minute,NSCalendarUnit.Second]\nlet dateComponents:NSDateComponents? = calendar?.components(unitF, fromDate: now, toDate: yesterday, options: .MatchNextTimePreservingSmallerUnits)\nprint(\"年：\\(dateComponents?.year)\")\nprint(\"月：\\(dateComponents?.month)\")\nprint(\"日：\\(dateComponents?.day)\")\nprint(\"小时：\\(dateComponents?.hour)\")\nprint(\"分钟：\\(dateComponents?.minute)\")\nprint(\"秒：\\(dateComponents?.second)\")\n```\n","slug":"swift-datetime","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk0z0012uejriw2i2ixd","content":"<p>在软件开发领域，使用频率比较高的我想日期正是其中之一。以前在Objectice-C中可以使用NSDate，NSDateFormatter类来处理日期，换到Swift中也是一样，<code>唯一需要注意的是iOS中没有毫秒，所有的日期类最小精度只能到秒</code>。</p>\n<p><strong>NSDate</strong></p>\n<p>NSDate类提供了创建date，比较date以及计算两个date之间间隔的功能，Date对象是不可改变的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> now = <span class=\"type\">NSDate</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"现在的时间：\\(now)\"</span>)</span><br></pre></td></tr></table></figure>\n<p>如果你需要与当前日期不同的日期，也可以通过<code>timeIntervalSinceNow</code>和<code>dateByAddingTimeInterval</code>来创建。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> perDay:<span class=\"type\">NSTimeInterval</span> = <span class=\"number\">24</span>*<span class=\"number\">60</span>*<span class=\"number\">60</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> tomorrow = <span class=\"type\">NSDate</span>(timeIntervalSinceNow: perDay)</span><br><span class=\"line\"><span class=\"keyword\">let</span> _tomorrow = now.dateByAddingTimeInterval(perDay)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"明天的时间：\\(tomorrow)\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> yesterday = <span class=\"type\">NSDate</span>(timeIntervalSinceNow: -perDay)</span><br><span class=\"line\"><span class=\"comment\">//增加时间间隔</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> _yesterday = now.dateByAddingTimeInterval(-perDay)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"昨天的时间：\\(yesterday)\"</span>)</span><br></pre></td></tr></table></figure>\n<p>如果你需要比较两个日，最常用的是使用<code>timeIntervalSinceDate</code>方法。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//比较时间，如果两个时间间隔小于一分钟，可认为在同一天</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> tomorrow.timeIntervalSinceDate(yesterday) &lt; <span class=\"number\">60</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//相等</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//不相等</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你想精度更高的进行比较，那么可以使用：</p>\n<ul>\n<li><code>tomorrow.isEqualToDate(&lt;#T##otherDate: NSDate##NSDate#&gt;)</code></li>\n<li><code>tomorrow.compare(&lt;#T##other: NSDate##NSDate#&gt;)</code></li>\n<li><code>tomorrow.laterDate(&lt;#T##anotherDate: NSDate##NSDate#&gt;)</code></li>\n<li><code>tomorrow.earlierDate(&lt;#T##anotherDate: NSDate##NSDate#&gt;)</code></li>\n</ul>\n<p><strong>NSDateFormatter</strong></p>\n<p>NSDate本身并不能输出或者格式化，需要借助NSDateFormatter来进行处理，NSDateFormatter的初始化是一个比较消耗的创建，所以一般都要懒加载来处理它。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> dateFormatter = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">NSDateFormatter</span>()</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p>从程序的一般逻辑来看，formatter可以看做是（输入｜输出）的关系，所以NSDateFormatter中供给的方法大部分都是设置属性，获取NSDate对象。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> location = <span class=\"type\">NSLocale</span>(localeIdentifier: <span class=\"string\">\"zh-CN\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> timeString = <span class=\"string\">\"20110826134106\"</span></span><br><span class=\"line\"><span class=\"keyword\">self</span>.dateFormatter.locale = location</span><br><span class=\"line\"><span class=\"keyword\">self</span>.dateFormatter.dateFormat = <span class=\"string\">\"yyyyMMddHHmmss\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> date:<span class=\"type\">NSDate</span> = <span class=\"keyword\">self</span>.dateFormatter.dateFromString(timeString)!</span><br><span class=\"line\"><span class=\"built_in\">print</span>(date)</span><br></pre></td></tr></table></figure>\n<p>NSLocale可以设置本地化时间，然后将格式化字符串设置给dateFormat，就可以使用了。</p>\n<p><strong>NSCalendar &amp; NSDateComponents</strong></p>\n<p>NSCalendar定义了不同的日历，包括佛教历，格里高利历等（这些都与系统提供的本地化设置相关）而<br>NSDateComponents则是定义了一个日期对象的组件，包括<code>年，月，日，小时，分钟，秒</code>等等，另外NSDateComponents也可以去获取时间（比如计算跟某某时间相差多少时间）</p>\n<p>初始化NSCalendar，需要注意的是iOS8.0之后，标识开始要使用NSCalendarIdentifier（xxxx）了</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> calendar = <span class=\"type\">NSCalendar</span>(calendarIdentifier: <span class=\"type\">NSCalendarIdentifierGregorian</span>)</span><br></pre></td></tr></table></figure>\n<p>初始化NSDateComponents</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> components = <span class=\"type\">NSDateComponents</span>()</span><br><span class=\"line\">components.year = <span class=\"number\">2105</span></span><br><span class=\"line\">components.month = <span class=\"number\">12</span></span><br><span class=\"line\">components.day = <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<p>获取某个时间的相差值，需要注意的是，iOS8.0开始要使用NSCalendarUnitYear了，原来的NSYearCalendarUnit将要废弃。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> calendar = <span class=\"type\">NSCalendar</span>(calendarIdentifier: <span class=\"type\">NSCalendarIdentifierGregorian</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> unitF:<span class=\"type\">NSCalendarUnit</span> = [<span class=\"type\">NSCalendarUnit</span>.<span class=\"type\">Year</span>,<span class=\"type\">NSCalendarUnit</span>.<span class=\"type\">Month</span>,<span class=\"type\">NSCalendarUnit</span>.<span class=\"type\">Day</span>,<span class=\"type\">NSCalendarUnit</span>.<span class=\"type\">Hour</span>,<span class=\"type\">NSCalendarUnit</span>.<span class=\"type\">Minute</span>,<span class=\"type\">NSCalendarUnit</span>.<span class=\"type\">Second</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> dateComponents:<span class=\"type\">NSDateComponents</span>? = calendar?.components(unitF, fromDate: now, toDate: yesterday, options: .<span class=\"type\">MatchNextTimePreservingSmallerUnits</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"年：\\(dateComponents?.year)\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"月：\\(dateComponents?.month)\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"日：\\(dateComponents?.day)\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"小时：\\(dateComponents?.hour)\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"分钟：\\(dateComponents?.minute)\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"秒：\\(dateComponents?.second)\"</span>)</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>在软件开发领域，使用频率比较高的我想日期正是其中之一。以前在Objectice-C中可以使用NSDate，NSDateFormatter类来处理日期，换到Swift中也是一样，<code>唯一需要注意的是iOS中没有毫秒，所有的日期类最小精度只能到秒</code>。</p>\n<p><strong>NSDate</strong></p>\n<p>NSDate类提供了创建date，比较date以及计算两个date之间间隔的功能，Date对象是不可改变的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> now = <span class=\"type\">NSDate</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"现在的时间：\\(now)\"</span>)</span><br></pre></td></tr></table></figure>\n<p>如果你需要与当前日期不同的日期，也可以通过<code>timeIntervalSinceNow</code>和<code>dateByAddingTimeInterval</code>来创建。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> perDay:<span class=\"type\">NSTimeInterval</span> = <span class=\"number\">24</span>*<span class=\"number\">60</span>*<span class=\"number\">60</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> tomorrow = <span class=\"type\">NSDate</span>(timeIntervalSinceNow: perDay)</span><br><span class=\"line\"><span class=\"keyword\">let</span> _tomorrow = now.dateByAddingTimeInterval(perDay)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"明天的时间：\\(tomorrow)\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> yesterday = <span class=\"type\">NSDate</span>(timeIntervalSinceNow: -perDay)</span><br><span class=\"line\"><span class=\"comment\">//增加时间间隔</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> _yesterday = now.dateByAddingTimeInterval(-perDay)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"昨天的时间：\\(yesterday)\"</span>)</span><br></pre></td></tr></table></figure>\n<p>如果你需要比较两个日，最常用的是使用<code>timeIntervalSinceDate</code>方法。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//比较时间，如果两个时间间隔小于一分钟，可认为在同一天</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> tomorrow.timeIntervalSinceDate(yesterday) &lt; <span class=\"number\">60</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//相等</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//不相等</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你想精度更高的进行比较，那么可以使用：</p>\n<ul>\n<li><code>tomorrow.isEqualToDate(&lt;#T##otherDate: NSDate##NSDate#&gt;)</code></li>\n<li><code>tomorrow.compare(&lt;#T##other: NSDate##NSDate#&gt;)</code></li>\n<li><code>tomorrow.laterDate(&lt;#T##anotherDate: NSDate##NSDate#&gt;)</code></li>\n<li><code>tomorrow.earlierDate(&lt;#T##anotherDate: NSDate##NSDate#&gt;)</code></li>\n</ul>\n<p><strong>NSDateFormatter</strong></p>\n<p>NSDate本身并不能输出或者格式化，需要借助NSDateFormatter来进行处理，NSDateFormatter的初始化是一个比较消耗的创建，所以一般都要懒加载来处理它。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> dateFormatter = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">NSDateFormatter</span>()</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p>从程序的一般逻辑来看，formatter可以看做是（输入｜输出）的关系，所以NSDateFormatter中供给的方法大部分都是设置属性，获取NSDate对象。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> location = <span class=\"type\">NSLocale</span>(localeIdentifier: <span class=\"string\">\"zh-CN\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> timeString = <span class=\"string\">\"20110826134106\"</span></span><br><span class=\"line\"><span class=\"keyword\">self</span>.dateFormatter.locale = location</span><br><span class=\"line\"><span class=\"keyword\">self</span>.dateFormatter.dateFormat = <span class=\"string\">\"yyyyMMddHHmmss\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> date:<span class=\"type\">NSDate</span> = <span class=\"keyword\">self</span>.dateFormatter.dateFromString(timeString)!</span><br><span class=\"line\"><span class=\"built_in\">print</span>(date)</span><br></pre></td></tr></table></figure>\n<p>NSLocale可以设置本地化时间，然后将格式化字符串设置给dateFormat，就可以使用了。</p>\n<p><strong>NSCalendar &amp; NSDateComponents</strong></p>\n<p>NSCalendar定义了不同的日历，包括佛教历，格里高利历等（这些都与系统提供的本地化设置相关）而<br>NSDateComponents则是定义了一个日期对象的组件，包括<code>年，月，日，小时，分钟，秒</code>等等，另外NSDateComponents也可以去获取时间（比如计算跟某某时间相差多少时间）</p>\n<p>初始化NSCalendar，需要注意的是iOS8.0之后，标识开始要使用NSCalendarIdentifier（xxxx）了</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> calendar = <span class=\"type\">NSCalendar</span>(calendarIdentifier: <span class=\"type\">NSCalendarIdentifierGregorian</span>)</span><br></pre></td></tr></table></figure>\n<p>初始化NSDateComponents</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> components = <span class=\"type\">NSDateComponents</span>()</span><br><span class=\"line\">components.year = <span class=\"number\">2105</span></span><br><span class=\"line\">components.month = <span class=\"number\">12</span></span><br><span class=\"line\">components.day = <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<p>获取某个时间的相差值，需要注意的是，iOS8.0开始要使用NSCalendarUnitYear了，原来的NSYearCalendarUnit将要废弃。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> calendar = <span class=\"type\">NSCalendar</span>(calendarIdentifier: <span class=\"type\">NSCalendarIdentifierGregorian</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> unitF:<span class=\"type\">NSCalendarUnit</span> = [<span class=\"type\">NSCalendarUnit</span>.<span class=\"type\">Year</span>,<span class=\"type\">NSCalendarUnit</span>.<span class=\"type\">Month</span>,<span class=\"type\">NSCalendarUnit</span>.<span class=\"type\">Day</span>,<span class=\"type\">NSCalendarUnit</span>.<span class=\"type\">Hour</span>,<span class=\"type\">NSCalendarUnit</span>.<span class=\"type\">Minute</span>,<span class=\"type\">NSCalendarUnit</span>.<span class=\"type\">Second</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> dateComponents:<span class=\"type\">NSDateComponents</span>? = calendar?.components(unitF, fromDate: now, toDate: yesterday, options: .<span class=\"type\">MatchNextTimePreservingSmallerUnits</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"年：\\(dateComponents?.year)\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"月：\\(dateComponents?.month)\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"日：\\(dateComponents?.day)\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"小时：\\(dateComponents?.hour)\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"分钟：\\(dateComponents?.minute)\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"秒：\\(dateComponents?.second)\"</span>)</span><br></pre></td></tr></table></figure>\n"},{"title":"引用计数的关系理解","date":"2015-11-09T03:46:49.000Z","_content":"\n**源代码基于 Swift 2.1+ Xcode 7.1.1编写**\n\n**Swift ARC**\n\n`weak `  `unowned`的区别，以及如何解除强循环引用\n\n`weak`用弱引用来描述，它在此中类似于一个可选?。\n\n`unowned`用无主引用来描述，它在此中类似于一个解包!。\n\n**闭包**\n\n闭包中为什么使用unowned，那是因为引用的self是一个必须有值的情况，如果你的引用某些情况下是没有值，那么才可以使用weak。\n\n```swift\nclass React {\n    var doc:String\n    var asHTML:(html:String)->String? = {\n        (html:String) -> String? in\n        return nil\n    }\n\n    //无参数\n\n    lazy var parseHTML:Void -> String = {\n        [unowned self]() -> String in\n        if let dom:String = self.doc{\n            return \"<p>\\(dom)</p>\"\n        }else{\n            return \"<h1>no Name DOM </h1>\"\n        }\n    }\n\n    //有参数\n\n    lazy var stringfyHTML:(document:String)->String = {\n        [unowned self](document:String) -> String in\n\n        return \"\\(document) is DOM\"\n    }\n\n    init(doc:String){\n        self.doc = doc\n    }\n\n    func way(){\n        self.asHTML(html: self.doc)\n    }\n\n    deinit{\n        print(\"释放自动引用计数\")\n    }\n}\n\nvar react:React?\nreact = React(doc: \"<em>icepy</em>\")\nreact?.asHTML = {\n    (html:String) -> String? in\n    print(html)\n    return nil\n}\nreact?.parseHTML()\nreact?.stringfyHTML(document:\"icepy\")\nreact?.way()\nreact = nil\n```\n\n**弱引用 weak**\n\n`弱引用不会对其引用的实例保持强引用，因而不会阻止 ARC 销毁被引用的实例。但是弱引用可以没有值，所以必须将每一个弱引用声明为可选类型`\n\n```swift\n//用菇凉来描述\n\nclass Girls {\n    var tag:GirlType?\n    init(){\n\n    }\n    func say(){\n        print(\"girl \\'s tag is \\(self.tag?.name)\")\n    }\n    deinit{\n        print(\"Girls 释放\")\n    }\n}\n\nclass GirlType{\n    weak var what:Girls?\n    var name:String\n    init(name:String){\n        self.name = name\n    }\n    deinit{\n        print(\"GirlType 释放\")\n    }\n}\n\nvar liuyueying:Girls? = Girls()\nvar type:GirlType? = GirlType(name: \"女神\")\nliuyueying?.tag = type\ntype!.what = liuyueying\nliuyueying?.say()\nliuyueying = nil\ntype = nil\n```\n\n**无主引用 unowned**\n\n`和弱引用类似，无主引用不会牢牢保持住引用的实例。和弱引用不同的是，无主引用是永远有值的。`\n\n ```swift\n//阵营中不一定有兽人\n\nclass Camp {\n    var description:String{\n        return \"Camp\"\n    }\n    var tagName:String\n    var race:Races?\n    init(name:String){\n        self.tagName = name\n    }\n\n    deinit{\n        print(\"\\(self.description) 释放\")\n    }\n}\n\n//兽人必然有一个阵营\n\nclass Races {\n    unowned let belong:Camp\n    var description:String{\n        return \"Races\"\n    }\n    var raceName:String\n    init(name:String,camp:Camp){\n        self.raceName = name\n        self.belong = camp\n    }\n    deinit{\n        print(\"\\(self.description) 释放\")\n    }\n}\n\nvar tribe:Camp? = Camp(name: \"部落\")\ntribe!.race = Races(name: \"兽人\",camp: tribe!)\ntribe = nil\n```\n","source":"_posts/swift-cite-count.md","raw":"title: 引用计数的关系理解\ndate: 2015-11-9 11:46:49\ntags: Swift\n---\n\n**源代码基于 Swift 2.1+ Xcode 7.1.1编写**\n\n**Swift ARC**\n\n`weak `  `unowned`的区别，以及如何解除强循环引用\n\n`weak`用弱引用来描述，它在此中类似于一个可选?。\n\n`unowned`用无主引用来描述，它在此中类似于一个解包!。\n\n**闭包**\n\n闭包中为什么使用unowned，那是因为引用的self是一个必须有值的情况，如果你的引用某些情况下是没有值，那么才可以使用weak。\n\n```swift\nclass React {\n    var doc:String\n    var asHTML:(html:String)->String? = {\n        (html:String) -> String? in\n        return nil\n    }\n\n    //无参数\n\n    lazy var parseHTML:Void -> String = {\n        [unowned self]() -> String in\n        if let dom:String = self.doc{\n            return \"<p>\\(dom)</p>\"\n        }else{\n            return \"<h1>no Name DOM </h1>\"\n        }\n    }\n\n    //有参数\n\n    lazy var stringfyHTML:(document:String)->String = {\n        [unowned self](document:String) -> String in\n\n        return \"\\(document) is DOM\"\n    }\n\n    init(doc:String){\n        self.doc = doc\n    }\n\n    func way(){\n        self.asHTML(html: self.doc)\n    }\n\n    deinit{\n        print(\"释放自动引用计数\")\n    }\n}\n\nvar react:React?\nreact = React(doc: \"<em>icepy</em>\")\nreact?.asHTML = {\n    (html:String) -> String? in\n    print(html)\n    return nil\n}\nreact?.parseHTML()\nreact?.stringfyHTML(document:\"icepy\")\nreact?.way()\nreact = nil\n```\n\n**弱引用 weak**\n\n`弱引用不会对其引用的实例保持强引用，因而不会阻止 ARC 销毁被引用的实例。但是弱引用可以没有值，所以必须将每一个弱引用声明为可选类型`\n\n```swift\n//用菇凉来描述\n\nclass Girls {\n    var tag:GirlType?\n    init(){\n\n    }\n    func say(){\n        print(\"girl \\'s tag is \\(self.tag?.name)\")\n    }\n    deinit{\n        print(\"Girls 释放\")\n    }\n}\n\nclass GirlType{\n    weak var what:Girls?\n    var name:String\n    init(name:String){\n        self.name = name\n    }\n    deinit{\n        print(\"GirlType 释放\")\n    }\n}\n\nvar liuyueying:Girls? = Girls()\nvar type:GirlType? = GirlType(name: \"女神\")\nliuyueying?.tag = type\ntype!.what = liuyueying\nliuyueying?.say()\nliuyueying = nil\ntype = nil\n```\n\n**无主引用 unowned**\n\n`和弱引用类似，无主引用不会牢牢保持住引用的实例。和弱引用不同的是，无主引用是永远有值的。`\n\n ```swift\n//阵营中不一定有兽人\n\nclass Camp {\n    var description:String{\n        return \"Camp\"\n    }\n    var tagName:String\n    var race:Races?\n    init(name:String){\n        self.tagName = name\n    }\n\n    deinit{\n        print(\"\\(self.description) 释放\")\n    }\n}\n\n//兽人必然有一个阵营\n\nclass Races {\n    unowned let belong:Camp\n    var description:String{\n        return \"Races\"\n    }\n    var raceName:String\n    init(name:String,camp:Camp){\n        self.raceName = name\n        self.belong = camp\n    }\n    deinit{\n        print(\"\\(self.description) 释放\")\n    }\n}\n\nvar tribe:Camp? = Camp(name: \"部落\")\ntribe!.race = Races(name: \"兽人\",camp: tribe!)\ntribe = nil\n```\n","slug":"swift-cite-count","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk110014uejrzz5kf9fg","content":"<p><strong>源代码基于 Swift 2.1+ Xcode 7.1.1编写</strong></p>\n<p><strong>Swift ARC</strong></p>\n<p><code>weak</code>  <code>unowned</code>的区别，以及如何解除强循环引用</p>\n<p><code>weak</code>用弱引用来描述，它在此中类似于一个可选?。</p>\n<p><code>unowned</code>用无主引用来描述，它在此中类似于一个解包!。</p>\n<p><strong>闭包</strong></p>\n<p>闭包中为什么使用unowned，那是因为引用的self是一个必须有值的情况，如果你的引用某些情况下是没有值，那么才可以使用weak。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">React</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> doc:<span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> asHTML:(html:<span class=\"type\">String</span>)-&gt;<span class=\"type\">String</span>? = &#123;</span><br><span class=\"line\">        (html:<span class=\"type\">String</span>) -&gt; <span class=\"type\">String</span>? <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//无参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> parseHTML:<span class=\"type\">Void</span> -&gt; <span class=\"type\">String</span> = &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>]() -&gt; <span class=\"type\">String</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> dom:<span class=\"type\">String</span> = <span class=\"keyword\">self</span>.doc&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;p&gt;\\(dom)&lt;/p&gt;\"</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;h1&gt;no Name DOM &lt;/h1&gt;\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//有参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> stringfyHTML:(document:<span class=\"type\">String</span>)-&gt;<span class=\"type\">String</span> = &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>](document:<span class=\"type\">String</span>) -&gt; <span class=\"type\">String</span> <span class=\"keyword\">in</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\\(document) is DOM\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(doc:<span class=\"type\">String</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.doc = doc</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">way</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.asHTML(html: <span class=\"keyword\">self</span>.doc)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">deinit</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"释放自动引用计数\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> react:<span class=\"type\">React</span>?</span><br><span class=\"line\">react = <span class=\"type\">React</span>(doc: <span class=\"string\">\"&lt;em&gt;icepy&lt;/em&gt;\"</span>)</span><br><span class=\"line\">react?.asHTML = &#123;</span><br><span class=\"line\">    (html:<span class=\"type\">String</span>) -&gt; <span class=\"type\">String</span>? <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(html)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">react?.parseHTML()</span><br><span class=\"line\">react?.stringfyHTML(document:<span class=\"string\">\"icepy\"</span>)</span><br><span class=\"line\">react?.way()</span><br><span class=\"line\">react = <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n<p><strong>弱引用 weak</strong></p>\n<p><code>弱引用不会对其引用的实例保持强引用，因而不会阻止 ARC 销毁被引用的实例。但是弱引用可以没有值，所以必须将每一个弱引用声明为可选类型</code></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用菇凉来描述</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Girls</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tag:<span class=\"type\">GirlType</span>?</span><br><span class=\"line\">    <span class=\"keyword\">init</span>()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"girl \\'s tag is \\(self.tag?.name)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">deinit</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Girls 释放\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GirlType</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> what:<span class=\"type\">Girls</span>?</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name:<span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(name:<span class=\"type\">String</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">deinit</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"GirlType 释放\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> liuyueying:<span class=\"type\">Girls</span>? = <span class=\"type\">Girls</span>()</span><br><span class=\"line\"><span class=\"keyword\">var</span> type:<span class=\"type\">GirlType</span>? = <span class=\"type\">GirlType</span>(name: <span class=\"string\">\"女神\"</span>)</span><br><span class=\"line\">liuyueying?.tag = type</span><br><span class=\"line\">type!.what = liuyueying</span><br><span class=\"line\">liuyueying?.say()</span><br><span class=\"line\">liuyueying = <span class=\"literal\">nil</span></span><br><span class=\"line\">type = <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n<p><strong>无主引用 unowned</strong></p>\n<p><code>和弱引用类似，无主引用不会牢牢保持住引用的实例。和弱引用不同的是，无主引用是永远有值的。</code></p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//阵营中不一定有兽人</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Camp</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> description:<span class=\"type\">String</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Camp\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tagName:<span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> race:<span class=\"type\">Races</span>?</span><br><span class=\"line\">    <span class=\"keyword\">init</span>(name:<span class=\"type\">String</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.tagName = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">deinit</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(self.description) 释放\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//兽人必然有一个阵营</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Races</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unowned</span> <span class=\"keyword\">let</span> belong:<span class=\"type\">Camp</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> description:<span class=\"type\">String</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Races\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> raceName:<span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(name:<span class=\"type\">String</span>,camp:<span class=\"type\">Camp</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.raceName = name</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.belong = camp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">deinit</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(self.description) 释放\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> tribe:<span class=\"type\">Camp</span>? = <span class=\"type\">Camp</span>(name: <span class=\"string\">\"部落\"</span>)</span><br><span class=\"line\">tribe!.race = <span class=\"type\">Races</span>(name: <span class=\"string\">\"兽人\"</span>,camp: tribe!)</span><br><span class=\"line\">tribe = <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><strong>源代码基于 Swift 2.1+ Xcode 7.1.1编写</strong></p>\n<p><strong>Swift ARC</strong></p>\n<p><code>weak</code>  <code>unowned</code>的区别，以及如何解除强循环引用</p>\n<p><code>weak</code>用弱引用来描述，它在此中类似于一个可选?。</p>\n<p><code>unowned</code>用无主引用来描述，它在此中类似于一个解包!。</p>\n<p><strong>闭包</strong></p>\n<p>闭包中为什么使用unowned，那是因为引用的self是一个必须有值的情况，如果你的引用某些情况下是没有值，那么才可以使用weak。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">React</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> doc:<span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> asHTML:(html:<span class=\"type\">String</span>)-&gt;<span class=\"type\">String</span>? = &#123;</span><br><span class=\"line\">        (html:<span class=\"type\">String</span>) -&gt; <span class=\"type\">String</span>? <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//无参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> parseHTML:<span class=\"type\">Void</span> -&gt; <span class=\"type\">String</span> = &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>]() -&gt; <span class=\"type\">String</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> dom:<span class=\"type\">String</span> = <span class=\"keyword\">self</span>.doc&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;p&gt;\\(dom)&lt;/p&gt;\"</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;h1&gt;no Name DOM &lt;/h1&gt;\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//有参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> stringfyHTML:(document:<span class=\"type\">String</span>)-&gt;<span class=\"type\">String</span> = &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>](document:<span class=\"type\">String</span>) -&gt; <span class=\"type\">String</span> <span class=\"keyword\">in</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\\(document) is DOM\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(doc:<span class=\"type\">String</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.doc = doc</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">way</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.asHTML(html: <span class=\"keyword\">self</span>.doc)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">deinit</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"释放自动引用计数\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> react:<span class=\"type\">React</span>?</span><br><span class=\"line\">react = <span class=\"type\">React</span>(doc: <span class=\"string\">\"&lt;em&gt;icepy&lt;/em&gt;\"</span>)</span><br><span class=\"line\">react?.asHTML = &#123;</span><br><span class=\"line\">    (html:<span class=\"type\">String</span>) -&gt; <span class=\"type\">String</span>? <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(html)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">react?.parseHTML()</span><br><span class=\"line\">react?.stringfyHTML(document:<span class=\"string\">\"icepy\"</span>)</span><br><span class=\"line\">react?.way()</span><br><span class=\"line\">react = <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n<p><strong>弱引用 weak</strong></p>\n<p><code>弱引用不会对其引用的实例保持强引用，因而不会阻止 ARC 销毁被引用的实例。但是弱引用可以没有值，所以必须将每一个弱引用声明为可选类型</code></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用菇凉来描述</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Girls</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tag:<span class=\"type\">GirlType</span>?</span><br><span class=\"line\">    <span class=\"keyword\">init</span>()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"girl \\'s tag is \\(self.tag?.name)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">deinit</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Girls 释放\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GirlType</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> what:<span class=\"type\">Girls</span>?</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name:<span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(name:<span class=\"type\">String</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">deinit</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"GirlType 释放\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> liuyueying:<span class=\"type\">Girls</span>? = <span class=\"type\">Girls</span>()</span><br><span class=\"line\"><span class=\"keyword\">var</span> type:<span class=\"type\">GirlType</span>? = <span class=\"type\">GirlType</span>(name: <span class=\"string\">\"女神\"</span>)</span><br><span class=\"line\">liuyueying?.tag = type</span><br><span class=\"line\">type!.what = liuyueying</span><br><span class=\"line\">liuyueying?.say()</span><br><span class=\"line\">liuyueying = <span class=\"literal\">nil</span></span><br><span class=\"line\">type = <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n<p><strong>无主引用 unowned</strong></p>\n<p><code>和弱引用类似，无主引用不会牢牢保持住引用的实例。和弱引用不同的是，无主引用是永远有值的。</code></p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//阵营中不一定有兽人</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Camp</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> description:<span class=\"type\">String</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Camp\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tagName:<span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> race:<span class=\"type\">Races</span>?</span><br><span class=\"line\">    <span class=\"keyword\">init</span>(name:<span class=\"type\">String</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.tagName = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">deinit</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(self.description) 释放\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//兽人必然有一个阵营</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Races</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unowned</span> <span class=\"keyword\">let</span> belong:<span class=\"type\">Camp</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> description:<span class=\"type\">String</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Races\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> raceName:<span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(name:<span class=\"type\">String</span>,camp:<span class=\"type\">Camp</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.raceName = name</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.belong = camp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">deinit</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(self.description) 释放\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> tribe:<span class=\"type\">Camp</span>? = <span class=\"type\">Camp</span>(name: <span class=\"string\">\"部落\"</span>)</span><br><span class=\"line\">tribe!.race = <span class=\"type\">Races</span>(name: <span class=\"string\">\"兽人\"</span>,camp: tribe!)</span><br><span class=\"line\">tribe = <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Swift错误处理","date":"2016-01-12T03:33:43.000Z","_content":"\n*错误处理是Swift2.0后新推出的特性*\n\n在原来做iOS开发时，通常会使用`NSError`对象来标识一个错误，并且需要传递一个NSError指针到可能发生错误的方法中去。以前，我觉得这个很好用，为什么？因为我可以穿入一个nil来忽略错误，为了省事，但是后来出现的坑，让我更近注重去处理错误了。\n\n在Swift中一个函数或者方法需要使用`throws`关键字标明，此能接收并处理错误的`能力`，一般情况下，会根据`错误类型`来做进一步处理，或者抛给调用者。\n\n每一个错误，都需要遵循`ErrorType`协议，当然Cocoa中已经为我们定义了很多错误，换句话说，我们也可以自己定义自己的错误类型，只要遵循了`ErrorType`协议即可。\n\n## Demo访问\n\n基于Swift 2.1 使用Xcode 7.2编写，访问[Swift Error Handler](https://github.com/icepy/_posts/blob/master/demo/errorHandler/errorHandler/ViewController.swift)\n\n## 场景描述\n\n 自己设计的场景，假设在魔兽世界中，熊猫人可以成为中立阵营（翻墙出岛，正常流程是需要选择一个阵营的），其他两个阵营为联盟与部落。\n\n- 如果是熊猫人（假设翻墙了），那么就抛出一个无分组的错误\n- 如果人类选择了部落，那么将抛出一个LGroup错误\n- 如果兽人选择了联盟，那么将抛出一个BGroup错误\n\n**定义错误类型**\n\n```Swift\nenum GroupError:ErrorType{\n    case NoneGroup\n    case LGroup\n    case BGroup\n}\n```\n\n**使用throws关键字**\n\n```Swift\nfunc selectorGroup(tag:Int,type:String) throws{\n    switch tag{\n        case 1:\n            if type != \"human\"{\n                throw GroupError.LGroup\n            }\n            break\n        case 2:\n            if type != \"orc\"{\n                throw GroupError.BGroup\n            }\n            break\n        default:\n            if type == \"panda\"{\n                throw GroupError.NoneGroup\n            }\n            break\n    }\n}\n```\n\n那么调用者该如何处理呢？Swift提供了`do...catch`和`try`机制，让我们来捕获错误。\n\n```Swift\n@IBAction func orcSelector(sender: UIButton) {\n    do{\n        try selectorGroup(1, type: \"orc\")\n    }catch{\n        print(\"兽人，请不要选择联盟\")\n    }\n}\n\n@IBAction func pandaSelector(sender: UIButton) {\n    do{\n        try selectorGroup(0, type: \"panda\")\n    }catch{\n        print(\"熊猫人必须选择一个阵营\")\n    }\n}\n\n@IBAction func humanSelector(sender: UIButton) {\n    do{\n        try selectorGroup(2, type: \"human\")\n    }catch{\n        print(\"人类，请不要选择部落\")\n    }\n}\n```\n\n## 在Swift中如何使用NSError\n\n**定义处理函数**\n\n```Swift\nfunc selectorNSError(inout error:NSError){\n    error = NSError(domain: \"Selector Group Error\", code: 500, userInfo: [\"message\":\"选择错误\"])\n}\n```\n\n这里就使用到了`inout`关键字来处理指针， 操作时不需要使用`memory`来操作。额外提一句，如果使用别的方式，操作是需要`memory`的。\n\n```Swift\nlet num = UnsafeMutablePointer<Int>.alloc(12)\nnum.memory = 1\n```\n\n调用者使用`selectorNSError函数\n\n```Swift\n@IBAction func NSErrorHandler(sender: UIButton) {\n    var error:NSError = NSError(domain: \"\", code: 100, userInfo: nil)\n    selectorNSError(&error)\n    print(\"\\(error)\")\n}\n```\n","source":"_posts/swift-errorhandler.md","raw":"title: Swift错误处理\ndate: 2016-01-12 11:33:43\ntags: Swift\n---\n\n*错误处理是Swift2.0后新推出的特性*\n\n在原来做iOS开发时，通常会使用`NSError`对象来标识一个错误，并且需要传递一个NSError指针到可能发生错误的方法中去。以前，我觉得这个很好用，为什么？因为我可以穿入一个nil来忽略错误，为了省事，但是后来出现的坑，让我更近注重去处理错误了。\n\n在Swift中一个函数或者方法需要使用`throws`关键字标明，此能接收并处理错误的`能力`，一般情况下，会根据`错误类型`来做进一步处理，或者抛给调用者。\n\n每一个错误，都需要遵循`ErrorType`协议，当然Cocoa中已经为我们定义了很多错误，换句话说，我们也可以自己定义自己的错误类型，只要遵循了`ErrorType`协议即可。\n\n## Demo访问\n\n基于Swift 2.1 使用Xcode 7.2编写，访问[Swift Error Handler](https://github.com/icepy/_posts/blob/master/demo/errorHandler/errorHandler/ViewController.swift)\n\n## 场景描述\n\n 自己设计的场景，假设在魔兽世界中，熊猫人可以成为中立阵营（翻墙出岛，正常流程是需要选择一个阵营的），其他两个阵营为联盟与部落。\n\n- 如果是熊猫人（假设翻墙了），那么就抛出一个无分组的错误\n- 如果人类选择了部落，那么将抛出一个LGroup错误\n- 如果兽人选择了联盟，那么将抛出一个BGroup错误\n\n**定义错误类型**\n\n```Swift\nenum GroupError:ErrorType{\n    case NoneGroup\n    case LGroup\n    case BGroup\n}\n```\n\n**使用throws关键字**\n\n```Swift\nfunc selectorGroup(tag:Int,type:String) throws{\n    switch tag{\n        case 1:\n            if type != \"human\"{\n                throw GroupError.LGroup\n            }\n            break\n        case 2:\n            if type != \"orc\"{\n                throw GroupError.BGroup\n            }\n            break\n        default:\n            if type == \"panda\"{\n                throw GroupError.NoneGroup\n            }\n            break\n    }\n}\n```\n\n那么调用者该如何处理呢？Swift提供了`do...catch`和`try`机制，让我们来捕获错误。\n\n```Swift\n@IBAction func orcSelector(sender: UIButton) {\n    do{\n        try selectorGroup(1, type: \"orc\")\n    }catch{\n        print(\"兽人，请不要选择联盟\")\n    }\n}\n\n@IBAction func pandaSelector(sender: UIButton) {\n    do{\n        try selectorGroup(0, type: \"panda\")\n    }catch{\n        print(\"熊猫人必须选择一个阵营\")\n    }\n}\n\n@IBAction func humanSelector(sender: UIButton) {\n    do{\n        try selectorGroup(2, type: \"human\")\n    }catch{\n        print(\"人类，请不要选择部落\")\n    }\n}\n```\n\n## 在Swift中如何使用NSError\n\n**定义处理函数**\n\n```Swift\nfunc selectorNSError(inout error:NSError){\n    error = NSError(domain: \"Selector Group Error\", code: 500, userInfo: [\"message\":\"选择错误\"])\n}\n```\n\n这里就使用到了`inout`关键字来处理指针， 操作时不需要使用`memory`来操作。额外提一句，如果使用别的方式，操作是需要`memory`的。\n\n```Swift\nlet num = UnsafeMutablePointer<Int>.alloc(12)\nnum.memory = 1\n```\n\n调用者使用`selectorNSError函数\n\n```Swift\n@IBAction func NSErrorHandler(sender: UIButton) {\n    var error:NSError = NSError(domain: \"\", code: 100, userInfo: nil)\n    selectorNSError(&error)\n    print(\"\\(error)\")\n}\n```\n","slug":"swift-errorhandler","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk130016uejrt1mhzsao","content":"<p><em>错误处理是Swift2.0后新推出的特性</em></p>\n<p>在原来做iOS开发时，通常会使用<code>NSError</code>对象来标识一个错误，并且需要传递一个NSError指针到可能发生错误的方法中去。以前，我觉得这个很好用，为什么？因为我可以穿入一个nil来忽略错误，为了省事，但是后来出现的坑，让我更近注重去处理错误了。</p>\n<p>在Swift中一个函数或者方法需要使用<code>throws</code>关键字标明，此能接收并处理错误的<code>能力</code>，一般情况下，会根据<code>错误类型</code>来做进一步处理，或者抛给调用者。</p>\n<p>每一个错误，都需要遵循<code>ErrorType</code>协议，当然Cocoa中已经为我们定义了很多错误，换句话说，我们也可以自己定义自己的错误类型，只要遵循了<code>ErrorType</code>协议即可。</p>\n<h2 id=\"Demo访问\"><a href=\"#Demo访问\" class=\"headerlink\" title=\"Demo访问\"></a>Demo访问</h2><p>基于Swift 2.1 使用Xcode 7.2编写，访问<a href=\"https://github.com/icepy/_posts/blob/master/demo/errorHandler/errorHandler/ViewController.swift\" target=\"_blank\" rel=\"external\">Swift Error Handler</a></p>\n<h2 id=\"场景描述\"><a href=\"#场景描述\" class=\"headerlink\" title=\"场景描述\"></a>场景描述</h2><p> 自己设计的场景，假设在魔兽世界中，熊猫人可以成为中立阵营（翻墙出岛，正常流程是需要选择一个阵营的），其他两个阵营为联盟与部落。</p>\n<ul>\n<li>如果是熊猫人（假设翻墙了），那么就抛出一个无分组的错误</li>\n<li>如果人类选择了部落，那么将抛出一个LGroup错误</li>\n<li>如果兽人选择了联盟，那么将抛出一个BGroup错误</li>\n</ul>\n<p><strong>定义错误类型</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">GroupError</span>:<span class=\"title\">ErrorType</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">NoneGroup</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">LGroup</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">BGroup</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>使用throws关键字</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">selectorGroup</span><span class=\"params\">(tag:Int,type:String)</span></span> <span class=\"keyword\">throws</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> tag&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> type != <span class=\"string\">\"human\"</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"type\">GroupError</span>.<span class=\"type\">LGroup</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> type != <span class=\"string\">\"orc\"</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"type\">GroupError</span>.<span class=\"type\">BGroup</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> type == <span class=\"string\">\"panda\"</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"type\">GroupError</span>.<span class=\"type\">NoneGroup</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么调用者该如何处理呢？Swift提供了<code>do...catch</code>和<code>try</code>机制，让我们来捕获错误。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">orcSelector</span><span class=\"params\">(sender: UIButton)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> selectorGroup(<span class=\"number\">1</span>, type: <span class=\"string\">\"orc\"</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"兽人，请不要选择联盟\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pandaSelector</span><span class=\"params\">(sender: UIButton)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> selectorGroup(<span class=\"number\">0</span>, type: <span class=\"string\">\"panda\"</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"熊猫人必须选择一个阵营\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">humanSelector</span><span class=\"params\">(sender: UIButton)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> selectorGroup(<span class=\"number\">2</span>, type: <span class=\"string\">\"human\"</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"人类，请不要选择部落\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"在Swift中如何使用NSError\"><a href=\"#在Swift中如何使用NSError\" class=\"headerlink\" title=\"在Swift中如何使用NSError\"></a>在Swift中如何使用NSError</h2><p><strong>定义处理函数</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">selectorNSError</span><span class=\"params\">(<span class=\"keyword\">inout</span> error:NSError)</span></span>&#123;</span><br><span class=\"line\">    error = <span class=\"type\">NSError</span>(domain: <span class=\"string\">\"Selector Group Error\"</span>, code: <span class=\"number\">500</span>, userInfo: [<span class=\"string\">\"message\"</span>:<span class=\"string\">\"选择错误\"</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里就使用到了<code>inout</code>关键字来处理指针， 操作时不需要使用<code>memory</code>来操作。额外提一句，如果使用别的方式，操作是需要<code>memory</code>的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Int</span>&gt;.alloc(<span class=\"number\">12</span>)</span><br><span class=\"line\">num.memory = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>调用者使用`selectorNSError函数</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NSErrorHandler</span><span class=\"params\">(sender: UIButton)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> error:<span class=\"type\">NSError</span> = <span class=\"type\">NSError</span>(domain: <span class=\"string\">\"\"</span>, code: <span class=\"number\">100</span>, userInfo: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    selectorNSError(&amp;error)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(error)\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><em>错误处理是Swift2.0后新推出的特性</em></p>\n<p>在原来做iOS开发时，通常会使用<code>NSError</code>对象来标识一个错误，并且需要传递一个NSError指针到可能发生错误的方法中去。以前，我觉得这个很好用，为什么？因为我可以穿入一个nil来忽略错误，为了省事，但是后来出现的坑，让我更近注重去处理错误了。</p>\n<p>在Swift中一个函数或者方法需要使用<code>throws</code>关键字标明，此能接收并处理错误的<code>能力</code>，一般情况下，会根据<code>错误类型</code>来做进一步处理，或者抛给调用者。</p>\n<p>每一个错误，都需要遵循<code>ErrorType</code>协议，当然Cocoa中已经为我们定义了很多错误，换句话说，我们也可以自己定义自己的错误类型，只要遵循了<code>ErrorType</code>协议即可。</p>\n<h2 id=\"Demo访问\"><a href=\"#Demo访问\" class=\"headerlink\" title=\"Demo访问\"></a>Demo访问</h2><p>基于Swift 2.1 使用Xcode 7.2编写，访问<a href=\"https://github.com/icepy/_posts/blob/master/demo/errorHandler/errorHandler/ViewController.swift\">Swift Error Handler</a></p>\n<h2 id=\"场景描述\"><a href=\"#场景描述\" class=\"headerlink\" title=\"场景描述\"></a>场景描述</h2><p> 自己设计的场景，假设在魔兽世界中，熊猫人可以成为中立阵营（翻墙出岛，正常流程是需要选择一个阵营的），其他两个阵营为联盟与部落。</p>\n<ul>\n<li>如果是熊猫人（假设翻墙了），那么就抛出一个无分组的错误</li>\n<li>如果人类选择了部落，那么将抛出一个LGroup错误</li>\n<li>如果兽人选择了联盟，那么将抛出一个BGroup错误</li>\n</ul>\n<p><strong>定义错误类型</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">GroupError</span>:<span class=\"title\">ErrorType</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">NoneGroup</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">LGroup</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">BGroup</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>使用throws关键字</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">selectorGroup</span><span class=\"params\">(tag:Int,type:String)</span></span> <span class=\"keyword\">throws</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> tag&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> type != <span class=\"string\">\"human\"</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"type\">GroupError</span>.<span class=\"type\">LGroup</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> type != <span class=\"string\">\"orc\"</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"type\">GroupError</span>.<span class=\"type\">BGroup</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> type == <span class=\"string\">\"panda\"</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"type\">GroupError</span>.<span class=\"type\">NoneGroup</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么调用者该如何处理呢？Swift提供了<code>do...catch</code>和<code>try</code>机制，让我们来捕获错误。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">orcSelector</span><span class=\"params\">(sender: UIButton)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> selectorGroup(<span class=\"number\">1</span>, type: <span class=\"string\">\"orc\"</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"兽人，请不要选择联盟\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pandaSelector</span><span class=\"params\">(sender: UIButton)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> selectorGroup(<span class=\"number\">0</span>, type: <span class=\"string\">\"panda\"</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"熊猫人必须选择一个阵营\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">humanSelector</span><span class=\"params\">(sender: UIButton)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> selectorGroup(<span class=\"number\">2</span>, type: <span class=\"string\">\"human\"</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"人类，请不要选择部落\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"在Swift中如何使用NSError\"><a href=\"#在Swift中如何使用NSError\" class=\"headerlink\" title=\"在Swift中如何使用NSError\"></a>在Swift中如何使用NSError</h2><p><strong>定义处理函数</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">selectorNSError</span><span class=\"params\">(<span class=\"keyword\">inout</span> error:NSError)</span></span>&#123;</span><br><span class=\"line\">    error = <span class=\"type\">NSError</span>(domain: <span class=\"string\">\"Selector Group Error\"</span>, code: <span class=\"number\">500</span>, userInfo: [<span class=\"string\">\"message\"</span>:<span class=\"string\">\"选择错误\"</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里就使用到了<code>inout</code>关键字来处理指针， 操作时不需要使用<code>memory</code>来操作。额外提一句，如果使用别的方式，操作是需要<code>memory</code>的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Int</span>&gt;.alloc(<span class=\"number\">12</span>)</span><br><span class=\"line\">num.memory = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>调用者使用`selectorNSError函数</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NSErrorHandler</span><span class=\"params\">(sender: UIButton)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> error:<span class=\"type\">NSError</span> = <span class=\"type\">NSError</span>(domain: <span class=\"string\">\"\"</span>, code: <span class=\"number\">100</span>, userInfo: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    selectorNSError(&amp;error)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(error)\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Swift文件操作","date":"2016-01-20T03:32:31.000Z","_content":"\n一个应用程序，总会有些文件需要操作。\n\n在iOS中文件操作主要分为两个部分，获取地址，然后操作文件：\n\n- 如果你的文件资源在bundle内，那么需要获取bundle。\n- 如果你的文件资源在沙盒内，那么需要获取沙盒地址。\n- NSFileManager操作或者流操作。\n\n**bundle**\n\nbundle是一个目录，其中包含了很多资源，有图片，编译好的源代码等等（也可以自己拖动任意文件到Xcode中，它就在此bundle之下。），cocoa提供了NSBundle类来帮助我们获取bundle下的资源。\n\n```Swift\nlet bundle = NSBundle.mainBundle()\nlet imagePath = bundle.pathForResource(\"github\",\"png\")\n```\n\n一般情况下，我们是通过`mainBundle`来获取bundle对象，当然你也可以自己指定bundle对象。\n\n**沙盒机制**\n\niOS中的应用程序，每一个都有其自己访问的`作用域`，它有一些非常显著的特点：\n\n- 每个应用程序都有自己的存储空间\n- 每个应用程序都只能访问自己存储空间内的资源\n- 每个应用程序请求数据时都需要有自己的认证权限\n\n默认情况下Apple给我们提供了三个有意义的目录，它们分别是：\n\n- Documents\n- Library\n- tmp\n\n`Documents`，Apple建议将程序中创建或者程序中浏览的数据存储在此，iTunes会备份和恢复时会包含此目录。`Library`用来存储默认的数据或者状态，tmp用来存储临时文件（iOS会随时清除）。\n\n一般情况下，我们都使用`NSSearchPathForDirectoriesInDomains`来获取沙盒路径。\n\n```Swift\nprivate let cacheDirPath:NSString = NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory.CachesDirectory, NSSearchPathDomainMask.UserDomainMask, true)[0] as NSString\nprivate let docDirPath:NSString = NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory.DocumentDirectory, NSSearchPathDomainMask.UserDomainMask, true)[0] as NSString\n```\n\n**NSFileManager**\n\nNSFileManager提供了一系列的操作，包括有创建，删除，移动，查询等等。获取此对象，可以使用一个静态方法来获取单例，或者实例化一个NSFileManager对象。\n\n```Swift\nlazy var manager:NSFileManager = {\n    return NSFileManager.defaultManager()\n}()\n```\n\n判断文件是否存在：\n\n```Swift\nself.manager.fileExistsAtPath(rmPath)\n```\n\n创建一个文件：\n\n```Swift\nself.manager.createFileAtPath(file.path!,contents: data, attributes:nil)\n```\n\n删除一个已经存在的文件：\n\n```Swift\nself.manager.removeItemAtPath(rmPath)\n```\n\n移动一个文件：\n\n```Swift\nself.valiantCenter.manager.moveItemAtPath(fromPath, toPath: self.info.saveZipPath)\n```\n\n有一点在Swift2.0之后需要注意，现在的错误处理已经变成了do...catch机制，所以不管是删除还是移动，都需要try的配合。当然，关于NSFileManager的API肯定不是只有这么点，它还包括了搜索文件，深递归目录下所有的文件等等，详细的API信息，需要你自己慢慢去查看了。\n\n```Swift\ndo{\n    try self.valiantCenter.manager.moveItemAtPath(fromPath, toPath: self.info.saveZipPath)\n    self.finishDownloadZipTask()\n}catch{\n   self.addContext(ValiantError(reason: \"下载成功：\\(self.id) 移动临时数据到保存目录错误：\\(self.info.saveZipPath)\"))\n}\n```\n\n**NSInputStream|NSOutputStream**\n\n关于流操作大部分还是会应用在网络方面，比如要将一个很大的文件传送给服务器，那么NSInputStream这时候就是很好的选择，这样会节省很多内存。使用它来单纯的操作文件会比较少，那么操作文件，我们主要使用cocoa提供的`NSInputStream`类来帮助我们更简单的操作流。\n\n一般情况下从`NSInputStream`读入数据需要下列几个步骤：\n\n- 创建一个`NSInputStream`实例\n- 通过流对象的Delegate处理一些`状况事件`\n\n```Swift\nlet stream = NSInputStream.inputStreamWithFileAtPath(\"file.txt\")\nstream.read(_ buffer: UnsafeMutablePointer<UInt8>,\nmaxLength len: Int)\n```\n","source":"_posts/swift-file-managed.md","raw":"title: Swift文件操作\ndate: 2016-01-20 11:32:31\ntags: Swift\n---\n\n一个应用程序，总会有些文件需要操作。\n\n在iOS中文件操作主要分为两个部分，获取地址，然后操作文件：\n\n- 如果你的文件资源在bundle内，那么需要获取bundle。\n- 如果你的文件资源在沙盒内，那么需要获取沙盒地址。\n- NSFileManager操作或者流操作。\n\n**bundle**\n\nbundle是一个目录，其中包含了很多资源，有图片，编译好的源代码等等（也可以自己拖动任意文件到Xcode中，它就在此bundle之下。），cocoa提供了NSBundle类来帮助我们获取bundle下的资源。\n\n```Swift\nlet bundle = NSBundle.mainBundle()\nlet imagePath = bundle.pathForResource(\"github\",\"png\")\n```\n\n一般情况下，我们是通过`mainBundle`来获取bundle对象，当然你也可以自己指定bundle对象。\n\n**沙盒机制**\n\niOS中的应用程序，每一个都有其自己访问的`作用域`，它有一些非常显著的特点：\n\n- 每个应用程序都有自己的存储空间\n- 每个应用程序都只能访问自己存储空间内的资源\n- 每个应用程序请求数据时都需要有自己的认证权限\n\n默认情况下Apple给我们提供了三个有意义的目录，它们分别是：\n\n- Documents\n- Library\n- tmp\n\n`Documents`，Apple建议将程序中创建或者程序中浏览的数据存储在此，iTunes会备份和恢复时会包含此目录。`Library`用来存储默认的数据或者状态，tmp用来存储临时文件（iOS会随时清除）。\n\n一般情况下，我们都使用`NSSearchPathForDirectoriesInDomains`来获取沙盒路径。\n\n```Swift\nprivate let cacheDirPath:NSString = NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory.CachesDirectory, NSSearchPathDomainMask.UserDomainMask, true)[0] as NSString\nprivate let docDirPath:NSString = NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory.DocumentDirectory, NSSearchPathDomainMask.UserDomainMask, true)[0] as NSString\n```\n\n**NSFileManager**\n\nNSFileManager提供了一系列的操作，包括有创建，删除，移动，查询等等。获取此对象，可以使用一个静态方法来获取单例，或者实例化一个NSFileManager对象。\n\n```Swift\nlazy var manager:NSFileManager = {\n    return NSFileManager.defaultManager()\n}()\n```\n\n判断文件是否存在：\n\n```Swift\nself.manager.fileExistsAtPath(rmPath)\n```\n\n创建一个文件：\n\n```Swift\nself.manager.createFileAtPath(file.path!,contents: data, attributes:nil)\n```\n\n删除一个已经存在的文件：\n\n```Swift\nself.manager.removeItemAtPath(rmPath)\n```\n\n移动一个文件：\n\n```Swift\nself.valiantCenter.manager.moveItemAtPath(fromPath, toPath: self.info.saveZipPath)\n```\n\n有一点在Swift2.0之后需要注意，现在的错误处理已经变成了do...catch机制，所以不管是删除还是移动，都需要try的配合。当然，关于NSFileManager的API肯定不是只有这么点，它还包括了搜索文件，深递归目录下所有的文件等等，详细的API信息，需要你自己慢慢去查看了。\n\n```Swift\ndo{\n    try self.valiantCenter.manager.moveItemAtPath(fromPath, toPath: self.info.saveZipPath)\n    self.finishDownloadZipTask()\n}catch{\n   self.addContext(ValiantError(reason: \"下载成功：\\(self.id) 移动临时数据到保存目录错误：\\(self.info.saveZipPath)\"))\n}\n```\n\n**NSInputStream|NSOutputStream**\n\n关于流操作大部分还是会应用在网络方面，比如要将一个很大的文件传送给服务器，那么NSInputStream这时候就是很好的选择，这样会节省很多内存。使用它来单纯的操作文件会比较少，那么操作文件，我们主要使用cocoa提供的`NSInputStream`类来帮助我们更简单的操作流。\n\n一般情况下从`NSInputStream`读入数据需要下列几个步骤：\n\n- 创建一个`NSInputStream`实例\n- 通过流对象的Delegate处理一些`状况事件`\n\n```Swift\nlet stream = NSInputStream.inputStreamWithFileAtPath(\"file.txt\")\nstream.read(_ buffer: UnsafeMutablePointer<UInt8>,\nmaxLength len: Int)\n```\n","slug":"swift-file-managed","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk1c0019uejrgxfwpswp","content":"<p>一个应用程序，总会有些文件需要操作。</p>\n<p>在iOS中文件操作主要分为两个部分，获取地址，然后操作文件：</p>\n<ul>\n<li>如果你的文件资源在bundle内，那么需要获取bundle。</li>\n<li>如果你的文件资源在沙盒内，那么需要获取沙盒地址。</li>\n<li>NSFileManager操作或者流操作。</li>\n</ul>\n<p><strong>bundle</strong></p>\n<p>bundle是一个目录，其中包含了很多资源，有图片，编译好的源代码等等（也可以自己拖动任意文件到Xcode中，它就在此bundle之下。），cocoa提供了NSBundle类来帮助我们获取bundle下的资源。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bundle = <span class=\"type\">NSBundle</span>.mainBundle()</span><br><span class=\"line\"><span class=\"keyword\">let</span> imagePath = bundle.pathForResource(<span class=\"string\">\"github\"</span>,<span class=\"string\">\"png\"</span>)</span><br></pre></td></tr></table></figure>\n<p>一般情况下，我们是通过<code>mainBundle</code>来获取bundle对象，当然你也可以自己指定bundle对象。</p>\n<p><strong>沙盒机制</strong></p>\n<p>iOS中的应用程序，每一个都有其自己访问的<code>作用域</code>，它有一些非常显著的特点：</p>\n<ul>\n<li>每个应用程序都有自己的存储空间</li>\n<li>每个应用程序都只能访问自己存储空间内的资源</li>\n<li>每个应用程序请求数据时都需要有自己的认证权限</li>\n</ul>\n<p>默认情况下Apple给我们提供了三个有意义的目录，它们分别是：</p>\n<ul>\n<li>Documents</li>\n<li>Library</li>\n<li>tmp</li>\n</ul>\n<p><code>Documents</code>，Apple建议将程序中创建或者程序中浏览的数据存储在此，iTunes会备份和恢复时会包含此目录。<code>Library</code>用来存储默认的数据或者状态，tmp用来存储临时文件（iOS会随时清除）。</p>\n<p>一般情况下，我们都使用<code>NSSearchPathForDirectoriesInDomains</code>来获取沙盒路径。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">let</span> cacheDirPath:<span class=\"type\">NSString</span> = <span class=\"type\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"type\">NSSearchPathDirectory</span>.<span class=\"type\">CachesDirectory</span>, <span class=\"type\">NSSearchPathDomainMask</span>.<span class=\"type\">UserDomainMask</span>, <span class=\"literal\">true</span>)[<span class=\"number\">0</span>] <span class=\"keyword\">as</span> <span class=\"type\">NSString</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">let</span> docDirPath:<span class=\"type\">NSString</span> = <span class=\"type\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"type\">NSSearchPathDirectory</span>.<span class=\"type\">DocumentDirectory</span>, <span class=\"type\">NSSearchPathDomainMask</span>.<span class=\"type\">UserDomainMask</span>, <span class=\"literal\">true</span>)[<span class=\"number\">0</span>] <span class=\"keyword\">as</span> <span class=\"type\">NSString</span></span><br></pre></td></tr></table></figure>\n<p><strong>NSFileManager</strong></p>\n<p>NSFileManager提供了一系列的操作，包括有创建，删除，移动，查询等等。获取此对象，可以使用一个静态方法来获取单例，或者实例化一个NSFileManager对象。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> manager:<span class=\"type\">NSFileManager</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">NSFileManager</span>.defaultManager()</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p>判断文件是否存在：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.manager.fileExistsAtPath(rmPath)</span><br></pre></td></tr></table></figure>\n<p>创建一个文件：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.manager.createFileAtPath(file.path!,contents: data, attributes:<span class=\"literal\">nil</span>)</span><br></pre></td></tr></table></figure>\n<p>删除一个已经存在的文件：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.manager.removeItemAtPath(rmPath)</span><br></pre></td></tr></table></figure>\n<p>移动一个文件：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.valiantCenter.manager.moveItemAtPath(fromPath, toPath: <span class=\"keyword\">self</span>.info.saveZipPath)</span><br></pre></td></tr></table></figure>\n<p>有一点在Swift2.0之后需要注意，现在的错误处理已经变成了do…catch机制，所以不管是删除还是移动，都需要try的配合。当然，关于NSFileManager的API肯定不是只有这么点，它还包括了搜索文件，深递归目录下所有的文件等等，详细的API信息，需要你自己慢慢去查看了。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> <span class=\"keyword\">self</span>.valiantCenter.manager.moveItemAtPath(fromPath, toPath: <span class=\"keyword\">self</span>.info.saveZipPath)</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.finishDownloadZipTask()</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">self</span>.addContext(<span class=\"type\">ValiantError</span>(reason: <span class=\"string\">\"下载成功：\\(self.id) 移动临时数据到保存目录错误：\\(self.info.saveZipPath)\"</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>NSInputStream|NSOutputStream</strong></p>\n<p>关于流操作大部分还是会应用在网络方面，比如要将一个很大的文件传送给服务器，那么NSInputStream这时候就是很好的选择，这样会节省很多内存。使用它来单纯的操作文件会比较少，那么操作文件，我们主要使用cocoa提供的<code>NSInputStream</code>类来帮助我们更简单的操作流。</p>\n<p>一般情况下从<code>NSInputStream</code>读入数据需要下列几个步骤：</p>\n<ul>\n<li>创建一个<code>NSInputStream</code>实例</li>\n<li>通过流对象的Delegate处理一些<code>状况事件</code></li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stream = <span class=\"type\">NSInputStream</span>.inputStreamWithFileAtPath(<span class=\"string\">\"file.txt\"</span>)</span><br><span class=\"line\">stream.read(<span class=\"number\">_</span> buffer: <span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">UInt8</span>&gt;,</span><br><span class=\"line\">maxLength len: <span class=\"type\">Int</span>)</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>一个应用程序，总会有些文件需要操作。</p>\n<p>在iOS中文件操作主要分为两个部分，获取地址，然后操作文件：</p>\n<ul>\n<li>如果你的文件资源在bundle内，那么需要获取bundle。</li>\n<li>如果你的文件资源在沙盒内，那么需要获取沙盒地址。</li>\n<li>NSFileManager操作或者流操作。</li>\n</ul>\n<p><strong>bundle</strong></p>\n<p>bundle是一个目录，其中包含了很多资源，有图片，编译好的源代码等等（也可以自己拖动任意文件到Xcode中，它就在此bundle之下。），cocoa提供了NSBundle类来帮助我们获取bundle下的资源。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bundle = <span class=\"type\">NSBundle</span>.mainBundle()</span><br><span class=\"line\"><span class=\"keyword\">let</span> imagePath = bundle.pathForResource(<span class=\"string\">\"github\"</span>,<span class=\"string\">\"png\"</span>)</span><br></pre></td></tr></table></figure>\n<p>一般情况下，我们是通过<code>mainBundle</code>来获取bundle对象，当然你也可以自己指定bundle对象。</p>\n<p><strong>沙盒机制</strong></p>\n<p>iOS中的应用程序，每一个都有其自己访问的<code>作用域</code>，它有一些非常显著的特点：</p>\n<ul>\n<li>每个应用程序都有自己的存储空间</li>\n<li>每个应用程序都只能访问自己存储空间内的资源</li>\n<li>每个应用程序请求数据时都需要有自己的认证权限</li>\n</ul>\n<p>默认情况下Apple给我们提供了三个有意义的目录，它们分别是：</p>\n<ul>\n<li>Documents</li>\n<li>Library</li>\n<li>tmp</li>\n</ul>\n<p><code>Documents</code>，Apple建议将程序中创建或者程序中浏览的数据存储在此，iTunes会备份和恢复时会包含此目录。<code>Library</code>用来存储默认的数据或者状态，tmp用来存储临时文件（iOS会随时清除）。</p>\n<p>一般情况下，我们都使用<code>NSSearchPathForDirectoriesInDomains</code>来获取沙盒路径。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">let</span> cacheDirPath:<span class=\"type\">NSString</span> = <span class=\"type\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"type\">NSSearchPathDirectory</span>.<span class=\"type\">CachesDirectory</span>, <span class=\"type\">NSSearchPathDomainMask</span>.<span class=\"type\">UserDomainMask</span>, <span class=\"literal\">true</span>)[<span class=\"number\">0</span>] <span class=\"keyword\">as</span> <span class=\"type\">NSString</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">let</span> docDirPath:<span class=\"type\">NSString</span> = <span class=\"type\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"type\">NSSearchPathDirectory</span>.<span class=\"type\">DocumentDirectory</span>, <span class=\"type\">NSSearchPathDomainMask</span>.<span class=\"type\">UserDomainMask</span>, <span class=\"literal\">true</span>)[<span class=\"number\">0</span>] <span class=\"keyword\">as</span> <span class=\"type\">NSString</span></span><br></pre></td></tr></table></figure>\n<p><strong>NSFileManager</strong></p>\n<p>NSFileManager提供了一系列的操作，包括有创建，删除，移动，查询等等。获取此对象，可以使用一个静态方法来获取单例，或者实例化一个NSFileManager对象。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> manager:<span class=\"type\">NSFileManager</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">NSFileManager</span>.defaultManager()</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p>判断文件是否存在：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.manager.fileExistsAtPath(rmPath)</span><br></pre></td></tr></table></figure>\n<p>创建一个文件：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.manager.createFileAtPath(file.path!,contents: data, attributes:<span class=\"literal\">nil</span>)</span><br></pre></td></tr></table></figure>\n<p>删除一个已经存在的文件：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.manager.removeItemAtPath(rmPath)</span><br></pre></td></tr></table></figure>\n<p>移动一个文件：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.valiantCenter.manager.moveItemAtPath(fromPath, toPath: <span class=\"keyword\">self</span>.info.saveZipPath)</span><br></pre></td></tr></table></figure>\n<p>有一点在Swift2.0之后需要注意，现在的错误处理已经变成了do…catch机制，所以不管是删除还是移动，都需要try的配合。当然，关于NSFileManager的API肯定不是只有这么点，它还包括了搜索文件，深递归目录下所有的文件等等，详细的API信息，需要你自己慢慢去查看了。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> <span class=\"keyword\">self</span>.valiantCenter.manager.moveItemAtPath(fromPath, toPath: <span class=\"keyword\">self</span>.info.saveZipPath)</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.finishDownloadZipTask()</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">self</span>.addContext(<span class=\"type\">ValiantError</span>(reason: <span class=\"string\">\"下载成功：\\(self.id) 移动临时数据到保存目录错误：\\(self.info.saveZipPath)\"</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>NSInputStream|NSOutputStream</strong></p>\n<p>关于流操作大部分还是会应用在网络方面，比如要将一个很大的文件传送给服务器，那么NSInputStream这时候就是很好的选择，这样会节省很多内存。使用它来单纯的操作文件会比较少，那么操作文件，我们主要使用cocoa提供的<code>NSInputStream</code>类来帮助我们更简单的操作流。</p>\n<p>一般情况下从<code>NSInputStream</code>读入数据需要下列几个步骤：</p>\n<ul>\n<li>创建一个<code>NSInputStream</code>实例</li>\n<li>通过流对象的Delegate处理一些<code>状况事件</code></li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stream = <span class=\"type\">NSInputStream</span>.inputStreamWithFileAtPath(<span class=\"string\">\"file.txt\"</span>)</span><br><span class=\"line\">stream.read(<span class=\"number\">_</span> buffer: <span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">UInt8</span>&gt;,</span><br><span class=\"line\">maxLength len: <span class=\"type\">Int</span>)</span><br></pre></td></tr></table></figure>\n"},{"title":"GCD（Swift）","date":"2015-12-21T03:37:35.000Z","_content":"\nGCD是基于C API开发的一套库，苹果公司将它应用在（iOS或者OS X）上，为我们极大的方便来处理并发代码。\n\n`能为我们带来什么？`\n\n- GCD 能通过推迟昂贵计算任务并在后台运行它们来改善你的应用的响应性能。\n- GCD 提供一个易于使用的并发模型而不仅仅只是锁和线程，以帮助我们避开并发陷阱。\n- GCD 具有在常见模式（例如单例）上用更高性能的原语优化你的代码的潜在能力。\n\n为了理解GCD你还需要理解一些概念性的东西，比如什么是串行，什么是并行，什么是临界区，什么是竞态条件。\n\n关于这些概念，推荐一本书[《操作系统:精髓与设计原理》](http://www.amazon.cn/gp/product/B0041859AI?psc=1&ref_=oh_aui_detailpage_o07_s00)，我且当你知道并且了解。\n\nApple帮助我们定义好了两个常量来创建`串行`，`并行`的GCD任务：\n\n- DISPATCH_QUEUE_SERIAL  串行\n- DISPATCH_QUEUE_CONCURRENT 并行\n\n利用`dispatch_..._...`可以轻松的创建这些任务，如图：\n\n![GCD创建的多任务](https://raw.githubusercontent.com/icepy/_posts/master/img/GCDdebug.png)\n\nDemo例子基于Swift 2.1 Xcode 7.2 编写，可在此处[查看](https://github.com/icepy/_posts/blob/master/demo/GCD/GCD/ViewController.swift)\n\n**将一个block提交到主线程中执行**\n\n通过`dispatch_get_main_queue`来获取主线程队列。\n\n```Swift\ndispatch_async(dispatch_get_main_queue()){\n    [unowned self] _ in\n    let myPhoneMain:String = \"main queue iPhone\";\n    print(\"main queue is \\(myPhoneMain)\")\n}\n```\n\n**将一个block提交到串行任务队列中**\n\n```Swift\nlet window:dispatch_queue_t = dispatch_queue_create(\"com.wen.window\", DISPATCH_QUEUE_SERIAL)\ndispatch_async(window){\n    [unowned self] _ in\n    let myWindow:String = \"window 7\"\n    print(\"我的电脑操作系统：\\(myWindow)\")\n}\n```\n\n**将一个block提交到并行任务队列中**\n\n```Swift\nlet phone:dispatch_queue_t = dispatch_queue_create(\"com.wen.iphone\", DISPATCH_QUEUE_CONCURRENT)\ndispatch_async(phone){\n    [unowned self] _ in\n\n    let myPhone:String = \"iPhone 6 Plus\"\n    print(\"my Phone is \\(myPhone)\")\n\n    //切换到主线程\n    dispatch_async(dispatch_get_main_queue()){\n        [unowned self] _ in\n        let myPhoneMain:String = \"main queue iPhone\";\n        print(\"main queue is \\(myPhoneMain)\")\n    }\n}\n```\n\n**将一个block提交到延迟任务队列中**\n\n`dispatch_after`可以帮助我们延时提交`block`到任务队列，当我们创建`dispatch_time_t`变量时稍微注意一下即可：\n\n- NSEC_PER_SEC 一秒有多少纳秒\n- USEC_PER_SEC 一秒有多少毫秒\n- NSEC_PER_USEC 一毫秒有多少纳秒\n\n```Swift\nlet exeTime:dispatch_time_t = dispatch_time(DISPATCH_TIME_NOW, 10)\nlet mac:dispatch_queue_t = dispatch_queue_create(\"com.wen.mac\", DISPATCH_QUEUE_CONCURRENT)\ndispatch_after(exeTime, mac){\n    [unowned self] _ in\n\n    let myMac:String = \"MacBook Pro\"\n    print(\"my mac is \\(myMac)\")\n}\n```\n\n**将一个block提交到只执行一次的任务中**\n\n这个非常适合做`单例`，唯一需要注意的地方是，`dispatch_once_t`最好是全局或者static变量，因为调试的时候不会出现稀奇古怪的问题。\n\n```Swift\nstruct oneToken{\n    static var onePred:String? = nil\n    static var toKen:dispatch_once_t = 0;\n}\ndispatch_once(&oneToken.toKen){\n    [unowned self] _ in\n    oneToken.onePred = \"icepy\"\n}\nprint(\"once pred is \\(oneToken.onePred)\")\n```\n\n**将block挂起或者恢复**\n\n虽然此处可以挂起，但是并不能保证可以立即停止队列中正在运行的block，所以没法更精准的控制block。\n\n```Swift\nlet icepy:dispatch_queue_t = dispatch_queue_create(\"com.wen.suspend\", DISPATCH_QUEUE_SERIAL)\ndispatch_async(icepy){\n    NSThread.sleepForTimeInterval(8)\n    let callback:String = \"Swift ---\"\n    print(\"延迟执行第一个提交:\\(callback)\")\n}\ndispatch_async(icepy){\n    NSThread.sleepForTimeInterval(8)\n    let callback:String = \"Objective-C ---\"\n    print(\"延迟执行第二个提交:\\(callback)\")\n}\n\n\nprint(\"延迟1秒\")\nNSThread.sleepForTimeInterval(1)\nprint(\"--- 挂起\")\ndispatch_suspend(icepy)\n\nprint(\"延迟10秒\")\nNSThread.sleepForTimeInterval(8)\nprint(\"--- 恢复\")\ndispatch_resume(icepy)\n```\n\n**向一个队列添加多个block**\n\n`dispatch_apply`有一个毛病，就是会阻塞外部线程，所以如果要使用还需要注意。\n\n```Swift\nlet more:dispatch_queue_t = dispatch_queue_create(\"com.wen.more\", DISPATCH_QUEUE_SERIAL)\ndispatch_apply(3, more){\n    [unowned self] (i:Int) -> Void in\n\n    print(\"apply loop \\(i)\")\n}\nprint(\"after apply\")\n```\n\n**dispatch_group**\n\n创建一个`dispatch_group`分为三步：\n\n- 创建`dispatch_group_t`\n- 创建`dispatch_queue_t`并使用`dispatch_group_async`将`dispatch_queue_t`添加到group中\n- 添加结束任务，比如`dispatch_group_notify`\n\n```Swift\nlet group:dispatch_group_t = dispatch_group_create()\nlet thread1:dispatch_queue_t = dispatch_queue_create(\"com.wen.thread1\", DISPATCH_QUEUE_CONCURRENT)\nlet thread2:dispatch_queue_t = dispatch_queue_create(\"com.wen.thread2\", DISPATCH_QUEUE_CONCURRENT)\nlet notify:dispatch_queue_t = dispatch_queue_create(\"com.wen.notify\", DISPATCH_QUEUE_SERIAL)\ndispatch_group_async(group, thread1){\n    _ in\n    let myBook:String = \"JavaScript\"\n    print(\"my book is \\(myBook)\")\n}\n\ndispatch_group_async(group, thread2){\n    _ in\n    let myBook:String = \"Swift\"\n    print(\"my book is \\(myBook)\")\n}\ndispatch_group_notify(group, notify){\n    _ in\n    let myPro:String = \"web developer and iOS developer\"\n    print(\"my pro is \\(myPro)\")\n}\n```\n\n**避免死锁**\n\n说到死锁，让我想起来一个`笑话`，心里嘿嘿笑一笑就好。如果使用同步的方法`dispatch_sync(<#T##queue: dispatch_queue_t##dispatch_queue_t#>, <#T##block: dispatch_block_t##dispatch_block_t##() -> Void#>)`稍微不注意，就要恭喜你中奖了：\n\n```Swift\nfunc send(){\n    dispatch_sync(dispatch_get_main_queue()){\n        _ in\n        //恭喜\n    }\n}\n\ndispatch_sync(dispatch_get_main_queue()){\n\n    _ in\n    send()\n}\n```\n","source":"_posts/swift-gcd.md","raw":"title: GCD（Swift）\ndate: 2015-12-21 11:37:35\ntags: Swift\n---\n\nGCD是基于C API开发的一套库，苹果公司将它应用在（iOS或者OS X）上，为我们极大的方便来处理并发代码。\n\n`能为我们带来什么？`\n\n- GCD 能通过推迟昂贵计算任务并在后台运行它们来改善你的应用的响应性能。\n- GCD 提供一个易于使用的并发模型而不仅仅只是锁和线程，以帮助我们避开并发陷阱。\n- GCD 具有在常见模式（例如单例）上用更高性能的原语优化你的代码的潜在能力。\n\n为了理解GCD你还需要理解一些概念性的东西，比如什么是串行，什么是并行，什么是临界区，什么是竞态条件。\n\n关于这些概念，推荐一本书[《操作系统:精髓与设计原理》](http://www.amazon.cn/gp/product/B0041859AI?psc=1&ref_=oh_aui_detailpage_o07_s00)，我且当你知道并且了解。\n\nApple帮助我们定义好了两个常量来创建`串行`，`并行`的GCD任务：\n\n- DISPATCH_QUEUE_SERIAL  串行\n- DISPATCH_QUEUE_CONCURRENT 并行\n\n利用`dispatch_..._...`可以轻松的创建这些任务，如图：\n\n![GCD创建的多任务](https://raw.githubusercontent.com/icepy/_posts/master/img/GCDdebug.png)\n\nDemo例子基于Swift 2.1 Xcode 7.2 编写，可在此处[查看](https://github.com/icepy/_posts/blob/master/demo/GCD/GCD/ViewController.swift)\n\n**将一个block提交到主线程中执行**\n\n通过`dispatch_get_main_queue`来获取主线程队列。\n\n```Swift\ndispatch_async(dispatch_get_main_queue()){\n    [unowned self] _ in\n    let myPhoneMain:String = \"main queue iPhone\";\n    print(\"main queue is \\(myPhoneMain)\")\n}\n```\n\n**将一个block提交到串行任务队列中**\n\n```Swift\nlet window:dispatch_queue_t = dispatch_queue_create(\"com.wen.window\", DISPATCH_QUEUE_SERIAL)\ndispatch_async(window){\n    [unowned self] _ in\n    let myWindow:String = \"window 7\"\n    print(\"我的电脑操作系统：\\(myWindow)\")\n}\n```\n\n**将一个block提交到并行任务队列中**\n\n```Swift\nlet phone:dispatch_queue_t = dispatch_queue_create(\"com.wen.iphone\", DISPATCH_QUEUE_CONCURRENT)\ndispatch_async(phone){\n    [unowned self] _ in\n\n    let myPhone:String = \"iPhone 6 Plus\"\n    print(\"my Phone is \\(myPhone)\")\n\n    //切换到主线程\n    dispatch_async(dispatch_get_main_queue()){\n        [unowned self] _ in\n        let myPhoneMain:String = \"main queue iPhone\";\n        print(\"main queue is \\(myPhoneMain)\")\n    }\n}\n```\n\n**将一个block提交到延迟任务队列中**\n\n`dispatch_after`可以帮助我们延时提交`block`到任务队列，当我们创建`dispatch_time_t`变量时稍微注意一下即可：\n\n- NSEC_PER_SEC 一秒有多少纳秒\n- USEC_PER_SEC 一秒有多少毫秒\n- NSEC_PER_USEC 一毫秒有多少纳秒\n\n```Swift\nlet exeTime:dispatch_time_t = dispatch_time(DISPATCH_TIME_NOW, 10)\nlet mac:dispatch_queue_t = dispatch_queue_create(\"com.wen.mac\", DISPATCH_QUEUE_CONCURRENT)\ndispatch_after(exeTime, mac){\n    [unowned self] _ in\n\n    let myMac:String = \"MacBook Pro\"\n    print(\"my mac is \\(myMac)\")\n}\n```\n\n**将一个block提交到只执行一次的任务中**\n\n这个非常适合做`单例`，唯一需要注意的地方是，`dispatch_once_t`最好是全局或者static变量，因为调试的时候不会出现稀奇古怪的问题。\n\n```Swift\nstruct oneToken{\n    static var onePred:String? = nil\n    static var toKen:dispatch_once_t = 0;\n}\ndispatch_once(&oneToken.toKen){\n    [unowned self] _ in\n    oneToken.onePred = \"icepy\"\n}\nprint(\"once pred is \\(oneToken.onePred)\")\n```\n\n**将block挂起或者恢复**\n\n虽然此处可以挂起，但是并不能保证可以立即停止队列中正在运行的block，所以没法更精准的控制block。\n\n```Swift\nlet icepy:dispatch_queue_t = dispatch_queue_create(\"com.wen.suspend\", DISPATCH_QUEUE_SERIAL)\ndispatch_async(icepy){\n    NSThread.sleepForTimeInterval(8)\n    let callback:String = \"Swift ---\"\n    print(\"延迟执行第一个提交:\\(callback)\")\n}\ndispatch_async(icepy){\n    NSThread.sleepForTimeInterval(8)\n    let callback:String = \"Objective-C ---\"\n    print(\"延迟执行第二个提交:\\(callback)\")\n}\n\n\nprint(\"延迟1秒\")\nNSThread.sleepForTimeInterval(1)\nprint(\"--- 挂起\")\ndispatch_suspend(icepy)\n\nprint(\"延迟10秒\")\nNSThread.sleepForTimeInterval(8)\nprint(\"--- 恢复\")\ndispatch_resume(icepy)\n```\n\n**向一个队列添加多个block**\n\n`dispatch_apply`有一个毛病，就是会阻塞外部线程，所以如果要使用还需要注意。\n\n```Swift\nlet more:dispatch_queue_t = dispatch_queue_create(\"com.wen.more\", DISPATCH_QUEUE_SERIAL)\ndispatch_apply(3, more){\n    [unowned self] (i:Int) -> Void in\n\n    print(\"apply loop \\(i)\")\n}\nprint(\"after apply\")\n```\n\n**dispatch_group**\n\n创建一个`dispatch_group`分为三步：\n\n- 创建`dispatch_group_t`\n- 创建`dispatch_queue_t`并使用`dispatch_group_async`将`dispatch_queue_t`添加到group中\n- 添加结束任务，比如`dispatch_group_notify`\n\n```Swift\nlet group:dispatch_group_t = dispatch_group_create()\nlet thread1:dispatch_queue_t = dispatch_queue_create(\"com.wen.thread1\", DISPATCH_QUEUE_CONCURRENT)\nlet thread2:dispatch_queue_t = dispatch_queue_create(\"com.wen.thread2\", DISPATCH_QUEUE_CONCURRENT)\nlet notify:dispatch_queue_t = dispatch_queue_create(\"com.wen.notify\", DISPATCH_QUEUE_SERIAL)\ndispatch_group_async(group, thread1){\n    _ in\n    let myBook:String = \"JavaScript\"\n    print(\"my book is \\(myBook)\")\n}\n\ndispatch_group_async(group, thread2){\n    _ in\n    let myBook:String = \"Swift\"\n    print(\"my book is \\(myBook)\")\n}\ndispatch_group_notify(group, notify){\n    _ in\n    let myPro:String = \"web developer and iOS developer\"\n    print(\"my pro is \\(myPro)\")\n}\n```\n\n**避免死锁**\n\n说到死锁，让我想起来一个`笑话`，心里嘿嘿笑一笑就好。如果使用同步的方法`dispatch_sync(<#T##queue: dispatch_queue_t##dispatch_queue_t#>, <#T##block: dispatch_block_t##dispatch_block_t##() -> Void#>)`稍微不注意，就要恭喜你中奖了：\n\n```Swift\nfunc send(){\n    dispatch_sync(dispatch_get_main_queue()){\n        _ in\n        //恭喜\n    }\n}\n\ndispatch_sync(dispatch_get_main_queue()){\n\n    _ in\n    send()\n}\n```\n","slug":"swift-gcd","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk1e001buejrk57s6xu4","content":"<p>GCD是基于C API开发的一套库，苹果公司将它应用在（iOS或者OS X）上，为我们极大的方便来处理并发代码。</p>\n<p><code>能为我们带来什么？</code></p>\n<ul>\n<li>GCD 能通过推迟昂贵计算任务并在后台运行它们来改善你的应用的响应性能。</li>\n<li>GCD 提供一个易于使用的并发模型而不仅仅只是锁和线程，以帮助我们避开并发陷阱。</li>\n<li>GCD 具有在常见模式（例如单例）上用更高性能的原语优化你的代码的潜在能力。</li>\n</ul>\n<p>为了理解GCD你还需要理解一些概念性的东西，比如什么是串行，什么是并行，什么是临界区，什么是竞态条件。</p>\n<p>关于这些概念，推荐一本书<a href=\"http://www.amazon.cn/gp/product/B0041859AI?psc=1&amp;ref_=oh_aui_detailpage_o07_s00\" target=\"_blank\" rel=\"external\">《操作系统:精髓与设计原理》</a>，我且当你知道并且了解。</p>\n<p>Apple帮助我们定义好了两个常量来创建<code>串行</code>，<code>并行</code>的GCD任务：</p>\n<ul>\n<li>DISPATCH_QUEUE_SERIAL  串行</li>\n<li>DISPATCH_QUEUE_CONCURRENT 并行</li>\n</ul>\n<p>利用<code>dispatch_..._...</code>可以轻松的创建这些任务，如图：</p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/GCDdebug.png\" alt=\"GCD创建的多任务\"></p>\n<p>Demo例子基于Swift 2.1 Xcode 7.2 编写，可在此处<a href=\"https://github.com/icepy/_posts/blob/master/demo/GCD/GCD/ViewController.swift\" target=\"_blank\" rel=\"external\">查看</a></p>\n<p><strong>将一个block提交到主线程中执行</strong></p>\n<p>通过<code>dispatch_get_main_queue</code>来获取主线程队列。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_async(dispatch_get_main_queue())&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> myPhoneMain:<span class=\"type\">String</span> = <span class=\"string\">\"main queue iPhone\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"main queue is \\(myPhoneMain)\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>将一个block提交到串行任务队列中</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> window:dispatch_queue_t = dispatch_queue_create(<span class=\"string\">\"com.wen.window\"</span>, <span class=\"type\">DISPATCH_QUEUE_SERIAL</span>)</span><br><span class=\"line\">dispatch_async(window)&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> myWindow:<span class=\"type\">String</span> = <span class=\"string\">\"window 7\"</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"我的电脑操作系统：\\(myWindow)\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>将一个block提交到并行任务队列中</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> phone:dispatch_queue_t = dispatch_queue_create(<span class=\"string\">\"com.wen.iphone\"</span>, <span class=\"type\">DISPATCH_QUEUE_CONCURRENT</span>)</span><br><span class=\"line\">dispatch_async(phone)&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> myPhone:<span class=\"type\">String</span> = <span class=\"string\">\"iPhone 6 Plus\"</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"my Phone is \\(myPhone)\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//切换到主线程</span></span><br><span class=\"line\">    dispatch_async(dispatch_get_main_queue())&#123;</span><br><span class=\"line\">        [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> myPhoneMain:<span class=\"type\">String</span> = <span class=\"string\">\"main queue iPhone\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"main queue is \\(myPhoneMain)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>将一个block提交到延迟任务队列中</strong></p>\n<p><code>dispatch_after</code>可以帮助我们延时提交<code>block</code>到任务队列，当我们创建<code>dispatch_time_t</code>变量时稍微注意一下即可：</p>\n<ul>\n<li>NSEC_PER_SEC 一秒有多少纳秒</li>\n<li>USEC_PER_SEC 一秒有多少毫秒</li>\n<li>NSEC_PER_USEC 一毫秒有多少纳秒</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> exeTime:dispatch_time_t = dispatch_time(<span class=\"type\">DISPATCH_TIME_NOW</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> mac:dispatch_queue_t = dispatch_queue_create(<span class=\"string\">\"com.wen.mac\"</span>, <span class=\"type\">DISPATCH_QUEUE_CONCURRENT</span>)</span><br><span class=\"line\">dispatch_after(exeTime, mac)&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> myMac:<span class=\"type\">String</span> = <span class=\"string\">\"MacBook Pro\"</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"my mac is \\(myMac)\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>将一个block提交到只执行一次的任务中</strong></p>\n<p>这个非常适合做<code>单例</code>，唯一需要注意的地方是，<code>dispatch_once_t</code>最好是全局或者static变量，因为调试的时候不会出现稀奇古怪的问题。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">oneToken</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> onePred:<span class=\"type\">String</span>? = <span class=\"literal\">nil</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> toKen:dispatch_once_t = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dispatch_once(&amp;oneToken.toKen)&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    oneToken.onePred = <span class=\"string\">\"icepy\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"once pred is \\(oneToken.onePred)\"</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>将block挂起或者恢复</strong></p>\n<p>虽然此处可以挂起，但是并不能保证可以立即停止队列中正在运行的block，所以没法更精准的控制block。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> icepy:dispatch_queue_t = dispatch_queue_create(<span class=\"string\">\"com.wen.suspend\"</span>, <span class=\"type\">DISPATCH_QUEUE_SERIAL</span>)</span><br><span class=\"line\">dispatch_async(icepy)&#123;</span><br><span class=\"line\">    <span class=\"type\">NSThread</span>.sleepForTimeInterval(<span class=\"number\">8</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> callback:<span class=\"type\">String</span> = <span class=\"string\">\"Swift ---\"</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"延迟执行第一个提交:\\(callback)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dispatch_async(icepy)&#123;</span><br><span class=\"line\">    <span class=\"type\">NSThread</span>.sleepForTimeInterval(<span class=\"number\">8</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> callback:<span class=\"type\">String</span> = <span class=\"string\">\"Objective-C ---\"</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"延迟执行第二个提交:\\(callback)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"延迟1秒\"</span>)</span><br><span class=\"line\"><span class=\"type\">NSThread</span>.sleepForTimeInterval(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"--- 挂起\"</span>)</span><br><span class=\"line\">dispatch_suspend(icepy)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"延迟10秒\"</span>)</span><br><span class=\"line\"><span class=\"type\">NSThread</span>.sleepForTimeInterval(<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"--- 恢复\"</span>)</span><br><span class=\"line\">dispatch_resume(icepy)</span><br></pre></td></tr></table></figure>\n<p><strong>向一个队列添加多个block</strong></p>\n<p><code>dispatch_apply</code>有一个毛病，就是会阻塞外部线程，所以如果要使用还需要注意。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> more:dispatch_queue_t = dispatch_queue_create(<span class=\"string\">\"com.wen.more\"</span>, <span class=\"type\">DISPATCH_QUEUE_SERIAL</span>)</span><br><span class=\"line\">dispatch_apply(<span class=\"number\">3</span>, more)&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] (i:<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"apply loop \\(i)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"after apply\"</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>dispatch_group</strong></p>\n<p>创建一个<code>dispatch_group</code>分为三步：</p>\n<ul>\n<li>创建<code>dispatch_group_t</code></li>\n<li>创建<code>dispatch_queue_t</code>并使用<code>dispatch_group_async</code>将<code>dispatch_queue_t</code>添加到group中</li>\n<li>添加结束任务，比如<code>dispatch_group_notify</code></li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> group:dispatch_group_t = dispatch_group_create()</span><br><span class=\"line\"><span class=\"keyword\">let</span> thread1:dispatch_queue_t = dispatch_queue_create(<span class=\"string\">\"com.wen.thread1\"</span>, <span class=\"type\">DISPATCH_QUEUE_CONCURRENT</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> thread2:dispatch_queue_t = dispatch_queue_create(<span class=\"string\">\"com.wen.thread2\"</span>, <span class=\"type\">DISPATCH_QUEUE_CONCURRENT</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> notify:dispatch_queue_t = dispatch_queue_create(<span class=\"string\">\"com.wen.notify\"</span>, <span class=\"type\">DISPATCH_QUEUE_SERIAL</span>)</span><br><span class=\"line\">dispatch_group_async(group, thread1)&#123;</span><br><span class=\"line\">    <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> myBook:<span class=\"type\">String</span> = <span class=\"string\">\"JavaScript\"</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"my book is \\(myBook)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dispatch_group_async(group, thread2)&#123;</span><br><span class=\"line\">    <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> myBook:<span class=\"type\">String</span> = <span class=\"string\">\"Swift\"</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"my book is \\(myBook)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dispatch_group_notify(group, notify)&#123;</span><br><span class=\"line\">    <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> myPro:<span class=\"type\">String</span> = <span class=\"string\">\"web developer and iOS developer\"</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"my pro is \\(myPro)\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>避免死锁</strong></p>\n<p>说到死锁，让我想起来一个<code>笑话</code>，心里嘿嘿笑一笑就好。如果使用同步的方法<code>dispatch_sync(&lt;#T##queue: dispatch_queue_t##dispatch_queue_t#&gt;, &lt;#T##block: dispatch_block_t##dispatch_block_t##() -&gt; Void#&gt;)</code>稍微不注意，就要恭喜你中奖了：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">send</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    dispatch_sync(dispatch_get_main_queue())&#123;</span><br><span class=\"line\">        <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"comment\">//恭喜</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dispatch_sync(dispatch_get_main_queue())&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    send()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>GCD是基于C API开发的一套库，苹果公司将它应用在（iOS或者OS X）上，为我们极大的方便来处理并发代码。</p>\n<p><code>能为我们带来什么？</code></p>\n<ul>\n<li>GCD 能通过推迟昂贵计算任务并在后台运行它们来改善你的应用的响应性能。</li>\n<li>GCD 提供一个易于使用的并发模型而不仅仅只是锁和线程，以帮助我们避开并发陷阱。</li>\n<li>GCD 具有在常见模式（例如单例）上用更高性能的原语优化你的代码的潜在能力。</li>\n</ul>\n<p>为了理解GCD你还需要理解一些概念性的东西，比如什么是串行，什么是并行，什么是临界区，什么是竞态条件。</p>\n<p>关于这些概念，推荐一本书<a href=\"http://www.amazon.cn/gp/product/B0041859AI?psc=1&amp;ref_=oh_aui_detailpage_o07_s00\">《操作系统:精髓与设计原理》</a>，我且当你知道并且了解。</p>\n<p>Apple帮助我们定义好了两个常量来创建<code>串行</code>，<code>并行</code>的GCD任务：</p>\n<ul>\n<li>DISPATCH_QUEUE_SERIAL  串行</li>\n<li>DISPATCH_QUEUE_CONCURRENT 并行</li>\n</ul>\n<p>利用<code>dispatch_..._...</code>可以轻松的创建这些任务，如图：</p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/GCDdebug.png\" alt=\"GCD创建的多任务\"></p>\n<p>Demo例子基于Swift 2.1 Xcode 7.2 编写，可在此处<a href=\"https://github.com/icepy/_posts/blob/master/demo/GCD/GCD/ViewController.swift\">查看</a></p>\n<p><strong>将一个block提交到主线程中执行</strong></p>\n<p>通过<code>dispatch_get_main_queue</code>来获取主线程队列。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_async(dispatch_get_main_queue())&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> myPhoneMain:<span class=\"type\">String</span> = <span class=\"string\">\"main queue iPhone\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"main queue is \\(myPhoneMain)\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>将一个block提交到串行任务队列中</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> window:dispatch_queue_t = dispatch_queue_create(<span class=\"string\">\"com.wen.window\"</span>, <span class=\"type\">DISPATCH_QUEUE_SERIAL</span>)</span><br><span class=\"line\">dispatch_async(window)&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> myWindow:<span class=\"type\">String</span> = <span class=\"string\">\"window 7\"</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"我的电脑操作系统：\\(myWindow)\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>将一个block提交到并行任务队列中</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> phone:dispatch_queue_t = dispatch_queue_create(<span class=\"string\">\"com.wen.iphone\"</span>, <span class=\"type\">DISPATCH_QUEUE_CONCURRENT</span>)</span><br><span class=\"line\">dispatch_async(phone)&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> myPhone:<span class=\"type\">String</span> = <span class=\"string\">\"iPhone 6 Plus\"</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"my Phone is \\(myPhone)\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//切换到主线程</span></span><br><span class=\"line\">    dispatch_async(dispatch_get_main_queue())&#123;</span><br><span class=\"line\">        [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> myPhoneMain:<span class=\"type\">String</span> = <span class=\"string\">\"main queue iPhone\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"main queue is \\(myPhoneMain)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>将一个block提交到延迟任务队列中</strong></p>\n<p><code>dispatch_after</code>可以帮助我们延时提交<code>block</code>到任务队列，当我们创建<code>dispatch_time_t</code>变量时稍微注意一下即可：</p>\n<ul>\n<li>NSEC_PER_SEC 一秒有多少纳秒</li>\n<li>USEC_PER_SEC 一秒有多少毫秒</li>\n<li>NSEC_PER_USEC 一毫秒有多少纳秒</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> exeTime:dispatch_time_t = dispatch_time(<span class=\"type\">DISPATCH_TIME_NOW</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> mac:dispatch_queue_t = dispatch_queue_create(<span class=\"string\">\"com.wen.mac\"</span>, <span class=\"type\">DISPATCH_QUEUE_CONCURRENT</span>)</span><br><span class=\"line\">dispatch_after(exeTime, mac)&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> myMac:<span class=\"type\">String</span> = <span class=\"string\">\"MacBook Pro\"</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"my mac is \\(myMac)\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>将一个block提交到只执行一次的任务中</strong></p>\n<p>这个非常适合做<code>单例</code>，唯一需要注意的地方是，<code>dispatch_once_t</code>最好是全局或者static变量，因为调试的时候不会出现稀奇古怪的问题。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">oneToken</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> onePred:<span class=\"type\">String</span>? = <span class=\"literal\">nil</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> toKen:dispatch_once_t = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dispatch_once(&amp;oneToken.toKen)&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    oneToken.onePred = <span class=\"string\">\"icepy\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"once pred is \\(oneToken.onePred)\"</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>将block挂起或者恢复</strong></p>\n<p>虽然此处可以挂起，但是并不能保证可以立即停止队列中正在运行的block，所以没法更精准的控制block。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> icepy:dispatch_queue_t = dispatch_queue_create(<span class=\"string\">\"com.wen.suspend\"</span>, <span class=\"type\">DISPATCH_QUEUE_SERIAL</span>)</span><br><span class=\"line\">dispatch_async(icepy)&#123;</span><br><span class=\"line\">    <span class=\"type\">NSThread</span>.sleepForTimeInterval(<span class=\"number\">8</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> callback:<span class=\"type\">String</span> = <span class=\"string\">\"Swift ---\"</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"延迟执行第一个提交:\\(callback)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dispatch_async(icepy)&#123;</span><br><span class=\"line\">    <span class=\"type\">NSThread</span>.sleepForTimeInterval(<span class=\"number\">8</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> callback:<span class=\"type\">String</span> = <span class=\"string\">\"Objective-C ---\"</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"延迟执行第二个提交:\\(callback)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"延迟1秒\"</span>)</span><br><span class=\"line\"><span class=\"type\">NSThread</span>.sleepForTimeInterval(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"--- 挂起\"</span>)</span><br><span class=\"line\">dispatch_suspend(icepy)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"延迟10秒\"</span>)</span><br><span class=\"line\"><span class=\"type\">NSThread</span>.sleepForTimeInterval(<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"--- 恢复\"</span>)</span><br><span class=\"line\">dispatch_resume(icepy)</span><br></pre></td></tr></table></figure>\n<p><strong>向一个队列添加多个block</strong></p>\n<p><code>dispatch_apply</code>有一个毛病，就是会阻塞外部线程，所以如果要使用还需要注意。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> more:dispatch_queue_t = dispatch_queue_create(<span class=\"string\">\"com.wen.more\"</span>, <span class=\"type\">DISPATCH_QUEUE_SERIAL</span>)</span><br><span class=\"line\">dispatch_apply(<span class=\"number\">3</span>, more)&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] (i:<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"apply loop \\(i)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"after apply\"</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>dispatch_group</strong></p>\n<p>创建一个<code>dispatch_group</code>分为三步：</p>\n<ul>\n<li>创建<code>dispatch_group_t</code></li>\n<li>创建<code>dispatch_queue_t</code>并使用<code>dispatch_group_async</code>将<code>dispatch_queue_t</code>添加到group中</li>\n<li>添加结束任务，比如<code>dispatch_group_notify</code></li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> group:dispatch_group_t = dispatch_group_create()</span><br><span class=\"line\"><span class=\"keyword\">let</span> thread1:dispatch_queue_t = dispatch_queue_create(<span class=\"string\">\"com.wen.thread1\"</span>, <span class=\"type\">DISPATCH_QUEUE_CONCURRENT</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> thread2:dispatch_queue_t = dispatch_queue_create(<span class=\"string\">\"com.wen.thread2\"</span>, <span class=\"type\">DISPATCH_QUEUE_CONCURRENT</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> notify:dispatch_queue_t = dispatch_queue_create(<span class=\"string\">\"com.wen.notify\"</span>, <span class=\"type\">DISPATCH_QUEUE_SERIAL</span>)</span><br><span class=\"line\">dispatch_group_async(group, thread1)&#123;</span><br><span class=\"line\">    <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> myBook:<span class=\"type\">String</span> = <span class=\"string\">\"JavaScript\"</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"my book is \\(myBook)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dispatch_group_async(group, thread2)&#123;</span><br><span class=\"line\">    <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> myBook:<span class=\"type\">String</span> = <span class=\"string\">\"Swift\"</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"my book is \\(myBook)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dispatch_group_notify(group, notify)&#123;</span><br><span class=\"line\">    <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> myPro:<span class=\"type\">String</span> = <span class=\"string\">\"web developer and iOS developer\"</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"my pro is \\(myPro)\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>避免死锁</strong></p>\n<p>说到死锁，让我想起来一个<code>笑话</code>，心里嘿嘿笑一笑就好。如果使用同步的方法<code>dispatch_sync(&lt;#T##queue: dispatch_queue_t##dispatch_queue_t#&gt;, &lt;#T##block: dispatch_block_t##dispatch_block_t##() -&gt; Void#&gt;)</code>稍微不注意，就要恭喜你中奖了：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">send</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    dispatch_sync(dispatch_get_main_queue())&#123;</span><br><span class=\"line\">        <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"comment\">//恭喜</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dispatch_sync(dispatch_get_main_queue())&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    send()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"lazy修饰符","date":"2015-11-22T03:43:09.000Z","_content":"\n**源代码基于 Swift 2.1+ Xcode 7.1.1编写**\n\n大家都知道延迟加载或者说延迟初始化是很常用的一个优化方式，因为在构建和生成新的对象时，在运行时分配内存的时候会耗费不少时间，如果初始化的一些对象特别复杂，有大量的计算动作，那么这显然不可忽略了。\n\n为了达到这样的目的，在Objective-C中，我们可以如此进行延迟一个对象的初始化：\n\n```Objective-C\n//WebViewBridge.h\n//伪代码\n@property(nonatomic, strong) WebViewJavascriptBridge *bridge;\n\n//WebViewBridge.m\n-(WebViewJavascriptBridge *)bridge\n{\n    if (!_bridge) {\n        _bridge = [WebViewJavascriptBridge bridgeForWebView:self.webview webViewDelegate:self handler:^(id data, WVJBResponseCallback responseCallback) {\n            responseCallback(@\"启动 webview bridge\");\n        }];\n    }\n    return _bridge;\n}\n```\n在初始化WebViewBridge对象时，_bridge是个nil，当我首次调用时bridge属性会调用它的getter方法，从逻辑上就可以看出，它会检查_bridge，如果还未初始化，就进行初始化，如果已经初始化，就返回_bridge。\n\n而在Swift中这一逻辑判断减少成了一个修饰符`lazy`，没错非常简单的完成了延迟初始化。\n\n```swift\nlazy var bridge:WebViewJavascriptBridge = {\n    return WebViewJavascriptBridge(forWebView: self.webview, webViewDelegate: self, handler: { (data, WVJBResponseCallback) -> Void in\n\n    })\n}()\n```\n当然，在Swift中使用lazy还有一些限制，如下：\n\n- 只能声明变量，不能使用let\n- 需要指定变量的类型\n- 显示的执行的这个闭包\n\n其实，还有一个非常有意思的特性，标准库中，提供了一组lazy的方法，可以去延迟，比如数组的map，filter等操作\n\n```Swift\nlet data = 1...3  \nlet result = data.lazy.map {  \n    (i: Int) -> Int in\n    print(\"处理 \\(i)\")\n    return i * 2\n}\nfor i in result {  \n    print(\"操作后结果为 \\(i)\")\n}\nprint(\"操作结束\")  \n```\n","source":"_posts/swift-lazy.md","raw":"title: lazy修饰符\ndate: 2015-11-22 11:43:09\ntags: Swift\n---\n\n**源代码基于 Swift 2.1+ Xcode 7.1.1编写**\n\n大家都知道延迟加载或者说延迟初始化是很常用的一个优化方式，因为在构建和生成新的对象时，在运行时分配内存的时候会耗费不少时间，如果初始化的一些对象特别复杂，有大量的计算动作，那么这显然不可忽略了。\n\n为了达到这样的目的，在Objective-C中，我们可以如此进行延迟一个对象的初始化：\n\n```Objective-C\n//WebViewBridge.h\n//伪代码\n@property(nonatomic, strong) WebViewJavascriptBridge *bridge;\n\n//WebViewBridge.m\n-(WebViewJavascriptBridge *)bridge\n{\n    if (!_bridge) {\n        _bridge = [WebViewJavascriptBridge bridgeForWebView:self.webview webViewDelegate:self handler:^(id data, WVJBResponseCallback responseCallback) {\n            responseCallback(@\"启动 webview bridge\");\n        }];\n    }\n    return _bridge;\n}\n```\n在初始化WebViewBridge对象时，_bridge是个nil，当我首次调用时bridge属性会调用它的getter方法，从逻辑上就可以看出，它会检查_bridge，如果还未初始化，就进行初始化，如果已经初始化，就返回_bridge。\n\n而在Swift中这一逻辑判断减少成了一个修饰符`lazy`，没错非常简单的完成了延迟初始化。\n\n```swift\nlazy var bridge:WebViewJavascriptBridge = {\n    return WebViewJavascriptBridge(forWebView: self.webview, webViewDelegate: self, handler: { (data, WVJBResponseCallback) -> Void in\n\n    })\n}()\n```\n当然，在Swift中使用lazy还有一些限制，如下：\n\n- 只能声明变量，不能使用let\n- 需要指定变量的类型\n- 显示的执行的这个闭包\n\n其实，还有一个非常有意思的特性，标准库中，提供了一组lazy的方法，可以去延迟，比如数组的map，filter等操作\n\n```Swift\nlet data = 1...3  \nlet result = data.lazy.map {  \n    (i: Int) -> Int in\n    print(\"处理 \\(i)\")\n    return i * 2\n}\nfor i in result {  \n    print(\"操作后结果为 \\(i)\")\n}\nprint(\"操作结束\")  \n```\n","slug":"swift-lazy","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk1g001euejr1ef1glxe","content":"<p><strong>源代码基于 Swift 2.1+ Xcode 7.1.1编写</strong></p>\n<p>大家都知道延迟加载或者说延迟初始化是很常用的一个优化方式，因为在构建和生成新的对象时，在运行时分配内存的时候会耗费不少时间，如果初始化的一些对象特别复杂，有大量的计算动作，那么这显然不可忽略了。</p>\n<p>为了达到这样的目的，在Objective-C中，我们可以如此进行延迟一个对象的初始化：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//WebViewBridge.h</span><br><span class=\"line\">//伪代码</span><br><span class=\"line\">@property(nonatomic, strong) WebViewJavascriptBridge *bridge;</span><br><span class=\"line\"></span><br><span class=\"line\">//WebViewBridge.m</span><br><span class=\"line\">-(WebViewJavascriptBridge *)bridge</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (!_bridge) &#123;</span><br><span class=\"line\">        _bridge = [WebViewJavascriptBridge bridgeForWebView:self.webview webViewDelegate:self handler:^(id data, WVJBResponseCallback responseCallback) &#123;</span><br><span class=\"line\">            responseCallback(@&quot;启动 webview bridge&quot;);</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return _bridge;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在初始化WebViewBridge对象时，_bridge是个nil，当我首次调用时bridge属性会调用它的getter方法，从逻辑上就可以看出，它会检查_bridge，如果还未初始化，就进行初始化，如果已经初始化，就返回_bridge。</p>\n<p>而在Swift中这一逻辑判断减少成了一个修饰符<code>lazy</code>，没错非常简单的完成了延迟初始化。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> bridge:<span class=\"type\">WebViewJavascriptBridge</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">WebViewJavascriptBridge</span>(forWebView: <span class=\"keyword\">self</span>.webview, webViewDelegate: <span class=\"keyword\">self</span>, handler: &#123; (data, <span class=\"type\">WVJBResponseCallback</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p>当然，在Swift中使用lazy还有一些限制，如下：</p>\n<ul>\n<li>只能声明变量，不能使用let</li>\n<li>需要指定变量的类型</li>\n<li>显示的执行的这个闭包</li>\n</ul>\n<p>其实，还有一个非常有意思的特性，标准库中，提供了一组lazy的方法，可以去延迟，比如数组的map，filter等操作</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = <span class=\"number\">1</span>...<span class=\"number\">3</span>  </span><br><span class=\"line\"><span class=\"keyword\">let</span> result = data.<span class=\"built_in\">lazy</span>.<span class=\"built_in\">map</span> &#123;  </span><br><span class=\"line\">    (i: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"处理 \\(i)\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> result &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"操作后结果为 \\(i)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"操作结束\"</span>)</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><strong>源代码基于 Swift 2.1+ Xcode 7.1.1编写</strong></p>\n<p>大家都知道延迟加载或者说延迟初始化是很常用的一个优化方式，因为在构建和生成新的对象时，在运行时分配内存的时候会耗费不少时间，如果初始化的一些对象特别复杂，有大量的计算动作，那么这显然不可忽略了。</p>\n<p>为了达到这样的目的，在Objective-C中，我们可以如此进行延迟一个对象的初始化：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//WebViewBridge.h</span><br><span class=\"line\">//伪代码</span><br><span class=\"line\">@property(nonatomic, strong) WebViewJavascriptBridge *bridge;</span><br><span class=\"line\"></span><br><span class=\"line\">//WebViewBridge.m</span><br><span class=\"line\">-(WebViewJavascriptBridge *)bridge</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (!_bridge) &#123;</span><br><span class=\"line\">        _bridge = [WebViewJavascriptBridge bridgeForWebView:self.webview webViewDelegate:self handler:^(id data, WVJBResponseCallback responseCallback) &#123;</span><br><span class=\"line\">            responseCallback(@&quot;启动 webview bridge&quot;);</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return _bridge;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在初始化WebViewBridge对象时，_bridge是个nil，当我首次调用时bridge属性会调用它的getter方法，从逻辑上就可以看出，它会检查_bridge，如果还未初始化，就进行初始化，如果已经初始化，就返回_bridge。</p>\n<p>而在Swift中这一逻辑判断减少成了一个修饰符<code>lazy</code>，没错非常简单的完成了延迟初始化。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> bridge:<span class=\"type\">WebViewJavascriptBridge</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">WebViewJavascriptBridge</span>(forWebView: <span class=\"keyword\">self</span>.webview, webViewDelegate: <span class=\"keyword\">self</span>, handler: &#123; (data, <span class=\"type\">WVJBResponseCallback</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p>当然，在Swift中使用lazy还有一些限制，如下：</p>\n<ul>\n<li>只能声明变量，不能使用let</li>\n<li>需要指定变量的类型</li>\n<li>显示的执行的这个闭包</li>\n</ul>\n<p>其实，还有一个非常有意思的特性，标准库中，提供了一组lazy的方法，可以去延迟，比如数组的map，filter等操作</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = <span class=\"number\">1</span>...<span class=\"number\">3</span>  </span><br><span class=\"line\"><span class=\"keyword\">let</span> result = data.<span class=\"built_in\">lazy</span>.<span class=\"built_in\">map</span> &#123;  </span><br><span class=\"line\">    (i: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"处理 \\(i)\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> result &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"操作后结果为 \\(i)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"操作结束\"</span>)</span><br></pre></td></tr></table></figure>\n"},{"title":"Swift处理网络请求","date":"2015-12-14T03:38:29.000Z","_content":"\niOS 7.0之后，推荐使用NSURLSession，所以以下网络请求的处理皆是使用NSURLSession来处理。\n\n**如果是Xcode7.0之后，想访问HTTP，需要在info.plist中设置App Transport Security Settings下的Allow Arbitrary Loads为YES**\n\n**如果你想使用细粒度的NSURLSession，那么你就需要与Delegate进行交互了，例子皆是使用闭包的方式实现**\n\nNSURLSession提供如下功能：\n\n- 通过URL将数据下载到内存\n- 通过URL将数据下载到文件系统\n- 将数据上传到指定的URL\n- 在后台完成上述功能\n\nNSURLSession的工作模式：\n\n- 一般模式default，可以使用缓存的Cache，Cookie等\n- 不使用缓存模式ephemeral，不使用缓存的Cache，Cookie，权限验证等\n- 后台模式background，在后台完成上传下载\n\n**如果需要使用POST，那么你就需要使用NSMutableURLRequest，来设置HTTPMethod或HTTPBody**\n\n**如果使用后台工作模式，那么你将需要与ApplicationDelegate进行交互。**\n\n如果你有Node.js的使用经验，我已经为你准备好了一个简单的服务器，可访问[https://github.com/icepy/_posts/blob/master/demo/NSURLSession/service.js](https://github.com/icepy/_posts/blob/master/demo/NSURLSession/service.js)\n\n详细的Demo例子，可访问[https://github.com/icepy/_posts/tree/master/demo/NSURLSession/NSURLSession](https://github.com/icepy/_posts/tree/master/demo/NSURLSession/NSURLSession)\n\n## NSURLSession交互图\n\n![NSURLSession交互图](https://raw.githubusercontent.com/icepy/_posts/master/img/NSURLSession.jpg)\n\n## 例子\n\n**普通的GET请求：**\n\n```Swift\nlet requets:NSURLRequest = NSURLRequest(URL: self.url)\nlet configuration:NSURLSessionConfiguration = NSURLSessionConfiguration.defaultSessionConfiguration()\nlet session:NSURLSession = NSURLSession(configuration: configuration)\nlet task:NSURLSessionDataTask = session.dataTaskWithRequest(requets, completionHandler: {\n    [unowned self](data:NSData?,response:NSURLResponse?,error:NSError?)->Void in\n       if error == nil{\n         do{\n             let responseData:NSDictionary = try NSJSONSerialization.JSONObjectWithData(data!, options: NSJSONReadingOptions.AllowFragments) as! NSDictionary\n             print(\"普通GET请求 --- > \\(responseData)\")\n        }catch{\n\n        }\n      }\n})\ntask.resume()\n```\n\n**设置头以及带参数的GET请求：**\n\n```Swift\nlet url:NSURL = NSURL(string: \"http://127.0.0.1:8900/add?id=1&session=icepyquery\")!\nlet request:NSMutableURLRequest = NSMutableURLRequest(URL:url)\nrequest.addValue(\"ICEPY\", forHTTPHeaderField: \"Session-Control-Key\")\nlet configuration:NSURLSessionConfiguration = NSURLSessionConfiguration.defaultSessionConfiguration()\nlet session:NSURLSession = NSURLSession(configuration: configuration)\nlet task:NSURLSessionDataTask = session.dataTaskWithRequest(request, completionHandler: {\n    [unowned self](data:NSData?,response:NSURLResponse?,error:NSError?)->Void in\n      if error == nil{\n         do{\n            let responseData:NSDictionary = try NSJSONSerialization.JSONObjectWithData(data!, options: NSJSONReadingOptions.AllowFragments) as! NSDictionary\n            print(\"普通带头与参数的GET请求 --- > \\(responseData)\")\n         }catch{\n\n         }\n     }\n})\ntask.resume()\n```\n\n**设置头以及带参数的POST请求：**\n\n如果不想设置头可以不要使用`addValue方法`，参数必须设置在`HTTPBody`中。\n\n```Swift\nlet request:NSMutableURLRequest = NSMutableURLRequest(URL: self.url)\nrequest.HTTPMethod = \"POST\"\ndo{\n    let data:NSData = try NSJSONSerialization.dataWithJSONObject(NSDictionary(object: \"icepy\", forKey: \"name\"), options: NSJSONWritingOptions.PrettyPrinted)\n    request.HTTPBody = data\n}catch{\n\n}\nrequest.addValue(\"wen\", forHTTPHeaderField: \"Session-Control-Key\")\nlet configuration:NSURLSessionConfiguration = NSURLSessionConfiguration.defaultSessionConfiguration()\nlet session:NSURLSession = NSURLSession(configuration: configuration)\nlet task:NSURLSessionDataTask = session.dataTaskWithRequest(request, completionHandler: {\n    [unowned self](data:NSData?,response:NSURLResponse?,error:NSError?) -> Void in\n    if error == nil{\n        do{\n            let responseData:NSDictionary = try NSJSONSerialization.JSONObjectWithData(data!, options: NSJSONReadingOptions.AllowFragments) as! NSDictionary\n            print(\"普通空的POST请求 --- > \\(responseData)\")\n        }catch{\n\n        }\n    }\n})\ntask.resume()\n```\n\n**下载：**\n\n下载的处理，稍微有些不同，NSURLSession的DownloadTask会将下载的内容下载在临时temp目录，下载完成之后需要将内容从临时目录移动到你的保存目录，在移动之前还需要去判断一下是否已经存在，如果已经存在需要先删除。\n\n```Swift\nlet url:NSURL = NSURL(string: \"http://content.battlenet.com.cn/wow/media/screenshots/screenshot-of-the-day/warlords-of-draenor/warlords-of-draenor-ss0420-large.jpg\")!\nlet request:NSURLRequest = NSURLRequest(URL: url)\nlet configuration:NSURLSessionConfiguration = NSURLSessionConfiguration.defaultSessionConfiguration()\nlet session:NSURLSession = NSURLSession(configuration: configuration)\nlet task = session.downloadTaskWithRequest(request, completionHandler: {\n    [unowned self](location:NSURL?,response:NSURLResponse?,error:NSError?) -> Void in\n    if error == nil{\n        if let fromPath = location!.path{\n            let file:NSString = docDirPath.stringByAppendingPathComponent(\"wow.png\")\n            if self.removeFile(){\n                do{\n                    try self.manager.moveItemAtPath(fromPath, toPath: file as String)\n                    dispatch_async(dispatch_get_main_queue(), {\n                        [unowned self] _ in\n                        self.imageView.image = UIImage(named: file as String)\n                    })\n                }catch{\n                    print(\"移动临时数据到保存目录出错\")\n                }\n            }\n        }\n    }\n})\ntask.resume()\n```\n\n删除的方法：\n\n```Swift\nprivate func removeFile() -> Bool{\n    let file:NSString = docDirPath.stringByAppendingPathComponent(\"wow.png\")\n    if self.manager.fileExistsAtPath(file as String){\n        do{\n            try self.manager.removeItemAtPath(file as String)\n        }catch{\n            return false\n        }\n    }\n    return true\n}\n```\n\n**上传：**\n\n上传可以使用两种方式来实现\n\n- NSURLSessionUploadTask\n- NSURLSessionDataTask\n\n`NSURLSessionUploadTask`上传成功之后会下载返回结果，反之`NSURLSessionDataTask`不会。\n\nPOST表单上传：\n\n上传还可以利用POST构造一个HTTP表单来完成，需要注意的是使用正确的上传表单头，以及正确的构造主体。\n\n        //multipart/form-data  上传所使用的Content-Type\n        //image/jpg  上传类型\n\n```Swift\nlet url:NSURL = NSURL(string: \"http://pitayaswift.sinaapp.com/pitaya.php\")!\n//模拟表单提交\nlet request:NSMutableURLRequest = NSMutableURLRequest(URL:url)\nrequest.HTTPMethod = \"POST\"\nrequest.addValue(\"Content-Type\", forHTTPHeaderField: \"multipart/form-data; boundary=\\(boundary)\")\nrequest.HTTPBody = self.setRequestFile(request)\nlet configuration:NSURLSessionConfiguration = NSURLSessionConfiguration.defaultSessionConfiguration()\nlet session:NSURLSession = NSURLSession(configuration: configuration)\nlet task:NSURLSessionDataTask = session.dataTaskWithRequest(request, completionHandler: {\n    [unowned self](data:NSData?,response:NSURLResponse?,error:NSError?) -> Void in\n        print(error)\n})\ntask.resume()\n```\n\n构造主体方法：\n\n```Swift\nprivate func setRequestFile(request:NSMutableURLRequest)-> NSData{\n    var header = request.allHTTPHeaderFields\n    let body = NSMutableData()\n    let fileType:STFType = STFType(name: \"logo\", type: \"jpg\")\n    let codeName:String = \"file\"\n    let fileUrl:String? =  NSBundle.mainBundle().pathForResource(fileType.fileName, ofType:fileType.fileType)\n    if let contentType:AnyObject = header![\"Content-Type\"]{\n        print(\"set Content-Type --- \\(contentType)\")\n    }else{\n        print(\"set Content-Type --- empty\")\n    }\n    let STFileParams:[STFile] = [STFile(name: codeName, url: fileUrl,data:nil)]\n    for file:STFile in STFileParams{\n        if file.fileData == nil{\n            body.appendData(\"--\\(boundary)\\r\\n\".STNSData)\n            let _fileURL = NSURL(fileURLWithPath: file.fileURL!)\n            body.appendData(\"Content-Disposition: form-data; name=\\\"\\(file.fileName)\\\"; filename=\\\"\\(_fileURL.lastPathComponent)\\\"\\r\\n\\r\\n\".STNSData)\n            if let fileData = NSData(contentsOfFile: file.fileURL!){\n                body.appendData(fileData)\n                body.appendData(\"\\r\\n\".STNSData)\n            }\n        }else{\n            body.appendData(file.fileData!)\n        }\n    }\n    body.appendData(\"--\\(boundary)--\\r\\n\".STNSData)\n    return body\n}\n```\n\n## 留给大家一个小题目\n\n如何使用`NSURLSessionUploadTask`来实现上传\n","source":"_posts/swift-networking.md","raw":"title: Swift处理网络请求\ndate: 2015-12-14 11:38:29\ntags: Swift\n---\n\niOS 7.0之后，推荐使用NSURLSession，所以以下网络请求的处理皆是使用NSURLSession来处理。\n\n**如果是Xcode7.0之后，想访问HTTP，需要在info.plist中设置App Transport Security Settings下的Allow Arbitrary Loads为YES**\n\n**如果你想使用细粒度的NSURLSession，那么你就需要与Delegate进行交互了，例子皆是使用闭包的方式实现**\n\nNSURLSession提供如下功能：\n\n- 通过URL将数据下载到内存\n- 通过URL将数据下载到文件系统\n- 将数据上传到指定的URL\n- 在后台完成上述功能\n\nNSURLSession的工作模式：\n\n- 一般模式default，可以使用缓存的Cache，Cookie等\n- 不使用缓存模式ephemeral，不使用缓存的Cache，Cookie，权限验证等\n- 后台模式background，在后台完成上传下载\n\n**如果需要使用POST，那么你就需要使用NSMutableURLRequest，来设置HTTPMethod或HTTPBody**\n\n**如果使用后台工作模式，那么你将需要与ApplicationDelegate进行交互。**\n\n如果你有Node.js的使用经验，我已经为你准备好了一个简单的服务器，可访问[https://github.com/icepy/_posts/blob/master/demo/NSURLSession/service.js](https://github.com/icepy/_posts/blob/master/demo/NSURLSession/service.js)\n\n详细的Demo例子，可访问[https://github.com/icepy/_posts/tree/master/demo/NSURLSession/NSURLSession](https://github.com/icepy/_posts/tree/master/demo/NSURLSession/NSURLSession)\n\n## NSURLSession交互图\n\n![NSURLSession交互图](https://raw.githubusercontent.com/icepy/_posts/master/img/NSURLSession.jpg)\n\n## 例子\n\n**普通的GET请求：**\n\n```Swift\nlet requets:NSURLRequest = NSURLRequest(URL: self.url)\nlet configuration:NSURLSessionConfiguration = NSURLSessionConfiguration.defaultSessionConfiguration()\nlet session:NSURLSession = NSURLSession(configuration: configuration)\nlet task:NSURLSessionDataTask = session.dataTaskWithRequest(requets, completionHandler: {\n    [unowned self](data:NSData?,response:NSURLResponse?,error:NSError?)->Void in\n       if error == nil{\n         do{\n             let responseData:NSDictionary = try NSJSONSerialization.JSONObjectWithData(data!, options: NSJSONReadingOptions.AllowFragments) as! NSDictionary\n             print(\"普通GET请求 --- > \\(responseData)\")\n        }catch{\n\n        }\n      }\n})\ntask.resume()\n```\n\n**设置头以及带参数的GET请求：**\n\n```Swift\nlet url:NSURL = NSURL(string: \"http://127.0.0.1:8900/add?id=1&session=icepyquery\")!\nlet request:NSMutableURLRequest = NSMutableURLRequest(URL:url)\nrequest.addValue(\"ICEPY\", forHTTPHeaderField: \"Session-Control-Key\")\nlet configuration:NSURLSessionConfiguration = NSURLSessionConfiguration.defaultSessionConfiguration()\nlet session:NSURLSession = NSURLSession(configuration: configuration)\nlet task:NSURLSessionDataTask = session.dataTaskWithRequest(request, completionHandler: {\n    [unowned self](data:NSData?,response:NSURLResponse?,error:NSError?)->Void in\n      if error == nil{\n         do{\n            let responseData:NSDictionary = try NSJSONSerialization.JSONObjectWithData(data!, options: NSJSONReadingOptions.AllowFragments) as! NSDictionary\n            print(\"普通带头与参数的GET请求 --- > \\(responseData)\")\n         }catch{\n\n         }\n     }\n})\ntask.resume()\n```\n\n**设置头以及带参数的POST请求：**\n\n如果不想设置头可以不要使用`addValue方法`，参数必须设置在`HTTPBody`中。\n\n```Swift\nlet request:NSMutableURLRequest = NSMutableURLRequest(URL: self.url)\nrequest.HTTPMethod = \"POST\"\ndo{\n    let data:NSData = try NSJSONSerialization.dataWithJSONObject(NSDictionary(object: \"icepy\", forKey: \"name\"), options: NSJSONWritingOptions.PrettyPrinted)\n    request.HTTPBody = data\n}catch{\n\n}\nrequest.addValue(\"wen\", forHTTPHeaderField: \"Session-Control-Key\")\nlet configuration:NSURLSessionConfiguration = NSURLSessionConfiguration.defaultSessionConfiguration()\nlet session:NSURLSession = NSURLSession(configuration: configuration)\nlet task:NSURLSessionDataTask = session.dataTaskWithRequest(request, completionHandler: {\n    [unowned self](data:NSData?,response:NSURLResponse?,error:NSError?) -> Void in\n    if error == nil{\n        do{\n            let responseData:NSDictionary = try NSJSONSerialization.JSONObjectWithData(data!, options: NSJSONReadingOptions.AllowFragments) as! NSDictionary\n            print(\"普通空的POST请求 --- > \\(responseData)\")\n        }catch{\n\n        }\n    }\n})\ntask.resume()\n```\n\n**下载：**\n\n下载的处理，稍微有些不同，NSURLSession的DownloadTask会将下载的内容下载在临时temp目录，下载完成之后需要将内容从临时目录移动到你的保存目录，在移动之前还需要去判断一下是否已经存在，如果已经存在需要先删除。\n\n```Swift\nlet url:NSURL = NSURL(string: \"http://content.battlenet.com.cn/wow/media/screenshots/screenshot-of-the-day/warlords-of-draenor/warlords-of-draenor-ss0420-large.jpg\")!\nlet request:NSURLRequest = NSURLRequest(URL: url)\nlet configuration:NSURLSessionConfiguration = NSURLSessionConfiguration.defaultSessionConfiguration()\nlet session:NSURLSession = NSURLSession(configuration: configuration)\nlet task = session.downloadTaskWithRequest(request, completionHandler: {\n    [unowned self](location:NSURL?,response:NSURLResponse?,error:NSError?) -> Void in\n    if error == nil{\n        if let fromPath = location!.path{\n            let file:NSString = docDirPath.stringByAppendingPathComponent(\"wow.png\")\n            if self.removeFile(){\n                do{\n                    try self.manager.moveItemAtPath(fromPath, toPath: file as String)\n                    dispatch_async(dispatch_get_main_queue(), {\n                        [unowned self] _ in\n                        self.imageView.image = UIImage(named: file as String)\n                    })\n                }catch{\n                    print(\"移动临时数据到保存目录出错\")\n                }\n            }\n        }\n    }\n})\ntask.resume()\n```\n\n删除的方法：\n\n```Swift\nprivate func removeFile() -> Bool{\n    let file:NSString = docDirPath.stringByAppendingPathComponent(\"wow.png\")\n    if self.manager.fileExistsAtPath(file as String){\n        do{\n            try self.manager.removeItemAtPath(file as String)\n        }catch{\n            return false\n        }\n    }\n    return true\n}\n```\n\n**上传：**\n\n上传可以使用两种方式来实现\n\n- NSURLSessionUploadTask\n- NSURLSessionDataTask\n\n`NSURLSessionUploadTask`上传成功之后会下载返回结果，反之`NSURLSessionDataTask`不会。\n\nPOST表单上传：\n\n上传还可以利用POST构造一个HTTP表单来完成，需要注意的是使用正确的上传表单头，以及正确的构造主体。\n\n        //multipart/form-data  上传所使用的Content-Type\n        //image/jpg  上传类型\n\n```Swift\nlet url:NSURL = NSURL(string: \"http://pitayaswift.sinaapp.com/pitaya.php\")!\n//模拟表单提交\nlet request:NSMutableURLRequest = NSMutableURLRequest(URL:url)\nrequest.HTTPMethod = \"POST\"\nrequest.addValue(\"Content-Type\", forHTTPHeaderField: \"multipart/form-data; boundary=\\(boundary)\")\nrequest.HTTPBody = self.setRequestFile(request)\nlet configuration:NSURLSessionConfiguration = NSURLSessionConfiguration.defaultSessionConfiguration()\nlet session:NSURLSession = NSURLSession(configuration: configuration)\nlet task:NSURLSessionDataTask = session.dataTaskWithRequest(request, completionHandler: {\n    [unowned self](data:NSData?,response:NSURLResponse?,error:NSError?) -> Void in\n        print(error)\n})\ntask.resume()\n```\n\n构造主体方法：\n\n```Swift\nprivate func setRequestFile(request:NSMutableURLRequest)-> NSData{\n    var header = request.allHTTPHeaderFields\n    let body = NSMutableData()\n    let fileType:STFType = STFType(name: \"logo\", type: \"jpg\")\n    let codeName:String = \"file\"\n    let fileUrl:String? =  NSBundle.mainBundle().pathForResource(fileType.fileName, ofType:fileType.fileType)\n    if let contentType:AnyObject = header![\"Content-Type\"]{\n        print(\"set Content-Type --- \\(contentType)\")\n    }else{\n        print(\"set Content-Type --- empty\")\n    }\n    let STFileParams:[STFile] = [STFile(name: codeName, url: fileUrl,data:nil)]\n    for file:STFile in STFileParams{\n        if file.fileData == nil{\n            body.appendData(\"--\\(boundary)\\r\\n\".STNSData)\n            let _fileURL = NSURL(fileURLWithPath: file.fileURL!)\n            body.appendData(\"Content-Disposition: form-data; name=\\\"\\(file.fileName)\\\"; filename=\\\"\\(_fileURL.lastPathComponent)\\\"\\r\\n\\r\\n\".STNSData)\n            if let fileData = NSData(contentsOfFile: file.fileURL!){\n                body.appendData(fileData)\n                body.appendData(\"\\r\\n\".STNSData)\n            }\n        }else{\n            body.appendData(file.fileData!)\n        }\n    }\n    body.appendData(\"--\\(boundary)--\\r\\n\".STNSData)\n    return body\n}\n```\n\n## 留给大家一个小题目\n\n如何使用`NSURLSessionUploadTask`来实现上传\n","slug":"swift-networking","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk1k001guejro801duen","content":"<p>iOS 7.0之后，推荐使用NSURLSession，所以以下网络请求的处理皆是使用NSURLSession来处理。</p>\n<p><strong>如果是Xcode7.0之后，想访问HTTP，需要在info.plist中设置App Transport Security Settings下的Allow Arbitrary Loads为YES</strong></p>\n<p><strong>如果你想使用细粒度的NSURLSession，那么你就需要与Delegate进行交互了，例子皆是使用闭包的方式实现</strong></p>\n<p>NSURLSession提供如下功能：</p>\n<ul>\n<li>通过URL将数据下载到内存</li>\n<li>通过URL将数据下载到文件系统</li>\n<li>将数据上传到指定的URL</li>\n<li>在后台完成上述功能</li>\n</ul>\n<p>NSURLSession的工作模式：</p>\n<ul>\n<li>一般模式default，可以使用缓存的Cache，Cookie等</li>\n<li>不使用缓存模式ephemeral，不使用缓存的Cache，Cookie，权限验证等</li>\n<li>后台模式background，在后台完成上传下载</li>\n</ul>\n<p><strong>如果需要使用POST，那么你就需要使用NSMutableURLRequest，来设置HTTPMethod或HTTPBody</strong></p>\n<p><strong>如果使用后台工作模式，那么你将需要与ApplicationDelegate进行交互。</strong></p>\n<p>如果你有Node.js的使用经验，我已经为你准备好了一个简单的服务器，可访问<a href=\"https://github.com/icepy/_posts/blob/master/demo/NSURLSession/service.js\" target=\"_blank\" rel=\"external\">https://github.com/icepy/_posts/blob/master/demo/NSURLSession/service.js</a></p>\n<p>详细的Demo例子，可访问<a href=\"https://github.com/icepy/_posts/tree/master/demo/NSURLSession/NSURLSession\" target=\"_blank\" rel=\"external\">https://github.com/icepy/_posts/tree/master/demo/NSURLSession/NSURLSession</a></p>\n<h2 id=\"NSURLSession交互图\"><a href=\"#NSURLSession交互图\" class=\"headerlink\" title=\"NSURLSession交互图\"></a>NSURLSession交互图</h2><p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/NSURLSession.jpg\" alt=\"NSURLSession交互图\"></p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p><strong>普通的GET请求：</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> requets:<span class=\"type\">NSURLRequest</span> = <span class=\"type\">NSURLRequest</span>(<span class=\"type\">URL</span>: <span class=\"keyword\">self</span>.url)</span><br><span class=\"line\"><span class=\"keyword\">let</span> configuration:<span class=\"type\">NSURLSessionConfiguration</span> = <span class=\"type\">NSURLSessionConfiguration</span>.defaultSessionConfiguration()</span><br><span class=\"line\"><span class=\"keyword\">let</span> session:<span class=\"type\">NSURLSession</span> = <span class=\"type\">NSURLSession</span>(configuration: configuration)</span><br><span class=\"line\"><span class=\"keyword\">let</span> task:<span class=\"type\">NSURLSessionDataTask</span> = session.dataTaskWithRequest(requets, completionHandler: &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>](data:<span class=\"type\">NSData</span>?,response:<span class=\"type\">NSURLResponse</span>?,error:<span class=\"type\">NSError</span>?)-&gt;<span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> error == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">             <span class=\"keyword\">let</span> responseData:<span class=\"type\">NSDictionary</span> = <span class=\"keyword\">try</span> <span class=\"type\">NSJSONSerialization</span>.<span class=\"type\">JSONObjectWithData</span>(data!, options: <span class=\"type\">NSJSONReadingOptions</span>.<span class=\"type\">AllowFragments</span>) <span class=\"keyword\">as</span>! <span class=\"type\">NSDictionary</span></span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">\"普通GET请求 --- &gt; \\(responseData)\"</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">task.resume()</span><br></pre></td></tr></table></figure>\n<p><strong>设置头以及带参数的GET请求：</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> url:<span class=\"type\">NSURL</span> = <span class=\"type\">NSURL</span>(string: <span class=\"string\">\"http://127.0.0.1:8900/add?id=1&amp;session=icepyquery\"</span>)!</span><br><span class=\"line\"><span class=\"keyword\">let</span> request:<span class=\"type\">NSMutableURLRequest</span> = <span class=\"type\">NSMutableURLRequest</span>(<span class=\"type\">URL</span>:url)</span><br><span class=\"line\">request.addValue(<span class=\"string\">\"ICEPY\"</span>, forHTTPHeaderField: <span class=\"string\">\"Session-Control-Key\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> configuration:<span class=\"type\">NSURLSessionConfiguration</span> = <span class=\"type\">NSURLSessionConfiguration</span>.defaultSessionConfiguration()</span><br><span class=\"line\"><span class=\"keyword\">let</span> session:<span class=\"type\">NSURLSession</span> = <span class=\"type\">NSURLSession</span>(configuration: configuration)</span><br><span class=\"line\"><span class=\"keyword\">let</span> task:<span class=\"type\">NSURLSessionDataTask</span> = session.dataTaskWithRequest(request, completionHandler: &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>](data:<span class=\"type\">NSData</span>?,response:<span class=\"type\">NSURLResponse</span>?,error:<span class=\"type\">NSError</span>?)-&gt;<span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> error == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> responseData:<span class=\"type\">NSDictionary</span> = <span class=\"keyword\">try</span> <span class=\"type\">NSJSONSerialization</span>.<span class=\"type\">JSONObjectWithData</span>(data!, options: <span class=\"type\">NSJSONReadingOptions</span>.<span class=\"type\">AllowFragments</span>) <span class=\"keyword\">as</span>! <span class=\"type\">NSDictionary</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"普通带头与参数的GET请求 --- &gt; \\(responseData)\"</span>)</span><br><span class=\"line\">         &#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">task.resume()</span><br></pre></td></tr></table></figure>\n<p><strong>设置头以及带参数的POST请求：</strong></p>\n<p>如果不想设置头可以不要使用<code>addValue方法</code>，参数必须设置在<code>HTTPBody</code>中。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> request:<span class=\"type\">NSMutableURLRequest</span> = <span class=\"type\">NSMutableURLRequest</span>(<span class=\"type\">URL</span>: <span class=\"keyword\">self</span>.url)</span><br><span class=\"line\">request.<span class=\"type\">HTTPMethod</span> = <span class=\"string\">\"POST\"</span></span><br><span class=\"line\"><span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data:<span class=\"type\">NSData</span> = <span class=\"keyword\">try</span> <span class=\"type\">NSJSONSerialization</span>.dataWithJSONObject(<span class=\"type\">NSDictionary</span>(object: <span class=\"string\">\"icepy\"</span>, forKey: <span class=\"string\">\"name\"</span>), options: <span class=\"type\">NSJSONWritingOptions</span>.<span class=\"type\">PrettyPrinted</span>)</span><br><span class=\"line\">    request.<span class=\"type\">HTTPBody</span> = data</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">request.addValue(<span class=\"string\">\"wen\"</span>, forHTTPHeaderField: <span class=\"string\">\"Session-Control-Key\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> configuration:<span class=\"type\">NSURLSessionConfiguration</span> = <span class=\"type\">NSURLSessionConfiguration</span>.defaultSessionConfiguration()</span><br><span class=\"line\"><span class=\"keyword\">let</span> session:<span class=\"type\">NSURLSession</span> = <span class=\"type\">NSURLSession</span>(configuration: configuration)</span><br><span class=\"line\"><span class=\"keyword\">let</span> task:<span class=\"type\">NSURLSessionDataTask</span> = session.dataTaskWithRequest(request, completionHandler: &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>](data:<span class=\"type\">NSData</span>?,response:<span class=\"type\">NSURLResponse</span>?,error:<span class=\"type\">NSError</span>?) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> error == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> responseData:<span class=\"type\">NSDictionary</span> = <span class=\"keyword\">try</span> <span class=\"type\">NSJSONSerialization</span>.<span class=\"type\">JSONObjectWithData</span>(data!, options: <span class=\"type\">NSJSONReadingOptions</span>.<span class=\"type\">AllowFragments</span>) <span class=\"keyword\">as</span>! <span class=\"type\">NSDictionary</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"普通空的POST请求 --- &gt; \\(responseData)\"</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">task.resume()</span><br></pre></td></tr></table></figure>\n<p><strong>下载：</strong></p>\n<p>下载的处理，稍微有些不同，NSURLSession的DownloadTask会将下载的内容下载在临时temp目录，下载完成之后需要将内容从临时目录移动到你的保存目录，在移动之前还需要去判断一下是否已经存在，如果已经存在需要先删除。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> url:<span class=\"type\">NSURL</span> = <span class=\"type\">NSURL</span>(string: <span class=\"string\">\"http://content.battlenet.com.cn/wow/media/screenshots/screenshot-of-the-day/warlords-of-draenor/warlords-of-draenor-ss0420-large.jpg\"</span>)!</span><br><span class=\"line\"><span class=\"keyword\">let</span> request:<span class=\"type\">NSURLRequest</span> = <span class=\"type\">NSURLRequest</span>(<span class=\"type\">URL</span>: url)</span><br><span class=\"line\"><span class=\"keyword\">let</span> configuration:<span class=\"type\">NSURLSessionConfiguration</span> = <span class=\"type\">NSURLSessionConfiguration</span>.defaultSessionConfiguration()</span><br><span class=\"line\"><span class=\"keyword\">let</span> session:<span class=\"type\">NSURLSession</span> = <span class=\"type\">NSURLSession</span>(configuration: configuration)</span><br><span class=\"line\"><span class=\"keyword\">let</span> task = session.downloadTaskWithRequest(request, completionHandler: &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>](location:<span class=\"type\">NSURL</span>?,response:<span class=\"type\">NSURLResponse</span>?,error:<span class=\"type\">NSError</span>?) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> error == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> fromPath = location!.path&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> file:<span class=\"type\">NSString</span> = docDirPath.stringByAppendingPathComponent(<span class=\"string\">\"wow.png\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.removeFile()&#123;</span><br><span class=\"line\">                <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> <span class=\"keyword\">self</span>.manager.moveItemAtPath(fromPath, toPath: file <span class=\"keyword\">as</span> <span class=\"type\">String</span>)</span><br><span class=\"line\">                    dispatch_async(dispatch_get_main_queue(), &#123;</span><br><span class=\"line\">                        [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">                        <span class=\"keyword\">self</span>.imageView.image = <span class=\"type\">UIImage</span>(named: file <span class=\"keyword\">as</span> <span class=\"type\">String</span>)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(<span class=\"string\">\"移动临时数据到保存目录出错\"</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">task.resume()</span><br></pre></td></tr></table></figure>\n<p>删除的方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">removeFile</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Bool</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> file:<span class=\"type\">NSString</span> = docDirPath.stringByAppendingPathComponent(<span class=\"string\">\"wow.png\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.manager.fileExistsAtPath(file <span class=\"keyword\">as</span> <span class=\"type\">String</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> <span class=\"keyword\">self</span>.manager.removeItemAtPath(file <span class=\"keyword\">as</span> <span class=\"type\">String</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>上传：</strong></p>\n<p>上传可以使用两种方式来实现</p>\n<ul>\n<li>NSURLSessionUploadTask</li>\n<li>NSURLSessionDataTask</li>\n</ul>\n<p><code>NSURLSessionUploadTask</code>上传成功之后会下载返回结果，反之<code>NSURLSessionDataTask</code>不会。</p>\n<p>POST表单上传：</p>\n<p>上传还可以利用POST构造一个HTTP表单来完成，需要注意的是使用正确的上传表单头，以及正确的构造主体。</p>\n<pre><code>//multipart/form-data  上传所使用的Content-Type\n//image/jpg  上传类型\n</code></pre><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> url:<span class=\"type\">NSURL</span> = <span class=\"type\">NSURL</span>(string: <span class=\"string\">\"http://pitayaswift.sinaapp.com/pitaya.php\"</span>)!</span><br><span class=\"line\"><span class=\"comment\">//模拟表单提交</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> request:<span class=\"type\">NSMutableURLRequest</span> = <span class=\"type\">NSMutableURLRequest</span>(<span class=\"type\">URL</span>:url)</span><br><span class=\"line\">request.<span class=\"type\">HTTPMethod</span> = <span class=\"string\">\"POST\"</span></span><br><span class=\"line\">request.addValue(<span class=\"string\">\"Content-Type\"</span>, forHTTPHeaderField: <span class=\"string\">\"multipart/form-data; boundary=\\(boundary)\"</span>)</span><br><span class=\"line\">request.<span class=\"type\">HTTPBody</span> = <span class=\"keyword\">self</span>.setRequestFile(request)</span><br><span class=\"line\"><span class=\"keyword\">let</span> configuration:<span class=\"type\">NSURLSessionConfiguration</span> = <span class=\"type\">NSURLSessionConfiguration</span>.defaultSessionConfiguration()</span><br><span class=\"line\"><span class=\"keyword\">let</span> session:<span class=\"type\">NSURLSession</span> = <span class=\"type\">NSURLSession</span>(configuration: configuration)</span><br><span class=\"line\"><span class=\"keyword\">let</span> task:<span class=\"type\">NSURLSessionDataTask</span> = session.dataTaskWithRequest(request, completionHandler: &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>](data:<span class=\"type\">NSData</span>?,response:<span class=\"type\">NSURLResponse</span>?,error:<span class=\"type\">NSError</span>?) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">task.resume()</span><br></pre></td></tr></table></figure>\n<p>构造主体方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setRequestFile</span><span class=\"params\">(request:NSMutableURLRequest)</span></span>-&gt; <span class=\"type\">NSData</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> header = request.allHTTPHeaderFields</span><br><span class=\"line\">    <span class=\"keyword\">let</span> body = <span class=\"type\">NSMutableData</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileType:<span class=\"type\">STFType</span> = <span class=\"type\">STFType</span>(name: <span class=\"string\">\"logo\"</span>, type: <span class=\"string\">\"jpg\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> codeName:<span class=\"type\">String</span> = <span class=\"string\">\"file\"</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileUrl:<span class=\"type\">String</span>? =  <span class=\"type\">NSBundle</span>.mainBundle().pathForResource(fileType.fileName, ofType:fileType.fileType)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> contentType:<span class=\"type\">AnyObject</span> = header![<span class=\"string\">\"Content-Type\"</span>]&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"set Content-Type --- \\(contentType)\"</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"set Content-Type --- empty\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"type\">STFileParams</span>:[<span class=\"type\">STFile</span>] = [<span class=\"type\">STFile</span>(name: codeName, url: fileUrl,data:<span class=\"literal\">nil</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> file:<span class=\"type\">STFile</span> <span class=\"keyword\">in</span> <span class=\"type\">STFileParams</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> file.fileData == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">            body.appendData(<span class=\"string\">\"--\\(boundary)\\r\\n\"</span>.<span class=\"type\">STNSData</span>)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> _fileURL = <span class=\"type\">NSURL</span>(fileURLWithPath: file.fileURL!)</span><br><span class=\"line\">            body.appendData(<span class=\"string\">\"Content-Disposition: form-data; name=\\\"\\(file.fileName)\\\"; filename=\\\"\\(_fileURL.lastPathComponent)\\\"\\r\\n\\r\\n\"</span>.<span class=\"type\">STNSData</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> fileData = <span class=\"type\">NSData</span>(contentsOfFile: file.fileURL!)&#123;</span><br><span class=\"line\">                body.appendData(fileData)</span><br><span class=\"line\">                body.appendData(<span class=\"string\">\"\\r\\n\"</span>.<span class=\"type\">STNSData</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            body.appendData(file.fileData!)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    body.appendData(<span class=\"string\">\"--\\(boundary)--\\r\\n\"</span>.<span class=\"type\">STNSData</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> body</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"留给大家一个小题目\"><a href=\"#留给大家一个小题目\" class=\"headerlink\" title=\"留给大家一个小题目\"></a>留给大家一个小题目</h2><p>如何使用<code>NSURLSessionUploadTask</code>来实现上传</p>\n","excerpt":"","more":"<p>iOS 7.0之后，推荐使用NSURLSession，所以以下网络请求的处理皆是使用NSURLSession来处理。</p>\n<p><strong>如果是Xcode7.0之后，想访问HTTP，需要在info.plist中设置App Transport Security Settings下的Allow Arbitrary Loads为YES</strong></p>\n<p><strong>如果你想使用细粒度的NSURLSession，那么你就需要与Delegate进行交互了，例子皆是使用闭包的方式实现</strong></p>\n<p>NSURLSession提供如下功能：</p>\n<ul>\n<li>通过URL将数据下载到内存</li>\n<li>通过URL将数据下载到文件系统</li>\n<li>将数据上传到指定的URL</li>\n<li>在后台完成上述功能</li>\n</ul>\n<p>NSURLSession的工作模式：</p>\n<ul>\n<li>一般模式default，可以使用缓存的Cache，Cookie等</li>\n<li>不使用缓存模式ephemeral，不使用缓存的Cache，Cookie，权限验证等</li>\n<li>后台模式background，在后台完成上传下载</li>\n</ul>\n<p><strong>如果需要使用POST，那么你就需要使用NSMutableURLRequest，来设置HTTPMethod或HTTPBody</strong></p>\n<p><strong>如果使用后台工作模式，那么你将需要与ApplicationDelegate进行交互。</strong></p>\n<p>如果你有Node.js的使用经验，我已经为你准备好了一个简单的服务器，可访问<a href=\"https://github.com/icepy/_posts/blob/master/demo/NSURLSession/service.js\">https://github.com/icepy/_posts/blob/master/demo/NSURLSession/service.js</a></p>\n<p>详细的Demo例子，可访问<a href=\"https://github.com/icepy/_posts/tree/master/demo/NSURLSession/NSURLSession\">https://github.com/icepy/_posts/tree/master/demo/NSURLSession/NSURLSession</a></p>\n<h2 id=\"NSURLSession交互图\"><a href=\"#NSURLSession交互图\" class=\"headerlink\" title=\"NSURLSession交互图\"></a>NSURLSession交互图</h2><p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/NSURLSession.jpg\" alt=\"NSURLSession交互图\"></p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p><strong>普通的GET请求：</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> requets:<span class=\"type\">NSURLRequest</span> = <span class=\"type\">NSURLRequest</span>(<span class=\"type\">URL</span>: <span class=\"keyword\">self</span>.url)</span><br><span class=\"line\"><span class=\"keyword\">let</span> configuration:<span class=\"type\">NSURLSessionConfiguration</span> = <span class=\"type\">NSURLSessionConfiguration</span>.defaultSessionConfiguration()</span><br><span class=\"line\"><span class=\"keyword\">let</span> session:<span class=\"type\">NSURLSession</span> = <span class=\"type\">NSURLSession</span>(configuration: configuration)</span><br><span class=\"line\"><span class=\"keyword\">let</span> task:<span class=\"type\">NSURLSessionDataTask</span> = session.dataTaskWithRequest(requets, completionHandler: &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>](data:<span class=\"type\">NSData</span>?,response:<span class=\"type\">NSURLResponse</span>?,error:<span class=\"type\">NSError</span>?)-&gt;<span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> error == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">             <span class=\"keyword\">let</span> responseData:<span class=\"type\">NSDictionary</span> = <span class=\"keyword\">try</span> <span class=\"type\">NSJSONSerialization</span>.<span class=\"type\">JSONObjectWithData</span>(data!, options: <span class=\"type\">NSJSONReadingOptions</span>.<span class=\"type\">AllowFragments</span>) <span class=\"keyword\">as</span>! <span class=\"type\">NSDictionary</span></span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">\"普通GET请求 --- &gt; \\(responseData)\"</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">task.resume()</span><br></pre></td></tr></table></figure>\n<p><strong>设置头以及带参数的GET请求：</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> url:<span class=\"type\">NSURL</span> = <span class=\"type\">NSURL</span>(string: <span class=\"string\">\"http://127.0.0.1:8900/add?id=1&amp;session=icepyquery\"</span>)!</span><br><span class=\"line\"><span class=\"keyword\">let</span> request:<span class=\"type\">NSMutableURLRequest</span> = <span class=\"type\">NSMutableURLRequest</span>(<span class=\"type\">URL</span>:url)</span><br><span class=\"line\">request.addValue(<span class=\"string\">\"ICEPY\"</span>, forHTTPHeaderField: <span class=\"string\">\"Session-Control-Key\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> configuration:<span class=\"type\">NSURLSessionConfiguration</span> = <span class=\"type\">NSURLSessionConfiguration</span>.defaultSessionConfiguration()</span><br><span class=\"line\"><span class=\"keyword\">let</span> session:<span class=\"type\">NSURLSession</span> = <span class=\"type\">NSURLSession</span>(configuration: configuration)</span><br><span class=\"line\"><span class=\"keyword\">let</span> task:<span class=\"type\">NSURLSessionDataTask</span> = session.dataTaskWithRequest(request, completionHandler: &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>](data:<span class=\"type\">NSData</span>?,response:<span class=\"type\">NSURLResponse</span>?,error:<span class=\"type\">NSError</span>?)-&gt;<span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> error == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> responseData:<span class=\"type\">NSDictionary</span> = <span class=\"keyword\">try</span> <span class=\"type\">NSJSONSerialization</span>.<span class=\"type\">JSONObjectWithData</span>(data!, options: <span class=\"type\">NSJSONReadingOptions</span>.<span class=\"type\">AllowFragments</span>) <span class=\"keyword\">as</span>! <span class=\"type\">NSDictionary</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"普通带头与参数的GET请求 --- &gt; \\(responseData)\"</span>)</span><br><span class=\"line\">         &#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">task.resume()</span><br></pre></td></tr></table></figure>\n<p><strong>设置头以及带参数的POST请求：</strong></p>\n<p>如果不想设置头可以不要使用<code>addValue方法</code>，参数必须设置在<code>HTTPBody</code>中。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> request:<span class=\"type\">NSMutableURLRequest</span> = <span class=\"type\">NSMutableURLRequest</span>(<span class=\"type\">URL</span>: <span class=\"keyword\">self</span>.url)</span><br><span class=\"line\">request.<span class=\"type\">HTTPMethod</span> = <span class=\"string\">\"POST\"</span></span><br><span class=\"line\"><span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data:<span class=\"type\">NSData</span> = <span class=\"keyword\">try</span> <span class=\"type\">NSJSONSerialization</span>.dataWithJSONObject(<span class=\"type\">NSDictionary</span>(object: <span class=\"string\">\"icepy\"</span>, forKey: <span class=\"string\">\"name\"</span>), options: <span class=\"type\">NSJSONWritingOptions</span>.<span class=\"type\">PrettyPrinted</span>)</span><br><span class=\"line\">    request.<span class=\"type\">HTTPBody</span> = data</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">request.addValue(<span class=\"string\">\"wen\"</span>, forHTTPHeaderField: <span class=\"string\">\"Session-Control-Key\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> configuration:<span class=\"type\">NSURLSessionConfiguration</span> = <span class=\"type\">NSURLSessionConfiguration</span>.defaultSessionConfiguration()</span><br><span class=\"line\"><span class=\"keyword\">let</span> session:<span class=\"type\">NSURLSession</span> = <span class=\"type\">NSURLSession</span>(configuration: configuration)</span><br><span class=\"line\"><span class=\"keyword\">let</span> task:<span class=\"type\">NSURLSessionDataTask</span> = session.dataTaskWithRequest(request, completionHandler: &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>](data:<span class=\"type\">NSData</span>?,response:<span class=\"type\">NSURLResponse</span>?,error:<span class=\"type\">NSError</span>?) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> error == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> responseData:<span class=\"type\">NSDictionary</span> = <span class=\"keyword\">try</span> <span class=\"type\">NSJSONSerialization</span>.<span class=\"type\">JSONObjectWithData</span>(data!, options: <span class=\"type\">NSJSONReadingOptions</span>.<span class=\"type\">AllowFragments</span>) <span class=\"keyword\">as</span>! <span class=\"type\">NSDictionary</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"普通空的POST请求 --- &gt; \\(responseData)\"</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">task.resume()</span><br></pre></td></tr></table></figure>\n<p><strong>下载：</strong></p>\n<p>下载的处理，稍微有些不同，NSURLSession的DownloadTask会将下载的内容下载在临时temp目录，下载完成之后需要将内容从临时目录移动到你的保存目录，在移动之前还需要去判断一下是否已经存在，如果已经存在需要先删除。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> url:<span class=\"type\">NSURL</span> = <span class=\"type\">NSURL</span>(string: <span class=\"string\">\"http://content.battlenet.com.cn/wow/media/screenshots/screenshot-of-the-day/warlords-of-draenor/warlords-of-draenor-ss0420-large.jpg\"</span>)!</span><br><span class=\"line\"><span class=\"keyword\">let</span> request:<span class=\"type\">NSURLRequest</span> = <span class=\"type\">NSURLRequest</span>(<span class=\"type\">URL</span>: url)</span><br><span class=\"line\"><span class=\"keyword\">let</span> configuration:<span class=\"type\">NSURLSessionConfiguration</span> = <span class=\"type\">NSURLSessionConfiguration</span>.defaultSessionConfiguration()</span><br><span class=\"line\"><span class=\"keyword\">let</span> session:<span class=\"type\">NSURLSession</span> = <span class=\"type\">NSURLSession</span>(configuration: configuration)</span><br><span class=\"line\"><span class=\"keyword\">let</span> task = session.downloadTaskWithRequest(request, completionHandler: &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>](location:<span class=\"type\">NSURL</span>?,response:<span class=\"type\">NSURLResponse</span>?,error:<span class=\"type\">NSError</span>?) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> error == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> fromPath = location!.path&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> file:<span class=\"type\">NSString</span> = docDirPath.stringByAppendingPathComponent(<span class=\"string\">\"wow.png\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.removeFile()&#123;</span><br><span class=\"line\">                <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> <span class=\"keyword\">self</span>.manager.moveItemAtPath(fromPath, toPath: file <span class=\"keyword\">as</span> <span class=\"type\">String</span>)</span><br><span class=\"line\">                    dispatch_async(dispatch_get_main_queue(), &#123;</span><br><span class=\"line\">                        [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">                        <span class=\"keyword\">self</span>.imageView.image = <span class=\"type\">UIImage</span>(named: file <span class=\"keyword\">as</span> <span class=\"type\">String</span>)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(<span class=\"string\">\"移动临时数据到保存目录出错\"</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">task.resume()</span><br></pre></td></tr></table></figure>\n<p>删除的方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">removeFile</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Bool</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> file:<span class=\"type\">NSString</span> = docDirPath.stringByAppendingPathComponent(<span class=\"string\">\"wow.png\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.manager.fileExistsAtPath(file <span class=\"keyword\">as</span> <span class=\"type\">String</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> <span class=\"keyword\">self</span>.manager.removeItemAtPath(file <span class=\"keyword\">as</span> <span class=\"type\">String</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>上传：</strong></p>\n<p>上传可以使用两种方式来实现</p>\n<ul>\n<li>NSURLSessionUploadTask</li>\n<li>NSURLSessionDataTask</li>\n</ul>\n<p><code>NSURLSessionUploadTask</code>上传成功之后会下载返回结果，反之<code>NSURLSessionDataTask</code>不会。</p>\n<p>POST表单上传：</p>\n<p>上传还可以利用POST构造一个HTTP表单来完成，需要注意的是使用正确的上传表单头，以及正确的构造主体。</p>\n<pre><code>//multipart/form-data  上传所使用的Content-Type\n//image/jpg  上传类型\n</code></pre><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> url:<span class=\"type\">NSURL</span> = <span class=\"type\">NSURL</span>(string: <span class=\"string\">\"http://pitayaswift.sinaapp.com/pitaya.php\"</span>)!</span><br><span class=\"line\"><span class=\"comment\">//模拟表单提交</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> request:<span class=\"type\">NSMutableURLRequest</span> = <span class=\"type\">NSMutableURLRequest</span>(<span class=\"type\">URL</span>:url)</span><br><span class=\"line\">request.<span class=\"type\">HTTPMethod</span> = <span class=\"string\">\"POST\"</span></span><br><span class=\"line\">request.addValue(<span class=\"string\">\"Content-Type\"</span>, forHTTPHeaderField: <span class=\"string\">\"multipart/form-data; boundary=\\(boundary)\"</span>)</span><br><span class=\"line\">request.<span class=\"type\">HTTPBody</span> = <span class=\"keyword\">self</span>.setRequestFile(request)</span><br><span class=\"line\"><span class=\"keyword\">let</span> configuration:<span class=\"type\">NSURLSessionConfiguration</span> = <span class=\"type\">NSURLSessionConfiguration</span>.defaultSessionConfiguration()</span><br><span class=\"line\"><span class=\"keyword\">let</span> session:<span class=\"type\">NSURLSession</span> = <span class=\"type\">NSURLSession</span>(configuration: configuration)</span><br><span class=\"line\"><span class=\"keyword\">let</span> task:<span class=\"type\">NSURLSessionDataTask</span> = session.dataTaskWithRequest(request, completionHandler: &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>](data:<span class=\"type\">NSData</span>?,response:<span class=\"type\">NSURLResponse</span>?,error:<span class=\"type\">NSError</span>?) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">task.resume()</span><br></pre></td></tr></table></figure>\n<p>构造主体方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setRequestFile</span><span class=\"params\">(request:NSMutableURLRequest)</span></span>-&gt; <span class=\"type\">NSData</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> header = request.allHTTPHeaderFields</span><br><span class=\"line\">    <span class=\"keyword\">let</span> body = <span class=\"type\">NSMutableData</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileType:<span class=\"type\">STFType</span> = <span class=\"type\">STFType</span>(name: <span class=\"string\">\"logo\"</span>, type: <span class=\"string\">\"jpg\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> codeName:<span class=\"type\">String</span> = <span class=\"string\">\"file\"</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileUrl:<span class=\"type\">String</span>? =  <span class=\"type\">NSBundle</span>.mainBundle().pathForResource(fileType.fileName, ofType:fileType.fileType)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> contentType:<span class=\"type\">AnyObject</span> = header![<span class=\"string\">\"Content-Type\"</span>]&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"set Content-Type --- \\(contentType)\"</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"set Content-Type --- empty\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"type\">STFileParams</span>:[<span class=\"type\">STFile</span>] = [<span class=\"type\">STFile</span>(name: codeName, url: fileUrl,data:<span class=\"literal\">nil</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> file:<span class=\"type\">STFile</span> <span class=\"keyword\">in</span> <span class=\"type\">STFileParams</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> file.fileData == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">            body.appendData(<span class=\"string\">\"--\\(boundary)\\r\\n\"</span>.<span class=\"type\">STNSData</span>)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> _fileURL = <span class=\"type\">NSURL</span>(fileURLWithPath: file.fileURL!)</span><br><span class=\"line\">            body.appendData(<span class=\"string\">\"Content-Disposition: form-data; name=\\\"\\(file.fileName)\\\"; filename=\\\"\\(_fileURL.lastPathComponent)\\\"\\r\\n\\r\\n\"</span>.<span class=\"type\">STNSData</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> fileData = <span class=\"type\">NSData</span>(contentsOfFile: file.fileURL!)&#123;</span><br><span class=\"line\">                body.appendData(fileData)</span><br><span class=\"line\">                body.appendData(<span class=\"string\">\"\\r\\n\"</span>.<span class=\"type\">STNSData</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            body.appendData(file.fileData!)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    body.appendData(<span class=\"string\">\"--\\(boundary)--\\r\\n\"</span>.<span class=\"type\">STNSData</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> body</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"留给大家一个小题目\"><a href=\"#留给大家一个小题目\" class=\"headerlink\" title=\"留给大家一个小题目\"></a>留给大家一个小题目</h2><p>如何使用<code>NSURLSessionUploadTask</code>来实现上传</p>\n"},{"title":"NSOperation实现多线程（Swift）","date":"2015-12-29T03:36:27.000Z","_content":"\n在上周，我用GCD去实践练习了一下多线程的使用，这周我将练习一种不同的多线程实现。\n\n为了理解多线程你还需要理解一些概念性的东西，比如什么是串行，什么是并行，什么是临界区，什么是竞态条件。\n\n关于这些概念，推荐一本书[《操作系统:精髓与设计原理》](http://www.amazon.cn/gp/product/B0041859AI?psc=1&ref_=oh_aui_detailpage_o07_s00)，我且当你知道并且了解。\n\n**前言论述**\n\n在Foundation框架中提供了一个叫做`NSThread`的类，从名字上咱们就能看出，这是一个属于跟`线程`操作有关的类，没错。但是使用它来管理多个线程特别的繁琐，需要考虑竞态条件，需要锁等。于是，`NSOperation`和`NSOperationQueue`提供了更高级的封装，来很好的处理多个线程。\n\n**实践练习**\n\n`NSOperation`是一个抽象类，所以不能直接使用它，但是它可以为子类提供有用且线程安全的建立状态，优先级，依赖和取消等操作。\n\n- 继承它来自己实现内部\n- 使用`NSBlockOperation`\n\n**注意：Swift中将不存在NSInvocationOperation相关APIs**\n\n`NSOperationQueue`则有些类似`线程池`，我们使用的`NSOperation`都需要添加到`NSOperationQueue`中，用来方便管理这些线程。\n\n**它们应该是一对好兄弟**\n\nNSOperation提供了`ready`，` cancelled`，` executing`， `finished`，这几个状态变化，可以通过`KVO`来通知改变这些状态，一般场景下你可能使用不到这些，除非你自己继承`NSOperation`来实现子类的方式来使用，你才需要管理这些状态。\n\n```Swift\nlet operation3 = NSBlockOperation(block: {\n    _ in\n    print(\"不用NSOperationQueue\")\n})\noperation3.start()\n```\n\n**添加依赖**\n\n这个步骤在某些场景下非常有用，比如我先读取本地文件，然后根据文件来发送网络请求，这里可见网络请求是依赖于读取本地文件的。\n\n```Swift\noperation2.addDependency(operation1)\n```\n*注意事项：*\n\n- 避免循环依赖，比如A依赖B，B又依赖A，那么恭喜你，死锁了。\n\n**执行**\n\n如果你使用了`NSOperationQueue`，那么你将不需要手动调用`start`方法，因为队列会帮助我们调用start方法。\n\n**取消**\n\n`NSOperation`允许你取消一个任务，跟GCD一样，如果任务正在执行，且是无法取消的，只能等待任务完成，调用`cancel`方法\n\n**优先级**\n\n通过设置`NSOperation`的`queuePriority`属性来提高某个`NSOperation`的优先级。\n\n```Swift\npublic enum NSOperationQueuePriority : Int {\n    case VeryLow\n    case Low\n    case Normal\n    case High\n    case VeryHigh\n}\n```\n\n**例子**\n\n读取本地文件和网络请求\n\n```Swift\nlet queue:NSOperationQueue = NSOperationQueue()\n//读取文件\nlet operation1:NSBlockOperation = NSBlockOperation(block: {\n    _ in\n\n    let path:String = NSBundle.mainBundle().pathForResource(\"gulpfile\", ofType: \"js\")!\n    let manager:NSFileManager = NSFileManager.defaultManager()\n    let isTrue:Bool = manager.fileExistsAtPath(path)\n    if isTrue {\n        print(\"文件存在读取 \\(path)\")\n        do{\n            let content:String = try NSString(contentsOfURL: NSURL(string: path)!, encoding: NSUTF8StringEncoding) as String\n            print(\"----------读取文件数据---------\")\n            print(\"\\(content)\")\n            print(\"----------读取文件数据---------\")\n        }catch{\n            print(\"读取错误\")\n        }\n    }\n})\n\n//网络请求\nlet operation2:NSBlockOperation = NSBlockOperation(block: {\n    _ in\n\n    let url:String = \"https://github.com/icepy\"\n    let urlObject:NSURL = NSURL(string: url)!\n    let request:NSURLRequest = NSURLRequest(URL: urlObject)\n    var response:NSURLResponse?\n    do{\n        let data:NSData = try NSURLConnection.sendSynchronousRequest(request, returningResponse: &response)\n        if let HTTPResponse = response as? NSHTTPURLResponse{\n            print(\"状态码：\\(HTTPResponse.statusCode)\")\n            print(\"============数据===========\")\n            print(\"\\(data)\")\n            print(\"============数据===========\")\n        }\n    }catch{\n\n    }\n})\n//网络请求在读取文件之前\noperation2.addDependency(operation1)\n\nqueue.addOperation(operation2)\nqueue.addOperation(operation1)\n//取消网络请求\noperation2.cancel()\nprint(\"网络请求-同步不会阻塞显示这里\")\nprint(\"读取文件不会阻塞显示这里\")\n\n//NSInvocationOperation 在 Swift不存在相关API\n\nlet operation3 = NSBlockOperation(block: {\n    _ in\n    print(\"不用NSOperationQueue\")\n})\noperation3.start()\n```\n","source":"_posts/swift-nsoperation.md","raw":"title: NSOperation实现多线程（Swift）\ndate: 2015-12-29 11:36:27\ntags: Swift\n---\n\n在上周，我用GCD去实践练习了一下多线程的使用，这周我将练习一种不同的多线程实现。\n\n为了理解多线程你还需要理解一些概念性的东西，比如什么是串行，什么是并行，什么是临界区，什么是竞态条件。\n\n关于这些概念，推荐一本书[《操作系统:精髓与设计原理》](http://www.amazon.cn/gp/product/B0041859AI?psc=1&ref_=oh_aui_detailpage_o07_s00)，我且当你知道并且了解。\n\n**前言论述**\n\n在Foundation框架中提供了一个叫做`NSThread`的类，从名字上咱们就能看出，这是一个属于跟`线程`操作有关的类，没错。但是使用它来管理多个线程特别的繁琐，需要考虑竞态条件，需要锁等。于是，`NSOperation`和`NSOperationQueue`提供了更高级的封装，来很好的处理多个线程。\n\n**实践练习**\n\n`NSOperation`是一个抽象类，所以不能直接使用它，但是它可以为子类提供有用且线程安全的建立状态，优先级，依赖和取消等操作。\n\n- 继承它来自己实现内部\n- 使用`NSBlockOperation`\n\n**注意：Swift中将不存在NSInvocationOperation相关APIs**\n\n`NSOperationQueue`则有些类似`线程池`，我们使用的`NSOperation`都需要添加到`NSOperationQueue`中，用来方便管理这些线程。\n\n**它们应该是一对好兄弟**\n\nNSOperation提供了`ready`，` cancelled`，` executing`， `finished`，这几个状态变化，可以通过`KVO`来通知改变这些状态，一般场景下你可能使用不到这些，除非你自己继承`NSOperation`来实现子类的方式来使用，你才需要管理这些状态。\n\n```Swift\nlet operation3 = NSBlockOperation(block: {\n    _ in\n    print(\"不用NSOperationQueue\")\n})\noperation3.start()\n```\n\n**添加依赖**\n\n这个步骤在某些场景下非常有用，比如我先读取本地文件，然后根据文件来发送网络请求，这里可见网络请求是依赖于读取本地文件的。\n\n```Swift\noperation2.addDependency(operation1)\n```\n*注意事项：*\n\n- 避免循环依赖，比如A依赖B，B又依赖A，那么恭喜你，死锁了。\n\n**执行**\n\n如果你使用了`NSOperationQueue`，那么你将不需要手动调用`start`方法，因为队列会帮助我们调用start方法。\n\n**取消**\n\n`NSOperation`允许你取消一个任务，跟GCD一样，如果任务正在执行，且是无法取消的，只能等待任务完成，调用`cancel`方法\n\n**优先级**\n\n通过设置`NSOperation`的`queuePriority`属性来提高某个`NSOperation`的优先级。\n\n```Swift\npublic enum NSOperationQueuePriority : Int {\n    case VeryLow\n    case Low\n    case Normal\n    case High\n    case VeryHigh\n}\n```\n\n**例子**\n\n读取本地文件和网络请求\n\n```Swift\nlet queue:NSOperationQueue = NSOperationQueue()\n//读取文件\nlet operation1:NSBlockOperation = NSBlockOperation(block: {\n    _ in\n\n    let path:String = NSBundle.mainBundle().pathForResource(\"gulpfile\", ofType: \"js\")!\n    let manager:NSFileManager = NSFileManager.defaultManager()\n    let isTrue:Bool = manager.fileExistsAtPath(path)\n    if isTrue {\n        print(\"文件存在读取 \\(path)\")\n        do{\n            let content:String = try NSString(contentsOfURL: NSURL(string: path)!, encoding: NSUTF8StringEncoding) as String\n            print(\"----------读取文件数据---------\")\n            print(\"\\(content)\")\n            print(\"----------读取文件数据---------\")\n        }catch{\n            print(\"读取错误\")\n        }\n    }\n})\n\n//网络请求\nlet operation2:NSBlockOperation = NSBlockOperation(block: {\n    _ in\n\n    let url:String = \"https://github.com/icepy\"\n    let urlObject:NSURL = NSURL(string: url)!\n    let request:NSURLRequest = NSURLRequest(URL: urlObject)\n    var response:NSURLResponse?\n    do{\n        let data:NSData = try NSURLConnection.sendSynchronousRequest(request, returningResponse: &response)\n        if let HTTPResponse = response as? NSHTTPURLResponse{\n            print(\"状态码：\\(HTTPResponse.statusCode)\")\n            print(\"============数据===========\")\n            print(\"\\(data)\")\n            print(\"============数据===========\")\n        }\n    }catch{\n\n    }\n})\n//网络请求在读取文件之前\noperation2.addDependency(operation1)\n\nqueue.addOperation(operation2)\nqueue.addOperation(operation1)\n//取消网络请求\noperation2.cancel()\nprint(\"网络请求-同步不会阻塞显示这里\")\nprint(\"读取文件不会阻塞显示这里\")\n\n//NSInvocationOperation 在 Swift不存在相关API\n\nlet operation3 = NSBlockOperation(block: {\n    _ in\n    print(\"不用NSOperationQueue\")\n})\noperation3.start()\n```\n","slug":"swift-nsoperation","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk1n001juejrecvbqe1g","content":"<p>在上周，我用GCD去实践练习了一下多线程的使用，这周我将练习一种不同的多线程实现。</p>\n<p>为了理解多线程你还需要理解一些概念性的东西，比如什么是串行，什么是并行，什么是临界区，什么是竞态条件。</p>\n<p>关于这些概念，推荐一本书<a href=\"http://www.amazon.cn/gp/product/B0041859AI?psc=1&amp;ref_=oh_aui_detailpage_o07_s00\" target=\"_blank\" rel=\"external\">《操作系统:精髓与设计原理》</a>，我且当你知道并且了解。</p>\n<p><strong>前言论述</strong></p>\n<p>在Foundation框架中提供了一个叫做<code>NSThread</code>的类，从名字上咱们就能看出，这是一个属于跟<code>线程</code>操作有关的类，没错。但是使用它来管理多个线程特别的繁琐，需要考虑竞态条件，需要锁等。于是，<code>NSOperation</code>和<code>NSOperationQueue</code>提供了更高级的封装，来很好的处理多个线程。</p>\n<p><strong>实践练习</strong></p>\n<p><code>NSOperation</code>是一个抽象类，所以不能直接使用它，但是它可以为子类提供有用且线程安全的建立状态，优先级，依赖和取消等操作。</p>\n<ul>\n<li>继承它来自己实现内部</li>\n<li>使用<code>NSBlockOperation</code></li>\n</ul>\n<p><strong>注意：Swift中将不存在NSInvocationOperation相关APIs</strong></p>\n<p><code>NSOperationQueue</code>则有些类似<code>线程池</code>，我们使用的<code>NSOperation</code>都需要添加到<code>NSOperationQueue</code>中，用来方便管理这些线程。</p>\n<p><strong>它们应该是一对好兄弟</strong></p>\n<p>NSOperation提供了<code>ready</code>，<code>cancelled</code>，<code>executing</code>， <code>finished</code>，这几个状态变化，可以通过<code>KVO</code>来通知改变这些状态，一般场景下你可能使用不到这些，除非你自己继承<code>NSOperation</code>来实现子类的方式来使用，你才需要管理这些状态。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> operation3 = <span class=\"type\">NSBlockOperation</span>(block: &#123;</span><br><span class=\"line\">    <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"不用NSOperationQueue\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">operation3.start()</span><br></pre></td></tr></table></figure>\n<p><strong>添加依赖</strong></p>\n<p>这个步骤在某些场景下非常有用，比如我先读取本地文件，然后根据文件来发送网络请求，这里可见网络请求是依赖于读取本地文件的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">operation2.addDependency(operation1)</span><br></pre></td></tr></table></figure>\n<p><em>注意事项：</em></p>\n<ul>\n<li>避免循环依赖，比如A依赖B，B又依赖A，那么恭喜你，死锁了。</li>\n</ul>\n<p><strong>执行</strong></p>\n<p>如果你使用了<code>NSOperationQueue</code>，那么你将不需要手动调用<code>start</code>方法，因为队列会帮助我们调用start方法。</p>\n<p><strong>取消</strong></p>\n<p><code>NSOperation</code>允许你取消一个任务，跟GCD一样，如果任务正在执行，且是无法取消的，只能等待任务完成，调用<code>cancel</code>方法</p>\n<p><strong>优先级</strong></p>\n<p>通过设置<code>NSOperation</code>的<code>queuePriority</code>属性来提高某个<code>NSOperation</code>的优先级。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">NSOperationQueuePriority</span> : <span class=\"title\">Int</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">VeryLow</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Low</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Normal</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">High</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">VeryHigh</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>例子</strong></p>\n<p>读取本地文件和网络请求</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue:<span class=\"type\">NSOperationQueue</span> = <span class=\"type\">NSOperationQueue</span>()</span><br><span class=\"line\"><span class=\"comment\">//读取文件</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> operation1:<span class=\"type\">NSBlockOperation</span> = <span class=\"type\">NSBlockOperation</span>(block: &#123;</span><br><span class=\"line\">    <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> path:<span class=\"type\">String</span> = <span class=\"type\">NSBundle</span>.mainBundle().pathForResource(<span class=\"string\">\"gulpfile\"</span>, ofType: <span class=\"string\">\"js\"</span>)!</span><br><span class=\"line\">    <span class=\"keyword\">let</span> manager:<span class=\"type\">NSFileManager</span> = <span class=\"type\">NSFileManager</span>.defaultManager()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isTrue:<span class=\"type\">Bool</span> = manager.fileExistsAtPath(path)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> isTrue &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"文件存在读取 \\(path)\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> content:<span class=\"type\">String</span> = <span class=\"keyword\">try</span> <span class=\"type\">NSString</span>(contentsOfURL: <span class=\"type\">NSURL</span>(string: path)!, encoding: <span class=\"type\">NSUTF8StringEncoding</span>) <span class=\"keyword\">as</span> <span class=\"type\">String</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"----------读取文件数据---------\"</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(content)\"</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"----------读取文件数据---------\"</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"读取错误\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//网络请求</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> operation2:<span class=\"type\">NSBlockOperation</span> = <span class=\"type\">NSBlockOperation</span>(block: &#123;</span><br><span class=\"line\">    <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> url:<span class=\"type\">String</span> = <span class=\"string\">\"https://github.com/icepy\"</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> urlObject:<span class=\"type\">NSURL</span> = <span class=\"type\">NSURL</span>(string: url)!</span><br><span class=\"line\">    <span class=\"keyword\">let</span> request:<span class=\"type\">NSURLRequest</span> = <span class=\"type\">NSURLRequest</span>(<span class=\"type\">URL</span>: urlObject)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> response:<span class=\"type\">NSURLResponse</span>?</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data:<span class=\"type\">NSData</span> = <span class=\"keyword\">try</span> <span class=\"type\">NSURLConnection</span>.sendSynchronousRequest(request, returningResponse: &amp;response)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"type\">HTTPResponse</span> = response <span class=\"keyword\">as</span>? <span class=\"type\">NSHTTPURLResponse</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"状态码：\\(HTTPResponse.statusCode)\"</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"============数据===========\"</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(data)\"</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"============数据===========\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//网络请求在读取文件之前</span></span><br><span class=\"line\">operation2.addDependency(operation1)</span><br><span class=\"line\"></span><br><span class=\"line\">queue.addOperation(operation2)</span><br><span class=\"line\">queue.addOperation(operation1)</span><br><span class=\"line\"><span class=\"comment\">//取消网络请求</span></span><br><span class=\"line\">operation2.cancel()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"网络请求-同步不会阻塞显示这里\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"读取文件不会阻塞显示这里\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//NSInvocationOperation 在 Swift不存在相关API</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> operation3 = <span class=\"type\">NSBlockOperation</span>(block: &#123;</span><br><span class=\"line\">    <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"不用NSOperationQueue\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">operation3.start()</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>在上周，我用GCD去实践练习了一下多线程的使用，这周我将练习一种不同的多线程实现。</p>\n<p>为了理解多线程你还需要理解一些概念性的东西，比如什么是串行，什么是并行，什么是临界区，什么是竞态条件。</p>\n<p>关于这些概念，推荐一本书<a href=\"http://www.amazon.cn/gp/product/B0041859AI?psc=1&amp;ref_=oh_aui_detailpage_o07_s00\">《操作系统:精髓与设计原理》</a>，我且当你知道并且了解。</p>\n<p><strong>前言论述</strong></p>\n<p>在Foundation框架中提供了一个叫做<code>NSThread</code>的类，从名字上咱们就能看出，这是一个属于跟<code>线程</code>操作有关的类，没错。但是使用它来管理多个线程特别的繁琐，需要考虑竞态条件，需要锁等。于是，<code>NSOperation</code>和<code>NSOperationQueue</code>提供了更高级的封装，来很好的处理多个线程。</p>\n<p><strong>实践练习</strong></p>\n<p><code>NSOperation</code>是一个抽象类，所以不能直接使用它，但是它可以为子类提供有用且线程安全的建立状态，优先级，依赖和取消等操作。</p>\n<ul>\n<li>继承它来自己实现内部</li>\n<li>使用<code>NSBlockOperation</code></li>\n</ul>\n<p><strong>注意：Swift中将不存在NSInvocationOperation相关APIs</strong></p>\n<p><code>NSOperationQueue</code>则有些类似<code>线程池</code>，我们使用的<code>NSOperation</code>都需要添加到<code>NSOperationQueue</code>中，用来方便管理这些线程。</p>\n<p><strong>它们应该是一对好兄弟</strong></p>\n<p>NSOperation提供了<code>ready</code>，<code>cancelled</code>，<code>executing</code>， <code>finished</code>，这几个状态变化，可以通过<code>KVO</code>来通知改变这些状态，一般场景下你可能使用不到这些，除非你自己继承<code>NSOperation</code>来实现子类的方式来使用，你才需要管理这些状态。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> operation3 = <span class=\"type\">NSBlockOperation</span>(block: &#123;</span><br><span class=\"line\">    <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"不用NSOperationQueue\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">operation3.start()</span><br></pre></td></tr></table></figure>\n<p><strong>添加依赖</strong></p>\n<p>这个步骤在某些场景下非常有用，比如我先读取本地文件，然后根据文件来发送网络请求，这里可见网络请求是依赖于读取本地文件的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">operation2.addDependency(operation1)</span><br></pre></td></tr></table></figure>\n<p><em>注意事项：</em></p>\n<ul>\n<li>避免循环依赖，比如A依赖B，B又依赖A，那么恭喜你，死锁了。</li>\n</ul>\n<p><strong>执行</strong></p>\n<p>如果你使用了<code>NSOperationQueue</code>，那么你将不需要手动调用<code>start</code>方法，因为队列会帮助我们调用start方法。</p>\n<p><strong>取消</strong></p>\n<p><code>NSOperation</code>允许你取消一个任务，跟GCD一样，如果任务正在执行，且是无法取消的，只能等待任务完成，调用<code>cancel</code>方法</p>\n<p><strong>优先级</strong></p>\n<p>通过设置<code>NSOperation</code>的<code>queuePriority</code>属性来提高某个<code>NSOperation</code>的优先级。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">NSOperationQueuePriority</span> : <span class=\"title\">Int</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">VeryLow</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Low</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Normal</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">High</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">VeryHigh</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>例子</strong></p>\n<p>读取本地文件和网络请求</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue:<span class=\"type\">NSOperationQueue</span> = <span class=\"type\">NSOperationQueue</span>()</span><br><span class=\"line\"><span class=\"comment\">//读取文件</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> operation1:<span class=\"type\">NSBlockOperation</span> = <span class=\"type\">NSBlockOperation</span>(block: &#123;</span><br><span class=\"line\">    <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> path:<span class=\"type\">String</span> = <span class=\"type\">NSBundle</span>.mainBundle().pathForResource(<span class=\"string\">\"gulpfile\"</span>, ofType: <span class=\"string\">\"js\"</span>)!</span><br><span class=\"line\">    <span class=\"keyword\">let</span> manager:<span class=\"type\">NSFileManager</span> = <span class=\"type\">NSFileManager</span>.defaultManager()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isTrue:<span class=\"type\">Bool</span> = manager.fileExistsAtPath(path)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> isTrue &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"文件存在读取 \\(path)\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> content:<span class=\"type\">String</span> = <span class=\"keyword\">try</span> <span class=\"type\">NSString</span>(contentsOfURL: <span class=\"type\">NSURL</span>(string: path)!, encoding: <span class=\"type\">NSUTF8StringEncoding</span>) <span class=\"keyword\">as</span> <span class=\"type\">String</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"----------读取文件数据---------\"</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(content)\"</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"----------读取文件数据---------\"</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"读取错误\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//网络请求</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> operation2:<span class=\"type\">NSBlockOperation</span> = <span class=\"type\">NSBlockOperation</span>(block: &#123;</span><br><span class=\"line\">    <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> url:<span class=\"type\">String</span> = <span class=\"string\">\"https://github.com/icepy\"</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> urlObject:<span class=\"type\">NSURL</span> = <span class=\"type\">NSURL</span>(string: url)!</span><br><span class=\"line\">    <span class=\"keyword\">let</span> request:<span class=\"type\">NSURLRequest</span> = <span class=\"type\">NSURLRequest</span>(<span class=\"type\">URL</span>: urlObject)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> response:<span class=\"type\">NSURLResponse</span>?</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data:<span class=\"type\">NSData</span> = <span class=\"keyword\">try</span> <span class=\"type\">NSURLConnection</span>.sendSynchronousRequest(request, returningResponse: &amp;response)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"type\">HTTPResponse</span> = response <span class=\"keyword\">as</span>? <span class=\"type\">NSHTTPURLResponse</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"状态码：\\(HTTPResponse.statusCode)\"</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"============数据===========\"</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(data)\"</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"============数据===========\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//网络请求在读取文件之前</span></span><br><span class=\"line\">operation2.addDependency(operation1)</span><br><span class=\"line\"></span><br><span class=\"line\">queue.addOperation(operation2)</span><br><span class=\"line\">queue.addOperation(operation1)</span><br><span class=\"line\"><span class=\"comment\">//取消网络请求</span></span><br><span class=\"line\">operation2.cancel()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"网络请求-同步不会阻塞显示这里\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"读取文件不会阻塞显示这里\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//NSInvocationOperation 在 Swift不存在相关API</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> operation3 = <span class=\"type\">NSBlockOperation</span>(block: &#123;</span><br><span class=\"line\">    <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"不用NSOperationQueue\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">operation3.start()</span><br></pre></td></tr></table></figure>\n"},{"title":"NSThread（Swift）","date":"2016-01-05T03:35:30.000Z","_content":"\n`Thread`是iOS中处理线程最轻量的一种方式，而且非常直观的在操作线程，唯一的缺陷是需要自己去管理线程的生命周期，协调多个线程对同一个数据的操作。\n\n**创建NSThread**\n\n```Swift\n\nNSThread.detachNewThreadSelector(\"detacThread\", toTarget: self, withObject: nil)\n\nself.thread = NSThread(target: self, selector: \"oneThread\", object: nil)\nself.thread!.threadPriority = 1.0\nself.thread!.start()\n\n```\n\n**使用NSThread下载图片**\n\n这里我使用`storyboard`拖了一个`UIButton`和`UIImageView`出来，并且连接到`UIViewController`中：\n\n```Swift\n@IBOutlet weak var imageView: UIImageView!\n\n@IBAction func downloadImages(sender: UIButton) {\n\n      //业务逻辑\n}\n```\n\n开始初始化`NSThread`\n\n```Swift\nif self.clickLock == nil{\n     self.clickLock = true\n     self.thread = NSThread(target: self, selector: \"oneThread\", object: nil)\n     self.thread!.threadPriority = 1.0\n     self.thread!.start()\n}\n```\n\n调用的是当前`oneThread`方法\n\n```Swift\nfunc oneThread(){\n    //需要管理线程的生命周期、同步、加锁问题，这会导致一定的性能开销\n    let url:String = \"http://content.battlenet.com.cn/wow/media/screenshots/selfie/selfie001-large.jpg\"\n    let urlObject:NSURL = NSURL(string: url)!\n    let request:NSURLRequest = NSURLRequest(URL: urlObject)\n    var response:NSURLResponse?\n    do{\n        let data:NSData = try NSURLConnection.sendSynchronousRequest(request, returningResponse: &response)\n        if let HTTPResponse = response as? NSHTTPURLResponse{\n            print(\"状态码：\\(HTTPResponse.statusCode)\")\n            print(\"============数据===========\")\n            print(\"============数据===========\")\n            self.clickLock = nil\n            let current:NSThread = NSThread.currentThread()\n            let main:NSThread = NSThread.mainThread()\n            self.performSelectorOnMainThread(\"updateUI:\", withObject: data, waitUntilDone: true)\n        }\n    }catch{\n\n    }\n}\n```\n\n**如何加锁，操作同一个数据**\n\n`NSThread`对于同步是需要自己去处理了，为了操作数据达到同步的目的，我们需要去加上锁，iOS中存在两种锁`NSCondition`和`NSLock`，这里我使用的是`NSLock`来处理。\n\n```Swift\nwhile true{\n    self.theLock?.lock()\n    if self.count! >= 0 {\n        NSThread.sleepForTimeInterval(0.08)\n        self.index = 100 - self.count!\n        print(\"数目-----> \\(self.count) 出售 ----> \\(self.index) 线程名 ----> \\(NSThread.currentThread().name)\")\n        self.count!--\n    }else{\n        break\n    }\n    self.theLock?.unlock()\n}\n```\n","source":"_posts/swift-nsthread.md","raw":"title: NSThread（Swift）\ndate: 2016-01-5 11:35:30\ntags: Swift\n---\n\n`Thread`是iOS中处理线程最轻量的一种方式，而且非常直观的在操作线程，唯一的缺陷是需要自己去管理线程的生命周期，协调多个线程对同一个数据的操作。\n\n**创建NSThread**\n\n```Swift\n\nNSThread.detachNewThreadSelector(\"detacThread\", toTarget: self, withObject: nil)\n\nself.thread = NSThread(target: self, selector: \"oneThread\", object: nil)\nself.thread!.threadPriority = 1.0\nself.thread!.start()\n\n```\n\n**使用NSThread下载图片**\n\n这里我使用`storyboard`拖了一个`UIButton`和`UIImageView`出来，并且连接到`UIViewController`中：\n\n```Swift\n@IBOutlet weak var imageView: UIImageView!\n\n@IBAction func downloadImages(sender: UIButton) {\n\n      //业务逻辑\n}\n```\n\n开始初始化`NSThread`\n\n```Swift\nif self.clickLock == nil{\n     self.clickLock = true\n     self.thread = NSThread(target: self, selector: \"oneThread\", object: nil)\n     self.thread!.threadPriority = 1.0\n     self.thread!.start()\n}\n```\n\n调用的是当前`oneThread`方法\n\n```Swift\nfunc oneThread(){\n    //需要管理线程的生命周期、同步、加锁问题，这会导致一定的性能开销\n    let url:String = \"http://content.battlenet.com.cn/wow/media/screenshots/selfie/selfie001-large.jpg\"\n    let urlObject:NSURL = NSURL(string: url)!\n    let request:NSURLRequest = NSURLRequest(URL: urlObject)\n    var response:NSURLResponse?\n    do{\n        let data:NSData = try NSURLConnection.sendSynchronousRequest(request, returningResponse: &response)\n        if let HTTPResponse = response as? NSHTTPURLResponse{\n            print(\"状态码：\\(HTTPResponse.statusCode)\")\n            print(\"============数据===========\")\n            print(\"============数据===========\")\n            self.clickLock = nil\n            let current:NSThread = NSThread.currentThread()\n            let main:NSThread = NSThread.mainThread()\n            self.performSelectorOnMainThread(\"updateUI:\", withObject: data, waitUntilDone: true)\n        }\n    }catch{\n\n    }\n}\n```\n\n**如何加锁，操作同一个数据**\n\n`NSThread`对于同步是需要自己去处理了，为了操作数据达到同步的目的，我们需要去加上锁，iOS中存在两种锁`NSCondition`和`NSLock`，这里我使用的是`NSLock`来处理。\n\n```Swift\nwhile true{\n    self.theLock?.lock()\n    if self.count! >= 0 {\n        NSThread.sleepForTimeInterval(0.08)\n        self.index = 100 - self.count!\n        print(\"数目-----> \\(self.count) 出售 ----> \\(self.index) 线程名 ----> \\(NSThread.currentThread().name)\")\n        self.count!--\n    }else{\n        break\n    }\n    self.theLock?.unlock()\n}\n```\n","slug":"swift-nsthread","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk1p001luejrd7afajnn","content":"<p><code>Thread</code>是iOS中处理线程最轻量的一种方式，而且非常直观的在操作线程，唯一的缺陷是需要自己去管理线程的生命周期，协调多个线程对同一个数据的操作。</p>\n<p><strong>创建NSThread</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">NSThread</span>.detachNewThreadSelector(<span class=\"string\">\"detacThread\"</span>, toTarget: <span class=\"keyword\">self</span>, withObject: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.thread = <span class=\"type\">NSThread</span>(target: <span class=\"keyword\">self</span>, selector: <span class=\"string\">\"oneThread\"</span>, object: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"><span class=\"keyword\">self</span>.thread!.threadPriority = <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"keyword\">self</span>.thread!.start()</span><br></pre></td></tr></table></figure>\n<p><strong>使用NSThread下载图片</strong></p>\n<p>这里我使用<code>storyboard</code>拖了一个<code>UIButton</code>和<code>UIImageView</code>出来，并且连接到<code>UIViewController</code>中：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> imageView: <span class=\"type\">UIImageView</span>!</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">downloadImages</span><span class=\"params\">(sender: UIButton)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//业务逻辑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开始初始化<code>NSThread</code></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.clickLock == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.clickLock = <span class=\"literal\">true</span></span><br><span class=\"line\">     <span class=\"keyword\">self</span>.thread = <span class=\"type\">NSThread</span>(target: <span class=\"keyword\">self</span>, selector: <span class=\"string\">\"oneThread\"</span>, object: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.thread!.threadPriority = <span class=\"number\">1.0</span></span><br><span class=\"line\">     <span class=\"keyword\">self</span>.thread!.start()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用的是当前<code>oneThread</code>方法</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">oneThread</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//需要管理线程的生命周期、同步、加锁问题，这会导致一定的性能开销</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> url:<span class=\"type\">String</span> = <span class=\"string\">\"http://content.battlenet.com.cn/wow/media/screenshots/selfie/selfie001-large.jpg\"</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> urlObject:<span class=\"type\">NSURL</span> = <span class=\"type\">NSURL</span>(string: url)!</span><br><span class=\"line\">    <span class=\"keyword\">let</span> request:<span class=\"type\">NSURLRequest</span> = <span class=\"type\">NSURLRequest</span>(<span class=\"type\">URL</span>: urlObject)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> response:<span class=\"type\">NSURLResponse</span>?</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data:<span class=\"type\">NSData</span> = <span class=\"keyword\">try</span> <span class=\"type\">NSURLConnection</span>.sendSynchronousRequest(request, returningResponse: &amp;response)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"type\">HTTPResponse</span> = response <span class=\"keyword\">as</span>? <span class=\"type\">NSHTTPURLResponse</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"状态码：\\(HTTPResponse.statusCode)\"</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"============数据===========\"</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"============数据===========\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.clickLock = <span class=\"literal\">nil</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> current:<span class=\"type\">NSThread</span> = <span class=\"type\">NSThread</span>.currentThread()</span><br><span class=\"line\">            <span class=\"keyword\">let</span> main:<span class=\"type\">NSThread</span> = <span class=\"type\">NSThread</span>.mainThread()</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.performSelectorOnMainThread(<span class=\"string\">\"updateUI:\"</span>, withObject: data, waitUntilDone: <span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>如何加锁，操作同一个数据</strong></p>\n<p><code>NSThread</code>对于同步是需要自己去处理了，为了操作数据达到同步的目的，我们需要去加上锁，iOS中存在两种锁<code>NSCondition</code>和<code>NSLock</code>，这里我使用的是<code>NSLock</code>来处理。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.theLock?.lock()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.<span class=\"built_in\">count</span>! &gt;= <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">NSThread</span>.sleepForTimeInterval(<span class=\"number\">0.08</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.index = <span class=\"number\">100</span> - <span class=\"keyword\">self</span>.<span class=\"built_in\">count</span>!</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"数目-----&gt; \\(self.count) 出售 ----&gt; \\(self.index) 线程名 ----&gt; \\(NSThread.currentThread().name)\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"built_in\">count</span>!--</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.theLock?.unlock()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><code>Thread</code>是iOS中处理线程最轻量的一种方式，而且非常直观的在操作线程，唯一的缺陷是需要自己去管理线程的生命周期，协调多个线程对同一个数据的操作。</p>\n<p><strong>创建NSThread</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">NSThread</span>.detachNewThreadSelector(<span class=\"string\">\"detacThread\"</span>, toTarget: <span class=\"keyword\">self</span>, withObject: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.thread = <span class=\"type\">NSThread</span>(target: <span class=\"keyword\">self</span>, selector: <span class=\"string\">\"oneThread\"</span>, object: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"><span class=\"keyword\">self</span>.thread!.threadPriority = <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"keyword\">self</span>.thread!.start()</span><br></pre></td></tr></table></figure>\n<p><strong>使用NSThread下载图片</strong></p>\n<p>这里我使用<code>storyboard</code>拖了一个<code>UIButton</code>和<code>UIImageView</code>出来，并且连接到<code>UIViewController</code>中：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> imageView: <span class=\"type\">UIImageView</span>!</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">downloadImages</span><span class=\"params\">(sender: UIButton)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//业务逻辑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开始初始化<code>NSThread</code></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.clickLock == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.clickLock = <span class=\"literal\">true</span></span><br><span class=\"line\">     <span class=\"keyword\">self</span>.thread = <span class=\"type\">NSThread</span>(target: <span class=\"keyword\">self</span>, selector: <span class=\"string\">\"oneThread\"</span>, object: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.thread!.threadPriority = <span class=\"number\">1.0</span></span><br><span class=\"line\">     <span class=\"keyword\">self</span>.thread!.start()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用的是当前<code>oneThread</code>方法</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">oneThread</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//需要管理线程的生命周期、同步、加锁问题，这会导致一定的性能开销</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> url:<span class=\"type\">String</span> = <span class=\"string\">\"http://content.battlenet.com.cn/wow/media/screenshots/selfie/selfie001-large.jpg\"</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> urlObject:<span class=\"type\">NSURL</span> = <span class=\"type\">NSURL</span>(string: url)!</span><br><span class=\"line\">    <span class=\"keyword\">let</span> request:<span class=\"type\">NSURLRequest</span> = <span class=\"type\">NSURLRequest</span>(<span class=\"type\">URL</span>: urlObject)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> response:<span class=\"type\">NSURLResponse</span>?</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data:<span class=\"type\">NSData</span> = <span class=\"keyword\">try</span> <span class=\"type\">NSURLConnection</span>.sendSynchronousRequest(request, returningResponse: &amp;response)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"type\">HTTPResponse</span> = response <span class=\"keyword\">as</span>? <span class=\"type\">NSHTTPURLResponse</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"状态码：\\(HTTPResponse.statusCode)\"</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"============数据===========\"</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"============数据===========\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.clickLock = <span class=\"literal\">nil</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> current:<span class=\"type\">NSThread</span> = <span class=\"type\">NSThread</span>.currentThread()</span><br><span class=\"line\">            <span class=\"keyword\">let</span> main:<span class=\"type\">NSThread</span> = <span class=\"type\">NSThread</span>.mainThread()</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.performSelectorOnMainThread(<span class=\"string\">\"updateUI:\"</span>, withObject: data, waitUntilDone: <span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>如何加锁，操作同一个数据</strong></p>\n<p><code>NSThread</code>对于同步是需要自己去处理了，为了操作数据达到同步的目的，我们需要去加上锁，iOS中存在两种锁<code>NSCondition</code>和<code>NSLock</code>，这里我使用的是<code>NSLock</code>来处理。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.theLock?.lock()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.<span class=\"built_in\">count</span>! &gt;= <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">NSThread</span>.sleepForTimeInterval(<span class=\"number\">0.08</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.index = <span class=\"number\">100</span> - <span class=\"keyword\">self</span>.<span class=\"built_in\">count</span>!</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"数目-----&gt; \\(self.count) 出售 ----&gt; \\(self.index) 线程名 ----&gt; \\(NSThread.currentThread().name)\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"built_in\">count</span>!--</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.theLock?.unlock()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"在Swift中如何使用指针并操作指针","date":"2015-11-14T03:45:27.000Z","_content":"\n**源代码基于 Swift 2.1+ Xcode 7.1.1编写**\n\n如果你还不了解指针，请先阅读[C语言指针5分钟教程](http://blog.jobbole.com/25409/)。\n\n在Swift中指针用两个特殊的类型来描述，UnsafePointer<T>和UnsafeMutablePointer<T>，遵循Cocoa的原则，可以看出`不可变`与`可变`的不同，当我们创建指针之后，就可以通过memory来操作指针了。另外，Swift中UnsafeBufferPointer<T>来描述一组连续的数据指针以及非完整结构不透明指针COpaquePointer\n\n**在函数中传递指针**\n\n在函数中传递指针有两种方式，一：使用`inout`关键字。二：使用Swift准备的指针类型。区别，我用注释写在具体的例子中。\n\n且先看看`inout`关键字，如何操作\n\n```Swift\nvar num:Int = 10\nfunc some(inout numb:Int){\n    //如果使用inout关键字，在函数体内部不需要处理指针类型，可直接操作\n    numb += 1\n    print(\"numb --> \\(numb)\")\n}\nsome(&num)\nprint(\"num ---> \\(num)\")\n```\n\n使用Swift准备的指针类型\n\n```Swift\nvar num:Int = 10\nfunc some(numb:UnsafeMutablePointer<Int>){\n    //如果使用Swift提供的类型，那么需要使用memory来进行操作\n    numb.memory += 1\n    print(\"numb --> \\(numb.memory)\")\n}\nsome(&num)\nprint(\"num ---> \\(num)\")\n```\n\n需要注意的是，Swift中地址符&是不能直接使用的，只能是函数传递时才可用。\n\n**如何直接操作**\n\n虽然无法像OC或者C中那样直接通过地址符&来操作指针，但是Swift也提供了辅助的方法间接的来帮助我们来操作指针。\n\n```Swift\nvar i:Int = 10\ni = withUnsafeMutablePointer(&i, {\n   (p:UnsafeMutablePointer<Int>) -> Int in\n       p.memory += 20\n       return p.memory\n})\nprint(\"i value ---> \\(i)\")\n```\n\n**如何使用指向数组的指针**\n\n如果只是函数传递，不可变直接传递，可变使用&符即可，如果想直接操作，那么还是需要UnsafeBufferPointer<T>来辅助完成。\n\n```Swift\nvar array:[Int] = [2,1,3,4]\nvar arrayPtr:UnsafeMutableBufferPointer<Int> = UnsafeMutableBufferPointer<Int>(start: &array, count: array.count)\nvar baseArrayPtr:UnsafeMutablePointer<Int> = arrayPtr.baseAddress as UnsafeMutablePointer<Int>\nvar nextPtr:UnsafeMutablePointer<Int> = baseArrayPtr.successor()\nvar threPtr:UnsafeMutablePointer<Int> = nextPtr.successor()\n\nprint(\"第一个元素  \\(baseArrayPtr.memory)\")\nprint(\"第二个元素 \\(nextPtr.memory)\")\nprint(\"第三个元素  \\(threPtr.memory)\")\n```\n\n**如何通过指针强制转换类型**\n\n这个操作比较危险，除非你明确预期知道类型，不然编译器是无法知道的，也就造成了非常大的不确定性。\n\n```Swift\nlet arr:NSArray = NSArray(object: \"icepy\")\nlet str:NSString = unsafeBitCast(arr[0],NSString.self)\n\nprint(\"str --- > \\(str.stringByAppendingPathComponent(\"app\"))\")\n```\n\n**创建一个指针**\n\n```Swift\n//创建可变指针\nvar i:UnsafeMutablePointer<String> = UnsafeMutablePointer<String>.alloc(10)\ni.initialize(\"icepy\")\n```\n\n**内存管理**\n\n还有一点要注意的是，如果是属于自己手动创建的指针，Swift是不负责管理内存的，需要手动的销毁与释放。\n\n一个UnsafeMutablePointer内存一般有三个状态：\n\n* 内存没有被分配，null指针\n* 内存进行了分配，且值还未初始化\n* 内存进行了分配，且值已经初始化\n\n```Swift\nvar i:UnsafeMutablePointer<String> = UnsafeMutablePointer<String>.alloc(10)\ni.initialize(\"icepy\")        \nprint(\"i的内存地址 \\(i)\")\nprint(\"i的memory \\(i.memory)\")        \ni.destroy() //销毁指针指向的对象\ni.dealloc(10) //销毁指针申请的内存\ni = nil\n```\n","source":"_posts/swift-pointer.md","raw":"title: 在Swift中如何使用指针并操作指针\ndate: 2015-11-14 11:45:27\ntags: Swift\n---\n\n**源代码基于 Swift 2.1+ Xcode 7.1.1编写**\n\n如果你还不了解指针，请先阅读[C语言指针5分钟教程](http://blog.jobbole.com/25409/)。\n\n在Swift中指针用两个特殊的类型来描述，UnsafePointer<T>和UnsafeMutablePointer<T>，遵循Cocoa的原则，可以看出`不可变`与`可变`的不同，当我们创建指针之后，就可以通过memory来操作指针了。另外，Swift中UnsafeBufferPointer<T>来描述一组连续的数据指针以及非完整结构不透明指针COpaquePointer\n\n**在函数中传递指针**\n\n在函数中传递指针有两种方式，一：使用`inout`关键字。二：使用Swift准备的指针类型。区别，我用注释写在具体的例子中。\n\n且先看看`inout`关键字，如何操作\n\n```Swift\nvar num:Int = 10\nfunc some(inout numb:Int){\n    //如果使用inout关键字，在函数体内部不需要处理指针类型，可直接操作\n    numb += 1\n    print(\"numb --> \\(numb)\")\n}\nsome(&num)\nprint(\"num ---> \\(num)\")\n```\n\n使用Swift准备的指针类型\n\n```Swift\nvar num:Int = 10\nfunc some(numb:UnsafeMutablePointer<Int>){\n    //如果使用Swift提供的类型，那么需要使用memory来进行操作\n    numb.memory += 1\n    print(\"numb --> \\(numb.memory)\")\n}\nsome(&num)\nprint(\"num ---> \\(num)\")\n```\n\n需要注意的是，Swift中地址符&是不能直接使用的，只能是函数传递时才可用。\n\n**如何直接操作**\n\n虽然无法像OC或者C中那样直接通过地址符&来操作指针，但是Swift也提供了辅助的方法间接的来帮助我们来操作指针。\n\n```Swift\nvar i:Int = 10\ni = withUnsafeMutablePointer(&i, {\n   (p:UnsafeMutablePointer<Int>) -> Int in\n       p.memory += 20\n       return p.memory\n})\nprint(\"i value ---> \\(i)\")\n```\n\n**如何使用指向数组的指针**\n\n如果只是函数传递，不可变直接传递，可变使用&符即可，如果想直接操作，那么还是需要UnsafeBufferPointer<T>来辅助完成。\n\n```Swift\nvar array:[Int] = [2,1,3,4]\nvar arrayPtr:UnsafeMutableBufferPointer<Int> = UnsafeMutableBufferPointer<Int>(start: &array, count: array.count)\nvar baseArrayPtr:UnsafeMutablePointer<Int> = arrayPtr.baseAddress as UnsafeMutablePointer<Int>\nvar nextPtr:UnsafeMutablePointer<Int> = baseArrayPtr.successor()\nvar threPtr:UnsafeMutablePointer<Int> = nextPtr.successor()\n\nprint(\"第一个元素  \\(baseArrayPtr.memory)\")\nprint(\"第二个元素 \\(nextPtr.memory)\")\nprint(\"第三个元素  \\(threPtr.memory)\")\n```\n\n**如何通过指针强制转换类型**\n\n这个操作比较危险，除非你明确预期知道类型，不然编译器是无法知道的，也就造成了非常大的不确定性。\n\n```Swift\nlet arr:NSArray = NSArray(object: \"icepy\")\nlet str:NSString = unsafeBitCast(arr[0],NSString.self)\n\nprint(\"str --- > \\(str.stringByAppendingPathComponent(\"app\"))\")\n```\n\n**创建一个指针**\n\n```Swift\n//创建可变指针\nvar i:UnsafeMutablePointer<String> = UnsafeMutablePointer<String>.alloc(10)\ni.initialize(\"icepy\")\n```\n\n**内存管理**\n\n还有一点要注意的是，如果是属于自己手动创建的指针，Swift是不负责管理内存的，需要手动的销毁与释放。\n\n一个UnsafeMutablePointer内存一般有三个状态：\n\n* 内存没有被分配，null指针\n* 内存进行了分配，且值还未初始化\n* 内存进行了分配，且值已经初始化\n\n```Swift\nvar i:UnsafeMutablePointer<String> = UnsafeMutablePointer<String>.alloc(10)\ni.initialize(\"icepy\")        \nprint(\"i的内存地址 \\(i)\")\nprint(\"i的memory \\(i.memory)\")        \ni.destroy() //销毁指针指向的对象\ni.dealloc(10) //销毁指针申请的内存\ni = nil\n```\n","slug":"swift-pointer","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk1s001ouejrw866b9dm","content":"<p><strong>源代码基于 Swift 2.1+ Xcode 7.1.1编写</strong></p>\n<p>如果你还不了解指针，请先阅读<a href=\"http://blog.jobbole.com/25409/\" target=\"_blank\" rel=\"external\">C语言指针5分钟教程</a>。</p>\n<p>在Swift中指针用两个特殊的类型来描述，UnsafePointer<t>和UnsafeMutablePointer<t>，遵循Cocoa的原则，可以看出<code>不可变</code>与<code>可变</code>的不同，当我们创建指针之后，就可以通过memory来操作指针了。另外，Swift中UnsafeBufferPointer<t>来描述一组连续的数据指针以及非完整结构不透明指针COpaquePointer</t></t></t></p>\n<p><strong>在函数中传递指针</strong></p>\n<p>在函数中传递指针有两种方式，一：使用<code>inout</code>关键字。二：使用Swift准备的指针类型。区别，我用注释写在具体的例子中。</p>\n<p>且先看看<code>inout</code>关键字，如何操作</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num:<span class=\"type\">Int</span> = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">some</span><span class=\"params\">(<span class=\"keyword\">inout</span> numb:Int)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果使用inout关键字，在函数体内部不需要处理指针类型，可直接操作</span></span><br><span class=\"line\">    numb += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"numb --&gt; \\(numb)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">some(&amp;num)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"num ---&gt; \\(num)\"</span>)</span><br></pre></td></tr></table></figure>\n<p>使用Swift准备的指针类型</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num:<span class=\"type\">Int</span> = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">some</span><span class=\"params\">(numb:UnsafeMutablePointer&lt;Int&gt;)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果使用Swift提供的类型，那么需要使用memory来进行操作</span></span><br><span class=\"line\">    numb.memory += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"numb --&gt; \\(numb.memory)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">some(&amp;num)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"num ---&gt; \\(num)\"</span>)</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，Swift中地址符&amp;是不能直接使用的，只能是函数传递时才可用。</p>\n<p><strong>如何直接操作</strong></p>\n<p>虽然无法像OC或者C中那样直接通过地址符&amp;来操作指针，但是Swift也提供了辅助的方法间接的来帮助我们来操作指针。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i:<span class=\"type\">Int</span> = <span class=\"number\">10</span></span><br><span class=\"line\">i = <span class=\"built_in\">withUnsafeMutablePointer</span>(&amp;i, &#123;</span><br><span class=\"line\">   (p:<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Int</span>&gt;) -&gt; <span class=\"type\">Int</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">       p.memory += <span class=\"number\">20</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> p.memory</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"i value ---&gt; \\(i)\"</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>如何使用指向数组的指针</strong></p>\n<p>如果只是函数传递，不可变直接传递，可变使用&amp;符即可，如果想直接操作，那么还是需要UnsafeBufferPointer<t>来辅助完成。</t></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array:[<span class=\"type\">Int</span>] = [<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrayPtr:<span class=\"type\">UnsafeMutableBufferPointer</span>&lt;<span class=\"type\">Int</span>&gt; = <span class=\"type\">UnsafeMutableBufferPointer</span>&lt;<span class=\"type\">Int</span>&gt;(start: &amp;array, <span class=\"built_in\">count</span>: array.<span class=\"built_in\">count</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> baseArrayPtr:<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Int</span>&gt; = arrayPtr.baseAddress <span class=\"keyword\">as</span> <span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Int</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nextPtr:<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Int</span>&gt; = baseArrayPtr.successor()</span><br><span class=\"line\"><span class=\"keyword\">var</span> threPtr:<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Int</span>&gt; = nextPtr.successor()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"第一个元素  \\(baseArrayPtr.memory)\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"第二个元素 \\(nextPtr.memory)\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"第三个元素  \\(threPtr.memory)\"</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>如何通过指针强制转换类型</strong></p>\n<p>这个操作比较危险，除非你明确预期知道类型，不然编译器是无法知道的，也就造成了非常大的不确定性。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr:<span class=\"type\">NSArray</span> = <span class=\"type\">NSArray</span>(object: <span class=\"string\">\"icepy\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> str:<span class=\"type\">NSString</span> = <span class=\"built_in\">unsafeBitCast</span>(arr[<span class=\"number\">0</span>],<span class=\"type\">NSString</span>.<span class=\"keyword\">self</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"str --- &gt; \\(str.stringByAppendingPathComponent(\"</span>app<span class=\"string\">\"))\"</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>创建一个指针</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建可变指针</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i:<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">String</span>&gt; = <span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">String</span>&gt;.alloc(<span class=\"number\">10</span>)</span><br><span class=\"line\">i.initialize(<span class=\"string\">\"icepy\"</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>内存管理</strong></p>\n<p>还有一点要注意的是，如果是属于自己手动创建的指针，Swift是不负责管理内存的，需要手动的销毁与释放。</p>\n<p>一个UnsafeMutablePointer内存一般有三个状态：</p>\n<ul>\n<li>内存没有被分配，null指针</li>\n<li>内存进行了分配，且值还未初始化</li>\n<li>内存进行了分配，且值已经初始化</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i:<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">String</span>&gt; = <span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">String</span>&gt;.alloc(<span class=\"number\">10</span>)</span><br><span class=\"line\">i.initialize(<span class=\"string\">\"icepy\"</span>)        </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"i的内存地址 \\(i)\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"i的memory \\(i.memory)\"</span>)        </span><br><span class=\"line\">i.destroy() <span class=\"comment\">//销毁指针指向的对象</span></span><br><span class=\"line\">i.dealloc(<span class=\"number\">10</span>) <span class=\"comment\">//销毁指针申请的内存</span></span><br><span class=\"line\">i = <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><strong>源代码基于 Swift 2.1+ Xcode 7.1.1编写</strong></p>\n<p>如果你还不了解指针，请先阅读<a href=\"http://blog.jobbole.com/25409/\">C语言指针5分钟教程</a>。</p>\n<p>在Swift中指针用两个特殊的类型来描述，UnsafePointer<T>和UnsafeMutablePointer<T>，遵循Cocoa的原则，可以看出<code>不可变</code>与<code>可变</code>的不同，当我们创建指针之后，就可以通过memory来操作指针了。另外，Swift中UnsafeBufferPointer<T>来描述一组连续的数据指针以及非完整结构不透明指针COpaquePointer</p>\n<p><strong>在函数中传递指针</strong></p>\n<p>在函数中传递指针有两种方式，一：使用<code>inout</code>关键字。二：使用Swift准备的指针类型。区别，我用注释写在具体的例子中。</p>\n<p>且先看看<code>inout</code>关键字，如何操作</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num:<span class=\"type\">Int</span> = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">some</span><span class=\"params\">(<span class=\"keyword\">inout</span> numb:Int)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果使用inout关键字，在函数体内部不需要处理指针类型，可直接操作</span></span><br><span class=\"line\">    numb += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"numb --&gt; \\(numb)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">some(&amp;num)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"num ---&gt; \\(num)\"</span>)</span><br></pre></td></tr></table></figure>\n<p>使用Swift准备的指针类型</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num:<span class=\"type\">Int</span> = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">some</span><span class=\"params\">(numb:UnsafeMutablePointer&lt;Int&gt;)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果使用Swift提供的类型，那么需要使用memory来进行操作</span></span><br><span class=\"line\">    numb.memory += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"numb --&gt; \\(numb.memory)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">some(&amp;num)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"num ---&gt; \\(num)\"</span>)</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，Swift中地址符&amp;是不能直接使用的，只能是函数传递时才可用。</p>\n<p><strong>如何直接操作</strong></p>\n<p>虽然无法像OC或者C中那样直接通过地址符&amp;来操作指针，但是Swift也提供了辅助的方法间接的来帮助我们来操作指针。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i:<span class=\"type\">Int</span> = <span class=\"number\">10</span></span><br><span class=\"line\">i = <span class=\"built_in\">withUnsafeMutablePointer</span>(&amp;i, &#123;</span><br><span class=\"line\">   (p:<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Int</span>&gt;) -&gt; <span class=\"type\">Int</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">       p.memory += <span class=\"number\">20</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> p.memory</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"i value ---&gt; \\(i)\"</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>如何使用指向数组的指针</strong></p>\n<p>如果只是函数传递，不可变直接传递，可变使用&amp;符即可，如果想直接操作，那么还是需要UnsafeBufferPointer<T>来辅助完成。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array:[<span class=\"type\">Int</span>] = [<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrayPtr:<span class=\"type\">UnsafeMutableBufferPointer</span>&lt;<span class=\"type\">Int</span>&gt; = <span class=\"type\">UnsafeMutableBufferPointer</span>&lt;<span class=\"type\">Int</span>&gt;(start: &amp;array, <span class=\"built_in\">count</span>: array.<span class=\"built_in\">count</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> baseArrayPtr:<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Int</span>&gt; = arrayPtr.baseAddress <span class=\"keyword\">as</span> <span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Int</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nextPtr:<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Int</span>&gt; = baseArrayPtr.successor()</span><br><span class=\"line\"><span class=\"keyword\">var</span> threPtr:<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Int</span>&gt; = nextPtr.successor()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"第一个元素  \\(baseArrayPtr.memory)\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"第二个元素 \\(nextPtr.memory)\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"第三个元素  \\(threPtr.memory)\"</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>如何通过指针强制转换类型</strong></p>\n<p>这个操作比较危险，除非你明确预期知道类型，不然编译器是无法知道的，也就造成了非常大的不确定性。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr:<span class=\"type\">NSArray</span> = <span class=\"type\">NSArray</span>(object: <span class=\"string\">\"icepy\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> str:<span class=\"type\">NSString</span> = <span class=\"built_in\">unsafeBitCast</span>(arr[<span class=\"number\">0</span>],<span class=\"type\">NSString</span>.<span class=\"keyword\">self</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"str --- &gt; \\(str.stringByAppendingPathComponent(\"</span>app<span class=\"string\">\"))\"</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>创建一个指针</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建可变指针</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i:<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">String</span>&gt; = <span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">String</span>&gt;.alloc(<span class=\"number\">10</span>)</span><br><span class=\"line\">i.initialize(<span class=\"string\">\"icepy\"</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>内存管理</strong></p>\n<p>还有一点要注意的是，如果是属于自己手动创建的指针，Swift是不负责管理内存的，需要手动的销毁与释放。</p>\n<p>一个UnsafeMutablePointer内存一般有三个状态：</p>\n<ul>\n<li>内存没有被分配，null指针</li>\n<li>内存进行了分配，且值还未初始化</li>\n<li>内存进行了分配，且值已经初始化</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i:<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">String</span>&gt; = <span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">String</span>&gt;.alloc(<span class=\"number\">10</span>)</span><br><span class=\"line\">i.initialize(<span class=\"string\">\"icepy\"</span>)        </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"i的内存地址 \\(i)\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"i的memory \\(i.memory)\"</span>)        </span><br><span class=\"line\">i.destroy() <span class=\"comment\">//销毁指针指向的对象</span></span><br><span class=\"line\">i.dealloc(<span class=\"number\">10</span>) <span class=\"comment\">//销毁指针申请的内存</span></span><br><span class=\"line\">i = <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Runtime在Swift中的使用","date":"2015-11-27T03:40:32.000Z","_content":"\n**源代码基于 Swift 2.1+ Xcode 7.1.1编写**\n\nRuntime让语言具备了灵活的动态特性，关于Runtime的理论知识，可推荐大家阅读：\n\n- [Objective-c Runtime](http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/)\n\n---\n\n在Swift中也可以使用这样的机制，当然`extension`也为Swift准备了良好的特性可用，然后附上**前人**为我们准备的忠告：*请记住仅在不得已的情况下使用runtime。随便修改基础框架或所使用的三方代码是毁掉你的应用的绝佳方法。请务必要小心哦。*\n\n在Swift中使用Runtime，将不在需要你手动导入`objc/runtime.h`。\n\n**交换两个方法**\n\n在学习Objectice-C Runtime的理论知识时，在初始化类或者加载的时候会调用两个方法`load'和'initialize`。方法交叉过程永远会在 load() 方法中进行，每一个类在加载时只会调用一次 load 方法，但是Swift只会在`initialize`方法中进行。\n\n```Swift\nextension UIViewController{\n    public override class func initialize(){\n        struct Static{\n            static var token:dispatch_once_t = 0\n        }\n        if self != UIViewController.self{\n            return\n        }\n        dispatch_once(&Static.token, {\n            _ in\n            let viewDidLoad = class_getInstanceMethod(self, Selector(\"viewDidLoad\"))\n            let viewDidLoaded = class_getInstanceMethod(self, Selector(\"viewDidLoaded\"))\n            method_exchangeImplementations(viewDidLoad,viewDidLoaded)\n        })\n    }\n    func viewDidLoaded(){\n        self.viewDidLoaded()\n        print(\"init --- > \\(self)\")\n    }\n}\n```\n\n**IMP**\n\n从Swift2.0开始指向函数的指针可以直接转换为闭包，只不过我们需要为它添加上@convention标注\n\n```Swift\ntypealias _IMP = @convention(c)(id:AnyObject,sel:UnsafeMutablePointer<Selector>)->AnyObject\ntypealias _VIMP = @convention(c)(id:AnyObject,sel:UnsafeMutablePointer<Selector>)->Void\n\nextension UIViewController{\n    public override class func initialize(){\n        struct Static{\n            static var token:dispatch_once_t = 0\n        }\n        if self != UIViewController.self{\n            return\n        }\n\n        dispatch_once(&Static.token, {\n            _ in\n            let viewDidLoad:Method = class_getInstanceMethod(self, Selector(\"viewDidLoad\"))\n            let viewDidLoad_VIMP:_VIMP = unsafeBitCast(method_getImplementation(viewDidLoad),_VIMP.self)\n            let block:@convention(block)(UnsafeMutablePointer<AnyObject>,UnsafeMutablePointer<Selector>)->Void = {\n                (id,sel) in\n                viewDidLoad_VIMP(id: id.memory, sel: sel)\n                print(\"viewDidLoad func execu over id ---> \\(id.memory)\");\n            }\n            let imp:COpaquePointer = imp_implementationWithBlock(unsafeBitCast(block, AnyObject.self))\n            method_setImplementation(viewDidLoad,imp)\n        })\n    }\n}\n```\n**关联对象**\n\n不过貌似，Swift的extension现在可以直接扩展属性，关联对象就比较用的少了。\n\n```Swift\nextension UIViewController{\n    private struct Associa{\n        static var Name:String = \"UIStackView_Name\"\n    }\n\n    var name:String{\n        get{\n            return objc_getAssociatedObject(self,&Associa.Name) as! String\n        }\n        set(newValue){\n            objc_setAssociatedObject(self, &Associa.Name, newValue as String?, objc_AssociationPolicy.OBJC_ASSOCIATION_RETAIN_NONATOMIC)\n        }\n    }\n}\n```\n","source":"_posts/swift-runtime.md","raw":"title: Runtime在Swift中的使用\ndate: 2015-11-27 11:40:32\ntags: Swift\n---\n\n**源代码基于 Swift 2.1+ Xcode 7.1.1编写**\n\nRuntime让语言具备了灵活的动态特性，关于Runtime的理论知识，可推荐大家阅读：\n\n- [Objective-c Runtime](http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/)\n\n---\n\n在Swift中也可以使用这样的机制，当然`extension`也为Swift准备了良好的特性可用，然后附上**前人**为我们准备的忠告：*请记住仅在不得已的情况下使用runtime。随便修改基础框架或所使用的三方代码是毁掉你的应用的绝佳方法。请务必要小心哦。*\n\n在Swift中使用Runtime，将不在需要你手动导入`objc/runtime.h`。\n\n**交换两个方法**\n\n在学习Objectice-C Runtime的理论知识时，在初始化类或者加载的时候会调用两个方法`load'和'initialize`。方法交叉过程永远会在 load() 方法中进行，每一个类在加载时只会调用一次 load 方法，但是Swift只会在`initialize`方法中进行。\n\n```Swift\nextension UIViewController{\n    public override class func initialize(){\n        struct Static{\n            static var token:dispatch_once_t = 0\n        }\n        if self != UIViewController.self{\n            return\n        }\n        dispatch_once(&Static.token, {\n            _ in\n            let viewDidLoad = class_getInstanceMethod(self, Selector(\"viewDidLoad\"))\n            let viewDidLoaded = class_getInstanceMethod(self, Selector(\"viewDidLoaded\"))\n            method_exchangeImplementations(viewDidLoad,viewDidLoaded)\n        })\n    }\n    func viewDidLoaded(){\n        self.viewDidLoaded()\n        print(\"init --- > \\(self)\")\n    }\n}\n```\n\n**IMP**\n\n从Swift2.0开始指向函数的指针可以直接转换为闭包，只不过我们需要为它添加上@convention标注\n\n```Swift\ntypealias _IMP = @convention(c)(id:AnyObject,sel:UnsafeMutablePointer<Selector>)->AnyObject\ntypealias _VIMP = @convention(c)(id:AnyObject,sel:UnsafeMutablePointer<Selector>)->Void\n\nextension UIViewController{\n    public override class func initialize(){\n        struct Static{\n            static var token:dispatch_once_t = 0\n        }\n        if self != UIViewController.self{\n            return\n        }\n\n        dispatch_once(&Static.token, {\n            _ in\n            let viewDidLoad:Method = class_getInstanceMethod(self, Selector(\"viewDidLoad\"))\n            let viewDidLoad_VIMP:_VIMP = unsafeBitCast(method_getImplementation(viewDidLoad),_VIMP.self)\n            let block:@convention(block)(UnsafeMutablePointer<AnyObject>,UnsafeMutablePointer<Selector>)->Void = {\n                (id,sel) in\n                viewDidLoad_VIMP(id: id.memory, sel: sel)\n                print(\"viewDidLoad func execu over id ---> \\(id.memory)\");\n            }\n            let imp:COpaquePointer = imp_implementationWithBlock(unsafeBitCast(block, AnyObject.self))\n            method_setImplementation(viewDidLoad,imp)\n        })\n    }\n}\n```\n**关联对象**\n\n不过貌似，Swift的extension现在可以直接扩展属性，关联对象就比较用的少了。\n\n```Swift\nextension UIViewController{\n    private struct Associa{\n        static var Name:String = \"UIStackView_Name\"\n    }\n\n    var name:String{\n        get{\n            return objc_getAssociatedObject(self,&Associa.Name) as! String\n        }\n        set(newValue){\n            objc_setAssociatedObject(self, &Associa.Name, newValue as String?, objc_AssociationPolicy.OBJC_ASSOCIATION_RETAIN_NONATOMIC)\n        }\n    }\n}\n```\n","slug":"swift-runtime","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk1v001quejrns4mdd2p","content":"<p><strong>源代码基于 Swift 2.1+ Xcode 7.1.1编写</strong></p>\n<p>Runtime让语言具备了灵活的动态特性，关于Runtime的理论知识，可推荐大家阅读：</p>\n<ul>\n<li><a href=\"http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/\" target=\"_blank\" rel=\"external\">Objective-c Runtime</a></li>\n</ul>\n<hr>\n<p>在Swift中也可以使用这样的机制，当然<code>extension</code>也为Swift准备了良好的特性可用，然后附上<strong>前人</strong>为我们准备的忠告：<em>请记住仅在不得已的情况下使用runtime。随便修改基础框架或所使用的三方代码是毁掉你的应用的绝佳方法。请务必要小心哦。</em></p>\n<p>在Swift中使用Runtime，将不在需要你手动导入<code>objc/runtime.h</code>。</p>\n<p><strong>交换两个方法</strong></p>\n<p>在学习Objectice-C Runtime的理论知识时，在初始化类或者加载的时候会调用两个方法<code>load&#39;和&#39;initialize</code>。方法交叉过程永远会在 load() 方法中进行，每一个类在加载时只会调用一次 load 方法，但是Swift只会在<code>initialize</code>方法中进行。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">UIViewController</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">func</span> <span class=\"title\">initialize</span>()</span>&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Static</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> token:dispatch_once_t = <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">self</span> != <span class=\"type\">UIViewController</span>.<span class=\"keyword\">self</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dispatch_once(&amp;<span class=\"type\">Static</span>.token, &#123;</span><br><span class=\"line\">            <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> viewDidLoad = class_getInstanceMethod(<span class=\"keyword\">self</span>, <span class=\"type\">Selector</span>(<span class=\"string\">\"viewDidLoad\"</span>))</span><br><span class=\"line\">            <span class=\"keyword\">let</span> viewDidLoaded = class_getInstanceMethod(<span class=\"keyword\">self</span>, <span class=\"type\">Selector</span>(<span class=\"string\">\"viewDidLoaded\"</span>))</span><br><span class=\"line\">            method_exchangeImplementations(viewDidLoad,viewDidLoaded)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoaded</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.viewDidLoaded()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"init --- &gt; \\(self)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>IMP</strong></p>\n<p>从Swift2.0开始指向函数的指针可以直接转换为闭包，只不过我们需要为它添加上@convention标注</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typealias</span> _IMP = <span class=\"meta\">@convention</span>(<span class=\"built_in\">c</span>)(id:<span class=\"type\">AnyObject</span>,sel:<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Selector</span>&gt;)-&gt;<span class=\"type\">AnyObject</span></span><br><span class=\"line\"><span class=\"keyword\">typealias</span> _VIMP = <span class=\"meta\">@convention</span>(<span class=\"built_in\">c</span>)(id:<span class=\"type\">AnyObject</span>,sel:<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Selector</span>&gt;)-&gt;<span class=\"type\">Void</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">UIViewController</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">func</span> <span class=\"title\">initialize</span>()</span>&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Static</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> token:dispatch_once_t = <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">self</span> != <span class=\"type\">UIViewController</span>.<span class=\"keyword\">self</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        dispatch_once(&amp;<span class=\"type\">Static</span>.token, &#123;</span><br><span class=\"line\">            <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> viewDidLoad:<span class=\"type\">Method</span> = class_getInstanceMethod(<span class=\"keyword\">self</span>, <span class=\"type\">Selector</span>(<span class=\"string\">\"viewDidLoad\"</span>))</span><br><span class=\"line\">            <span class=\"keyword\">let</span> viewDidLoad_VIMP:_VIMP = <span class=\"built_in\">unsafeBitCast</span>(method_getImplementation(viewDidLoad),_VIMP.<span class=\"keyword\">self</span>)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> block:<span class=\"meta\">@convention</span>(block)(<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">AnyObject</span>&gt;,<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Selector</span>&gt;)-&gt;<span class=\"type\">Void</span> = &#123;</span><br><span class=\"line\">                (id,sel) <span class=\"keyword\">in</span></span><br><span class=\"line\">                viewDidLoad_VIMP(id: id.memory, sel: sel)</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">\"viewDidLoad func execu over id ---&gt; \\(id.memory)\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> imp:<span class=\"type\">COpaquePointer</span> = imp_implementationWithBlock(<span class=\"built_in\">unsafeBitCast</span>(block, <span class=\"type\">AnyObject</span>.<span class=\"keyword\">self</span>))</span><br><span class=\"line\">            method_setImplementation(viewDidLoad,imp)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>关联对象</strong></p>\n<p>不过貌似，Swift的extension现在可以直接扩展属性，关联对象就比较用的少了。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">UIViewController</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Associa</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">Name</span>:<span class=\"type\">String</span> = <span class=\"string\">\"UIStackView_Name\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name:<span class=\"type\">String</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> objc_getAssociatedObject(<span class=\"keyword\">self</span>,&amp;<span class=\"type\">Associa</span>.<span class=\"type\">Name</span>) <span class=\"keyword\">as</span>! <span class=\"type\">String</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span>(newValue)&#123;</span><br><span class=\"line\">            objc_setAssociatedObject(<span class=\"keyword\">self</span>, &amp;<span class=\"type\">Associa</span>.<span class=\"type\">Name</span>, newValue <span class=\"keyword\">as</span> <span class=\"type\">String</span>?, objc_AssociationPolicy.<span class=\"type\">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><strong>源代码基于 Swift 2.1+ Xcode 7.1.1编写</strong></p>\n<p>Runtime让语言具备了灵活的动态特性，关于Runtime的理论知识，可推荐大家阅读：</p>\n<ul>\n<li><a href=\"http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/\">Objective-c Runtime</a></li>\n</ul>\n<hr>\n<p>在Swift中也可以使用这样的机制，当然<code>extension</code>也为Swift准备了良好的特性可用，然后附上<strong>前人</strong>为我们准备的忠告：<em>请记住仅在不得已的情况下使用runtime。随便修改基础框架或所使用的三方代码是毁掉你的应用的绝佳方法。请务必要小心哦。</em></p>\n<p>在Swift中使用Runtime，将不在需要你手动导入<code>objc/runtime.h</code>。</p>\n<p><strong>交换两个方法</strong></p>\n<p>在学习Objectice-C Runtime的理论知识时，在初始化类或者加载的时候会调用两个方法<code>load&#39;和&#39;initialize</code>。方法交叉过程永远会在 load() 方法中进行，每一个类在加载时只会调用一次 load 方法，但是Swift只会在<code>initialize</code>方法中进行。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">UIViewController</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">func</span> <span class=\"title\">initialize</span>()</span>&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Static</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> token:dispatch_once_t = <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">self</span> != <span class=\"type\">UIViewController</span>.<span class=\"keyword\">self</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dispatch_once(&amp;<span class=\"type\">Static</span>.token, &#123;</span><br><span class=\"line\">            <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> viewDidLoad = class_getInstanceMethod(<span class=\"keyword\">self</span>, <span class=\"type\">Selector</span>(<span class=\"string\">\"viewDidLoad\"</span>))</span><br><span class=\"line\">            <span class=\"keyword\">let</span> viewDidLoaded = class_getInstanceMethod(<span class=\"keyword\">self</span>, <span class=\"type\">Selector</span>(<span class=\"string\">\"viewDidLoaded\"</span>))</span><br><span class=\"line\">            method_exchangeImplementations(viewDidLoad,viewDidLoaded)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoaded</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.viewDidLoaded()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"init --- &gt; \\(self)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>IMP</strong></p>\n<p>从Swift2.0开始指向函数的指针可以直接转换为闭包，只不过我们需要为它添加上@convention标注</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typealias</span> _IMP = <span class=\"meta\">@convention</span>(<span class=\"built_in\">c</span>)(id:<span class=\"type\">AnyObject</span>,sel:<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Selector</span>&gt;)-&gt;<span class=\"type\">AnyObject</span></span><br><span class=\"line\"><span class=\"keyword\">typealias</span> _VIMP = <span class=\"meta\">@convention</span>(<span class=\"built_in\">c</span>)(id:<span class=\"type\">AnyObject</span>,sel:<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Selector</span>&gt;)-&gt;<span class=\"type\">Void</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">UIViewController</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">func</span> <span class=\"title\">initialize</span>()</span>&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Static</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> token:dispatch_once_t = <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">self</span> != <span class=\"type\">UIViewController</span>.<span class=\"keyword\">self</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        dispatch_once(&amp;<span class=\"type\">Static</span>.token, &#123;</span><br><span class=\"line\">            <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> viewDidLoad:<span class=\"type\">Method</span> = class_getInstanceMethod(<span class=\"keyword\">self</span>, <span class=\"type\">Selector</span>(<span class=\"string\">\"viewDidLoad\"</span>))</span><br><span class=\"line\">            <span class=\"keyword\">let</span> viewDidLoad_VIMP:_VIMP = <span class=\"built_in\">unsafeBitCast</span>(method_getImplementation(viewDidLoad),_VIMP.<span class=\"keyword\">self</span>)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> block:<span class=\"meta\">@convention</span>(block)(<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">AnyObject</span>&gt;,<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Selector</span>&gt;)-&gt;<span class=\"type\">Void</span> = &#123;</span><br><span class=\"line\">                (id,sel) <span class=\"keyword\">in</span></span><br><span class=\"line\">                viewDidLoad_VIMP(id: id.memory, sel: sel)</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">\"viewDidLoad func execu over id ---&gt; \\(id.memory)\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> imp:<span class=\"type\">COpaquePointer</span> = imp_implementationWithBlock(<span class=\"built_in\">unsafeBitCast</span>(block, <span class=\"type\">AnyObject</span>.<span class=\"keyword\">self</span>))</span><br><span class=\"line\">            method_setImplementation(viewDidLoad,imp)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>关联对象</strong></p>\n<p>不过貌似，Swift的extension现在可以直接扩展属性，关联对象就比较用的少了。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">UIViewController</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Associa</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">Name</span>:<span class=\"type\">String</span> = <span class=\"string\">\"UIStackView_Name\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name:<span class=\"type\">String</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> objc_getAssociatedObject(<span class=\"keyword\">self</span>,&amp;<span class=\"type\">Associa</span>.<span class=\"type\">Name</span>) <span class=\"keyword\">as</span>! <span class=\"type\">String</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span>(newValue)&#123;</span><br><span class=\"line\">            objc_setAssociatedObject(<span class=\"keyword\">self</span>, &amp;<span class=\"type\">Associa</span>.<span class=\"type\">Name</span>, newValue <span class=\"keyword\">as</span> <span class=\"type\">String</span>?, objc_AssociationPolicy.<span class=\"type\">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"UIStackView的使用","date":"2015-11-23T03:41:35.000Z","_content":"\n**源代码基于 Swift 2.1+ Xcode 7.1.1编写**\n\niOS 9 出品快速构建UI界面\n\n`官方原话：UIStackView 类提供了一个高效的接口用于平铺一行或一列的视图组合。Stack视图使你依靠自动布局的能力，创建用户接口使得可以动态的调整设备朝向、屏幕尺寸及任何可用范围内的变化。`\n\n其实这里很好理解了，如果用Table来看，无非就是在横向或者竖向进行排列，所以UIStackView就存在了两种不同的类型，我们只需要对UIStackView进行约束布局，设置好它的属性，然后依次将视图添加到UIStackView中，系统会自动帮助我们将UIStackView中添加的视图添加上约束。\n\n还需要了解的一点是被UIStackView管理的视图，第一个是与UIStackView左边界对齐，最后一个是与UIStackView右边界对齐，如果设置了`vertical.layoutMarginsRelativeArrangement = true`，UIStackView将使用相关的内容和不是边界对齐。\n\nDemo可以查看[UIStackView](https://github.com/icepy/withoutMe/tree/master/UIStackView) Swift 2.0 Xcode 7.1.1\n\n**如何创建UIStackView**\n\n```Swift\nlet vertical:UIStackView =  UIStackView(frame: CGRectZero)\nvertical.axis = .Vertical\nvertical.alignment = .Center\nvertical.distribution = .FillEqually\nvertical.spacing = 10\n```\n\n初始化一个UIStackView，然后设置对齐方式，分布方式以及间隔。\n\n- alignment 这里可以理解为设置X,Y轴\n- distribution 这里可以理解为控制高度与宽度\n- spacing 每个视图互相之间的间隔\n\n关于更精准的布局可以访问UIStackViewDistribution和UIStackViewAlignment枚举\n\n```Swift\npublic enum UIStackViewDistribution : Int {\n\n    /* When items do not fit (overflow) or fill (underflow) the space available\n     adjustments occur according to compressionResistance or hugging\n     priorities of items, or when that is ambiguous, according to arrangement\n     order.\n     */\n    case Fill\n\n    /* Items are all the same size.\n     When space allows, this will be the size of the item with the largest\n     intrinsicContentSize (along the axis of the stack).\n     Overflow or underflow adjustments are distributed equally among the items.\n     */\n    case FillEqually\n\n    /* Overflow or underflow adjustments are distributed among the items proportional\n     to their intrinsicContentSizes.\n     */\n    case FillProportionally\n\n    /* Additional underflow spacing is divided equally in the spaces between the items.\n     Overflow squeezing is controlled by compressionResistance priorities followed by\n     arrangement order.\n     */\n    case EqualSpacing\n\n    /* Equal center-to-center spacing of the items is maintained as much\n     as possible while still maintaining a minimum edge-to-edge spacing within the\n     allowed area.\n        Additional underflow spacing is divided equally in the spacing. Overflow\n     squeezing is distributed first according to compressionResistance priorities\n     of items, then according to subview order while maintaining the configured\n     (edge-to-edge) spacing as a minimum.\n     */\n    case EqualCentering\n}\n\npublic enum UIStackViewAlignment : Int {\n\n    /* Align the leading and trailing edges of vertically stacked items\n     or the top and bottom edges of horizontally stacked items tightly to the container.\n     */\n    case Fill\n\n    /* Align the leading edges of vertically stacked items\n     or the top edges of horizontally stacked items tightly to the relevant edge\n     of the container\n     */\n    case Leading\n    public static var Top: UIStackViewAlignment { get }\n    case FirstBaseline // Valid for horizontal axis only\n\n    /* Center the items in a vertical stack horizontally\n     or the items in a horizontal stack vertically\n     */\n    case Center\n\n    /* Align the trailing edges of vertically stacked items\n     or the bottom edges of horizontally stacked items tightly to the relevant\n     edge of the container\n     */\n    case Trailing\n    public static var Bottom: UIStackViewAlignment { get }\n    case LastBaseline // Valid for horizontal axis only\n}\n```\n\n`这里我没有对vertical设置约束`，然后使用`addArrangedSubview`添加一个button到UIStackView中\n\n```Swift\nlet button:UIButton = UIButton(type: .Custom)\nvertical.addArrangedSubview(button)\n//或者使用vertical.insertArrangedSubview(<#T##view: UIView##UIView#>, atIndex: <#T##Int#>)\n```\n\n还可以通过`arrangedSubviews`属性来获取一个UIStackView容器内的所有视图。\n\n```Swift\n vertical.arrangedSubviews\n```\n\n**从UIStackView中删除**\n\n```Swift\nvertical.removeArrangedSubview(button)\nbutton.removeFromSuperview()\n```\n\n`removeArrangedSubview`只是确保从UIStackView中删除约束，移除出视图还需要调用`removeFromSuperview`。\n\n## 实战练习\n\n个人是忠实的暴雪粉丝，所以这个Demo是一道选择题，喜欢《魔兽世界》么？喜欢会打上一课星，不喜欢就会删除一课星。\n\n且拖动两个UIStackView到storyboard中，竖向排列的UIStackView命名为verticalStackView，横向水平排列的UIStackView命名为horizontalStackView，其约束关系如下：\n\n`在verticalStackView上按住ctrl键将箭头指向superview`，左右相对superview，上相对superview，下相对horizontalStackView。`在horizontalStackView上按住ctrl键将键头指向superview`，Height设置为110，左右相对superview，上相对于verticalStackView，下相对于superview。\n\n设置其（verticalStackView和horizontalStackView）对应方式：\n\n- alignment 水平居中 center\n- distribution fill Equally\n- Spacing 20\n\n然后依次拖动UILabel，UIImageView，UIStackView（横向水平排列），且将第三个UIStackView命名为actionStackView，设置其alignment为center，distribution为Equal Spacing，Spacing为10，拖两个UIButton到actionStackView中。\n\n`按住ctrl连接两个actions事件出来`\n\n```Swift\n@IBAction func linkToWow(sender: UIButton) {\n    let starImage:UIImageView = UIImageView(image: UIImage(named: \"Star\"))\n    starImage.contentMode = .ScaleAspectFit\n    horizontalStackView.addArrangedSubview(starImage)\n    UIView.animateWithDuration(0.25, animations: {\n         [unowned self] _ in\n         self.horizontalStackView.layoutIfNeeded()\n     })\n}\n\n@IBAction func linkToRemoveWow(sender: UIButton) {\n   let lastStar:UIView? = horizontalStackView.arrangedSubviews.last\n   if let removeStart:UIView = lastStar{\n       horizontalStackView.removeArrangedSubview(removeStart)\n       removeStart.removeFromSuperview()\n       UIView.animateWithDuration(0.25, animations: {\n            [unowned self] _ in\n            self.horizontalStackView.layoutIfNeeded()\n       })\n   }\n}\n```\n运行看看\n","source":"_posts/swift-uistackview.md","raw":"title: UIStackView的使用\ndate: 2015-11-23 11:41:35\ntags: Swift\n---\n\n**源代码基于 Swift 2.1+ Xcode 7.1.1编写**\n\niOS 9 出品快速构建UI界面\n\n`官方原话：UIStackView 类提供了一个高效的接口用于平铺一行或一列的视图组合。Stack视图使你依靠自动布局的能力，创建用户接口使得可以动态的调整设备朝向、屏幕尺寸及任何可用范围内的变化。`\n\n其实这里很好理解了，如果用Table来看，无非就是在横向或者竖向进行排列，所以UIStackView就存在了两种不同的类型，我们只需要对UIStackView进行约束布局，设置好它的属性，然后依次将视图添加到UIStackView中，系统会自动帮助我们将UIStackView中添加的视图添加上约束。\n\n还需要了解的一点是被UIStackView管理的视图，第一个是与UIStackView左边界对齐，最后一个是与UIStackView右边界对齐，如果设置了`vertical.layoutMarginsRelativeArrangement = true`，UIStackView将使用相关的内容和不是边界对齐。\n\nDemo可以查看[UIStackView](https://github.com/icepy/withoutMe/tree/master/UIStackView) Swift 2.0 Xcode 7.1.1\n\n**如何创建UIStackView**\n\n```Swift\nlet vertical:UIStackView =  UIStackView(frame: CGRectZero)\nvertical.axis = .Vertical\nvertical.alignment = .Center\nvertical.distribution = .FillEqually\nvertical.spacing = 10\n```\n\n初始化一个UIStackView，然后设置对齐方式，分布方式以及间隔。\n\n- alignment 这里可以理解为设置X,Y轴\n- distribution 这里可以理解为控制高度与宽度\n- spacing 每个视图互相之间的间隔\n\n关于更精准的布局可以访问UIStackViewDistribution和UIStackViewAlignment枚举\n\n```Swift\npublic enum UIStackViewDistribution : Int {\n\n    /* When items do not fit (overflow) or fill (underflow) the space available\n     adjustments occur according to compressionResistance or hugging\n     priorities of items, or when that is ambiguous, according to arrangement\n     order.\n     */\n    case Fill\n\n    /* Items are all the same size.\n     When space allows, this will be the size of the item with the largest\n     intrinsicContentSize (along the axis of the stack).\n     Overflow or underflow adjustments are distributed equally among the items.\n     */\n    case FillEqually\n\n    /* Overflow or underflow adjustments are distributed among the items proportional\n     to their intrinsicContentSizes.\n     */\n    case FillProportionally\n\n    /* Additional underflow spacing is divided equally in the spaces between the items.\n     Overflow squeezing is controlled by compressionResistance priorities followed by\n     arrangement order.\n     */\n    case EqualSpacing\n\n    /* Equal center-to-center spacing of the items is maintained as much\n     as possible while still maintaining a minimum edge-to-edge spacing within the\n     allowed area.\n        Additional underflow spacing is divided equally in the spacing. Overflow\n     squeezing is distributed first according to compressionResistance priorities\n     of items, then according to subview order while maintaining the configured\n     (edge-to-edge) spacing as a minimum.\n     */\n    case EqualCentering\n}\n\npublic enum UIStackViewAlignment : Int {\n\n    /* Align the leading and trailing edges of vertically stacked items\n     or the top and bottom edges of horizontally stacked items tightly to the container.\n     */\n    case Fill\n\n    /* Align the leading edges of vertically stacked items\n     or the top edges of horizontally stacked items tightly to the relevant edge\n     of the container\n     */\n    case Leading\n    public static var Top: UIStackViewAlignment { get }\n    case FirstBaseline // Valid for horizontal axis only\n\n    /* Center the items in a vertical stack horizontally\n     or the items in a horizontal stack vertically\n     */\n    case Center\n\n    /* Align the trailing edges of vertically stacked items\n     or the bottom edges of horizontally stacked items tightly to the relevant\n     edge of the container\n     */\n    case Trailing\n    public static var Bottom: UIStackViewAlignment { get }\n    case LastBaseline // Valid for horizontal axis only\n}\n```\n\n`这里我没有对vertical设置约束`，然后使用`addArrangedSubview`添加一个button到UIStackView中\n\n```Swift\nlet button:UIButton = UIButton(type: .Custom)\nvertical.addArrangedSubview(button)\n//或者使用vertical.insertArrangedSubview(<#T##view: UIView##UIView#>, atIndex: <#T##Int#>)\n```\n\n还可以通过`arrangedSubviews`属性来获取一个UIStackView容器内的所有视图。\n\n```Swift\n vertical.arrangedSubviews\n```\n\n**从UIStackView中删除**\n\n```Swift\nvertical.removeArrangedSubview(button)\nbutton.removeFromSuperview()\n```\n\n`removeArrangedSubview`只是确保从UIStackView中删除约束，移除出视图还需要调用`removeFromSuperview`。\n\n## 实战练习\n\n个人是忠实的暴雪粉丝，所以这个Demo是一道选择题，喜欢《魔兽世界》么？喜欢会打上一课星，不喜欢就会删除一课星。\n\n且拖动两个UIStackView到storyboard中，竖向排列的UIStackView命名为verticalStackView，横向水平排列的UIStackView命名为horizontalStackView，其约束关系如下：\n\n`在verticalStackView上按住ctrl键将箭头指向superview`，左右相对superview，上相对superview，下相对horizontalStackView。`在horizontalStackView上按住ctrl键将键头指向superview`，Height设置为110，左右相对superview，上相对于verticalStackView，下相对于superview。\n\n设置其（verticalStackView和horizontalStackView）对应方式：\n\n- alignment 水平居中 center\n- distribution fill Equally\n- Spacing 20\n\n然后依次拖动UILabel，UIImageView，UIStackView（横向水平排列），且将第三个UIStackView命名为actionStackView，设置其alignment为center，distribution为Equal Spacing，Spacing为10，拖两个UIButton到actionStackView中。\n\n`按住ctrl连接两个actions事件出来`\n\n```Swift\n@IBAction func linkToWow(sender: UIButton) {\n    let starImage:UIImageView = UIImageView(image: UIImage(named: \"Star\"))\n    starImage.contentMode = .ScaleAspectFit\n    horizontalStackView.addArrangedSubview(starImage)\n    UIView.animateWithDuration(0.25, animations: {\n         [unowned self] _ in\n         self.horizontalStackView.layoutIfNeeded()\n     })\n}\n\n@IBAction func linkToRemoveWow(sender: UIButton) {\n   let lastStar:UIView? = horizontalStackView.arrangedSubviews.last\n   if let removeStart:UIView = lastStar{\n       horizontalStackView.removeArrangedSubview(removeStart)\n       removeStart.removeFromSuperview()\n       UIView.animateWithDuration(0.25, animations: {\n            [unowned self] _ in\n            self.horizontalStackView.layoutIfNeeded()\n       })\n   }\n}\n```\n运行看看\n","slug":"swift-uistackview","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk1x001tuejrz7qju1t4","content":"<p><strong>源代码基于 Swift 2.1+ Xcode 7.1.1编写</strong></p>\n<p>iOS 9 出品快速构建UI界面</p>\n<p><code>官方原话：UIStackView 类提供了一个高效的接口用于平铺一行或一列的视图组合。Stack视图使你依靠自动布局的能力，创建用户接口使得可以动态的调整设备朝向、屏幕尺寸及任何可用范围内的变化。</code></p>\n<p>其实这里很好理解了，如果用Table来看，无非就是在横向或者竖向进行排列，所以UIStackView就存在了两种不同的类型，我们只需要对UIStackView进行约束布局，设置好它的属性，然后依次将视图添加到UIStackView中，系统会自动帮助我们将UIStackView中添加的视图添加上约束。</p>\n<p>还需要了解的一点是被UIStackView管理的视图，第一个是与UIStackView左边界对齐，最后一个是与UIStackView右边界对齐，如果设置了<code>vertical.layoutMarginsRelativeArrangement = true</code>，UIStackView将使用相关的内容和不是边界对齐。</p>\n<p>Demo可以查看<a href=\"https://github.com/icepy/withoutMe/tree/master/UIStackView\" target=\"_blank\" rel=\"external\">UIStackView</a> Swift 2.0 Xcode 7.1.1</p>\n<p><strong>如何创建UIStackView</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vertical:<span class=\"type\">UIStackView</span> =  <span class=\"type\">UIStackView</span>(frame: <span class=\"type\">CGRectZero</span>)</span><br><span class=\"line\">vertical.axis = .<span class=\"type\">Vertical</span></span><br><span class=\"line\">vertical.alignment = .<span class=\"type\">Center</span></span><br><span class=\"line\">vertical.distribution = .<span class=\"type\">FillEqually</span></span><br><span class=\"line\">vertical.spacing = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<p>初始化一个UIStackView，然后设置对齐方式，分布方式以及间隔。</p>\n<ul>\n<li>alignment 这里可以理解为设置X,Y轴</li>\n<li>distribution 这里可以理解为控制高度与宽度</li>\n<li>spacing 每个视图互相之间的间隔</li>\n</ul>\n<p>关于更精准的布局可以访问UIStackViewDistribution和UIStackViewAlignment枚举</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">UIStackViewDistribution</span> : <span class=\"title\">Int</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* When items do not fit (overflow) or fill (underflow) the space available</span><br><span class=\"line\">     adjustments occur according to compressionResistance or hugging</span><br><span class=\"line\">     priorities of items, or when that is ambiguous, according to arrangement</span><br><span class=\"line\">     order.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Fill</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Items are all the same size.</span><br><span class=\"line\">     When space allows, this will be the size of the item with the largest</span><br><span class=\"line\">     intrinsicContentSize (along the axis of the stack).</span><br><span class=\"line\">     Overflow or underflow adjustments are distributed equally among the items.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">FillEqually</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Overflow or underflow adjustments are distributed among the items proportional</span><br><span class=\"line\">     to their intrinsicContentSizes.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">FillProportionally</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Additional underflow spacing is divided equally in the spaces between the items.</span><br><span class=\"line\">     Overflow squeezing is controlled by compressionResistance priorities followed by</span><br><span class=\"line\">     arrangement order.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">EqualSpacing</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Equal center-to-center spacing of the items is maintained as much</span><br><span class=\"line\">     as possible while still maintaining a minimum edge-to-edge spacing within the</span><br><span class=\"line\">     allowed area.</span><br><span class=\"line\">        Additional underflow spacing is divided equally in the spacing. Overflow</span><br><span class=\"line\">     squeezing is distributed first according to compressionResistance priorities</span><br><span class=\"line\">     of items, then according to subview order while maintaining the configured</span><br><span class=\"line\">     (edge-to-edge) spacing as a minimum.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">EqualCentering</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">UIStackViewAlignment</span> : <span class=\"title\">Int</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Align the leading and trailing edges of vertically stacked items</span><br><span class=\"line\">     or the top and bottom edges of horizontally stacked items tightly to the container.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Fill</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Align the leading edges of vertically stacked items</span><br><span class=\"line\">     or the top edges of horizontally stacked items tightly to the relevant edge</span><br><span class=\"line\">     of the container</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Leading</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">Top</span>: <span class=\"type\">UIStackViewAlignment</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">FirstBaseline</span> <span class=\"comment\">// Valid for horizontal axis only</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Center the items in a vertical stack horizontally</span><br><span class=\"line\">     or the items in a horizontal stack vertically</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Center</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Align the trailing edges of vertically stacked items</span><br><span class=\"line\">     or the bottom edges of horizontally stacked items tightly to the relevant</span><br><span class=\"line\">     edge of the container</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Trailing</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">Bottom</span>: <span class=\"type\">UIStackViewAlignment</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">LastBaseline</span> <span class=\"comment\">// Valid for horizontal axis only</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>这里我没有对vertical设置约束</code>，然后使用<code>addArrangedSubview</code>添加一个button到UIStackView中</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> button:<span class=\"type\">UIButton</span> = <span class=\"type\">UIButton</span>(type: .<span class=\"type\">Custom</span>)</span><br><span class=\"line\">vertical.addArrangedSubview(button)</span><br><span class=\"line\"><span class=\"comment\">//或者使用vertical.insertArrangedSubview(&lt;#T##view: UIView##UIView#&gt;, atIndex: &lt;#T##Int#&gt;)</span></span><br></pre></td></tr></table></figure>\n<p>还可以通过<code>arrangedSubviews</code>属性来获取一个UIStackView容器内的所有视图。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vertical.arrangedSubviews</span><br></pre></td></tr></table></figure>\n<p><strong>从UIStackView中删除</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vertical.removeArrangedSubview(button)</span><br><span class=\"line\">button.removeFromSuperview()</span><br></pre></td></tr></table></figure>\n<p><code>removeArrangedSubview</code>只是确保从UIStackView中删除约束，移除出视图还需要调用<code>removeFromSuperview</code>。</p>\n<h2 id=\"实战练习\"><a href=\"#实战练习\" class=\"headerlink\" title=\"实战练习\"></a>实战练习</h2><p>个人是忠实的暴雪粉丝，所以这个Demo是一道选择题，喜欢《魔兽世界》么？喜欢会打上一课星，不喜欢就会删除一课星。</p>\n<p>且拖动两个UIStackView到storyboard中，竖向排列的UIStackView命名为verticalStackView，横向水平排列的UIStackView命名为horizontalStackView，其约束关系如下：</p>\n<p><code>在verticalStackView上按住ctrl键将箭头指向superview</code>，左右相对superview，上相对superview，下相对horizontalStackView。<code>在horizontalStackView上按住ctrl键将键头指向superview</code>，Height设置为110，左右相对superview，上相对于verticalStackView，下相对于superview。</p>\n<p>设置其（verticalStackView和horizontalStackView）对应方式：</p>\n<ul>\n<li>alignment 水平居中 center</li>\n<li>distribution fill Equally</li>\n<li>Spacing 20</li>\n</ul>\n<p>然后依次拖动UILabel，UIImageView，UIStackView（横向水平排列），且将第三个UIStackView命名为actionStackView，设置其alignment为center，distribution为Equal Spacing，Spacing为10，拖两个UIButton到actionStackView中。</p>\n<p><code>按住ctrl连接两个actions事件出来</code></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">linkToWow</span><span class=\"params\">(sender: UIButton)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> starImage:<span class=\"type\">UIImageView</span> = <span class=\"type\">UIImageView</span>(image: <span class=\"type\">UIImage</span>(named: <span class=\"string\">\"Star\"</span>))</span><br><span class=\"line\">    starImage.contentMode = .<span class=\"type\">ScaleAspectFit</span></span><br><span class=\"line\">    horizontalStackView.addArrangedSubview(starImage)</span><br><span class=\"line\">    <span class=\"type\">UIView</span>.animateWithDuration(<span class=\"number\">0.25</span>, animations: &#123;</span><br><span class=\"line\">         [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"keyword\">self</span>.horizontalStackView.layoutIfNeeded()</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">linkToRemoveWow</span><span class=\"params\">(sender: UIButton)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> lastStar:<span class=\"type\">UIView</span>? = horizontalStackView.arrangedSubviews.last</span><br><span class=\"line\">   <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> removeStart:<span class=\"type\">UIView</span> = lastStar&#123;</span><br><span class=\"line\">       horizontalStackView.removeArrangedSubview(removeStart)</span><br><span class=\"line\">       removeStart.removeFromSuperview()</span><br><span class=\"line\">       <span class=\"type\">UIView</span>.animateWithDuration(<span class=\"number\">0.25</span>, animations: &#123;</span><br><span class=\"line\">            [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.horizontalStackView.layoutIfNeeded()</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行看看</p>\n","excerpt":"","more":"<p><strong>源代码基于 Swift 2.1+ Xcode 7.1.1编写</strong></p>\n<p>iOS 9 出品快速构建UI界面</p>\n<p><code>官方原话：UIStackView 类提供了一个高效的接口用于平铺一行或一列的视图组合。Stack视图使你依靠自动布局的能力，创建用户接口使得可以动态的调整设备朝向、屏幕尺寸及任何可用范围内的变化。</code></p>\n<p>其实这里很好理解了，如果用Table来看，无非就是在横向或者竖向进行排列，所以UIStackView就存在了两种不同的类型，我们只需要对UIStackView进行约束布局，设置好它的属性，然后依次将视图添加到UIStackView中，系统会自动帮助我们将UIStackView中添加的视图添加上约束。</p>\n<p>还需要了解的一点是被UIStackView管理的视图，第一个是与UIStackView左边界对齐，最后一个是与UIStackView右边界对齐，如果设置了<code>vertical.layoutMarginsRelativeArrangement = true</code>，UIStackView将使用相关的内容和不是边界对齐。</p>\n<p>Demo可以查看<a href=\"https://github.com/icepy/withoutMe/tree/master/UIStackView\">UIStackView</a> Swift 2.0 Xcode 7.1.1</p>\n<p><strong>如何创建UIStackView</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vertical:<span class=\"type\">UIStackView</span> =  <span class=\"type\">UIStackView</span>(frame: <span class=\"type\">CGRectZero</span>)</span><br><span class=\"line\">vertical.axis = .<span class=\"type\">Vertical</span></span><br><span class=\"line\">vertical.alignment = .<span class=\"type\">Center</span></span><br><span class=\"line\">vertical.distribution = .<span class=\"type\">FillEqually</span></span><br><span class=\"line\">vertical.spacing = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<p>初始化一个UIStackView，然后设置对齐方式，分布方式以及间隔。</p>\n<ul>\n<li>alignment 这里可以理解为设置X,Y轴</li>\n<li>distribution 这里可以理解为控制高度与宽度</li>\n<li>spacing 每个视图互相之间的间隔</li>\n</ul>\n<p>关于更精准的布局可以访问UIStackViewDistribution和UIStackViewAlignment枚举</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">UIStackViewDistribution</span> : <span class=\"title\">Int</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* When items do not fit (overflow) or fill (underflow) the space available</span><br><span class=\"line\">     adjustments occur according to compressionResistance or hugging</span><br><span class=\"line\">     priorities of items, or when that is ambiguous, according to arrangement</span><br><span class=\"line\">     order.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Fill</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Items are all the same size.</span><br><span class=\"line\">     When space allows, this will be the size of the item with the largest</span><br><span class=\"line\">     intrinsicContentSize (along the axis of the stack).</span><br><span class=\"line\">     Overflow or underflow adjustments are distributed equally among the items.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">FillEqually</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Overflow or underflow adjustments are distributed among the items proportional</span><br><span class=\"line\">     to their intrinsicContentSizes.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">FillProportionally</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Additional underflow spacing is divided equally in the spaces between the items.</span><br><span class=\"line\">     Overflow squeezing is controlled by compressionResistance priorities followed by</span><br><span class=\"line\">     arrangement order.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">EqualSpacing</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Equal center-to-center spacing of the items is maintained as much</span><br><span class=\"line\">     as possible while still maintaining a minimum edge-to-edge spacing within the</span><br><span class=\"line\">     allowed area.</span><br><span class=\"line\">        Additional underflow spacing is divided equally in the spacing. Overflow</span><br><span class=\"line\">     squeezing is distributed first according to compressionResistance priorities</span><br><span class=\"line\">     of items, then according to subview order while maintaining the configured</span><br><span class=\"line\">     (edge-to-edge) spacing as a minimum.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">EqualCentering</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">UIStackViewAlignment</span> : <span class=\"title\">Int</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Align the leading and trailing edges of vertically stacked items</span><br><span class=\"line\">     or the top and bottom edges of horizontally stacked items tightly to the container.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Fill</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Align the leading edges of vertically stacked items</span><br><span class=\"line\">     or the top edges of horizontally stacked items tightly to the relevant edge</span><br><span class=\"line\">     of the container</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Leading</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">Top</span>: <span class=\"type\">UIStackViewAlignment</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">FirstBaseline</span> <span class=\"comment\">// Valid for horizontal axis only</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Center the items in a vertical stack horizontally</span><br><span class=\"line\">     or the items in a horizontal stack vertically</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Center</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Align the trailing edges of vertically stacked items</span><br><span class=\"line\">     or the bottom edges of horizontally stacked items tightly to the relevant</span><br><span class=\"line\">     edge of the container</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Trailing</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">Bottom</span>: <span class=\"type\">UIStackViewAlignment</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">LastBaseline</span> <span class=\"comment\">// Valid for horizontal axis only</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>这里我没有对vertical设置约束</code>，然后使用<code>addArrangedSubview</code>添加一个button到UIStackView中</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> button:<span class=\"type\">UIButton</span> = <span class=\"type\">UIButton</span>(type: .<span class=\"type\">Custom</span>)</span><br><span class=\"line\">vertical.addArrangedSubview(button)</span><br><span class=\"line\"><span class=\"comment\">//或者使用vertical.insertArrangedSubview(&lt;#T##view: UIView##UIView#&gt;, atIndex: &lt;#T##Int#&gt;)</span></span><br></pre></td></tr></table></figure>\n<p>还可以通过<code>arrangedSubviews</code>属性来获取一个UIStackView容器内的所有视图。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vertical.arrangedSubviews</span><br></pre></td></tr></table></figure>\n<p><strong>从UIStackView中删除</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vertical.removeArrangedSubview(button)</span><br><span class=\"line\">button.removeFromSuperview()</span><br></pre></td></tr></table></figure>\n<p><code>removeArrangedSubview</code>只是确保从UIStackView中删除约束，移除出视图还需要调用<code>removeFromSuperview</code>。</p>\n<h2 id=\"实战练习\"><a href=\"#实战练习\" class=\"headerlink\" title=\"实战练习\"></a>实战练习</h2><p>个人是忠实的暴雪粉丝，所以这个Demo是一道选择题，喜欢《魔兽世界》么？喜欢会打上一课星，不喜欢就会删除一课星。</p>\n<p>且拖动两个UIStackView到storyboard中，竖向排列的UIStackView命名为verticalStackView，横向水平排列的UIStackView命名为horizontalStackView，其约束关系如下：</p>\n<p><code>在verticalStackView上按住ctrl键将箭头指向superview</code>，左右相对superview，上相对superview，下相对horizontalStackView。<code>在horizontalStackView上按住ctrl键将键头指向superview</code>，Height设置为110，左右相对superview，上相对于verticalStackView，下相对于superview。</p>\n<p>设置其（verticalStackView和horizontalStackView）对应方式：</p>\n<ul>\n<li>alignment 水平居中 center</li>\n<li>distribution fill Equally</li>\n<li>Spacing 20</li>\n</ul>\n<p>然后依次拖动UILabel，UIImageView，UIStackView（横向水平排列），且将第三个UIStackView命名为actionStackView，设置其alignment为center，distribution为Equal Spacing，Spacing为10，拖两个UIButton到actionStackView中。</p>\n<p><code>按住ctrl连接两个actions事件出来</code></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">linkToWow</span><span class=\"params\">(sender: UIButton)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> starImage:<span class=\"type\">UIImageView</span> = <span class=\"type\">UIImageView</span>(image: <span class=\"type\">UIImage</span>(named: <span class=\"string\">\"Star\"</span>))</span><br><span class=\"line\">    starImage.contentMode = .<span class=\"type\">ScaleAspectFit</span></span><br><span class=\"line\">    horizontalStackView.addArrangedSubview(starImage)</span><br><span class=\"line\">    <span class=\"type\">UIView</span>.animateWithDuration(<span class=\"number\">0.25</span>, animations: &#123;</span><br><span class=\"line\">         [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"keyword\">self</span>.horizontalStackView.layoutIfNeeded()</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">linkToRemoveWow</span><span class=\"params\">(sender: UIButton)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> lastStar:<span class=\"type\">UIView</span>? = horizontalStackView.arrangedSubviews.last</span><br><span class=\"line\">   <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> removeStart:<span class=\"type\">UIView</span> = lastStar&#123;</span><br><span class=\"line\">       horizontalStackView.removeArrangedSubview(removeStart)</span><br><span class=\"line\">       removeStart.removeFromSuperview()</span><br><span class=\"line\">       <span class=\"type\">UIView</span>.animateWithDuration(<span class=\"number\">0.25</span>, animations: &#123;</span><br><span class=\"line\">            [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.horizontalStackView.layoutIfNeeded()</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行看看</p>\n"},{"title":"使用UIAlertController","date":"2015-11-19T03:44:10.000Z","_content":"\n**源代码基于 Swift 2.1+ Xcode 7.1.1编写**\n\n在iOS 8中出现了UIAlertController用来替换以前的UIAlertView与UIActionSheet\n\n**使用它的好处**\n\n- 现在它是一个Controller，意味着可以使用modal或者popover的方式来展示，而且可以从UIViewController的配置属性中获利良多\n- UIAlertViewController在配置按钮，文本框时更加的灵活\n- 引进了一个新的类UIAlertAction来对按钮的数量，类型，顺序加以控制，比之前更简洁\n\n可以下载[Demo](https://github.com/icepy/withoutMe/tree/master/UIAlertController)来运行，Swift 2.0 Xcode 7.1.1\n\n也可以阅读Apple提供的文档[UIAlertController](https://developer.apple.com/library/tvos/documentation/UIKit/Reference/UIAlertController_class/index.html)\n\n**初始化alert与actionSheet**\n\n```Swift\nlazy var alert:UIAlertController = {\n        return UIAlertController(title: \"alert\", message: \"魔兽世界7.0－军团再临资料片\", preferredStyle: UIAlertControllerStyle.Alert)\n}()\nlazy var actionSheet:UIAlertController = {\n        return UIAlertController(title: \"actionSheet\", message: \"魔兽世界7.0要塞\", preferredStyle: UIAlertControllerStyle.ActionSheet)\n}()\n```\n从风格上来看，使用了一个枚举来描述，它所涵盖的类型有两种：\n- Alert 创建一个弹出框\n- ActionSheet 创建一个上拉菜单\n\n**创建普通的弹出框**\n\n每一个对应的按钮，现在使用UIAlertAction来创建，对应的动作都成了闭包，从阅读上来说是非常线性的，最后用创建好的UIAlertController顺序添加即可。\n\n```Swift\nlet closeAlert:UIAlertAction = UIAlertAction(title: \"取消\", style: UIAlertActionStyle.Cancel, handler: nil)\nlet okAlert:UIAlertAction = UIAlertAction(title: \"下载\", style: UIAlertActionStyle.Default, handler: nil)\nself.alert.addAction(closeAlert)\nself.alert.addAction(okAlert)\n```\n因为现在成了Controller，所以想要显示可以用`self.presentViewController(self.alert, animated: true, completion: nil);`模态弹出即可。\n\nUIAlertActionStyle提供了三种样式，让我们使用\n\n- Default 标准样式\n- Cancel 取消样式\n- Destructive 警告样式\n\n**创建带输入框的弹出框**\n\n不得不说，Apple给我们提供了一个很鸡肋的东西，那就是`addTextFieldWithConfigurationHandler`\n\n```Swift\nself.alert.addTextFieldWithConfigurationHandler({\n     [unowned self] (text:UITextField) in\n     text.placeholder = \"账户\"\n})\nself.alert.addTextFieldWithConfigurationHandler({\n     [unowned self] (text:UITextField) in\n     text.placeholder = \"邀请码\"\n     NSNotificationCenter.defaultCenter().addObserver(self, selector:\"alertTextFieldDidChange:\", name: UITextFieldTextDidChangeNotification, object: text)\n})\nlet okAlert:UIAlertAction = UIAlertAction(title: \"升级资料片\", style: UIAlertActionStyle.Default, handler: {\n     [unowned self] (action:UIAlertAction) in\n     NSNotificationCenter.defaultCenter().removeObserver(self, name: UITextFieldTextDidChangeNotification, object: nil)\n})\nself.alert.addAction(okAlert)\nokAlert.enabled = false\n```\n虽然你可以这样使用，但是，你还是自己用UIViewController创建一个这样的界面比较好。\n\n**创建一个上拉菜单**\n\n从使用上来说，跟之前创建Alert一样，需要使用UIAlertAction来创建每一项菜单。\n\n```Swift\nlet cancalAction:UIAlertAction = UIAlertAction(title: \"取消\", style: UIAlertActionStyle.Cancel, handler: nil)\nlet deleteAction:UIAlertAction = UIAlertAction(title: \"删除 \", style: UIAlertActionStyle.Destructive, handler: nil)\nlet archiveAction:UIAlertAction = UIAlertAction(title: \"升级\", style: UIAlertActionStyle.Default, handler: nil)\nself.actionSheet.addAction(cancalAction)\nself.actionSheet.addAction(deleteAction)\nself.actionSheet.addAction(archiveAction)\n```\n","source":"_posts/swift-uialertcontroller.md","raw":"title: 使用UIAlertController\ndate: 2015-11-19 11:44:10\ntags: Swift\n---\n\n**源代码基于 Swift 2.1+ Xcode 7.1.1编写**\n\n在iOS 8中出现了UIAlertController用来替换以前的UIAlertView与UIActionSheet\n\n**使用它的好处**\n\n- 现在它是一个Controller，意味着可以使用modal或者popover的方式来展示，而且可以从UIViewController的配置属性中获利良多\n- UIAlertViewController在配置按钮，文本框时更加的灵活\n- 引进了一个新的类UIAlertAction来对按钮的数量，类型，顺序加以控制，比之前更简洁\n\n可以下载[Demo](https://github.com/icepy/withoutMe/tree/master/UIAlertController)来运行，Swift 2.0 Xcode 7.1.1\n\n也可以阅读Apple提供的文档[UIAlertController](https://developer.apple.com/library/tvos/documentation/UIKit/Reference/UIAlertController_class/index.html)\n\n**初始化alert与actionSheet**\n\n```Swift\nlazy var alert:UIAlertController = {\n        return UIAlertController(title: \"alert\", message: \"魔兽世界7.0－军团再临资料片\", preferredStyle: UIAlertControllerStyle.Alert)\n}()\nlazy var actionSheet:UIAlertController = {\n        return UIAlertController(title: \"actionSheet\", message: \"魔兽世界7.0要塞\", preferredStyle: UIAlertControllerStyle.ActionSheet)\n}()\n```\n从风格上来看，使用了一个枚举来描述，它所涵盖的类型有两种：\n- Alert 创建一个弹出框\n- ActionSheet 创建一个上拉菜单\n\n**创建普通的弹出框**\n\n每一个对应的按钮，现在使用UIAlertAction来创建，对应的动作都成了闭包，从阅读上来说是非常线性的，最后用创建好的UIAlertController顺序添加即可。\n\n```Swift\nlet closeAlert:UIAlertAction = UIAlertAction(title: \"取消\", style: UIAlertActionStyle.Cancel, handler: nil)\nlet okAlert:UIAlertAction = UIAlertAction(title: \"下载\", style: UIAlertActionStyle.Default, handler: nil)\nself.alert.addAction(closeAlert)\nself.alert.addAction(okAlert)\n```\n因为现在成了Controller，所以想要显示可以用`self.presentViewController(self.alert, animated: true, completion: nil);`模态弹出即可。\n\nUIAlertActionStyle提供了三种样式，让我们使用\n\n- Default 标准样式\n- Cancel 取消样式\n- Destructive 警告样式\n\n**创建带输入框的弹出框**\n\n不得不说，Apple给我们提供了一个很鸡肋的东西，那就是`addTextFieldWithConfigurationHandler`\n\n```Swift\nself.alert.addTextFieldWithConfigurationHandler({\n     [unowned self] (text:UITextField) in\n     text.placeholder = \"账户\"\n})\nself.alert.addTextFieldWithConfigurationHandler({\n     [unowned self] (text:UITextField) in\n     text.placeholder = \"邀请码\"\n     NSNotificationCenter.defaultCenter().addObserver(self, selector:\"alertTextFieldDidChange:\", name: UITextFieldTextDidChangeNotification, object: text)\n})\nlet okAlert:UIAlertAction = UIAlertAction(title: \"升级资料片\", style: UIAlertActionStyle.Default, handler: {\n     [unowned self] (action:UIAlertAction) in\n     NSNotificationCenter.defaultCenter().removeObserver(self, name: UITextFieldTextDidChangeNotification, object: nil)\n})\nself.alert.addAction(okAlert)\nokAlert.enabled = false\n```\n虽然你可以这样使用，但是，你还是自己用UIViewController创建一个这样的界面比较好。\n\n**创建一个上拉菜单**\n\n从使用上来说，跟之前创建Alert一样，需要使用UIAlertAction来创建每一项菜单。\n\n```Swift\nlet cancalAction:UIAlertAction = UIAlertAction(title: \"取消\", style: UIAlertActionStyle.Cancel, handler: nil)\nlet deleteAction:UIAlertAction = UIAlertAction(title: \"删除 \", style: UIAlertActionStyle.Destructive, handler: nil)\nlet archiveAction:UIAlertAction = UIAlertAction(title: \"升级\", style: UIAlertActionStyle.Default, handler: nil)\nself.actionSheet.addAction(cancalAction)\nself.actionSheet.addAction(deleteAction)\nself.actionSheet.addAction(archiveAction)\n```\n","slug":"swift-uialertcontroller","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk22001vuejrw6kyfaqq","content":"<p><strong>源代码基于 Swift 2.1+ Xcode 7.1.1编写</strong></p>\n<p>在iOS 8中出现了UIAlertController用来替换以前的UIAlertView与UIActionSheet</p>\n<p><strong>使用它的好处</strong></p>\n<ul>\n<li>现在它是一个Controller，意味着可以使用modal或者popover的方式来展示，而且可以从UIViewController的配置属性中获利良多</li>\n<li>UIAlertViewController在配置按钮，文本框时更加的灵活</li>\n<li>引进了一个新的类UIAlertAction来对按钮的数量，类型，顺序加以控制，比之前更简洁</li>\n</ul>\n<p>可以下载<a href=\"https://github.com/icepy/withoutMe/tree/master/UIAlertController\" target=\"_blank\" rel=\"external\">Demo</a>来运行，Swift 2.0 Xcode 7.1.1</p>\n<p>也可以阅读Apple提供的文档<a href=\"https://developer.apple.com/library/tvos/documentation/UIKit/Reference/UIAlertController_class/index.html\" target=\"_blank\" rel=\"external\">UIAlertController</a></p>\n<p><strong>初始化alert与actionSheet</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> alert:<span class=\"type\">UIAlertController</span> = &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">UIAlertController</span>(title: <span class=\"string\">\"alert\"</span>, message: <span class=\"string\">\"魔兽世界7.0－军团再临资料片\"</span>, preferredStyle: <span class=\"type\">UIAlertControllerStyle</span>.<span class=\"type\">Alert</span>)</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"><span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> actionSheet:<span class=\"type\">UIAlertController</span> = &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">UIAlertController</span>(title: <span class=\"string\">\"actionSheet\"</span>, message: <span class=\"string\">\"魔兽世界7.0要塞\"</span>, preferredStyle: <span class=\"type\">UIAlertControllerStyle</span>.<span class=\"type\">ActionSheet</span>)</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p>从风格上来看，使用了一个枚举来描述，它所涵盖的类型有两种：</p>\n<ul>\n<li>Alert 创建一个弹出框</li>\n<li>ActionSheet 创建一个上拉菜单</li>\n</ul>\n<p><strong>创建普通的弹出框</strong></p>\n<p>每一个对应的按钮，现在使用UIAlertAction来创建，对应的动作都成了闭包，从阅读上来说是非常线性的，最后用创建好的UIAlertController顺序添加即可。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> closeAlert:<span class=\"type\">UIAlertAction</span> = <span class=\"type\">UIAlertAction</span>(title: <span class=\"string\">\"取消\"</span>, style: <span class=\"type\">UIAlertActionStyle</span>.<span class=\"type\">Cancel</span>, handler: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> okAlert:<span class=\"type\">UIAlertAction</span> = <span class=\"type\">UIAlertAction</span>(title: <span class=\"string\">\"下载\"</span>, style: <span class=\"type\">UIAlertActionStyle</span>.<span class=\"type\">Default</span>, handler: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"><span class=\"keyword\">self</span>.alert.addAction(closeAlert)</span><br><span class=\"line\"><span class=\"keyword\">self</span>.alert.addAction(okAlert)</span><br></pre></td></tr></table></figure>\n<p>因为现在成了Controller，所以想要显示可以用<code>self.presentViewController(self.alert, animated: true, completion: nil);</code>模态弹出即可。</p>\n<p>UIAlertActionStyle提供了三种样式，让我们使用</p>\n<ul>\n<li>Default 标准样式</li>\n<li>Cancel 取消样式</li>\n<li>Destructive 警告样式</li>\n</ul>\n<p><strong>创建带输入框的弹出框</strong></p>\n<p>不得不说，Apple给我们提供了一个很鸡肋的东西，那就是<code>addTextFieldWithConfigurationHandler</code></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.alert.addTextFieldWithConfigurationHandler(&#123;</span><br><span class=\"line\">     [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] (text:<span class=\"type\">UITextField</span>) <span class=\"keyword\">in</span></span><br><span class=\"line\">     text.placeholder = <span class=\"string\">\"账户\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">self</span>.alert.addTextFieldWithConfigurationHandler(&#123;</span><br><span class=\"line\">     [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] (text:<span class=\"type\">UITextField</span>) <span class=\"keyword\">in</span></span><br><span class=\"line\">     text.placeholder = <span class=\"string\">\"邀请码\"</span></span><br><span class=\"line\">     <span class=\"type\">NSNotificationCenter</span>.defaultCenter().addObserver(<span class=\"keyword\">self</span>, selector:<span class=\"string\">\"alertTextFieldDidChange:\"</span>, name: <span class=\"type\">UITextFieldTextDidChangeNotification</span>, object: text)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> okAlert:<span class=\"type\">UIAlertAction</span> = <span class=\"type\">UIAlertAction</span>(title: <span class=\"string\">\"升级资料片\"</span>, style: <span class=\"type\">UIAlertActionStyle</span>.<span class=\"type\">Default</span>, handler: &#123;</span><br><span class=\"line\">     [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] (action:<span class=\"type\">UIAlertAction</span>) <span class=\"keyword\">in</span></span><br><span class=\"line\">     <span class=\"type\">NSNotificationCenter</span>.defaultCenter().removeObserver(<span class=\"keyword\">self</span>, name: <span class=\"type\">UITextFieldTextDidChangeNotification</span>, object: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">self</span>.alert.addAction(okAlert)</span><br><span class=\"line\">okAlert.enabled = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>虽然你可以这样使用，但是，你还是自己用UIViewController创建一个这样的界面比较好。</p>\n<p><strong>创建一个上拉菜单</strong></p>\n<p>从使用上来说，跟之前创建Alert一样，需要使用UIAlertAction来创建每一项菜单。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cancalAction:<span class=\"type\">UIAlertAction</span> = <span class=\"type\">UIAlertAction</span>(title: <span class=\"string\">\"取消\"</span>, style: <span class=\"type\">UIAlertActionStyle</span>.<span class=\"type\">Cancel</span>, handler: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> deleteAction:<span class=\"type\">UIAlertAction</span> = <span class=\"type\">UIAlertAction</span>(title: <span class=\"string\">\"删除 \"</span>, style: <span class=\"type\">UIAlertActionStyle</span>.<span class=\"type\">Destructive</span>, handler: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction:<span class=\"type\">UIAlertAction</span> = <span class=\"type\">UIAlertAction</span>(title: <span class=\"string\">\"升级\"</span>, style: <span class=\"type\">UIAlertActionStyle</span>.<span class=\"type\">Default</span>, handler: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"><span class=\"keyword\">self</span>.actionSheet.addAction(cancalAction)</span><br><span class=\"line\"><span class=\"keyword\">self</span>.actionSheet.addAction(deleteAction)</span><br><span class=\"line\"><span class=\"keyword\">self</span>.actionSheet.addAction(archiveAction)</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><strong>源代码基于 Swift 2.1+ Xcode 7.1.1编写</strong></p>\n<p>在iOS 8中出现了UIAlertController用来替换以前的UIAlertView与UIActionSheet</p>\n<p><strong>使用它的好处</strong></p>\n<ul>\n<li>现在它是一个Controller，意味着可以使用modal或者popover的方式来展示，而且可以从UIViewController的配置属性中获利良多</li>\n<li>UIAlertViewController在配置按钮，文本框时更加的灵活</li>\n<li>引进了一个新的类UIAlertAction来对按钮的数量，类型，顺序加以控制，比之前更简洁</li>\n</ul>\n<p>可以下载<a href=\"https://github.com/icepy/withoutMe/tree/master/UIAlertController\">Demo</a>来运行，Swift 2.0 Xcode 7.1.1</p>\n<p>也可以阅读Apple提供的文档<a href=\"https://developer.apple.com/library/tvos/documentation/UIKit/Reference/UIAlertController_class/index.html\">UIAlertController</a></p>\n<p><strong>初始化alert与actionSheet</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> alert:<span class=\"type\">UIAlertController</span> = &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">UIAlertController</span>(title: <span class=\"string\">\"alert\"</span>, message: <span class=\"string\">\"魔兽世界7.0－军团再临资料片\"</span>, preferredStyle: <span class=\"type\">UIAlertControllerStyle</span>.<span class=\"type\">Alert</span>)</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"><span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> actionSheet:<span class=\"type\">UIAlertController</span> = &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">UIAlertController</span>(title: <span class=\"string\">\"actionSheet\"</span>, message: <span class=\"string\">\"魔兽世界7.0要塞\"</span>, preferredStyle: <span class=\"type\">UIAlertControllerStyle</span>.<span class=\"type\">ActionSheet</span>)</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p>从风格上来看，使用了一个枚举来描述，它所涵盖的类型有两种：</p>\n<ul>\n<li>Alert 创建一个弹出框</li>\n<li>ActionSheet 创建一个上拉菜单</li>\n</ul>\n<p><strong>创建普通的弹出框</strong></p>\n<p>每一个对应的按钮，现在使用UIAlertAction来创建，对应的动作都成了闭包，从阅读上来说是非常线性的，最后用创建好的UIAlertController顺序添加即可。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> closeAlert:<span class=\"type\">UIAlertAction</span> = <span class=\"type\">UIAlertAction</span>(title: <span class=\"string\">\"取消\"</span>, style: <span class=\"type\">UIAlertActionStyle</span>.<span class=\"type\">Cancel</span>, handler: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> okAlert:<span class=\"type\">UIAlertAction</span> = <span class=\"type\">UIAlertAction</span>(title: <span class=\"string\">\"下载\"</span>, style: <span class=\"type\">UIAlertActionStyle</span>.<span class=\"type\">Default</span>, handler: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"><span class=\"keyword\">self</span>.alert.addAction(closeAlert)</span><br><span class=\"line\"><span class=\"keyword\">self</span>.alert.addAction(okAlert)</span><br></pre></td></tr></table></figure>\n<p>因为现在成了Controller，所以想要显示可以用<code>self.presentViewController(self.alert, animated: true, completion: nil);</code>模态弹出即可。</p>\n<p>UIAlertActionStyle提供了三种样式，让我们使用</p>\n<ul>\n<li>Default 标准样式</li>\n<li>Cancel 取消样式</li>\n<li>Destructive 警告样式</li>\n</ul>\n<p><strong>创建带输入框的弹出框</strong></p>\n<p>不得不说，Apple给我们提供了一个很鸡肋的东西，那就是<code>addTextFieldWithConfigurationHandler</code></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.alert.addTextFieldWithConfigurationHandler(&#123;</span><br><span class=\"line\">     [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] (text:<span class=\"type\">UITextField</span>) <span class=\"keyword\">in</span></span><br><span class=\"line\">     text.placeholder = <span class=\"string\">\"账户\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">self</span>.alert.addTextFieldWithConfigurationHandler(&#123;</span><br><span class=\"line\">     [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] (text:<span class=\"type\">UITextField</span>) <span class=\"keyword\">in</span></span><br><span class=\"line\">     text.placeholder = <span class=\"string\">\"邀请码\"</span></span><br><span class=\"line\">     <span class=\"type\">NSNotificationCenter</span>.defaultCenter().addObserver(<span class=\"keyword\">self</span>, selector:<span class=\"string\">\"alertTextFieldDidChange:\"</span>, name: <span class=\"type\">UITextFieldTextDidChangeNotification</span>, object: text)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> okAlert:<span class=\"type\">UIAlertAction</span> = <span class=\"type\">UIAlertAction</span>(title: <span class=\"string\">\"升级资料片\"</span>, style: <span class=\"type\">UIAlertActionStyle</span>.<span class=\"type\">Default</span>, handler: &#123;</span><br><span class=\"line\">     [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] (action:<span class=\"type\">UIAlertAction</span>) <span class=\"keyword\">in</span></span><br><span class=\"line\">     <span class=\"type\">NSNotificationCenter</span>.defaultCenter().removeObserver(<span class=\"keyword\">self</span>, name: <span class=\"type\">UITextFieldTextDidChangeNotification</span>, object: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">self</span>.alert.addAction(okAlert)</span><br><span class=\"line\">okAlert.enabled = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>虽然你可以这样使用，但是，你还是自己用UIViewController创建一个这样的界面比较好。</p>\n<p><strong>创建一个上拉菜单</strong></p>\n<p>从使用上来说，跟之前创建Alert一样，需要使用UIAlertAction来创建每一项菜单。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cancalAction:<span class=\"type\">UIAlertAction</span> = <span class=\"type\">UIAlertAction</span>(title: <span class=\"string\">\"取消\"</span>, style: <span class=\"type\">UIAlertActionStyle</span>.<span class=\"type\">Cancel</span>, handler: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> deleteAction:<span class=\"type\">UIAlertAction</span> = <span class=\"type\">UIAlertAction</span>(title: <span class=\"string\">\"删除 \"</span>, style: <span class=\"type\">UIAlertActionStyle</span>.<span class=\"type\">Destructive</span>, handler: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> archiveAction:<span class=\"type\">UIAlertAction</span> = <span class=\"type\">UIAlertAction</span>(title: <span class=\"string\">\"升级\"</span>, style: <span class=\"type\">UIAlertActionStyle</span>.<span class=\"type\">Default</span>, handler: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"><span class=\"keyword\">self</span>.actionSheet.addAction(cancalAction)</span><br><span class=\"line\"><span class=\"keyword\">self</span>.actionSheet.addAction(deleteAction)</span><br><span class=\"line\"><span class=\"keyword\">self</span>.actionSheet.addAction(archiveAction)</span><br></pre></td></tr></table></figure>\n"},{"title":"基于CNodeAPI使用react开发一个完整的Web应用","date":"2016-06-01T12:39:17.000Z","banner":"http://o80ub63i5.bkt.clouddn.com/lesson/corsica-1408158_640.jpg","_content":"\n本次课程面向中级前端开发人员以及对react感兴趣或有其他语言开发背景的同学，同时我希望你具备如下知识的储备。\n\n1. 知晓单页应用的特点\n2. 良好的数据结构知识\n3. 有过服务端的开发经验（熟悉开发第三方接口服务）\n4. 熟悉react开发方式\n5. 具备组件化的思维\n6. 熟练使用webpack\n7. 熟悉 ES2015\n\n本次课程的源代码放置在 [Baine](https://github.com/mulgore/Baine)，你可以在此获取源代码。\n\n本次课程的稿件使用GitBook编写，你可以访问 [基于豆瓣API使用react开发一个完整的Web应用](https://www.gitbook.com/book/icepy/-api-react-web-/details) 来阅读本次课程的书籍。\n\n本次课程的任务管理使用了Trello，你可以访问[https://trello.com/b/L6ohrKhq](https://trello.com/b/L6ohrKhq)来了解实战项目的进度和计划安排。\n\n如果对课程及内容有任何反馈，可以在[issues](https://github.com/mulgore/Baine/issues)中发起你的需求。或者关注我的微信公众号：fed_talk，来向我反馈。\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/weixin.jpg)\n","source":"_posts/used-CNodeAPI-for-development-of-react-webapp.md","raw":"title: 基于CNodeAPI使用react开发一个完整的Web应用\ndate: 2016-06-01 20:39:17\ntags: 实战课程\nbanner: http://o80ub63i5.bkt.clouddn.com/lesson/corsica-1408158_640.jpg\n---\n\n本次课程面向中级前端开发人员以及对react感兴趣或有其他语言开发背景的同学，同时我希望你具备如下知识的储备。\n\n1. 知晓单页应用的特点\n2. 良好的数据结构知识\n3. 有过服务端的开发经验（熟悉开发第三方接口服务）\n4. 熟悉react开发方式\n5. 具备组件化的思维\n6. 熟练使用webpack\n7. 熟悉 ES2015\n\n本次课程的源代码放置在 [Baine](https://github.com/mulgore/Baine)，你可以在此获取源代码。\n\n本次课程的稿件使用GitBook编写，你可以访问 [基于豆瓣API使用react开发一个完整的Web应用](https://www.gitbook.com/book/icepy/-api-react-web-/details) 来阅读本次课程的书籍。\n\n本次课程的任务管理使用了Trello，你可以访问[https://trello.com/b/L6ohrKhq](https://trello.com/b/L6ohrKhq)来了解实战项目的进度和计划安排。\n\n如果对课程及内容有任何反馈，可以在[issues](https://github.com/mulgore/Baine/issues)中发起你的需求。或者关注我的微信公众号：fed_talk，来向我反馈。\n\n![](https://raw.githubusercontent.com/icepy/_posts/master/img/weixin.jpg)\n","slug":"used-CNodeAPI-for-development-of-react-webapp","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk27001xuejr3t5d3sqr","content":"<p>本次课程面向中级前端开发人员以及对react感兴趣或有其他语言开发背景的同学，同时我希望你具备如下知识的储备。</p>\n<ol>\n<li>知晓单页应用的特点</li>\n<li>良好的数据结构知识</li>\n<li>有过服务端的开发经验（熟悉开发第三方接口服务）</li>\n<li>熟悉react开发方式</li>\n<li>具备组件化的思维</li>\n<li>熟练使用webpack</li>\n<li>熟悉 ES2015</li>\n</ol>\n<p>本次课程的源代码放置在 <a href=\"https://github.com/mulgore/Baine\" target=\"_blank\" rel=\"external\">Baine</a>，你可以在此获取源代码。</p>\n<p>本次课程的稿件使用GitBook编写，你可以访问 <a href=\"https://www.gitbook.com/book/icepy/-api-react-web-/details\" target=\"_blank\" rel=\"external\">基于豆瓣API使用react开发一个完整的Web应用</a> 来阅读本次课程的书籍。</p>\n<p>本次课程的任务管理使用了Trello，你可以访问<a href=\"https://trello.com/b/L6ohrKhq\" target=\"_blank\" rel=\"external\">https://trello.com/b/L6ohrKhq</a>来了解实战项目的进度和计划安排。</p>\n<p>如果对课程及内容有任何反馈，可以在<a href=\"https://github.com/mulgore/Baine/issues\" target=\"_blank\" rel=\"external\">issues</a>中发起你的需求。或者关注我的微信公众号：fed_talk，来向我反馈。</p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/weixin.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<p>本次课程面向中级前端开发人员以及对react感兴趣或有其他语言开发背景的同学，同时我希望你具备如下知识的储备。</p>\n<ol>\n<li>知晓单页应用的特点</li>\n<li>良好的数据结构知识</li>\n<li>有过服务端的开发经验（熟悉开发第三方接口服务）</li>\n<li>熟悉react开发方式</li>\n<li>具备组件化的思维</li>\n<li>熟练使用webpack</li>\n<li>熟悉 ES2015</li>\n</ol>\n<p>本次课程的源代码放置在 <a href=\"https://github.com/mulgore/Baine\">Baine</a>，你可以在此获取源代码。</p>\n<p>本次课程的稿件使用GitBook编写，你可以访问 <a href=\"https://www.gitbook.com/book/icepy/-api-react-web-/details\">基于豆瓣API使用react开发一个完整的Web应用</a> 来阅读本次课程的书籍。</p>\n<p>本次课程的任务管理使用了Trello，你可以访问<a href=\"https://trello.com/b/L6ohrKhq\">https://trello.com/b/L6ohrKhq</a>来了解实战项目的进度和计划安排。</p>\n<p>如果对课程及内容有任何反馈，可以在<a href=\"https://github.com/mulgore/Baine/issues\">issues</a>中发起你的需求。或者关注我的微信公众号：fed_talk，来向我反馈。</p>\n<p><img src=\"https://raw.githubusercontent.com/icepy/_posts/master/img/weixin.jpg\" alt=\"\"></p>\n"},{"title":"webpack在PC项目中的应用","date":"2016-02-29T03:52:00.000Z","_content":"\n好东西，总是要使用的。\n\n## webpack是什么工具\n\n*webpack is a module bundler*\n\n正如官网对webpack的描述，它是一种模块化加载器，当然也不仅仅限于此。某种程度上来说，可以代替某些`gulp`的功能，至少有些还是无法替代的。在webpack中所有的资源都会被视作模块来处理，为了应对这样的情况，webpack有对应的`loader`机制来处理，另外shim，plugins，和其他构建工具，一样一样的，更多的细节，需要你在实际的应用中慢慢去体会了。\n\n## webpack的使用方法\n\n安装：npm install webpack --verbose --save-dev\n\nwebpack认为一个项目（或者一个页面），总有一个入口文件，就像C语言中总有一个main函数一样。假设，我们创建两个文件`./mian.js`和`./query.js`，并且将`main.js`做为我们项目的入口文件。\n\n`query.js`\n\n```JavaScript\n    module.exports = function(){\n         var version = 1.0.0;\n         console.log(version)\n    }\n```\n\n`main.js`\n\n```JavaScript\n    var query = require('./query');\n    query();\n```\n\n创建一个webpack.config.js文件\n\n```JavaScript\n    var config = {\n        entry:'./main.js',\n        ouptut:{\n            path:'./js'\n            filename:'main.js'\n        }\n    }\n    module.exports = config;\n```\n\n在你的终端上运行`webpack`即可。\n\n## webpack配置详解\n\n`entry`：\n\nentry属性做为可配置的入口，比如上面所写的`./main.js`。entry有三种写法，每一个入口可以称之为一个chunk。\n\n- 如果为字符串，只会打包一个`顺序依赖`的模块，输出则根据output配置而定。\n- 如果为数组，只会打包一个`顺序依赖`的模块，合并到最后一个模块时导出，输出则根据output配置而定。\n- 如果为对象，则会根据入口打包多个`顺序依赖`的模块，key名会根据在output的配置输出。\n\n`output`：\n\n输出规则，在此对象中设置。\n\n- path 设置输出的文件路径\n- filename 设置输出文件名，filename可以有多种配置，比如`main.js`，`[id].js`，`[name].js`，`[hash].js`等\n- publicPath 设置资源的访问路径\n- library 设置模块导出的类名\n- libraryTarget:'umd' 设置模块兼容模式\n- umdNamedDefine:true  同上\n\n`devtool`：\n\n将devtool设置为`source-map`，在开发调试阶段非常有用，它的模式非常多，我有搞的比较晕。\n\n\n`loader`：\n\nloader机制应该是webpack中非常重要的部分了，它是一系列资源的最终执行者。一般情况下，你可以访问：[webpack loader](http://webpack.github.io/docs/list-of-loaders.html)来访问可用loader列表。\n\n比如现在我想将.html类型的文件，当做一个模块来载入。\n\n    npm install raw-loader\n\n\n```JavaScript\n    module:{\n        loaders:[\n            {\n                test:/\\.html$/,\n                loader:'raw',\n                exclude:/(node_modules)/\n            }\n        ]\n    }\n```\n\n每一个loader都可以用一个对象来描述，test是你的匹配规则，loader是你要载入的loader，exclude是你在执行规则是想忽略的目录。\n\n`plugins`：\n\nwebpack的插件机制也非常的重要，其内置了多种插件，比如混淆，压缩等等。插件列表可以访问：[list of plugins](http://webpack.github.io/docs/list-of-plugins.html)。\n\n正常情况下可以使用官方自带的插件：\n\n```JavaScript\n    new webpack.optimize.UglifyJsPlugin({\n        compress: {\n            warnings: false\n        }\n    })\n```\n\n当然，我们也可以引入第三方插件，使用你的npm install吧。\n\n`resolve`：\n\n此配置可以对一些常用模块设置别名，比如`a.js`放置在`./src/module/address/`中，每次载入模块需要var a = require('./src/module/address/a');名字非长，如果设置别名了，只需要var a = require('a')；\n\n```JavaScript\n    resolve:{\n        alias:{\n            \"RequestModel\":path.resolve(__dirname,'src/lib/request.model')\n        }\n    },\n```\n\n还可以设置访问路径，以及模块载入后缀。\n\n```JavaScript\n    resolve:{\n        root:path.resolve(filePath,'/src'),\n        extensions:['','.js']\n    }\n```\n\n`externals`：\n\n此项配置可以将某些库设置为外部引用，内部不会打包合并进去。\n\n```JavaScript\n    externals:{\n        jquery:'window.jQuery'\n    }\n```\n\n## 在我们PC项目中的应用\n\n我们公司内部的项目，也开始应用npm scripts来做执行钩子，webpack来做构建，首先设计三个命令：\n\n- npm run start\n- npm run dev\n- npm run build\n\n**配置npm run start**\n\n本地服务器的启动，我们没有使用webpack官方提供的webpack-dev-server，而是采用了 browser-sync。\n\n```JavaScript\nvar browser = require('browser-sync');\nvar browserSync = browser.create();\nvar PORT = 4000\nvar loadMap = [\n    'modules/*.*',\n    'src/**/*.*',\n    './*.html',\n       './web/*.html'\n];\ngulp.task('server',[], function() {\n    // content\n        browserSync.init({\n            server:'./',\n            port:PORT\n        });\n        gulp.watch(loadMap, function(file){\n            console.log(file.path)\n            browserSync.reload()\n        });\n});\n```\n\n利用gulp写了一个脚本任务，在package.json文件中设置：\n\n```JavaScript\n    scripts:{\n        \"start\":\"gulp server\"\n    }\n```\n\n**了解我们项目的实际需求**\n\n我们的项目是一个多页面项目，并不像单页应用一样（业务编程可以打包成一个），首先我们需要设计一个良好的目录结构，如下：\n\n- web 目录放置*.html页面\n- style 目录放置*.css文件，另外在此目录中放置了less源文件\n- src 目录放置了我们的所有*.js文件\n- mock  内置的模拟数据，放置在此\n- img 图片放置目录\n- link npm下载不了的第三方库放置在此\n- YYT_PC_Modules 内部编写的模块，放置在此\n- YYT_PC_Component 内部编写的组件，放置在此\n\n编写一个map.json文件，用来维护多入口的关系。当然我们的webpack.dev.config.js文件，放置在根目录。最后的build阶段应该输出一个新的目录`dist`这个目录中放置的应该是所有build完成的资源，包括*.html文件。\n\n它应该才是我们最终的发布目录。\n\n**配置npm run dev**\n\n对于CSS我们的期望是一个新的link而不是style内嵌，所以还需要做一些额外的事情，先下载loader和插件。\n\n列表：\n\n    \"less-loader\": \"^2.2.2\",\n    \"raw-loader\": \"^0.5.1\",\n    \"style-loader\": \"^0.13.0\",\n    \"css-loader\": \"^0.23.1\",\n    \"eslint\": \"^2.2.0\",\n    \"eslint-loader\": \"^1.3.0\",\n    \"extract-text-webpack-plugin\": \"^1.0.1\",\n\n`raw-loader`主要用来解决模板载入的问题，模块当做一个变量直接载入到业务编程中。\n\n配置我们的CSS：\n\n```JavaScript\n   // webpack.dev.config.js\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar extractLESS = new ExtractTextPlugin('../style/[name].css');\n    {\n        test: /\\.less$/i,\n        loader: extractLESS.extract(['css','less'])\n    }\n\n    //入口js文件\n\n    require('../style/less/index.less')\n```\n\n`ExtractTextPlugin`的作用就是将CSS单独输出一个文件，这个文件名依赖于entry写的入口文件名。\n\n配置我们的多页面JS：\n\n```JavaScript\n    //利用了entry的对象写法\n    {\n        \"index.main\":\"./src/index.mian.js\"\n    }\n\n    //然后在输出是用[name]代替之前的'index.main.js'\n```\n\n提取JS文件中的公共部分：\n\nwebpack自带的一个插件，可以提取合并打包时的公共部分，只要在页面载入时，放置在合并打包后文件的前面。\n\n```JavaScript\nnew optimize.CommonsChunkPlugin('common.js')\n```\n\n**完整的dev构建脚本**\n\n```JavaScript\nvar webpack = require('webpack');\nvar path = require('path');\nvar fs = require('fs');\nvar plugins = [];\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar optimize = webpack.optimize\nvar extractLESS = new ExtractTextPlugin('../style/css/[name].css');\nplugins.push(extractLESS);\nplugins.push(new optimize.CommonsChunkPlugin('common.js'));\nvar sourceMap = require('./map.json').source;\nvar YYT_PC_Modules = 'link/YYT_PC_Modules/';\nvar YYT_PC_Component = 'link/YYT_PC_Component/';\nvar config = {\n    entry: sourceMap,\n    output: {\n        path: path.resolve(__dirname + '/js'),\n        filename: '[name].js'\n    },\n    devtool: 'source-map',\n    module: {\n        loaders: [\n            {\n                test: /\\.html$/,\n                loader: 'raw',\n                exclude: /(node_modules)/\n            },\n            {\n                test: /\\.js$/,\n                loader: 'eslint-loader',\n                exclude: /(node_modules)/\n            },\n            {\n                test: /\\.less$/i,\n                loader: extractLESS.extract(['css', 'less'])\n            },\n            {\n                test: /\\.(png|jpg)$/,\n                loader: 'url-loader?limit=8192'\n            }\n        ]\n    },\n    plugins: plugins,\n    resolve: {\n        alias: {\n            \"tplEng\": path.resolve(__dirname, 'link/template'),  //模板引擎\n            \"BaseModel\": path.resolve(__dirname, YYT_PC_Modules + 'baseModel'),\n            \"BaseView\": path.resolve(__dirname, YYT_PC_Modules + 'baseView'),\n            \"store\": path.resolve(__dirname, YYT_PC_Modules + 'store/locationStore'),\n            \"cookie\": path.resolve(__dirname, YYT_PC_Modules + 'store/cookie'),\n            \"url\": path.resolve(__dirname, YYT_PC_Modules + 'util/url'),\n            \"tools\": path.resolve(__dirname, YYT_PC_Modules + 'util/tools'),\n            \"FlashAPI\": path.resolve(__dirname,YYT_PC_Modules + 'util/FlashAPI'),\n            \"DateTime\": path.resolve(__dirname, YYT_PC_Modules + 'util/DateTime'),\n            \"pwdencrypt\": path.resolve(__dirname, YYT_PC_Modules + 'crypto/pwdencrypt'),\n            \"secret\": path.resolve(__dirname, YYT_PC_Modules + 'crypto/secret'),\n            \"UploadFile\": path.resolve(__dirname, YYT_PC_Component + 'feature/UploadFile'),\n            \"AjaxForm\": path.resolve(__dirname, YYT_PC_Component + 'feature/AjaxForm'),\n            \"Scrollbar\": path.resolve(__dirname, YYT_PC_Component + 'feature/Scrollbar'),\n            \"LoginBox\": path.resolve(__dirname, YYT_PC_Component + 'business/LoginBox/'),\n            \"UserModel\": path.resolve(__dirname, YYT_PC_Component + 'business/UserModel/'),\n            \"UploadFileDialog\": path.resolve(__dirname, YYT_PC_Component + 'business/UploadFileDialog/'),\n            \"ui.Dialog\": path.resolve(__dirname, YYT_PC_Component + 'ui/dialog/'),\n            \"ui.Confirm\": path.resolve(__dirname, YYT_PC_Component + 'ui/confirm/'),\n            \"ui.MsgBox\": path.resolve(__dirname, YYT_PC_Component + 'ui/msgBox/'),\n            \"config\": path.resolve(__dirname, 'src/lib/config')\n        }\n    },\n    externals: {\n        jquery: 'window.jQuery',\n        backbone: 'window.Backbone',\n        underscore: 'window._'\n    }\n};\n// console.log(path.resolve(__dirname,'node_modules/jquery/dist/jquery.js'))\nmodule.exports = config;\n\n```\n\n\n**问题**\n\n问题一：在windows机器上如果你要设置环境变量（也许是我没有找到问题的所在，但是提出来，主要是Mac用习惯了。）\n\n```JavaScript\n    scripts:{\n        \"dev\":\"WEB_PACK=1 webpack --watch --config webpack.dev.config.js \"\n    }\n```\n\n在webpack.dev.config.js文件中不能正确的获取环境变量，所以重新写了一个build文件，webpack.build.config.js来做最后的构建。\n\n问题二：构建之后的文件hash化后如何更新HTML中的路径\n\n这个问题，最后没有采用webpack来做，而是使用gulp来解决的。（不知道大家有没有什么好的方式）\n\n感谢@sharkrice告知  HtmlWebpackPlugin  插件\n\n问题三：构建系统的shim\n\n我们的PC项目（兼容IE8+），依然使用着以前的库，jQuery.js，underscore.js，backbone.js，以及其他第三方不支持commonjs语法的插件，有很多兼容不是很好，最后还是写了另外一个入口文件（包装），然后在webpack合并打包的文件之前引入这些插件，挂载在一个全局的命名空间下，利用新写的一个包装入口导出模块。\n\n问题四：CSS依赖重复\n\n感谢@sharkrice 告知 尝试webpack.optimize.DedupePlugin，问题解决。\n","source":"_posts/used-webpack-in-pc.md","raw":"title: webpack在PC项目中的应用\ndate: 2016-02-29 11:52:00\ntags: webpack\n---\n\n好东西，总是要使用的。\n\n## webpack是什么工具\n\n*webpack is a module bundler*\n\n正如官网对webpack的描述，它是一种模块化加载器，当然也不仅仅限于此。某种程度上来说，可以代替某些`gulp`的功能，至少有些还是无法替代的。在webpack中所有的资源都会被视作模块来处理，为了应对这样的情况，webpack有对应的`loader`机制来处理，另外shim，plugins，和其他构建工具，一样一样的，更多的细节，需要你在实际的应用中慢慢去体会了。\n\n## webpack的使用方法\n\n安装：npm install webpack --verbose --save-dev\n\nwebpack认为一个项目（或者一个页面），总有一个入口文件，就像C语言中总有一个main函数一样。假设，我们创建两个文件`./mian.js`和`./query.js`，并且将`main.js`做为我们项目的入口文件。\n\n`query.js`\n\n```JavaScript\n    module.exports = function(){\n         var version = 1.0.0;\n         console.log(version)\n    }\n```\n\n`main.js`\n\n```JavaScript\n    var query = require('./query');\n    query();\n```\n\n创建一个webpack.config.js文件\n\n```JavaScript\n    var config = {\n        entry:'./main.js',\n        ouptut:{\n            path:'./js'\n            filename:'main.js'\n        }\n    }\n    module.exports = config;\n```\n\n在你的终端上运行`webpack`即可。\n\n## webpack配置详解\n\n`entry`：\n\nentry属性做为可配置的入口，比如上面所写的`./main.js`。entry有三种写法，每一个入口可以称之为一个chunk。\n\n- 如果为字符串，只会打包一个`顺序依赖`的模块，输出则根据output配置而定。\n- 如果为数组，只会打包一个`顺序依赖`的模块，合并到最后一个模块时导出，输出则根据output配置而定。\n- 如果为对象，则会根据入口打包多个`顺序依赖`的模块，key名会根据在output的配置输出。\n\n`output`：\n\n输出规则，在此对象中设置。\n\n- path 设置输出的文件路径\n- filename 设置输出文件名，filename可以有多种配置，比如`main.js`，`[id].js`，`[name].js`，`[hash].js`等\n- publicPath 设置资源的访问路径\n- library 设置模块导出的类名\n- libraryTarget:'umd' 设置模块兼容模式\n- umdNamedDefine:true  同上\n\n`devtool`：\n\n将devtool设置为`source-map`，在开发调试阶段非常有用，它的模式非常多，我有搞的比较晕。\n\n\n`loader`：\n\nloader机制应该是webpack中非常重要的部分了，它是一系列资源的最终执行者。一般情况下，你可以访问：[webpack loader](http://webpack.github.io/docs/list-of-loaders.html)来访问可用loader列表。\n\n比如现在我想将.html类型的文件，当做一个模块来载入。\n\n    npm install raw-loader\n\n\n```JavaScript\n    module:{\n        loaders:[\n            {\n                test:/\\.html$/,\n                loader:'raw',\n                exclude:/(node_modules)/\n            }\n        ]\n    }\n```\n\n每一个loader都可以用一个对象来描述，test是你的匹配规则，loader是你要载入的loader，exclude是你在执行规则是想忽略的目录。\n\n`plugins`：\n\nwebpack的插件机制也非常的重要，其内置了多种插件，比如混淆，压缩等等。插件列表可以访问：[list of plugins](http://webpack.github.io/docs/list-of-plugins.html)。\n\n正常情况下可以使用官方自带的插件：\n\n```JavaScript\n    new webpack.optimize.UglifyJsPlugin({\n        compress: {\n            warnings: false\n        }\n    })\n```\n\n当然，我们也可以引入第三方插件，使用你的npm install吧。\n\n`resolve`：\n\n此配置可以对一些常用模块设置别名，比如`a.js`放置在`./src/module/address/`中，每次载入模块需要var a = require('./src/module/address/a');名字非长，如果设置别名了，只需要var a = require('a')；\n\n```JavaScript\n    resolve:{\n        alias:{\n            \"RequestModel\":path.resolve(__dirname,'src/lib/request.model')\n        }\n    },\n```\n\n还可以设置访问路径，以及模块载入后缀。\n\n```JavaScript\n    resolve:{\n        root:path.resolve(filePath,'/src'),\n        extensions:['','.js']\n    }\n```\n\n`externals`：\n\n此项配置可以将某些库设置为外部引用，内部不会打包合并进去。\n\n```JavaScript\n    externals:{\n        jquery:'window.jQuery'\n    }\n```\n\n## 在我们PC项目中的应用\n\n我们公司内部的项目，也开始应用npm scripts来做执行钩子，webpack来做构建，首先设计三个命令：\n\n- npm run start\n- npm run dev\n- npm run build\n\n**配置npm run start**\n\n本地服务器的启动，我们没有使用webpack官方提供的webpack-dev-server，而是采用了 browser-sync。\n\n```JavaScript\nvar browser = require('browser-sync');\nvar browserSync = browser.create();\nvar PORT = 4000\nvar loadMap = [\n    'modules/*.*',\n    'src/**/*.*',\n    './*.html',\n       './web/*.html'\n];\ngulp.task('server',[], function() {\n    // content\n        browserSync.init({\n            server:'./',\n            port:PORT\n        });\n        gulp.watch(loadMap, function(file){\n            console.log(file.path)\n            browserSync.reload()\n        });\n});\n```\n\n利用gulp写了一个脚本任务，在package.json文件中设置：\n\n```JavaScript\n    scripts:{\n        \"start\":\"gulp server\"\n    }\n```\n\n**了解我们项目的实际需求**\n\n我们的项目是一个多页面项目，并不像单页应用一样（业务编程可以打包成一个），首先我们需要设计一个良好的目录结构，如下：\n\n- web 目录放置*.html页面\n- style 目录放置*.css文件，另外在此目录中放置了less源文件\n- src 目录放置了我们的所有*.js文件\n- mock  内置的模拟数据，放置在此\n- img 图片放置目录\n- link npm下载不了的第三方库放置在此\n- YYT_PC_Modules 内部编写的模块，放置在此\n- YYT_PC_Component 内部编写的组件，放置在此\n\n编写一个map.json文件，用来维护多入口的关系。当然我们的webpack.dev.config.js文件，放置在根目录。最后的build阶段应该输出一个新的目录`dist`这个目录中放置的应该是所有build完成的资源，包括*.html文件。\n\n它应该才是我们最终的发布目录。\n\n**配置npm run dev**\n\n对于CSS我们的期望是一个新的link而不是style内嵌，所以还需要做一些额外的事情，先下载loader和插件。\n\n列表：\n\n    \"less-loader\": \"^2.2.2\",\n    \"raw-loader\": \"^0.5.1\",\n    \"style-loader\": \"^0.13.0\",\n    \"css-loader\": \"^0.23.1\",\n    \"eslint\": \"^2.2.0\",\n    \"eslint-loader\": \"^1.3.0\",\n    \"extract-text-webpack-plugin\": \"^1.0.1\",\n\n`raw-loader`主要用来解决模板载入的问题，模块当做一个变量直接载入到业务编程中。\n\n配置我们的CSS：\n\n```JavaScript\n   // webpack.dev.config.js\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar extractLESS = new ExtractTextPlugin('../style/[name].css');\n    {\n        test: /\\.less$/i,\n        loader: extractLESS.extract(['css','less'])\n    }\n\n    //入口js文件\n\n    require('../style/less/index.less')\n```\n\n`ExtractTextPlugin`的作用就是将CSS单独输出一个文件，这个文件名依赖于entry写的入口文件名。\n\n配置我们的多页面JS：\n\n```JavaScript\n    //利用了entry的对象写法\n    {\n        \"index.main\":\"./src/index.mian.js\"\n    }\n\n    //然后在输出是用[name]代替之前的'index.main.js'\n```\n\n提取JS文件中的公共部分：\n\nwebpack自带的一个插件，可以提取合并打包时的公共部分，只要在页面载入时，放置在合并打包后文件的前面。\n\n```JavaScript\nnew optimize.CommonsChunkPlugin('common.js')\n```\n\n**完整的dev构建脚本**\n\n```JavaScript\nvar webpack = require('webpack');\nvar path = require('path');\nvar fs = require('fs');\nvar plugins = [];\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar optimize = webpack.optimize\nvar extractLESS = new ExtractTextPlugin('../style/css/[name].css');\nplugins.push(extractLESS);\nplugins.push(new optimize.CommonsChunkPlugin('common.js'));\nvar sourceMap = require('./map.json').source;\nvar YYT_PC_Modules = 'link/YYT_PC_Modules/';\nvar YYT_PC_Component = 'link/YYT_PC_Component/';\nvar config = {\n    entry: sourceMap,\n    output: {\n        path: path.resolve(__dirname + '/js'),\n        filename: '[name].js'\n    },\n    devtool: 'source-map',\n    module: {\n        loaders: [\n            {\n                test: /\\.html$/,\n                loader: 'raw',\n                exclude: /(node_modules)/\n            },\n            {\n                test: /\\.js$/,\n                loader: 'eslint-loader',\n                exclude: /(node_modules)/\n            },\n            {\n                test: /\\.less$/i,\n                loader: extractLESS.extract(['css', 'less'])\n            },\n            {\n                test: /\\.(png|jpg)$/,\n                loader: 'url-loader?limit=8192'\n            }\n        ]\n    },\n    plugins: plugins,\n    resolve: {\n        alias: {\n            \"tplEng\": path.resolve(__dirname, 'link/template'),  //模板引擎\n            \"BaseModel\": path.resolve(__dirname, YYT_PC_Modules + 'baseModel'),\n            \"BaseView\": path.resolve(__dirname, YYT_PC_Modules + 'baseView'),\n            \"store\": path.resolve(__dirname, YYT_PC_Modules + 'store/locationStore'),\n            \"cookie\": path.resolve(__dirname, YYT_PC_Modules + 'store/cookie'),\n            \"url\": path.resolve(__dirname, YYT_PC_Modules + 'util/url'),\n            \"tools\": path.resolve(__dirname, YYT_PC_Modules + 'util/tools'),\n            \"FlashAPI\": path.resolve(__dirname,YYT_PC_Modules + 'util/FlashAPI'),\n            \"DateTime\": path.resolve(__dirname, YYT_PC_Modules + 'util/DateTime'),\n            \"pwdencrypt\": path.resolve(__dirname, YYT_PC_Modules + 'crypto/pwdencrypt'),\n            \"secret\": path.resolve(__dirname, YYT_PC_Modules + 'crypto/secret'),\n            \"UploadFile\": path.resolve(__dirname, YYT_PC_Component + 'feature/UploadFile'),\n            \"AjaxForm\": path.resolve(__dirname, YYT_PC_Component + 'feature/AjaxForm'),\n            \"Scrollbar\": path.resolve(__dirname, YYT_PC_Component + 'feature/Scrollbar'),\n            \"LoginBox\": path.resolve(__dirname, YYT_PC_Component + 'business/LoginBox/'),\n            \"UserModel\": path.resolve(__dirname, YYT_PC_Component + 'business/UserModel/'),\n            \"UploadFileDialog\": path.resolve(__dirname, YYT_PC_Component + 'business/UploadFileDialog/'),\n            \"ui.Dialog\": path.resolve(__dirname, YYT_PC_Component + 'ui/dialog/'),\n            \"ui.Confirm\": path.resolve(__dirname, YYT_PC_Component + 'ui/confirm/'),\n            \"ui.MsgBox\": path.resolve(__dirname, YYT_PC_Component + 'ui/msgBox/'),\n            \"config\": path.resolve(__dirname, 'src/lib/config')\n        }\n    },\n    externals: {\n        jquery: 'window.jQuery',\n        backbone: 'window.Backbone',\n        underscore: 'window._'\n    }\n};\n// console.log(path.resolve(__dirname,'node_modules/jquery/dist/jquery.js'))\nmodule.exports = config;\n\n```\n\n\n**问题**\n\n问题一：在windows机器上如果你要设置环境变量（也许是我没有找到问题的所在，但是提出来，主要是Mac用习惯了。）\n\n```JavaScript\n    scripts:{\n        \"dev\":\"WEB_PACK=1 webpack --watch --config webpack.dev.config.js \"\n    }\n```\n\n在webpack.dev.config.js文件中不能正确的获取环境变量，所以重新写了一个build文件，webpack.build.config.js来做最后的构建。\n\n问题二：构建之后的文件hash化后如何更新HTML中的路径\n\n这个问题，最后没有采用webpack来做，而是使用gulp来解决的。（不知道大家有没有什么好的方式）\n\n感谢@sharkrice告知  HtmlWebpackPlugin  插件\n\n问题三：构建系统的shim\n\n我们的PC项目（兼容IE8+），依然使用着以前的库，jQuery.js，underscore.js，backbone.js，以及其他第三方不支持commonjs语法的插件，有很多兼容不是很好，最后还是写了另外一个入口文件（包装），然后在webpack合并打包的文件之前引入这些插件，挂载在一个全局的命名空间下，利用新写的一个包装入口导出模块。\n\n问题四：CSS依赖重复\n\n感谢@sharkrice 告知 尝试webpack.optimize.DedupePlugin，问题解决。\n","slug":"used-webpack-in-pc","published":1,"updated":"2016-06-14T05:31:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipf0hk2b001zuejrt58o1rip","content":"<p>好东西，总是要使用的。</p>\n<h2 id=\"webpack是什么工具\"><a href=\"#webpack是什么工具\" class=\"headerlink\" title=\"webpack是什么工具\"></a>webpack是什么工具</h2><p><em>webpack is a module bundler</em></p>\n<p>正如官网对webpack的描述，它是一种模块化加载器，当然也不仅仅限于此。某种程度上来说，可以代替某些<code>gulp</code>的功能，至少有些还是无法替代的。在webpack中所有的资源都会被视作模块来处理，为了应对这样的情况，webpack有对应的<code>loader</code>机制来处理，另外shim，plugins，和其他构建工具，一样一样的，更多的细节，需要你在实际的应用中慢慢去体会了。</p>\n<h2 id=\"webpack的使用方法\"><a href=\"#webpack的使用方法\" class=\"headerlink\" title=\"webpack的使用方法\"></a>webpack的使用方法</h2><p>安装：npm install webpack –verbose –save-dev</p>\n<p>webpack认为一个项目（或者一个页面），总有一个入口文件，就像C语言中总有一个main函数一样。假设，我们创建两个文件<code>./mian.js</code>和<code>./query.js</code>，并且将<code>main.js</code>做为我们项目的入口文件。</p>\n<p><code>query.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> version = <span class=\"number\">1.0</span><span class=\"number\">.0</span>;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(version)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>main.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> query = <span class=\"built_in\">require</span>(<span class=\"string\">'./query'</span>);</span><br><span class=\"line\">query();</span><br></pre></td></tr></table></figure>\n<p>创建一个webpack.config.js文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> config = &#123;</span><br><span class=\"line\">    entry:<span class=\"string\">'./main.js'</span>,</span><br><span class=\"line\">    ouptut:&#123;</span><br><span class=\"line\">        path:<span class=\"string\">'./js'</span></span><br><span class=\"line\">        filename:<span class=\"string\">'main.js'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = config;</span><br></pre></td></tr></table></figure>\n<p>在你的终端上运行<code>webpack</code>即可。</p>\n<h2 id=\"webpack配置详解\"><a href=\"#webpack配置详解\" class=\"headerlink\" title=\"webpack配置详解\"></a>webpack配置详解</h2><p><code>entry</code>：</p>\n<p>entry属性做为可配置的入口，比如上面所写的<code>./main.js</code>。entry有三种写法，每一个入口可以称之为一个chunk。</p>\n<ul>\n<li>如果为字符串，只会打包一个<code>顺序依赖</code>的模块，输出则根据output配置而定。</li>\n<li>如果为数组，只会打包一个<code>顺序依赖</code>的模块，合并到最后一个模块时导出，输出则根据output配置而定。</li>\n<li>如果为对象，则会根据入口打包多个<code>顺序依赖</code>的模块，key名会根据在output的配置输出。</li>\n</ul>\n<p><code>output</code>：</p>\n<p>输出规则，在此对象中设置。</p>\n<ul>\n<li>path 设置输出的文件路径</li>\n<li>filename 设置输出文件名，filename可以有多种配置，比如<code>main.js</code>，<code>[id].js</code>，<code>[name].js</code>，<code>[hash].js</code>等</li>\n<li>publicPath 设置资源的访问路径</li>\n<li>library 设置模块导出的类名</li>\n<li>libraryTarget:’umd’ 设置模块兼容模式</li>\n<li>umdNamedDefine:true  同上</li>\n</ul>\n<p><code>devtool</code>：</p>\n<p>将devtool设置为<code>source-map</code>，在开发调试阶段非常有用，它的模式非常多，我有搞的比较晕。</p>\n<p><code>loader</code>：</p>\n<p>loader机制应该是webpack中非常重要的部分了，它是一系列资源的最终执行者。一般情况下，你可以访问：<a href=\"http://webpack.github.io/docs/list-of-loaders.html\" target=\"_blank\" rel=\"external\">webpack loader</a>来访问可用loader列表。</p>\n<p>比如现在我想将.html类型的文件，当做一个模块来载入。</p>\n<pre><code>npm install raw-loader\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">    loaders:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            test:<span class=\"regexp\">/\\.html$/</span>,</span><br><span class=\"line\">            loader:<span class=\"string\">'raw'</span>,</span><br><span class=\"line\">            exclude:<span class=\"regexp\">/(node_modules)/</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每一个loader都可以用一个对象来描述，test是你的匹配规则，loader是你要载入的loader，exclude是你在执行规则是想忽略的目录。</p>\n<p><code>plugins</code>：</p>\n<p>webpack的插件机制也非常的重要，其内置了多种插件，比如混淆，压缩等等。插件列表可以访问：<a href=\"http://webpack.github.io/docs/list-of-plugins.html\" target=\"_blank\" rel=\"external\">list of plugins</a>。</p>\n<p>正常情况下可以使用官方自带的插件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">    compress: &#123;</span><br><span class=\"line\">        warnings: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>当然，我们也可以引入第三方插件，使用你的npm install吧。</p>\n<p><code>resolve</code>：</p>\n<p>此配置可以对一些常用模块设置别名，比如<code>a.js</code>放置在<code>./src/module/address/</code>中，每次载入模块需要var a = require(‘./src/module/address/a’);名字非长，如果设置别名了，只需要var a = require(‘a’)；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve:&#123;</span><br><span class=\"line\">    alias:&#123;</span><br><span class=\"line\">        <span class=\"string\">\"RequestModel\"</span>:path.resolve(__dirname,<span class=\"string\">'src/lib/request.model'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>还可以设置访问路径，以及模块载入后缀。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve:&#123;</span><br><span class=\"line\">    root:path.resolve(filePath,<span class=\"string\">'/src'</span>),</span><br><span class=\"line\">    extensions:[<span class=\"string\">''</span>,<span class=\"string\">'.js'</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>externals</code>：</p>\n<p>此项配置可以将某些库设置为外部引用，内部不会打包合并进去。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">externals:&#123;</span><br><span class=\"line\">    jquery:<span class=\"string\">'window.jQuery'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"在我们PC项目中的应用\"><a href=\"#在我们PC项目中的应用\" class=\"headerlink\" title=\"在我们PC项目中的应用\"></a>在我们PC项目中的应用</h2><p>我们公司内部的项目，也开始应用npm scripts来做执行钩子，webpack来做构建，首先设计三个命令：</p>\n<ul>\n<li>npm run start</li>\n<li>npm run dev</li>\n<li>npm run build</li>\n</ul>\n<p><strong>配置npm run start</strong></p>\n<p>本地服务器的启动，我们没有使用webpack官方提供的webpack-dev-server，而是采用了 browser-sync。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> browser = <span class=\"built_in\">require</span>(<span class=\"string\">'browser-sync'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> browserSync = browser.create();</span><br><span class=\"line\"><span class=\"keyword\">var</span> PORT = <span class=\"number\">4000</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> loadMap = [</span><br><span class=\"line\">    <span class=\"string\">'modules/*.*'</span>,</span><br><span class=\"line\">    <span class=\"string\">'src/**/*.*'</span>,</span><br><span class=\"line\">    <span class=\"string\">'./*.html'</span>,</span><br><span class=\"line\">       <span class=\"string\">'./web/*.html'</span></span><br><span class=\"line\">];</span><br><span class=\"line\">gulp.task(<span class=\"string\">'server'</span>,[], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// content</span></span><br><span class=\"line\">        browserSync.init(&#123;</span><br><span class=\"line\">            server:<span class=\"string\">'./'</span>,</span><br><span class=\"line\">            port:PORT</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        gulp.watch(loadMap, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">file</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(file.path)</span><br><span class=\"line\">            browserSync.reload()</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>利用gulp写了一个脚本任务，在package.json文件中设置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scripts:&#123;</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>:<span class=\"string\">\"gulp server\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>了解我们项目的实际需求</strong></p>\n<p>我们的项目是一个多页面项目，并不像单页应用一样（业务编程可以打包成一个），首先我们需要设计一个良好的目录结构，如下：</p>\n<ul>\n<li>web 目录放置*.html页面</li>\n<li>style 目录放置*.css文件，另外在此目录中放置了less源文件</li>\n<li>src 目录放置了我们的所有*.js文件</li>\n<li>mock  内置的模拟数据，放置在此</li>\n<li>img 图片放置目录</li>\n<li>link npm下载不了的第三方库放置在此</li>\n<li>YYT_PC_Modules 内部编写的模块，放置在此</li>\n<li>YYT_PC_Component 内部编写的组件，放置在此</li>\n</ul>\n<p>编写一个map.json文件，用来维护多入口的关系。当然我们的webpack.dev.config.js文件，放置在根目录。最后的build阶段应该输出一个新的目录<code>dist</code>这个目录中放置的应该是所有build完成的资源，包括*.html文件。</p>\n<p>它应该才是我们最终的发布目录。</p>\n<p><strong>配置npm run dev</strong></p>\n<p>对于CSS我们的期望是一个新的link而不是style内嵌，所以还需要做一些额外的事情，先下载loader和插件。</p>\n<p>列表：</p>\n<pre><code>&quot;less-loader&quot;: &quot;^2.2.2&quot;,\n&quot;raw-loader&quot;: &quot;^0.5.1&quot;,\n&quot;style-loader&quot;: &quot;^0.13.0&quot;,\n&quot;css-loader&quot;: &quot;^0.23.1&quot;,\n&quot;eslint&quot;: &quot;^2.2.0&quot;,\n&quot;eslint-loader&quot;: &quot;^1.3.0&quot;,\n&quot;extract-text-webpack-plugin&quot;: &quot;^1.0.1&quot;,\n</code></pre><p><code>raw-loader</code>主要用来解决模板载入的问题，模块当做一个变量直接载入到业务编程中。</p>\n<p>配置我们的CSS：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">// webpack.dev.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> extractLESS = <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">'../style/[name].css'</span>);</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.less$/i</span>,</span><br><span class=\"line\">        loader: extractLESS.extract([<span class=\"string\">'css'</span>,<span class=\"string\">'less'</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//入口js文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'../style/less/index.less'</span>)</span><br></pre></td></tr></table></figure>\n<p><code>ExtractTextPlugin</code>的作用就是将CSS单独输出一个文件，这个文件名依赖于entry写的入口文件名。</p>\n<p>配置我们的多页面JS：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//利用了entry的对象写法</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"index.main\"</span>:<span class=\"string\">\"./src/index.mian.js\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//然后在输出是用[name]代替之前的'index.main.js'</span></span><br></pre></td></tr></table></figure>\n<p>提取JS文件中的公共部分：</p>\n<p>webpack自带的一个插件，可以提取合并打包时的公共部分，只要在页面载入时，放置在合并打包后文件的前面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> optimize.CommonsChunkPlugin(<span class=\"string\">'common.js'</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>完整的dev构建脚本</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> plugins = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> optimize = webpack.optimize</span><br><span class=\"line\"><span class=\"keyword\">var</span> extractLESS = <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">'../style/css/[name].css'</span>);</span><br><span class=\"line\">plugins.push(extractLESS);</span><br><span class=\"line\">plugins.push(<span class=\"keyword\">new</span> optimize.CommonsChunkPlugin(<span class=\"string\">'common.js'</span>));</span><br><span class=\"line\"><span class=\"keyword\">var</span> sourceMap = <span class=\"built_in\">require</span>(<span class=\"string\">'./map.json'</span>).source;</span><br><span class=\"line\"><span class=\"keyword\">var</span> YYT_PC_Modules = <span class=\"string\">'link/YYT_PC_Modules/'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> YYT_PC_Component = <span class=\"string\">'link/YYT_PC_Component/'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> config = &#123;</span><br><span class=\"line\">    entry: sourceMap,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname + <span class=\"string\">'/js'</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">'[name].js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: <span class=\"string\">'source-map'</span>,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.html$/</span>,</span><br><span class=\"line\">                loader: <span class=\"string\">'raw'</span>,</span><br><span class=\"line\">                exclude: <span class=\"regexp\">/(node_modules)/</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                loader: <span class=\"string\">'eslint-loader'</span>,</span><br><span class=\"line\">                exclude: <span class=\"regexp\">/(node_modules)/</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.less$/i</span>,</span><br><span class=\"line\">                loader: extractLESS.extract([<span class=\"string\">'css'</span>, <span class=\"string\">'less'</span>])</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.(png|jpg)$/</span>,</span><br><span class=\"line\">                loader: <span class=\"string\">'url-loader?limit=8192'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: plugins,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        alias: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"tplEng\"</span>: path.resolve(__dirname, <span class=\"string\">'link/template'</span>),  <span class=\"comment\">//模板引擎</span></span><br><span class=\"line\">            <span class=\"string\">\"BaseModel\"</span>: path.resolve(__dirname, YYT_PC_Modules + <span class=\"string\">'baseModel'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"BaseView\"</span>: path.resolve(__dirname, YYT_PC_Modules + <span class=\"string\">'baseView'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"store\"</span>: path.resolve(__dirname, YYT_PC_Modules + <span class=\"string\">'store/locationStore'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"cookie\"</span>: path.resolve(__dirname, YYT_PC_Modules + <span class=\"string\">'store/cookie'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"url\"</span>: path.resolve(__dirname, YYT_PC_Modules + <span class=\"string\">'util/url'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"tools\"</span>: path.resolve(__dirname, YYT_PC_Modules + <span class=\"string\">'util/tools'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"FlashAPI\"</span>: path.resolve(__dirname,YYT_PC_Modules + <span class=\"string\">'util/FlashAPI'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"DateTime\"</span>: path.resolve(__dirname, YYT_PC_Modules + <span class=\"string\">'util/DateTime'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"pwdencrypt\"</span>: path.resolve(__dirname, YYT_PC_Modules + <span class=\"string\">'crypto/pwdencrypt'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"secret\"</span>: path.resolve(__dirname, YYT_PC_Modules + <span class=\"string\">'crypto/secret'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"UploadFile\"</span>: path.resolve(__dirname, YYT_PC_Component + <span class=\"string\">'feature/UploadFile'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"AjaxForm\"</span>: path.resolve(__dirname, YYT_PC_Component + <span class=\"string\">'feature/AjaxForm'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"Scrollbar\"</span>: path.resolve(__dirname, YYT_PC_Component + <span class=\"string\">'feature/Scrollbar'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"LoginBox\"</span>: path.resolve(__dirname, YYT_PC_Component + <span class=\"string\">'business/LoginBox/'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"UserModel\"</span>: path.resolve(__dirname, YYT_PC_Component + <span class=\"string\">'business/UserModel/'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"UploadFileDialog\"</span>: path.resolve(__dirname, YYT_PC_Component + <span class=\"string\">'business/UploadFileDialog/'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"ui.Dialog\"</span>: path.resolve(__dirname, YYT_PC_Component + <span class=\"string\">'ui/dialog/'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"ui.Confirm\"</span>: path.resolve(__dirname, YYT_PC_Component + <span class=\"string\">'ui/confirm/'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"ui.MsgBox\"</span>: path.resolve(__dirname, YYT_PC_Component + <span class=\"string\">'ui/msgBox/'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"config\"</span>: path.resolve(__dirname, <span class=\"string\">'src/lib/config'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    externals: &#123;</span><br><span class=\"line\">        jquery: <span class=\"string\">'window.jQuery'</span>,</span><br><span class=\"line\">        backbone: <span class=\"string\">'window.Backbone'</span>,</span><br><span class=\"line\">        underscore: <span class=\"string\">'window._'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// console.log(path.resolve(__dirname,'node_modules/jquery/dist/jquery.js'))</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = config;</span><br></pre></td></tr></table></figure>\n<p><strong>问题</strong></p>\n<p>问题一：在windows机器上如果你要设置环境变量（也许是我没有找到问题的所在，但是提出来，主要是Mac用习惯了。）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scripts:&#123;</span><br><span class=\"line\">    <span class=\"string\">\"dev\"</span>:<span class=\"string\">\"WEB_PACK=1 webpack --watch --config webpack.dev.config.js \"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在webpack.dev.config.js文件中不能正确的获取环境变量，所以重新写了一个build文件，webpack.build.config.js来做最后的构建。</p>\n<p>问题二：构建之后的文件hash化后如何更新HTML中的路径</p>\n<p>这个问题，最后没有采用webpack来做，而是使用gulp来解决的。（不知道大家有没有什么好的方式）</p>\n<p>感谢@sharkrice告知  HtmlWebpackPlugin  插件</p>\n<p>问题三：构建系统的shim</p>\n<p>我们的PC项目（兼容IE8+），依然使用着以前的库，jQuery.js，underscore.js，backbone.js，以及其他第三方不支持commonjs语法的插件，有很多兼容不是很好，最后还是写了另外一个入口文件（包装），然后在webpack合并打包的文件之前引入这些插件，挂载在一个全局的命名空间下，利用新写的一个包装入口导出模块。</p>\n<p>问题四：CSS依赖重复</p>\n<p>感谢@sharkrice 告知 尝试webpack.optimize.DedupePlugin，问题解决。</p>\n","excerpt":"","more":"<p>好东西，总是要使用的。</p>\n<h2 id=\"webpack是什么工具\"><a href=\"#webpack是什么工具\" class=\"headerlink\" title=\"webpack是什么工具\"></a>webpack是什么工具</h2><p><em>webpack is a module bundler</em></p>\n<p>正如官网对webpack的描述，它是一种模块化加载器，当然也不仅仅限于此。某种程度上来说，可以代替某些<code>gulp</code>的功能，至少有些还是无法替代的。在webpack中所有的资源都会被视作模块来处理，为了应对这样的情况，webpack有对应的<code>loader</code>机制来处理，另外shim，plugins，和其他构建工具，一样一样的，更多的细节，需要你在实际的应用中慢慢去体会了。</p>\n<h2 id=\"webpack的使用方法\"><a href=\"#webpack的使用方法\" class=\"headerlink\" title=\"webpack的使用方法\"></a>webpack的使用方法</h2><p>安装：npm install webpack –verbose –save-dev</p>\n<p>webpack认为一个项目（或者一个页面），总有一个入口文件，就像C语言中总有一个main函数一样。假设，我们创建两个文件<code>./mian.js</code>和<code>./query.js</code>，并且将<code>main.js</code>做为我们项目的入口文件。</p>\n<p><code>query.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> version = <span class=\"number\">1.0</span><span class=\"number\">.0</span>;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(version)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>main.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> query = <span class=\"built_in\">require</span>(<span class=\"string\">'./query'</span>);</span><br><span class=\"line\">query();</span><br></pre></td></tr></table></figure>\n<p>创建一个webpack.config.js文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> config = &#123;</span><br><span class=\"line\">    entry:<span class=\"string\">'./main.js'</span>,</span><br><span class=\"line\">    ouptut:&#123;</span><br><span class=\"line\">        path:<span class=\"string\">'./js'</span></span><br><span class=\"line\">        filename:<span class=\"string\">'main.js'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = config;</span><br></pre></td></tr></table></figure>\n<p>在你的终端上运行<code>webpack</code>即可。</p>\n<h2 id=\"webpack配置详解\"><a href=\"#webpack配置详解\" class=\"headerlink\" title=\"webpack配置详解\"></a>webpack配置详解</h2><p><code>entry</code>：</p>\n<p>entry属性做为可配置的入口，比如上面所写的<code>./main.js</code>。entry有三种写法，每一个入口可以称之为一个chunk。</p>\n<ul>\n<li>如果为字符串，只会打包一个<code>顺序依赖</code>的模块，输出则根据output配置而定。</li>\n<li>如果为数组，只会打包一个<code>顺序依赖</code>的模块，合并到最后一个模块时导出，输出则根据output配置而定。</li>\n<li>如果为对象，则会根据入口打包多个<code>顺序依赖</code>的模块，key名会根据在output的配置输出。</li>\n</ul>\n<p><code>output</code>：</p>\n<p>输出规则，在此对象中设置。</p>\n<ul>\n<li>path 设置输出的文件路径</li>\n<li>filename 设置输出文件名，filename可以有多种配置，比如<code>main.js</code>，<code>[id].js</code>，<code>[name].js</code>，<code>[hash].js</code>等</li>\n<li>publicPath 设置资源的访问路径</li>\n<li>library 设置模块导出的类名</li>\n<li>libraryTarget:’umd’ 设置模块兼容模式</li>\n<li>umdNamedDefine:true  同上</li>\n</ul>\n<p><code>devtool</code>：</p>\n<p>将devtool设置为<code>source-map</code>，在开发调试阶段非常有用，它的模式非常多，我有搞的比较晕。</p>\n<p><code>loader</code>：</p>\n<p>loader机制应该是webpack中非常重要的部分了，它是一系列资源的最终执行者。一般情况下，你可以访问：<a href=\"http://webpack.github.io/docs/list-of-loaders.html\">webpack loader</a>来访问可用loader列表。</p>\n<p>比如现在我想将.html类型的文件，当做一个模块来载入。</p>\n<pre><code>npm install raw-loader\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">    loaders:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            test:<span class=\"regexp\">/\\.html$/</span>,</span><br><span class=\"line\">            loader:<span class=\"string\">'raw'</span>,</span><br><span class=\"line\">            exclude:<span class=\"regexp\">/(node_modules)/</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每一个loader都可以用一个对象来描述，test是你的匹配规则，loader是你要载入的loader，exclude是你在执行规则是想忽略的目录。</p>\n<p><code>plugins</code>：</p>\n<p>webpack的插件机制也非常的重要，其内置了多种插件，比如混淆，压缩等等。插件列表可以访问：<a href=\"http://webpack.github.io/docs/list-of-plugins.html\">list of plugins</a>。</p>\n<p>正常情况下可以使用官方自带的插件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">    compress: &#123;</span><br><span class=\"line\">        warnings: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>当然，我们也可以引入第三方插件，使用你的npm install吧。</p>\n<p><code>resolve</code>：</p>\n<p>此配置可以对一些常用模块设置别名，比如<code>a.js</code>放置在<code>./src/module/address/</code>中，每次载入模块需要var a = require(‘./src/module/address/a’);名字非长，如果设置别名了，只需要var a = require(‘a’)；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve:&#123;</span><br><span class=\"line\">    alias:&#123;</span><br><span class=\"line\">        <span class=\"string\">\"RequestModel\"</span>:path.resolve(__dirname,<span class=\"string\">'src/lib/request.model'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>还可以设置访问路径，以及模块载入后缀。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve:&#123;</span><br><span class=\"line\">    root:path.resolve(filePath,<span class=\"string\">'/src'</span>),</span><br><span class=\"line\">    extensions:[<span class=\"string\">''</span>,<span class=\"string\">'.js'</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>externals</code>：</p>\n<p>此项配置可以将某些库设置为外部引用，内部不会打包合并进去。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">externals:&#123;</span><br><span class=\"line\">    jquery:<span class=\"string\">'window.jQuery'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"在我们PC项目中的应用\"><a href=\"#在我们PC项目中的应用\" class=\"headerlink\" title=\"在我们PC项目中的应用\"></a>在我们PC项目中的应用</h2><p>我们公司内部的项目，也开始应用npm scripts来做执行钩子，webpack来做构建，首先设计三个命令：</p>\n<ul>\n<li>npm run start</li>\n<li>npm run dev</li>\n<li>npm run build</li>\n</ul>\n<p><strong>配置npm run start</strong></p>\n<p>本地服务器的启动，我们没有使用webpack官方提供的webpack-dev-server，而是采用了 browser-sync。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> browser = <span class=\"built_in\">require</span>(<span class=\"string\">'browser-sync'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> browserSync = browser.create();</span><br><span class=\"line\"><span class=\"keyword\">var</span> PORT = <span class=\"number\">4000</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> loadMap = [</span><br><span class=\"line\">    <span class=\"string\">'modules/*.*'</span>,</span><br><span class=\"line\">    <span class=\"string\">'src/**/*.*'</span>,</span><br><span class=\"line\">    <span class=\"string\">'./*.html'</span>,</span><br><span class=\"line\">       <span class=\"string\">'./web/*.html'</span></span><br><span class=\"line\">];</span><br><span class=\"line\">gulp.task(<span class=\"string\">'server'</span>,[], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// content</span></span><br><span class=\"line\">        browserSync.init(&#123;</span><br><span class=\"line\">            server:<span class=\"string\">'./'</span>,</span><br><span class=\"line\">            port:PORT</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        gulp.watch(loadMap, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">file</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(file.path)</span><br><span class=\"line\">            browserSync.reload()</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>利用gulp写了一个脚本任务，在package.json文件中设置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scripts:&#123;</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>:<span class=\"string\">\"gulp server\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>了解我们项目的实际需求</strong></p>\n<p>我们的项目是一个多页面项目，并不像单页应用一样（业务编程可以打包成一个），首先我们需要设计一个良好的目录结构，如下：</p>\n<ul>\n<li>web 目录放置*.html页面</li>\n<li>style 目录放置*.css文件，另外在此目录中放置了less源文件</li>\n<li>src 目录放置了我们的所有*.js文件</li>\n<li>mock  内置的模拟数据，放置在此</li>\n<li>img 图片放置目录</li>\n<li>link npm下载不了的第三方库放置在此</li>\n<li>YYT_PC_Modules 内部编写的模块，放置在此</li>\n<li>YYT_PC_Component 内部编写的组件，放置在此</li>\n</ul>\n<p>编写一个map.json文件，用来维护多入口的关系。当然我们的webpack.dev.config.js文件，放置在根目录。最后的build阶段应该输出一个新的目录<code>dist</code>这个目录中放置的应该是所有build完成的资源，包括*.html文件。</p>\n<p>它应该才是我们最终的发布目录。</p>\n<p><strong>配置npm run dev</strong></p>\n<p>对于CSS我们的期望是一个新的link而不是style内嵌，所以还需要做一些额外的事情，先下载loader和插件。</p>\n<p>列表：</p>\n<pre><code>&quot;less-loader&quot;: &quot;^2.2.2&quot;,\n&quot;raw-loader&quot;: &quot;^0.5.1&quot;,\n&quot;style-loader&quot;: &quot;^0.13.0&quot;,\n&quot;css-loader&quot;: &quot;^0.23.1&quot;,\n&quot;eslint&quot;: &quot;^2.2.0&quot;,\n&quot;eslint-loader&quot;: &quot;^1.3.0&quot;,\n&quot;extract-text-webpack-plugin&quot;: &quot;^1.0.1&quot;,\n</code></pre><p><code>raw-loader</code>主要用来解决模板载入的问题，模块当做一个变量直接载入到业务编程中。</p>\n<p>配置我们的CSS：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">// webpack.dev.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> extractLESS = <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">'../style/[name].css'</span>);</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.less$/i</span>,</span><br><span class=\"line\">        loader: extractLESS.extract([<span class=\"string\">'css'</span>,<span class=\"string\">'less'</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//入口js文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'../style/less/index.less'</span>)</span><br></pre></td></tr></table></figure>\n<p><code>ExtractTextPlugin</code>的作用就是将CSS单独输出一个文件，这个文件名依赖于entry写的入口文件名。</p>\n<p>配置我们的多页面JS：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//利用了entry的对象写法</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"index.main\"</span>:<span class=\"string\">\"./src/index.mian.js\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//然后在输出是用[name]代替之前的'index.main.js'</span></span><br></pre></td></tr></table></figure>\n<p>提取JS文件中的公共部分：</p>\n<p>webpack自带的一个插件，可以提取合并打包时的公共部分，只要在页面载入时，放置在合并打包后文件的前面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> optimize.CommonsChunkPlugin(<span class=\"string\">'common.js'</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>完整的dev构建脚本</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> plugins = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> optimize = webpack.optimize</span><br><span class=\"line\"><span class=\"keyword\">var</span> extractLESS = <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">'../style/css/[name].css'</span>);</span><br><span class=\"line\">plugins.push(extractLESS);</span><br><span class=\"line\">plugins.push(<span class=\"keyword\">new</span> optimize.CommonsChunkPlugin(<span class=\"string\">'common.js'</span>));</span><br><span class=\"line\"><span class=\"keyword\">var</span> sourceMap = <span class=\"built_in\">require</span>(<span class=\"string\">'./map.json'</span>).source;</span><br><span class=\"line\"><span class=\"keyword\">var</span> YYT_PC_Modules = <span class=\"string\">'link/YYT_PC_Modules/'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> YYT_PC_Component = <span class=\"string\">'link/YYT_PC_Component/'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> config = &#123;</span><br><span class=\"line\">    entry: sourceMap,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname + <span class=\"string\">'/js'</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">'[name].js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: <span class=\"string\">'source-map'</span>,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.html$/</span>,</span><br><span class=\"line\">                loader: <span class=\"string\">'raw'</span>,</span><br><span class=\"line\">                exclude: <span class=\"regexp\">/(node_modules)/</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                loader: <span class=\"string\">'eslint-loader'</span>,</span><br><span class=\"line\">                exclude: <span class=\"regexp\">/(node_modules)/</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.less$/i</span>,</span><br><span class=\"line\">                loader: extractLESS.extract([<span class=\"string\">'css'</span>, <span class=\"string\">'less'</span>])</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.(png|jpg)$/</span>,</span><br><span class=\"line\">                loader: <span class=\"string\">'url-loader?limit=8192'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: plugins,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        alias: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"tplEng\"</span>: path.resolve(__dirname, <span class=\"string\">'link/template'</span>),  <span class=\"comment\">//模板引擎</span></span><br><span class=\"line\">            <span class=\"string\">\"BaseModel\"</span>: path.resolve(__dirname, YYT_PC_Modules + <span class=\"string\">'baseModel'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"BaseView\"</span>: path.resolve(__dirname, YYT_PC_Modules + <span class=\"string\">'baseView'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"store\"</span>: path.resolve(__dirname, YYT_PC_Modules + <span class=\"string\">'store/locationStore'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"cookie\"</span>: path.resolve(__dirname, YYT_PC_Modules + <span class=\"string\">'store/cookie'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"url\"</span>: path.resolve(__dirname, YYT_PC_Modules + <span class=\"string\">'util/url'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"tools\"</span>: path.resolve(__dirname, YYT_PC_Modules + <span class=\"string\">'util/tools'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"FlashAPI\"</span>: path.resolve(__dirname,YYT_PC_Modules + <span class=\"string\">'util/FlashAPI'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"DateTime\"</span>: path.resolve(__dirname, YYT_PC_Modules + <span class=\"string\">'util/DateTime'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"pwdencrypt\"</span>: path.resolve(__dirname, YYT_PC_Modules + <span class=\"string\">'crypto/pwdencrypt'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"secret\"</span>: path.resolve(__dirname, YYT_PC_Modules + <span class=\"string\">'crypto/secret'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"UploadFile\"</span>: path.resolve(__dirname, YYT_PC_Component + <span class=\"string\">'feature/UploadFile'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"AjaxForm\"</span>: path.resolve(__dirname, YYT_PC_Component + <span class=\"string\">'feature/AjaxForm'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"Scrollbar\"</span>: path.resolve(__dirname, YYT_PC_Component + <span class=\"string\">'feature/Scrollbar'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"LoginBox\"</span>: path.resolve(__dirname, YYT_PC_Component + <span class=\"string\">'business/LoginBox/'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"UserModel\"</span>: path.resolve(__dirname, YYT_PC_Component + <span class=\"string\">'business/UserModel/'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"UploadFileDialog\"</span>: path.resolve(__dirname, YYT_PC_Component + <span class=\"string\">'business/UploadFileDialog/'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"ui.Dialog\"</span>: path.resolve(__dirname, YYT_PC_Component + <span class=\"string\">'ui/dialog/'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"ui.Confirm\"</span>: path.resolve(__dirname, YYT_PC_Component + <span class=\"string\">'ui/confirm/'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"ui.MsgBox\"</span>: path.resolve(__dirname, YYT_PC_Component + <span class=\"string\">'ui/msgBox/'</span>),</span><br><span class=\"line\">            <span class=\"string\">\"config\"</span>: path.resolve(__dirname, <span class=\"string\">'src/lib/config'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    externals: &#123;</span><br><span class=\"line\">        jquery: <span class=\"string\">'window.jQuery'</span>,</span><br><span class=\"line\">        backbone: <span class=\"string\">'window.Backbone'</span>,</span><br><span class=\"line\">        underscore: <span class=\"string\">'window._'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// console.log(path.resolve(__dirname,'node_modules/jquery/dist/jquery.js'))</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = config;</span><br></pre></td></tr></table></figure>\n<p><strong>问题</strong></p>\n<p>问题一：在windows机器上如果你要设置环境变量（也许是我没有找到问题的所在，但是提出来，主要是Mac用习惯了。）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scripts:&#123;</span><br><span class=\"line\">    <span class=\"string\">\"dev\"</span>:<span class=\"string\">\"WEB_PACK=1 webpack --watch --config webpack.dev.config.js \"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在webpack.dev.config.js文件中不能正确的获取环境变量，所以重新写了一个build文件，webpack.build.config.js来做最后的构建。</p>\n<p>问题二：构建之后的文件hash化后如何更新HTML中的路径</p>\n<p>这个问题，最后没有采用webpack来做，而是使用gulp来解决的。（不知道大家有没有什么好的方式）</p>\n<p>感谢@sharkrice告知  HtmlWebpackPlugin  插件</p>\n<p>问题三：构建系统的shim</p>\n<p>我们的PC项目（兼容IE8+），依然使用着以前的库，jQuery.js，underscore.js，backbone.js，以及其他第三方不支持commonjs语法的插件，有很多兼容不是很好，最后还是写了另外一个入口文件（包装），然后在webpack合并打包的文件之前引入这些插件，挂载在一个全局的命名空间下，利用新写的一个包装入口导出模块。</p>\n<p>问题四：CSS依赖重复</p>\n<p>感谢@sharkrice 告知 尝试webpack.optimize.DedupePlugin，问题解决。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cipf0hk010007uejrl54cpkgm","tag_id":"cipf0hjzw0004uejr8irstyva","_id":"cipf0hk07000auejrgl8iivzb"},{"post_id":"cipf0hjzn0000uejr99lcz9uj","tag_id":"cipf0hjzw0004uejr8irstyva","_id":"cipf0hk0a000cuejramu6z1qe"},{"post_id":"cipf0hjzt0002uejrx40ke2y4","tag_id":"cipf0hjzw0004uejr8irstyva","_id":"cipf0hk0d000fuejrzzt3dlve"},{"post_id":"cipf0hjzy0005uejrai5x9s2v","tag_id":"cipf0hjzw0004uejr8irstyva","_id":"cipf0hk0j000juejrsf5za88n"},{"post_id":"cipf0hk030009uejrs3xk2xws","tag_id":"cipf0hk0h000huejrpta54xo9","_id":"cipf0hk0m000nuejrevpmoz27"},{"post_id":"cipf0hk0l000luejrghenktex","tag_id":"cipf0hk0h000huejrpta54xo9","_id":"cipf0hk0n000puejrqdwufe5u"},{"post_id":"cipf0hk08000buejrzm4h0gr8","tag_id":"cipf0hk0m000muejrx55va43f","_id":"cipf0hk0s000tuejrggid46c9"},{"post_id":"cipf0hk0n000quejri1njya4k","tag_id":"cipf0hk0h000huejrpta54xo9","_id":"cipf0hk0u000vuejrskslesmu"},{"post_id":"cipf0hk0b000euejr7h5ngwe6","tag_id":"cipf0hk0p000ruejrasuiv7xx","_id":"cipf0hk0w000yuejrhj9i6vwv"},{"post_id":"cipf0hk0v000xuejr807ks2iy","tag_id":"cipf0hjzw0004uejr8irstyva","_id":"cipf0hk0z0010uejrhg9h9sbd"},{"post_id":"cipf0hk0x000zuejrzk5geqv2","tag_id":"cipf0hjzw0004uejr8irstyva","_id":"cipf0hk110013uejruoslx880"},{"post_id":"cipf0hk0d000guejr67t5lag2","tag_id":"cipf0hk0v000wuejr6wmvvcu3","_id":"cipf0hk120015uejrtl3zv1xh"},{"post_id":"cipf0hk110014uejrzz5kf9fg","tag_id":"cipf0hk0z0011uejrbob4e0un","_id":"cipf0hk1c0018uejryyjlp8lc"},{"post_id":"cipf0hk0h000iuejru7i17qkz","tag_id":"cipf0hk0z0011uejrbob4e0un","_id":"cipf0hk1e001auejrvk1bibob"},{"post_id":"cipf0hk130016uejrt1mhzsao","tag_id":"cipf0hk0z0011uejrbob4e0un","_id":"cipf0hk1f001duejr5tl3oyla"},{"post_id":"cipf0hk1c0019uejrgxfwpswp","tag_id":"cipf0hk0z0011uejrbob4e0un","_id":"cipf0hk1k001fuejr53yzj3vn"},{"post_id":"cipf0hk0k000kuejr5giamp18","tag_id":"cipf0hk1c0017uejrxd1f5zws","_id":"cipf0hk1l001huejrxkxkrq61"},{"post_id":"cipf0hk1e001buejrk57s6xu4","tag_id":"cipf0hk0z0011uejrbob4e0un","_id":"cipf0hk1o001kuejryetbkdx9"},{"post_id":"cipf0hk1g001euejr1ef1glxe","tag_id":"cipf0hk0z0011uejrbob4e0un","_id":"cipf0hk1r001muejrrzacdy5u"},{"post_id":"cipf0hk0m000ouejrplcdudhs","tag_id":"cipf0hk1f001cuejrozdo1vi7","_id":"cipf0hk1u001puejrujn06n4d"},{"post_id":"cipf0hk1k001guejro801duen","tag_id":"cipf0hk0z0011uejrbob4e0un","_id":"cipf0hk1w001ruejrnhyf0gs2"},{"post_id":"cipf0hk1n001juejrecvbqe1g","tag_id":"cipf0hk0z0011uejrbob4e0un","_id":"cipf0hk21001uuejr7nzyqxil"},{"post_id":"cipf0hk0q000suejraqvjbyl9","tag_id":"cipf0hk1f001cuejrozdo1vi7","_id":"cipf0hk25001wuejry7v6n2d5"},{"post_id":"cipf0hk1p001luejrd7afajnn","tag_id":"cipf0hk0z0011uejrbob4e0un","_id":"cipf0hk2a001yuejr6igksxwf"},{"post_id":"cipf0hk1s001ouejrw866b9dm","tag_id":"cipf0hk0z0011uejrbob4e0un","_id":"cipf0hk2c0020uejrw87msim0"},{"post_id":"cipf0hk0t000uuejrk2cf6xwh","tag_id":"cipf0hk1f001cuejrozdo1vi7","_id":"cipf0hk2d0021uejrcajbrgvz"},{"post_id":"cipf0hk1v001quejrns4mdd2p","tag_id":"cipf0hk0z0011uejrbob4e0un","_id":"cipf0hk2d0022uejrjjp3xpot"},{"post_id":"cipf0hk1x001tuejrz7qju1t4","tag_id":"cipf0hk0z0011uejrbob4e0un","_id":"cipf0hk2d0023uejruapxa1b7"},{"post_id":"cipf0hk0z0012uejriw2i2ixd","tag_id":"cipf0hk0z0011uejrbob4e0un","_id":"cipf0hk2e0024uejrllxnl6tp"},{"post_id":"cipf0hk22001vuejrw6kyfaqq","tag_id":"cipf0hk0z0011uejrbob4e0un","_id":"cipf0hk2e0025uejrhl0imgr2"},{"post_id":"cipf0hk27001xuejr3t5d3sqr","tag_id":"cipf0hk0m000muejrx55va43f","_id":"cipf0hk2e0026uejr9yx8iybj"},{"post_id":"cipf0hk2b001zuejrt58o1rip","tag_id":"cipf0hk0v000wuejr6wmvvcu3","_id":"cipf0hk2e0027uejrehi887hz"}],"Tag":[{"name":"课多周刊","_id":"cipf0hjzw0004uejr8irstyva"},{"name":"前端漫谈","_id":"cipf0hk0h000huejrpta54xo9"},{"name":"实战课程","_id":"cipf0hk0m000muejrx55va43f"},{"name":"Node.js","_id":"cipf0hk0p000ruejrasuiv7xx"},{"name":"webpack","_id":"cipf0hk0v000wuejr6wmvvcu3"},{"name":"Swift","_id":"cipf0hk0z0011uejrbob4e0un"},{"name":"工具","_id":"cipf0hk1c0017uejrxd1f5zws"},{"name":"JavaScript","_id":"cipf0hk1f001cuejrozdo1vi7"}]}}